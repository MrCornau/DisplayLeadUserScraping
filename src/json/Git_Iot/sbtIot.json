{"interestingcomments": [{"Unnamed: 0": 771, "autor": 771, "date": null, "content": "Build Status\nTest Coverage\nMQTT-Mongo\nThis is a generic service that subscribes to MQTT broker and saves messages to MongoDB.\nSay you have an MQTT broker that receives messages and you want those messages to be saved in MongoDB. This service should be an ideal fit for such purpose. You can save a message in either String, JSON or Binary format to one or more collections.\nThis service follows Reactive Application Design, i.e. responsive, resilient, elastic, message driven. What that means that it should work fast and be able to recover from errors.\nInstallation\nThis section describes steps required to build, configure and run the application. TODO: add download options here\nFastest way to get started\nThe instructions below apply to any OS, but command examples below are given for Redhat based Linux distros like Fedora, CentOS, etc.\nInstall mosquitto MQTT broker and client binaries:\nsudo yum install mosquitto\nInstall MongoDB. Essentially run:\nsudo yum install mongodb-org\nKeep default configuration (port, interface) for Mosquitto and MongoDB. Start mosquitto and mongod services if not started already:\nsudo systemctl start mongod\nsudo systemctl start mosquitto\nDownload or build a MQTT-Mongo JAR.\nRun MQTT-Mongo:\njava -jar mqtt-mongo-assembly-0.1.jar\nBy now everything should be working and you can start testing the service.\nPublish a message to the 'test' topic:\nmosquitto_pub -t \"test\" -m \"Should work\"\nmosquitto_pub -t \"test\" -m '{ \"someField\" : \"Some value\", \"int\" : 123 }'\nCheck mongo mqtt database, collection messages for 2 messages published above:\necho 'db.messages.find({});' | mongo --quiet mqtt\nYou should be able to find the messages.\nBuilding MQTT-Mongo\nInstall\nInstall these applications on your dev machine in order to be able to build the src code:\nJava Development Kit (JDK) >= 1.7\nOptionally install SBT, or use one provided with the project (see sbt.* shell scripts)\nRun SBT to generate JAR\nSBT is a build tool that downloads source code dependencies, compiles code, runs tests, generates scaladocs, and produces executables.\nStart up SBT from Unix/Windows shell:\n> sbt\nor if it's not on a PATH:\n> ./sbt\nIn SBT shell type (note semicolons):\n;clean; assembly\nYou can also run it as a single command from OS shell:\n> sbt clean assembly\nThis will run all tests and generate a single jar file named similar to: mqtt-mongo-assembly-0.1.jar.\nHere is a full list of commands in case you want to generate projects and documentation, etc:\n> sbt clean compile test doc assembly\nLook at the output to find where build artefacts go (docs, jars, etc).\nSystem Requirements\nTo run compiled JAR file you should have installed:\nJava Runtime Environment (JRE) >= 1.8\nMongoDB\nmosquitto or any other MQTT broker\nRunning MQTT-Mongo\nRun from your OS shell:\n> java -jar mqtt-mongo-assembly-0.1.jar\nThis will run the application. In particular it will register with MQTT broker on the topics you've configured and will save all received messages to MongoDB.\nPlease use run scripts in production environment. They take care of runtime settings and environment, so that you don't get it wrong. Example scripts are in scripts directory of a project's root directory.\nAdvanced Configuration\nThe service uses HOCON configuration library. See it's documentation for detailed information on how you can perform advanced configuration if necessary. Otherwise see brief description below. The packaged jar contains reference.conf file that has default settings for all configuration parameters. Thus you can run the service as is if you just want to try it out. For example:\njava -jar mqtt-mongo-assembly-0.1.jar\nIn this case it will try to connect to localhost on port 27017 for MongoDB and port 1883 for MQTT broker (mosquitto). It will subscribe to test topic and save all messages to database mqtt, collection messages.\nIn most cases you would want to override topics, location of MQTT broker and MongoDB in your config. Preferred way to configure the application is via additional configuration file (application.conf). Settings in application.conf will override default settings in reference.conf. Additionally you can provide settings as command line arguments to JVM with a -D flag. Here are a few examples:\nCreate a config file and provide it to the application. Contents of application.conf:\napplication.mqttMongo.topicsToCollectionsMappings = [\n{ \"one\" : \"collectionOne\" }, { \"two\" : \"collectionTwo\" }\n]\nRun the application with this config:\njava -Dconfig.file=application.conf -jar mqtt-mongo-assembly-0.1.jar\nProvide settings via cmd args:\njava -Dapplication.mongo.host=127.0.0.1 -Dapplication.mongo.dbName=adhocdb -jar mqtt-mongo-assembly-0.1.jar\nThis application is based on Akka concurrency framework. If you want to fine tune or debug the application take a look at Akka docs. Akka can be configured the same way via conf file or cmd args as described above.\nQuestions and Answers\nQ: Can I create a capped collection before I start using mqtt-mongo so that old messages get deleted automatically?\nA: Absolutely, mqtt-mongo performs inserts only. A new collection is created upon first insert if it does not exist - standard MongoDB behaviour.\nQ: What happens if MongoDB can't keep up with insert rate?\nA: ...\nQ: What happens if connection to MongoDB gets lost?\nA: ...\nQ: What happens if connection to MQTT broker gets lost?\nA: ...\nQ: What happens if mqtt-broker encounters any other failures/exceptions?\nA: ...\nQ: Can I make it insert into multiple databases?\nA: mqtt-mongo supports inserts into multiple collections. I thought support of multiple databases would complicate configuration and implementation. You can simply start another instance of mqtt-mongo with the same config except for the database connection settings.\nQ: What are other known alternatives?\nA:\nQ: Do you have any performance test data?\nA: Coming soon ...\nQ: How do I scale this service?\nA: There are multiple options.\nSingle instance: First of all check the config - you can customize how many threads to use and memory settings. Check that JVM is started with appropriate cmd args - enough heap memory, etc.\nMultiple independent instances: Each mqtt-mongo instance can run on a single server, subscribe to a single topic and save messages to a single collection. This would be quite an unusual setup in case you have enourmous amount of messages being injested.\nMongo scaling: Use sharded collections to distribute writes. Use fire and forget write concern level.\n--If you exhaust all these possibilities or you have a single topic only and can't scale in other ways --this service can be implemented as a cluster that runs on multiple machines.\nQ: What if I want to apply some processing steps before the message is saved to Mongo?\nA: Currently preprocessing/filtering of messages is non-existent or customizable. You can fork this project and implement that logic yourself in Scala or Java. If you are interested in plugin support for this purpose let me know and I can easily add it.", "link": "https://github.com/izmailoff/mqtt-mongo", "origin": "Github", "suborigin": "Iot", "result": true, "Selector": "sbt", "selectorShort": "sbt", "MarkedSent": "build status\ntest coverage\nmqtt-mongo\nthis is a generic service that subscribes to mqtt broker and saves messages to mongodb.\nsay you have an mqtt broker that receives messages and you want those messages to be saved in mongodb. this service should be an ideal fit for such purpose. you can save a message in either string, json or binary format to one or more collections.\nthis service follows reactive application design, i.e. responsive, resilient, elastic, message driven. what that means that it should work fast and be able to recover from errors.\ninstallation\nthis section describes steps required to build, configure and run the application. todo: add download options here\nfastest way to get started\nthe instructions below apply to any os, but command examples below are given for redhat based linux distros like fedora, centos, etc.\ninstall mosquitto mqtt broker and client binaries:\nsudo yum install mosquitto\ninstall mongodb. essentially run:\nsudo yum install mongodb-org\nkeep default configuration (port, interface) for mosquitto and mongodb. start mosquitto and mongod services if not started already:\nsudo systemctl start mongod\nsudo systemctl start mosquitto\ndownload or build a mqtt-mongo jar.\nrun mqtt-mongo:\njava -jar mqtt-mongo-assembly-0.1.jar\nby now everything should be working and you can start testing the service.\npublish a message to the 'test' topic:\nmosquitto_pub -t \"test\" -m \"should work\"\nmosquitto_pub -t \"test\" -m '{ \"somefield\" : \"some value\", \"int\" : 123 }'\ncheck mongo mqtt database, collection messages for 2 messages published above:\necho 'db.messages.find({});' | mongo --quiet mqtt\nyou should be able to find the messages.\nbuilding mqtt-mongo\ninstall\ninstall these applications on your dev machine in order to be able to build the src code:\njava development kit (jdk) >= 1.7\noptionally install -----> sbt !!! , or use one provided with the project (see -----> sbt !!! .* shell scripts)\nrun -----> sbt !!!  to generate jar\n-----> sbt !!!  is a build tool that downloads source code dependencies, compiles code, runs tests, generates scaladocs, and produces executables.\nstart up sbt from unix/windows shell:\n> sbt\nor if it's not on a path:\n> ./sbt\nin sbt shell type (note semicolons):\n;clean; assembly\nyou can also run it as a single command from os shell:\n> sbt clean assembly\nthis will run all tests and generate a single jar file named similar to: mqtt-mongo-assembly-0.1.jar.\nhere is a full list of commands in case you want to generate projects and documentation, etc:\n> sbt clean compile test doc assembly\nlook at the output to find where build artefacts go (docs, jars, etc).\nsystem requirements\nto run compiled jar file you should have installed:\njava runtime environment (jre) >= 1.8\nmongodb\nmosquitto or any other mqtt broker\nrunning mqtt-mongo\nrun from your os shell:\n> java -jar mqtt-mongo-assembly-0.1.jar\nthis will run the application. in particular it will register with mqtt broker on the topics you've configured and will save all received messages to mongodb.\nplease use run scripts in production environment. they take care of runtime settings and environment, so that you don't get it wrong. example scripts are in scripts directory of a project's root directory.\nadvanced configuration\nthe service uses hocon configuration library. see it's documentation for detailed information on how you can perform advanced configuration if necessary. otherwise see brief description below. the packaged jar contains reference.conf file that has default settings for all configuration parameters. thus you can run the service as is if you just want to try it out. for example:\njava -jar mqtt-mongo-assembly-0.1.jar\nin this case it will try to connect to localhost on port 27017 for mongodb and port 1883 for mqtt broker (mosquitto). it will subscribe to test topic and save all messages to database mqtt, collection messages.\nin most cases you would want to override topics, location of mqtt broker and mongodb in your config. preferred way to configure the application is via additional configuration file (application.conf). settings in application.conf will override default settings in reference.conf. additionally you can provide settings as command line arguments to jvm with a -d flag. here are a few examples:\ncreate a config file and provide it to the application. contents of application.conf:\napplication.mqttmongo.topicstocollectionsmappings = [\n{ \"one\" : \"collectionone\" }, { \"two\" : \"collectiontwo\" }\n]\nrun the application with this config:\njava -dconfig.file=application.conf -jar mqtt-mongo-assembly-0.1.jar\nprovide settings via cmd args:\njava -dapplication.mongo.host=127.0.0.1 -dapplication.mongo.dbname=adhocdb -jar mqtt-mongo-assembly-0.1.jar\nthis application is based on akka concurrency framework. if you want to fine tune or debug the application take a look at akka docs. akka can be configured the same way via conf file or cmd args as described above.\nquestions and answers\nq: can i create a capped collection before i start using mqtt-mongo so that old messages get deleted automatically?\na: absolutely, mqtt-mongo performs inserts only. a new collection is created upon first insert if it does not exist - standard mongodb behaviour.\nq: what happens if mongodb can't keep up with insert rate?\na: ...\nq: what happens if connection to mongodb gets lost?\na: ...\nq: what happens if connection to mqtt broker gets lost?\na: ...\nq: what happens if mqtt-broker encounters any other failures/exceptions?\na: ...\nq: can i make it insert into multiple databases?\na: mqtt-mongo supports inserts into multiple collections. i thought support of multiple databases would complicate configuration and implementation. you can simply start another instance of mqtt-mongo with the same config except for the database connection settings.\nq: what are other known alternatives?\na:\nq: do you have any performance test data?\na: coming soon ...\nq: how do i scale this service?\na: there are multiple options.\nsingle instance: first of all check the config - you can customize how many threads to use and memory settings. check that jvm is started with appropriate cmd args - enough heap memory, etc.\nmultiple independent instances: each mqtt-mongo instance can run on a single server, subscribe to a single topic and save messages to a single collection. this would be quite an unusual setup in case you have enourmous amount of messages being injested.\nmongo scaling: use sharded collections to distribute writes. use fire and forget write concern level.\n--if you exhaust all these possibilities or you have a single topic only and can't scale in other ways --this service can be implemented as a cluster that runs on multiple machines.\nq: what if i want to apply some processing steps before the message is saved to mongo?\na: currently preprocessing/filtering of messages is non-existent or customizable. you can fork this project and implement that logic yourself in scala or java. if you are interested in plugin support for this purpose let me know and i can easily add it.", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000771, "year": null}], "name": "sbtIot"}