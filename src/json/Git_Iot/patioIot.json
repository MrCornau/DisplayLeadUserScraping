{"interestingcomments": [{"Unnamed: 0": 609, "autor": 609, "date": null, "content": "pysmartthings\nA python library for interacting with the SmartThings cloud API build with asyncio and aiohttp.\nFeatures\nThe package is still in beta, but the following features are available:\nLocations: List, Get\nRooms: List, Get, Create, Update, Deletegit\nDevices: List, Get, Command, Status\nApps: List, Get, Create, Update, Delete, Settings Get & Update, OAuth: Get, Update, & Generate\nInstalledApps: List, Get, Delete\nSubscriptions: List, Get, Create, Delete, Delete All\nScenes: List, Execute\nOAuth: Generate refresh/access token pair\nInstallation\npip install pysmartthings\nor\npip install --use-wheel pysmartthings\nUsage\nInitialization\nThe SmartThings class encapsulates the API operations and the constructor accepts the aiohttp WebSession and your personal access token.\nimport aiohttp\nimport pysmartthings\ntoken = 'PERSONAL_ACCESS_TOKEN'\nasync with aiohttp.ClientSession() as session:\napi = pysmartthings.SmartThings(session, token)\n# ...\nLocations\nA list of locations in SmartThings can be retrieved by invoking the coroutine locations().\nlocations = await api.locations()\nprint(len(locations))\nlocation = locations[0]\nprint(location.name)\nprint(location.location_id)\nOutputs:\n2\n'Test Home'\n'5c03e518-118a-44cb-85ad-7877d0b302e4'\nDevices\nA list of devices can be retrieved by invoking the coroutine devices(location_ids=None, capabilities=None, device_ids=None). The optional parameters allow filtering the returned list.\ndevices = await api.devices()\nprint(len(devices))\ndevice = devices[0]\nprint(device.device_id)\nprint(device.name)\nprint(device.label)\nprint(device.capabilities)\nOutputs:\n19\n'0d38d5ca-705f-44f7-89bd-36a8cf73678d'\n'GE In-Wall Smart Dimmer'\n'Back Patio Light'\n['switch', 'switchLevel', 'refresh', 'indicator', 'button', 'sensor', 'actuator', 'healthCheck', 'light']\nThe current status of the device is populated when the coroutine status.refresh() is called. The DeviceStatus class represents the current values of the capabilities and provides several normalized property accessors.\nawait device.status.refresh()\nprint(device.status.values)\nprint(device.status.switch)\nprint(device.status.level)\nOutputs:\n{'button': 'pressed', 'numberOfButtons': None, 'supportedButtonValues': None, 'indicatorStatus': 'when off', 'switch': 'on', 'checkInterval': 1920, 'healthStatus': None, 'DeviceWatch-DeviceStatus': None, 'level': 100}\nTrue\n100\nDevice Commands\nYou can execute a command on a device by calling the coroutine command(component_id, capability, command, args=None) function. The component_id parameter is the identifier of the component within the device (main is the device itself); capability is the name of the capability implemented by the device; and command is one of the defined operations within the capability. args is an array of parameters to pass to the command when it accepts parameters (optional). See the SmartThings Capability Reference for more information.\nresult = await device.command(\"main\", \"switch\", \"on\")\nassert result == True\nresult = await device.command(\"main\", \"switchLevel\", \"setLevel\", [75, 2])\nassert result == True\nDevices with the switch capability have the following coroutines:\nresult = await device.switch_on()\nassert result == True\nresult = await device.switch_off()\nassert result == True\nDevices with the switchLevel capability have the following function that sets the target brightness level and transitions using a specific duration (seconds).\nresult = await device.set_level(75, 2)\nassert result == True", "link": "https://github.com/andrewsayre/pysmartthings", "origin": "Github", "suborigin": "Iot", "result": true, "Selector": "patio", "selectorShort": "patio", "MarkedSent": "pysmartthings\na python library for interacting with the smartthings cloud api build with asyncio and aiohttp.\nfeatures\nthe package is still in beta, but the following features are available:\nlocations: list, get\nrooms: list, get, create, update, deletegit\ndevices: list, get, command, status\napps: list, get, create, update, delete, settings get & update, oauth: get, update, & generate\ninstalledapps: list, get, delete\nsubscriptions: list, get, create, delete, delete all\nscenes: list, execute\noauth: generate refresh/access token pair\ninstallation\npip install pysmartthings\nor\npip install --use-wheel pysmartthings\nusage\ninitialization\nthe smartthings class encapsulates the api operations and the constructor accepts the aiohttp websession and your personal access token.\nimport aiohttp\nimport pysmartthings\ntoken = 'personal_access_token'\nasync with aiohttp.clientsession() as session:\napi = pysmartthings.smartthings(session, token)\n# ...\nlocations\na list of locations in smartthings can be retrieved by invoking the coroutine locations().\nlocations = await api.locations()\nprint(len(locations))\nlocation = locations[0]\nprint(location.name)\nprint(location.location_id)\noutputs:\n2\n'test home'\n'5c03e518-118a-44cb-85ad-7877d0b302e4'\ndevices\na list of devices can be retrieved by invoking the coroutine devices(location_ids=none, capabilities=none, device_ids=none). the optional parameters allow filtering the returned list.\ndevices = await api.devices()\nprint(len(devices))\ndevice = devices[0]\nprint(device.device_id)\nprint(device.name)\nprint(device.label)\nprint(device.capabilities)\noutputs:\n19\n'0d38d5ca-705f-44f7-89bd-36a8cf73678d'\n'ge in-wall smart dimmer'\n'back -----> patio !!!  light'\n['switch', 'switchlevel', 'refresh', 'indicator', 'button', 'sensor', 'actuator', 'healthcheck', 'light']\nthe current status of the device is populated when the coroutine status.refresh() is called. the devicestatus class represents the current values of the capabilities and provides several normalized property accessors.\nawait device.status.refresh()\nprint(device.status.values)\nprint(device.status.switch)\nprint(device.status.level)\noutputs:\n{'button': 'pressed', 'numberofbuttons': none, 'supportedbuttonvalues': none, 'indicatorstatus': 'when off', 'switch': 'on', 'checkinterval': 1920, 'healthstatus': none, 'devicewatch-devicestatus': none, 'level': 100}\ntrue\n100\ndevice commands\nyou can execute a command on a device by calling the coroutine command(component_id, capability, command, args=none) function. the component_id parameter is the identifier of the component within the device (main is the device itself); capability is the name of the capability implemented by the device; and command is one of the defined operations within the capability. args is an array of parameters to pass to the command when it accepts parameters (optional). see the smartthings capability reference for more information.\nresult = await device.command(\"main\", \"switch\", \"on\")\nassert result == true\nresult = await device.command(\"main\", \"switchlevel\", \"setlevel\", [75, 2])\nassert result == true\ndevices with the switch capability have the following coroutines:\nresult = await device.switch_on()\nassert result == true\nresult = await device.switch_off()\nassert result == true\ndevices with the switchlevel capability have the following function that sets the target brightness level and transitions using a specific duration (seconds).\nresult = await device.set_level(75, 2)\nassert result == true", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000609, "year": null}], "name": "patioIot"}