{"interestingcomments": [{"Unnamed: 0": 6, "autor": 6, "date": null, "content": "GUN is an ecosystem of tools that let you build community run and encrypted applications - like an Open Source Firebase or a Decentralized Dropbox.\nThe Internet Archive, HackerNoon, and 100s of other apps run GUN in-production. GUN is also part of Twitter's Bluesky initiative!\nMultiplayer by default with realtime p2p state synchronization!\nGraph data let's you use key/value, tables, documents, videos, & more!\nLocal-first, offline, and decentralized with end-to-end encryption.\nDecentralized alternatives to Zoom, Reddit, Instagram, Slack, YouTube, Stripe, Wikipedia, Facebook Horizon and more have already pushed terabytes of daily P2P traffic on GUN. We are a friendly community creating a free fun future for freedom:\nQuickstart\nGUN is super easy to get started with:\nTry the interactive tutorial in the browser (5min ~ average developer).\nOr npm install gun and run the examples with cd node_modules/gun && npm start (5min ~ average developer).\nNote: If you don't have node or npm, read this first. If the npm command line didn't work, you may need to mkdir node_modules first or use sudo.\nAn online demo of the examples are available here: http://gunjs.herokuapp.com/\nOr write a quick app: (try now in a playground)\n<script src=\"https://cdn.jsdelivr.net/npm/gun/gun.js\"></script>\n<script>\n// import GUN from 'gun'; // in ESM\n// GUN = require('gun'); // in NodeJS\n// GUN = require('gun/gun'); // in React\ngun = GUN();\ngun.get('mark').put({\nname: \"Mark\",\nemail: \"mark@gun.eco\",\n});\ngun.get('mark').on((data, key) => {\nconsole.log(\"realtime updates:\", data);\n});\nsetInterval(() => { gun.get('mark').get('live').put(Math.random()) }, 9);\n</script>\nOr try something mind blowing, like saving circular references to a table of documents! (play)\ncat = {name: \"Fluffy\", species: \"kitty\"};\nmark = {boss: cat};\ncat.slave = mark;\n// partial updates merge with existing data!\ngun.get('mark').put(mark);\n// access the data as if it is a document.\ngun.get('mark').get('boss').get('name').once(function(data, key){\n// `val` grabs the data once, no subscriptions.\nconsole.log(\"Mark's boss is\", data);\n});\n// traverse a graph of circular references!\ngun.get('mark').get('boss').get('slave').once(function(data, key){\nconsole.log(\"Mark is the cat's slave!\", data);\n});\n// add both of them to a table!\ngun.get('list').set(gun.get('mark').get('boss'));\ngun.get('list').set(gun.get('mark'));\n// grab each item once from the table, continuously:\ngun.get('list').map().once(function(data, key){\nconsole.log(\"Item:\", data);\n});\n// live update the table!\ngun.get('list').set({type: \"cucumber\", goal: \"jumping cat\"});\nWant to keep building more? Jump to THE DOCUMENTATION!\nAbout\nFirst & foremost, GUN is a community of the nicest and most helpful people out there. So I want to invite you to come tell us about what you are working on & wanting to build (new or old school alike! Just be nice as well.) and ask us your questions directly. :)\nWatch the 100 second intro!\nThe GUN ecosystem stack is a collection of independent and modular tools covering everything from CRDT conflict resolution, cryptographic security & encryption, radix storage serialization, mesh networking & routing algorithms, to distributed systems correctness & load testing, CPU scheduled JSON parser to prevent UI lag, and more!\nOn that note, let's get some official shout outs covered first:\nSupport\nThanks to:\nRobert Heessels, Lorenzo Mangani, NLnet Foundation, Sam Liu, Daniel Dombrowsky, Vincent Woo, AJ ONeal, Bill Ottman, Mike Lange, Sean Matheson, Alan Mimms, D\u00e1rio Freire, John Williamson, Robin Bron, Elie Makhoul, Mike Staub, Bradley Matusiak, Jeff Cook, Nico, Aaron Artille, Tim Robinson, Fabian Stamm, Mike Staub\nJoin others in sponsoring code: https://www.patreon.com/gunDB !\nAsk questions: http://stackoverflow.com/questions/tagged/gun ?\nFound a bug? Report at: https://github.com/amark/gun/issues ;\nNeed help? Chat with us: http://chat.gun.eco .\nHistory\nGUN was created by Mark Nadal in 2014 after he had spent 4 years trying to get his collaborative web app to scale up with traditional databases.\nAfter he realized Master-Slave database architecture causes one big bottleneck, he (as a complete newbie outsider) naively decided to question the status quo and shake things up with controversial, heretical, and contrarian experiments:\nThe NoDB - no master, no servers, no \"single source of truth\", not built with a real programming language or real hardware, no DevOps, no locking, not just SQL or NoSQL but both (all - graphs, documents, tables, key/value).\nThe goal was to build a P2P database that could survive living inside any browser, and could correctly sync data between any device after assuming any offline-first activity.\nTechnically, GUN is a graph synchronization protocol with a lightweight embedded engine, capable of doing 20M+ API ops/sec in just ~9KB gzipped size.\nDocumentation\nAPI reference\nTutorials\nExamples\nGraphQL\nElectron\nReact & Native\nVue\nSvelte\nWebcomponents\nCAP Theorem Tradeoffs\nHow Data Sync Works\nHow GUN is Built\nCrypto Auth\nModules\nRoadmap\nThis would not be possible without community contributors, big shout out to:\najmeyghani (Learn GUN Basics with Diagrams); anywhichway (Block Storage); beebase (Quasar); BrockAtkinson (brunch config); Brysgo (GraphQL); d3x0r (SQLite); forrestjt (file.js); hillct (Docker); JosePedroDias (graph visualizer); JuniperChicago (cycle.js bindings); jveres (todoMVC); kristianmandrup (edge); Lightnet (Awesome Vue User Examples & User Kitchen Sink Playground); lmangani (Cytoscape Visualizer, Cassandra, Fastify, LetsEncrypt); mhelander (SEA); omarzion (Sticky Note App); PsychoLlama (LevelDB); RangerMauve (schema); robertheessels (gun-p2p-auth); rogowski (AXE); sbeleidy; sbiaudet (C# Port); Sean Matheson (Observable/RxJS/Most.js bindings); Shadyzpop (React Native example); sjones6 (Flint); RIP Stefdv (Polymer/web components); zrrrzzt (JWT Auth); xmonader (Python Port);\nI am missing many others, apologies, will be adding them soon! This list is infintiely old & way out of date, if you want to be listed in it please make a PR! :)\nTesting\nYou will need to npm install -g mocha first. Then in the gun root folder run npm test. Tests will trigger persistent writes to the DB, so subsequent runs of the test will fail. You must clear the DB before running the tests again. This can be done by running rm -rf *data* command in the project directory.\nShims\nThese are only needed for NodeJS & React Native, they shim the native Browser WebCrypto API.\nIf you want to use SEA for User auth and security, you will need to install:\nnpm install @peculiar/webcrypto --save\nPlease see our React Native docs for installation instructions!\nThen you can require SEA without an error:\nGUN = require('gun/gun');\nSEA = require('gun/sea');\nDeploy\nNote: The default examples that get auto-deployed on npm start CDN-ify all GUN files, modules, & storage.\nNote: Moving forward, AXE will start to automatically cluster your peer into a shared DHT. You may want to disable this to run an isolated network.\nNote: When deploying a web application using GUN on a cloud provider, you may have to set CI=false in your .env. This prevents GUN-specific warnings from being treated as errors when deploying your app. You may also resolve this by modifying your webpack config to not try to build the GUN dependencies.\nTo quickly spin up a GUN relay peer for your development team, utilize Heroku, Docker, or any others listed below. Or some variant thereof Dokku, K8s, etc. ! Or use all of them so your relays are decentralized too!\nLinux\nSSH into the home directory of a clean OS install with sudo ability. Set any environment variables you need (see below), then do:\ncurl -o- https://raw.githubusercontent.com/amark/gun/master/examples/install.sh | bash\nRead install.sh first! If curl is not found, copy&paste the contents of install.sh into your ssh.\nYou can now safely CTRL+A+D to escape without stopping the peer. To stop everything killall screen or killall node.\nEnvironment variables may need to be set like export HTTPS_CERT=~/cert.pem HTTPS_KEY=~/key.pem PORT=443. You can also look at a sample nginx config. For production deployments, you probably will want to use something like pm2 or better to keep the peer alive after machine reboots.\nHeroku\nHeroku deletes your data every 15 minutes, one way to fix this is by adding cheap storage.\nOr:\ngit clone https://github.com/amark/gun.git\ncd gun\nheroku create\ngit push -f heroku HEAD:master\nThen visit the URL in the output of the 'heroku create' step, in a browser. Make sure to set any environment config vars in the settings tab.\nZeet.co\nThen visit the URL in the output of the 'now --npm' step, in your browser.\nDocker\nWarning: Docker image is community contributed and may be old with missing security updates, please check version numbers to compare.\nPull from the Docker Hub . Or:\ndocker run -p 8765:8765 gundb/gun\nOr build the Docker image locally:\ngit clone https://github.com/amark/gun.git\ncd gun\ndocker build -t myrepo/gundb:v1 .\ndocker run -p 8765:8765 myrepo/gundb:v1\nOr, if you prefer your Docker image with metadata labels (Linux/Mac only):\nnpm run docker\ndocker run -p 8765:8765 username/gun:git\nThen visit http://localhost:8765 in your browser.\nLicense\nDesigned with \u2665 by Mark Nadal, the GUN team, and many amazing contributors.\nOpenly licensed under Zlib / MIT / Apache 2.0.\nYouTube . Twitter", "link": "https://github.com/amark/gun", "origin": "Github", "suborigin": "Iot", "result": true, "Selector": "axe", "selectorShort": "axe", "MarkedSent": "gun is an ecosystem of tools that let you build community run and encrypted applications - like an open source firebase or a decentralized dropbox.\nthe internet archive, hackernoon, and 100s of other apps run gun in-production. gun is also part of twitter's bluesky initiative!\nmultiplayer by default with realtime p2p state synchronization!\ngraph data let's you use key/value, tables, documents, videos, & more!\nlocal-first, offline, and decentralized with end-to-end encryption.\ndecentralized alternatives to zoom, reddit, instagram, slack, youtube, stripe, wikipedia, facebook horizon and more have already pushed terabytes of daily p2p traffic on gun. we are a friendly community creating a free fun future for freedom:\nquickstart\ngun is super easy to get started with:\ntry the interactive tutorial in the browser (5min ~ average developer).\nor npm install gun and run the examples with cd node_modules/gun && npm start (5min ~ average developer).\nnote: if you don't have node or npm, read this first. if the npm command line didn't work, you may need to mkdir node_modules first or use sudo.\nan online demo of the examples are available here: http://gunjs.herokuapp.com/\nor write a quick app: (try now in a playground)\n<script src=\"https://cdn.jsdelivr.net/npm/gun/gun.js\"></script>\n<script>\n// import gun from 'gun'; // in esm\n// gun = require('gun'); // in nodejs\n// gun = require('gun/gun'); // in react\ngun = gun();\ngun.get('mark').put({\nname: \"mark\",\nemail: \"mark@gun.eco\",\n});\ngun.get('mark').on((data, key) => {\nconsole.log(\"realtime updates:\", data);\n});\nsetinterval(() => { gun.get('mark').get('live').put(math.random()) }, 9);\n</script>\nor try something mind blowing, like saving circular references to a table of documents! (play)\ncat = {name: \"fluffy\", species: \"kitty\"};\nmark = {boss: cat};\ncat.slave = mark;\n// partial updates merge with existing data!\ngun.get('mark').put(mark);\n// access the data as if it is a document.\ngun.get('mark').get('boss').get('name').once(function(data, key){\n// `val` grabs the data once, no subscriptions.\nconsole.log(\"mark's boss is\", data);\n});\n// traverse a graph of circular references!\ngun.get('mark').get('boss').get('slave').once(function(data, key){\nconsole.log(\"mark is the cat's slave!\", data);\n});\n// add both of them to a table!\ngun.get('list').set(gun.get('mark').get('boss'));\ngun.get('list').set(gun.get('mark'));\n// grab each item once from the table, continuously:\ngun.get('list').map().once(function(data, key){\nconsole.log(\"item:\", data);\n});\n// live update the table!\ngun.get('list').set({type: \"cucumber\", goal: \"jumping cat\"});\nwant to keep building more? jump to the documentation!\nabout\nfirst & foremost, gun is a community of the nicest and most helpful people out there. so i want to invite you to come tell us about what you are working on & wanting to build (new or old school alike! just be nice as well.) and ask us your questions directly. :)\nwatch the 100 second intro!\nthe gun ecosystem stack is a collection of independent and modular tools covering everything from crdt conflict resolution, cryptographic security & encryption, radix storage serialization, mesh networking & routing algorithms, to distributed systems correctness & load testing, cpu scheduled json parser to prevent ui lag, and more!\non that note, let's get some official shout outs covered first:\nsupport\nthanks to:\nrobert heessels, lorenzo mangani, nlnet foundation, sam liu, daniel dombrowsky, vincent woo, aj oneal, bill ottman, mike lange, sean matheson, alan mimms, d\u00e1rio freire, john williamson, robin bron, elie makhoul, mike staub, bradley matusiak, jeff cook, nico, aaron artille, tim robinson, fabian stamm, mike staub\njoin others in sponsoring code: https://www.patreon.com/gundb !\nask questions: http://stackoverflow.com/questions/tagged/gun ?\nfound a bug? report at: https://github.com/amark/gun/issues ;\nneed help? chat with us: http://chat.gun.eco .\nhistory\ngun was created by mark nadal in 2014 after he had spent 4 years trying to get his collaborative web app to scale up with traditional databases.\nafter he realized master-slave database architecture causes one big bottleneck, he (as a complete newbie outsider) naively decided to question the status quo and shake things up with controversial, heretical, and contrarian experiments:\nthe nodb - no master, no servers, no \"single source of truth\", not built with a real programming language or real hardware, no devops, no locking, not just sql or nosql but both (all - graphs, documents, tables, key/value).\nthe goal was to build a p2p database that could survive living inside any browser, and could correctly sync data between any device after assuming any offline-first activity.\ntechnically, gun is a graph synchronization protocol with a lightweight embedded engine, capable of doing 20m+ api ops/sec in just ~9kb gzipped size.\ndocumentation\napi reference\ntutorials\nexamples\ngraphql\nelectron\nreact & native\nvue\nsvelte\nwebcomponents\ncap theorem tradeoffs\nhow data sync works\nhow gun is built\ncrypto auth\nmodules\nroadmap\nthis would not be possible without community contributors, big shout out to:\najmeyghani (learn gun basics with diagrams); anywhichway (block storage); beebase (quasar); brockatkinson (brunch config); brysgo (graphql); d3x0r (sqlite); forrestjt (file.js); hillct (docker); josepedrodias (graph visualizer); juniperchicago (cycle.js bindings); jveres (todomvc); kristianmandrup (edge); lightnet (awesome vue user examples & user kitchen sink playground); lmangani (cytoscape visualizer, cassandra, fastify, letsencrypt); mhelander (sea); omarzion (sticky note app); psychollama (leveldb); rangermauve (schema); robertheessels (gun-p2p-auth); rogowski (-----> axe !!! ); sbeleidy; sbiaudet (c# port); sean matheson (observable/rxjs/most.js bindings); shadyzpop (react native example); sjones6 (flint); rip stefdv (polymer/web components); zrrrzzt (jwt auth); xmonader (python port);\ni am missing many others, apologies, will be adding them soon! this list is infintiely old & way out of date, if you want to be listed in it please make a pr! :)\ntesting\nyou will need to npm install -g mocha first. then in the gun root folder run npm test. tests will trigger persistent writes to the db, so subsequent runs of the test will fail. you must clear the db before running the tests again. this can be done by running rm -rf *data* command in the project directory.\nshims\nthese are only needed for nodejs & react native, they shim the native browser webcrypto api.\nif you want to use sea for user auth and security, you will need to install:\nnpm install @peculiar/webcrypto --save\nplease see our react native docs for installation instructions!\nthen you can require sea without an error:\ngun = require('gun/gun');\nsea = require('gun/sea');\ndeploy\nnote: the default examples that get auto-deployed on npm start cdn-ify all gun files, modules, & storage.\nnote: moving forward, axe will start to automatically cluster your peer into a shared dht. you may want to disable this to run an isolated network.\nnote: when deploying a web application using gun on a cloud provider, you may have to set ci=false in your .env. this prevents gun-specific warnings from being treated as errors when deploying your app. you may also resolve this by modifying your webpack config to not try to build the gun dependencies.\nto quickly spin up a gun relay peer for your development team, utilize heroku, docker, or any others listed below. or some variant thereof dokku, k8s, etc. ! or use all of them so your relays are decentralized too!\nlinux\nssh into the home directory of a clean os install with sudo ability. set any environment variables you need (see below), then do:\ncurl -o- https://raw.githubusercontent.com/amark/gun/master/examples/install.sh | bash\nread install.sh first! if curl is not found, copy&paste the contents of install.sh into your ssh.\nyou can now safely ctrl+a+d to escape without stopping the peer. to stop everything killall screen or killall node.\nenvironment variables may need to be set like export https_cert=~/cert.pem https_key=~/key.pem port=443. you can also look at a sample nginx config. for production deployments, you probably will want to use something like pm2 or better to keep the peer alive after machine reboots.\nheroku\nheroku deletes your data every 15 minutes, one way to fix this is by adding cheap storage.\nor:\ngit clone https://github.com/amark/gun.git\ncd gun\nheroku create\ngit push -f heroku head:master\nthen visit the url in the output of the 'heroku create' step, in a browser. make sure to set any environment config vars in the settings tab.\nzeet.co\nthen visit the url in the output of the 'now --npm' step, in your browser.\ndocker\nwarning: docker image is community contributed and may be old with missing security updates, please check version numbers to compare.\npull from the docker hub . or:\ndocker run -p 8765:8765 gundb/gun\nor build the docker image locally:\ngit clone https://github.com/amark/gun.git\ncd gun\ndocker build -t myrepo/gundb:v1 .\ndocker run -p 8765:8765 myrepo/gundb:v1\nor, if you prefer your docker image with metadata labels (linux/mac only):\nnpm run docker\ndocker run -p 8765:8765 username/gun:git\nthen visit http://localhost:8765 in your browser.\nlicense\ndesigned with \u2665 by mark nadal, the gun team, and many amazing contributors.\nopenly licensed under zlib / mit / apache 2.0.\nyoutube . twitter", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000006, "year": null}], "name": "axeIot"}