{"interestingcomments": [{"Unnamed: 0": 2886, "autor": 846, "date": null, "content": "Raspberry Pi Impersonates Nintendo Switch Controller\nAdapt various USB gamepads, flight control sticks, and fight sticks for use with the Nintendo Switch (NS) console. All controllers are active but are seen by the console as one controller so co-pilot mode is always active.\nButtons\n|\nv\nUSB Controllers -> Raspberry Pi -> NSGadget -> Nintendo Switch\n^\n|\nButtons\nSee README_pinball.md for more details on this test configuration.\nSee README_fs17.md for a custom Farming Simulator controller using a MIDI keyboard.\nSee README_gpio.md for a GPIO break out board.\nSee README_voice.md for adding a voice assistant. The Speech-To-Text engine Deep Speech works offline so no Internet connection is needed. This also eliminates privacy concerns with a live microphone. The audio is never sent outside the Raspberry Pi. Deep Speech needs a fast CPU so a Raspberry Pi 4 is best. A Pi 3+ is about half as fast so the delays are noticeable.\nUSB Controllers\nThe following USB controllers are supported. The drivers are all included so nothing needs to be installed.\nHori HoriPad Nintendo Switch compatible gamepad\nMicrosoft Xbox One gamepad\nSony PS4 DS gamepad\nLogitech Extreme 3D Pro flight control stick\nThrustmaster T.16000M flight control stick\nDragon Rise arcade fight stick/joystick\njstest-gtk is a very handy utility to understand controller axes and buttons numbering. This is essential to map axes and buttons to the NS controller.\nsudo apt install jstest-gtk\nUSB NSGadget\nNSGadget is an Adafruit Trinket M0 emulating an NS compatible gamepad. The UART connection between the Pi and NSGadget runs at 2 Mbits/sec. The UART device name is /dev/ttyAMA0.\nTrinket M0 Raspberry Pi\nBAT 5V0\nGnd Gnd\nTX(4) D14(RXD)\nRX(3) D15(TXD)\nThe firmware/ directory has the firmware.\nCompiled programs can be burned into the Trinket M0 just by dragging and dropping a UF2 file on to the Trinket M0 USB drive. There is no need to install the Arduino IDE, source code, or USB serial device driver.\nDownload the UF2 file of your choice.\nPlug in the Trinket M0 to the computer.\nDouble tap the Trinket M0 reset button.\nWhen the TRINKETBOOT USB drive appears, drop the UF2 file on to the drive.\nWait a few seconds until the Trinket M0 reboots.\nPrepare the Pi\nInstall Raspbian Buster Lite or Desktop. Update to the latest version.\nsudo apt update\nsudo apt full-upgrade\nsudo reboot\nPrepare /dev/ttyAMA0\nIf the Pi has built-in Bluetooth (Pi 3, Pi 3+, Pi 4, Pi zero W) disable Bluetooth to free up the PL011 UART.\nThe following is from /boot/overlays/README.\nName: disable-bt\nInfo: Disable onboard Bluetooth on Pi 3B, 3B+, 3A+, 4B and Zero W, restoring\nUART0/ttyAMA0 over GPIOs 14 & 15.\nN.B. To disable the systemd service that initialises the modem so it\ndoesn't use the UART, use 'sudo systemctl disable hciuart'.\nLoad: dtoverlay=disable-bt\nsudo systemctl disable hciuart\nsudo nano /boot/config.txt\nAdd dtoverlay=disable-bt as the last line of config.txt. Save and exit.\nTurn off the login shell on /dev/ttyAMA0. This is necessary even if the Pi does not have Bluetooth.\nsudo raspi-config\nSelect Interfacing Options.\nSelect P6 Serial.\nDisable the login shell.\nEnable the serial interface.\nExit raspi-config\nsudo reboot\nSoftware\nThe Python3 program nsac.py holds all the parts together. Once it opens the UART, it spins up a thread for each USB controller and a thread to monitor the buttons connected to GPIO pins.\nsudo apt install python3 python3-pip python3-serial python3-gpiozero python3-mido\ngit clone https://github.com/gdsports/NSGadget_Pi\ncd NSGadget_Pi\n./nsac.py\nnsgpadserial.py provides an interface to the NS Gadget device.\nAppliance Mode\nIf you do not want to login to run nsac.py and are not interested in changing it, try appliance mode. In appliance mode, nsac.py runs on power up. Also the file system is set for read-only mode so powering off without shutting down should not corrupt the microSD card.\nAutomatically run nsac.py\ncrontab -e\nAdd the following line to the end of the file. The small shell script starts nsac.py at power/restart in a loop (just in case it crashes).\n@reboot nohup /home/pi/NSGadget_Pi/nsac.sh >/dev/null 2>&1 &\nEnable read-only file system to prevent microSD card corruption\nsudo raspi-config\nSelect 7 Advanced Options.\nSelect AB Overlay FS to enable overlay file system (read-only) and write-protect boot partition.\nExit and reboot", "link": "https://github.com/gdsports/NSGadget_Pi", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "farming", "selectorShort": "farming", "MarkedSent": "raspberry pi impersonates nintendo switch controller\nadapt various usb gamepads, flight control sticks, and fight sticks for use with the nintendo switch (ns) console. all controllers are active but are seen by the console as one controller so co-pilot mode is always active.\nbuttons\n|\nv\nusb controllers -> raspberry pi -> nsgadget -> nintendo switch\n^\n|\nbuttons\nsee readme_pinball.md for more details on this test configuration.\nsee readme_fs17.md for a custom -----> farming !!!  simulator controller using a midi keyboard.\nsee readme_gpio.md for a gpio break out board.\nsee readme_voice.md for adding a voice assistant. the speech-to-text engine deep speech works offline so no internet connection is needed. this also eliminates privacy concerns with a live microphone. the audio is never sent outside the raspberry pi. deep speech needs a fast cpu so a raspberry pi 4 is best. a pi 3+ is about half as fast so the delays are noticeable.\nusb controllers\nthe following usb controllers are supported. the drivers are all included so nothing needs to be installed.\nhori horipad nintendo switch compatible gamepad\nmicrosoft xbox one gamepad\nsony ps4 ds gamepad\nlogitech extreme 3d pro flight control stick\nthrustmaster t.16000m flight control stick\ndragon rise arcade fight stick/joystick\njstest-gtk is a very handy utility to understand controller axes and buttons numbering. this is essential to map axes and buttons to the ns controller.\nsudo apt install jstest-gtk\nusb nsgadget\nnsgadget is an adafruit trinket m0 emulating an ns compatible gamepad. the uart connection between the pi and nsgadget runs at 2 mbits/sec. the uart device name is /dev/ttyama0.\ntrinket m0 raspberry pi\nbat 5v0\ngnd gnd\ntx(4) d14(rxd)\nrx(3) d15(txd)\nthe firmware/ directory has the firmware.\ncompiled programs can be burned into the trinket m0 just by dragging and dropping a uf2 file on to the trinket m0 usb drive. there is no need to install the arduino ide, source code, or usb serial device driver.\ndownload the uf2 file of your choice.\nplug in the trinket m0 to the computer.\ndouble tap the trinket m0 reset button.\nwhen the trinketboot usb drive appears, drop the uf2 file on to the drive.\nwait a few seconds until the trinket m0 reboots.\nprepare the pi\ninstall raspbian buster lite or desktop. update to the latest version.\nsudo apt update\nsudo apt full-upgrade\nsudo reboot\nprepare /dev/ttyama0\nif the pi has built-in bluetooth (pi 3, pi 3+, pi 4, pi zero w) disable bluetooth to free up the pl011 uart.\nthe following is from /boot/overlays/readme.\nname: disable-bt\ninfo: disable onboard bluetooth on pi 3b, 3b+, 3a+, 4b and zero w, restoring\nuart0/ttyama0 over gpios 14 & 15.\nn.b. to disable the systemd service that initialises the modem so it\ndoesn't use the uart, use 'sudo systemctl disable hciuart'.\nload: dtoverlay=disable-bt\nsudo systemctl disable hciuart\nsudo nano /boot/config.txt\nadd dtoverlay=disable-bt as the last line of config.txt. save and exit.\nturn off the login shell on /dev/ttyama0. this is necessary even if the pi does not have bluetooth.\nsudo raspi-config\nselect interfacing options.\nselect p6 serial.\ndisable the login shell.\nenable the serial interface.\nexit raspi-config\nsudo reboot\nsoftware\nthe python3 program nsac.py holds all the parts together. once it opens the uart, it spins up a thread for each usb controller and a thread to monitor the buttons connected to gpio pins.\nsudo apt install python3 python3-pip python3-serial python3-gpiozero python3-mido\ngit clone https://github.com/gdsports/nsgadget_pi\ncd nsgadget_pi\n./nsac.py\nnsgpadserial.py provides an interface to the ns gadget device.\nappliance mode\nif you do not want to login to run nsac.py and are not interested in changing it, try appliance mode. in appliance mode, nsac.py runs on power up. also the file system is set for read-only mode so powering off without shutting down should not corrupt the microsd card.\nautomatically run nsac.py\ncrontab -e\nadd the following line to the end of the file. the small shell script starts nsac.py at power/restart in a loop (just in case it crashes).\n@reboot nohup /home/pi/nsgadget_pi/nsac.sh >/dev/null 2>&1 &\nenable read-only file system to prevent microsd card corruption\nsudo raspi-config\nselect 7 advanced options.\nselect ab overlay fs to enable overlay file system (read-only) and write-protect boot partition.\nexit and reboot", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000846, "year": null}], "name": "farmingarduino"}