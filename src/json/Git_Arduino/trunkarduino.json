{"interestingcomments": [{"Unnamed: 0": 2051, "autor": 11, "date": null, "content": "WiFiManager\nDEVELOPMENT Version\nEspressif ESPx WiFi Connection manager with fallback web configuration portal\n\u26a0\ufe0f This Documentation is out of date, see notes below\nMember to Member Support / Chat\nThe configuration portal is of the captive variety, so on various devices it will present the configuration dialogue as soon as you connect to the created access point.\nThis works with the ESP8266 Arduino platform\nhttps://github.com/esp8266/Arduino\nThis works with the ESP32 Arduino platform\nhttps://github.com/espressif/arduino-esp32\nKnown Issues\nDocumentation needs to be updated, see https://github.com/tzapu/WiFiManager/issues/500\nContents\nHow it works\nWishlist\nQuick start\nInstalling\nArduino - Through Library Manager\nArduino - From Github\nPlatformIO\nUsing\nDocumentation\nAccess Point Password\nCallbacks\nConfiguration Portal Timeout\nOn Demand Configuration\nCustom Parameters\nCustom IP Configuration\nFilter Low Quality Networks\nDebug Output\nTroubleshooting\nReleases\nContributors\nHow It Works\nWhen your ESP starts up, it sets it up in Station mode and tries to connect to a previously saved Access Point\nif this is unsuccessful (or no previous network saved) it moves the ESP into Access Point mode and spins up a DNS and WebServer (default ip 192.168.4.1)\nusing any wifi enabled device with a browser (computer, phone, tablet) connect to the newly created Access Point\nbecause of the Captive Portal and the DNS server you will either get a 'Join to network' type of popup or get any domain you try to access redirected to the configuration portal\nchoose one of the access points scanned, enter password, click save\nESP will try to connect. If successful, it relinquishes control back to your app. If not, reconnect to AP and reconfigure.\nThere are options to change this behavior or manually start the configportal and webportal independantly as well as run them in non blocking mode.\nHow It Looks\nWishlist\nremove dependency on EEPROM library\nmove HTML Strings to PROGMEM\ncleanup and streamline code (although this is ongoing)\nif timeout is set, extend it when a page is fetched in AP mode\nadd ability to configure more parameters than ssid/password\nmaybe allow setting ip of ESP after reboot\nadd to Arduino Library Manager\nadd to PlatformIO\nadd multiple sets of network credentials\nallow users to customize CSS\nrewrite documentation for simplicity, based on scenarios/goals\nDevelopment\nESP32 support\nrely on the SDK's built in auto connect more than forcing a connect\nadd non blocking mode\neasy customization of strings\nhostname support\nfix various bugs and workarounds for esp SDK issues\nadditional info page items\nlast status display / faiilure reason\ncustomizeable menu\nseperate custom params page\nondemand webportal\ncomplete refactor of code to segment functions\nwiif scan icons or percentage display\ninvert class for dark mode\nmore template tokens\nprogmem for all strings\nnew callbacks\nnew callouts / filters\nshared web server instance\nlatest esp idf/sdk support\nwm is now non persistent, will not erase or change stored esp config on esp8266\ntons of debugging output / levels\ndisable captiveportal\npreload wiifscans, faster page loads\nsoftap stability fixes when sta is not connected\nQuick Start\nInstalling\nYou can either install through the Arduino Library Manager or checkout the latest changes or a release from github\nInstall through Library Manager\nCurrently version 0.8+ works with release 2.4.0 or newer of the ESP8266 core for Arduino\nin Arduino IDE got to Sketch/Include Library/Manage Libraries\nsearch for WiFiManager\nclick Install and start using it\nCheckout from github\nGithub version works with release 2.4.0 or newer of the ESP8266 core for Arduino\nCheckout library to your Arduino libraries folder\nUsing\nInclude in your sketch\n#include <WiFiManager.h> //https://github.com/tzapu/WiFiManager WiFi Configuration Magic\nInitialize library, in your setup function add, NOTEif you are using non blocking you will make sure you create this in global scope or handle appropriatly , it will not work if in setup and using non blocking mode.\nWiFiManager wifiManager;\nAlso in the setup function add\n//first parameter is name of access point, second is the password\nwifiManager.autoConnect(\"AP-NAME\", \"AP-PASSWORD\");\nif you just want an unsecured access point\nwifiManager.autoConnect(\"AP-NAME\");\nor if you want to use and auto generated name from 'ESP' and the esp's Chip ID use\nwifiManager.autoConnect();\nAfter you write your sketch and start the ESP, it will try to connect to WiFi. If it fails it starts in Access Point mode. While in AP mode, connect to it then open a browser to the gateway IP, default 192.168.4.1, configure wifi, save and it should reboot and connect.\nAlso see examples.\nInstall Using PlatformIO\nPlatformIO is an emerging ecosystem for IoT development, and is an alternative to using the Arduino IDE. Install WiFiManager using the platformio library manager in your editor, or using the PlatformIO Core CLI, or by adding it to your platformio.ini as shown below (recommended approach).\nThe simplest way is to open the platformio.ini file at the root of your project, and WifiManager to the common top-level env lib_deps key like so:\n[env]\nlib_deps =\nWiFiManager\n[env]\nlib_deps =\nhttps://github.com/tzapu/WiFiManager.git\nDocumentation\nPassword protect the configuration Access Point\nYou can and should password protect the configuration access point. Simply add the password as a second parameter to autoConnect. A short password seems to have unpredictable results so use one that's around 8 characters or more in length. The guidelines are that a wifi password must consist of 8 to 63 ASCII-encoded characters in the range of 32 to 126 (decimal)\nwifiManager.autoConnect(\"AutoConnectAP\", \"password\")\nCallbacks\nEnter Config mode\nUse this if you need to do something when your device enters configuration mode on failed WiFi connection attempt. Before autoConnect()\nwifiManager.setAPCallback(configModeCallback);\nconfigModeCallback declaration and example\nvoid configModeCallback (WiFiManager *myWiFiManager) {\nSerial.println(\"Entered config mode\");\nSerial.println(WiFi.softAPIP());\nSerial.println(myWiFiManager->getConfigPortalSSID());\n}\nSave settings\nThis gets called when custom parameters have been set AND a connection has been established. Use it to set a flag, so when all the configuration finishes, you can save the extra parameters somewhere.\nIF YOU NEED TO SAVE PARAMETERS EVEN ON WIFI FAIL OR EMPTY, you must set setBreakAfterConfig to true, or else saveConfigCallback will not be called.\n//if this is set, it will exit after config, even if connection is unsuccessful.\nvoid setBreakAfterConfig(boolean shouldBreak);\nSee AutoConnectWithFSParameters Example.\nwifiManager.setSaveConfigCallback(saveConfigCallback);\nsaveConfigCallback declaration and example\n//flag for saving data\nbool shouldSaveConfig = false;\n//callback notifying us of the need to save config\nvoid saveConfigCallback () {\nSerial.println(\"Should save config\");\nshouldSaveConfig = true;\n}\nConfiguration Portal Timeout\nIf you need to set a timeout so the ESP doesn't hang waiting to be configured, for instance after a power failure, you can add\nwifiManager.setConfigPortalTimeout(180);\nwhich will wait 3 minutes (180 seconds). When the time passes, the autoConnect function will return, no matter the outcome. Check for connection and if it's still not established do whatever is needed (on some modules I restart them to retry, on others I enter deep sleep)\nOn Demand Configuration Portal\nIf you would rather start the configuration portal on demand rather than automatically on a failed connection attempt, then this is for you.\nInstead of calling autoConnect() which does all the connecting and failover configuration portal setup for you, you need to use startConfigPortal(). Do not use BOTH.\nExample usage\nvoid loop() {\n// is configuration portal requested?\nif ( digitalRead(TRIGGER_PIN) == LOW ) {\nWiFiManager wifiManager;\nwifiManager.startConfigPortal(\"OnDemandAP\");\nSerial.println(\"connected...yeey :)\");\n}\n}\nSee example for a more complex version. OnDemandConfigPortal\nExiting from the Configuration Portal\nNormally, once entered, the configuration portal will continue to loop until WiFi credentials have been successfully entered or a timeout is reached. If you'd prefer to exit without joining a WiFi network, say becuase you're going to put the ESP into AP mode, then press the \"Exit\" button on the main webpage. If started via autoConnect or startConfigPortal then it will return false (portalAbortResult)\nCustom Parameters\nYou can use WiFiManager to collect more parameters than just SSID and password. This could be helpful for configuring stuff like MQTT host and port, blynk or emoncms tokens, just to name a few. You are responsible for saving and loading these custom values. The library just collects and displays the data for you as a convenience. Usage scenario would be:\nload values from somewhere (EEPROM/FS) or generate some defaults\nadd the custom parameters to WiFiManager using\n// id/name, placeholder/prompt, default, length\nWiFiManagerParameter custom_mqtt_server(\"server\", \"mqtt server\", mqtt_server, 40);\nwifiManager.addParameter(&custom_mqtt_server);\nif connection to AP fails, configuration portal starts and you can set /change the values (or use on demand configuration portal)\nonce configuration is done and connection is established save config callback is called\nonce WiFiManager returns control to your application, read and save the new values using the WiFiManagerParameter object.\nmqtt_server = custom_mqtt_server.getValue();\nThis feature is a lot more involved than all the others, so here are some examples to fully show how it is done. You should also take a look at adding custom HTML to your form.\nSave and load custom parameters to file system in json form AutoConnectWithFSParameters\nSave and load custom parameters to EEPROM (not done yet)\nCustom IP Configuration\nYou can set a custom IP for both AP (access point, config mode) and STA (station mode, client mode, normal project state)\nCustom Access Point IP Configuration\nThis will set your captive portal to a specific IP should you need/want such a feature. Add the following snippet before autoConnect()\n//set custom ip for portal\nwifiManager.setAPStaticIPConfig(IPAddress(10,0,1,1), IPAddress(10,0,1,1), IPAddress(255,255,255,0));\nCustom Station (client) Static IP Configuration\nThis will make use the specified IP configuration instead of using DHCP in station mode.\nwifiManager.setSTAStaticIPConfig(IPAddress(192,168,0,99), IPAddress(192,168,0,1), IPAddress(255,255,255,0)); // optional DNS 4th argument\nThere are a couple of examples in the examples folder that show you how to set a static IP and even how to configure it through the web configuration portal.\nNOTE: You should fill DNS server if you have HTTP requests with hostnames or syncronize time (NTP). It's the same as gateway ip or a popular (Google DNS: 8.8.8.8).\nCustom HTML, CSS, Javascript\nThere are various ways in which you can inject custom HTML, CSS or Javascript into the configuration portal. The options are:\ninject custom head element You can use this to any html bit to the head of the configuration portal. If you add a <style> element, bare in mind it overwrites the included css, not replaces.\nwifiManager.setCustomHeadElement(\"<style>html{filter: invert(100%); -webkit-filter: invert(100%);}</style>\");\ninject a custom bit of html in the configuration/param form\nWiFiManagerParameter custom_text(\"<p>This is just a text paragraph</p>\");\nwifiManager.addParameter(&custom_text);\ninject a custom bit of html in a configuration form element Just add the bit you want added as the last parameter to the custom parameter constructor.\nWiFiManagerParameter custom_mqtt_server(\"server\", \"mqtt server\", \"iot.eclipse\", 40, \" readonly\");\nwifiManager.addParameter(&custom_mqtt_server);\nTheming\nYou can customize certain elements of the default template with some builtin classes\nwifiManager.setClass(\"invert\"); // dark theme\nwifiManager.setScanDispPerc(true); // display percentages instead of graphs for RSSI\nThere are additional classes in the css you can use in your custom html , see the example template.\nFilter Networks\nYou can filter networks based on signal quality and show/hide duplicate networks.\nIf you would like to filter low signal quality networks you can tell WiFiManager to not show networks below an arbitrary quality %;\nwifiManager.setMinimumSignalQuality(10);\nwill not show networks under 10% signal quality. If you omit the parameter it defaults to 8%;\nYou can also remove or show duplicate networks (default is remove). Use this function to show (or hide) all networks.\nwifiManager.setRemoveDuplicateAPs(false);\nDebug\nDebug is enabled by default on Serial in non-stable releases. To disable add before autoConnect/startConfigPortal\nwifiManager.setDebugOutput(false);\nYou can pass in a custom stream via constructor\nWiFiManager wifiManager(Serial1);\nYou can customize the debug level by changing _debugLevel in source options are:\nDEBUG_ERROR\nDEBUG_NOTIFY\nDEBUG_VERBOSE\nDEBUG_DEV\nDEBUG_MAX\nTroubleshooting\nIf you get compilation errors, more often than not, you may need to install a newer version of the ESP8266 core for Arduino.\nChanges added on 0.8 should make the latest trunk work without compilation errors. Tested down to ESP8266 core 2.0.0. Please update to version 0.8\nI am trying to keep releases working with release versions of the core, so they can be installed through boards manager, but if you checkout the latest version directly from github, sometimes, the library will only work if you update the ESP8266 core to the latest version because I am using some newly added function.\nIf you connect to the created configuration Access Point but the configuration portal does not show up, just open a browser and type in the IP of the web portal, by default 192.168.4.1.\nIf trying to connect ends up in an endless loop, try to add setConnectTimeout(60) before autoConnect();. The parameter is timeout to try connecting in seconds.\nI get stuck in ap mode when the power goes out or modem resets, try a setConfigPortalTimeout(seconds). This will cause the configportal to close after no activity, and you can reboot or attempt reconnection in your code.\nReleases\n1.0.1\nDevelopment Overview\nAdded Public Methods\nsetConfigPortalBlocking\nsetShowStaticFields\nsetCaptivePortalEnable\nsetRestorePersistent\nsetCaptivePortalClientCheck\nsetWebPortalClientCheck\nstartWebPortal\nstopWebPortal\nprocess\ndisconnect\nerase\ndebugSoftAPConfig\ndebugPlatformInfo\nsetScanDispPerc\nsetHostname\nsetMenu(menu_page_t[])\nsetWiFiAutoReconnect\nsetSTAStaticIPConfig(..,dns)\nsetShowDnsFields\ngetLastConxResult\ngetWLStatusString\ngetModeString\ngetWiFiIsSaved\nsetShowInfoErase\nsetEnableConfigPortal\nsetCountry\nsetClass\nhtmleEtities\nWiFiManagerParameter\nWiFiManagerParameter(id,label)\nWiFiManagerParameter.setValue(value,length)\ngetParameters\ngetParametersCount\nConstructors\nWiFiManager(Stream& consolePort)\ndefine flags\n\u2757\ufe0f Defines cannot be set in user sketches #define WM_MDNS // use MDNS\n#define WM_FIXERASECONFIG // use erase flash fix, esp8266 2.4.0\n#define WM_ERASE_NVS // esp32 erase(true) will erase NVS\n#include <rom/rtc.h> // esp32 info page will show last reset reasons if this file is included\nChanges Overview\nESP32 support ( fairly stable )\ncomplete refactor of strings strings_en.h\nadds new tokens for wifiscan, and some classes (left , invert icons, MSG color)\nadds status callout panel default, primary, special colors\nadds tons of info on info page, and erase capability\nadds signal icons, replaces percentage ( has hover titles )\nadds labels to all inputs (replaces placeholders)\nall html ( and eventually all strings except debug) moved to strings_en.h\nadded additional debugging, compressed debug lines, debuglevels\npersistent disabled, and restored via de/con-stuctor (uses setRestorePersistent)\nshould retain all user modes including AP, should not overwrite or persist user modes or configs,even STA (storeSTAmode) (BUGGY)\n\u26a0\ufe0f return values may have changed depending on portal abort, or timeout ( portalTimeoutResult,portalAbortResult)\nparams memory is auto allocated by increment of WIFI_MANAGER_MAX_PARAMS(5) when exceeded, user no longer needs to specify this at all.\naddparameter now returns bool, and it returns false if param ID is not alphanum [0-9,A-Z,a-z,_]\nparam field ids allow {I} token to use param_n instead of string in case someones wants to change this due to i18n or character issues\nprovides #DEFINE FIXERASECONFIG to help deal with https://github.com/esp8266/Arduino/pull/3635\nfailure reason reporting on portal\nset esp8266 sta hostname, esp32 sta+ap hostname ( DHCP client id)\npass in debug stream in constructor WiFiManager(Stream& consolePort)\nyou can force ip fields off with showxfields(false) if you set _disableIpFields=true\nparam menu/page (setup) added to separate params from wifi page, handled automatically by setMenu\nset custom root menu\ndisable configportal on autoconnect\nwm parameters init is now protected, allowing child classes, example included\nwifiscans are precached and async for faster page loads, refresh forces rescan\nadds esp32 gettemperature ( currently commented out, useful for relative measurement only )\n0.12\nremoved 204 header response\nfixed incompatibility with other libs using isnan and other std:: functions without namespace\n0.11\na lot more reliable reconnecting to networks\ncustom html in custom parameters (for read only params)\ncustom html in custom parameter form (like labels)\ncustom head element (like custom css)\nsort networks based on signal quality\nremove duplicate networks\n0.10\nsome css changes\nbug fixes and speed improvements\nadded an alternative to waitForConnectResult() for debugging\nchanged setTimeout(seconds) to setConfigPortalTimeout(seconds)\nContributions and thanks\nThe support and help I got from the community has been nothing short of phenomenal. I can't thank you guys enough. This is my first real attept in developing open source stuff and I must say, now I understand why people are so dedicated to it, it is because of all the wonderful people involved.\nTHANK YOU\nThe esp8266 and esp32 arduino and idf maintainers!\nShawn A aka tablatronix\nliebman\nEvgeny Dontsov\nChris Marrin\nbbx10\nkentaylor\nMaximiliano Duarte\nalltheblinkythings\nNiklas Wall\nJakub Piasecki\nPeter Allan\nJohn Little\nmarkaswift\nfranklinvv\nAlberto Ricci Bitti\nSebiPanther\njonathanendersby\nwalthercarsten\nAnd countless others\nInspiration\nhttp://www.esp8266.com/viewtopic.php?f=29&t=2520\nhttps://github.com/chriscook8/esp-arduino-apboot\nhttps://github.com/esp8266/Arduino/tree/master/libraries/DNSServer/examples/CaptivePortalAdvanced\nBuilt by AlexT https://github.com/tzapu", "link": "https://github.com/tzapu/WiFiManager", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "trunk", "selectorShort": "trunk", "MarkedSent": "wifimanager\ndevelopment version\nespressif espx wifi connection manager with fallback web configuration portal\n\u26a0\ufe0f this documentation is out of date, see notes below\nmember to member support / chat\nthe configuration portal is of the captive variety, so on various devices it will present the configuration dialogue as soon as you connect to the created access point.\nthis works with the esp8266 arduino platform\nhttps://github.com/esp8266/arduino\nthis works with the esp32 arduino platform\nhttps://github.com/espressif/arduino-esp32\nknown issues\ndocumentation needs to be updated, see https://github.com/tzapu/wifimanager/issues/500\ncontents\nhow it works\nwishlist\nquick start\ninstalling\narduino - through library manager\narduino - from github\nplatformio\nusing\ndocumentation\naccess point password\ncallbacks\nconfiguration portal timeout\non demand configuration\ncustom parameters\ncustom ip configuration\nfilter low quality networks\ndebug output\ntroubleshooting\nreleases\ncontributors\nhow it works\nwhen your esp starts up, it sets it up in station mode and tries to connect to a previously saved access point\nif this is unsuccessful (or no previous network saved) it moves the esp into access point mode and spins up a dns and webserver (default ip 192.168.4.1)\nusing any wifi enabled device with a browser (computer, phone, tablet) connect to the newly created access point\nbecause of the captive portal and the dns server you will either get a 'join to network' type of popup or get any domain you try to access redirected to the configuration portal\nchoose one of the access points scanned, enter password, click save\nesp will try to connect. if successful, it relinquishes control back to your app. if not, reconnect to ap and reconfigure.\nthere are options to change this behavior or manually start the configportal and webportal independantly as well as run them in non blocking mode.\nhow it looks\nwishlist\nremove dependency on eeprom library\nmove html strings to progmem\ncleanup and streamline code (although this is ongoing)\nif timeout is set, extend it when a page is fetched in ap mode\nadd ability to configure more parameters than ssid/password\nmaybe allow setting ip of esp after reboot\nadd to arduino library manager\nadd to platformio\nadd multiple sets of network credentials\nallow users to customize css\nrewrite documentation for simplicity, based on scenarios/goals\ndevelopment\nesp32 support\nrely on the sdk's built in auto connect more than forcing a connect\nadd non blocking mode\neasy customization of strings\nhostname support\nfix various bugs and workarounds for esp sdk issues\nadditional info page items\nlast status display / faiilure reason\ncustomizeable menu\nseperate custom params page\nondemand webportal\ncomplete refactor of code to segment functions\nwiif scan icons or percentage display\ninvert class for dark mode\nmore template tokens\nprogmem for all strings\nnew callbacks\nnew callouts / filters\nshared web server instance\nlatest esp idf/sdk support\nwm is now non persistent, will not erase or change stored esp config on esp8266\ntons of debugging output / levels\ndisable captiveportal\npreload wiifscans, faster page loads\nsoftap stability fixes when sta is not connected\nquick start\ninstalling\nyou can either install through the arduino library manager or checkout the latest changes or a release from github\ninstall through library manager\ncurrently version 0.8+ works with release 2.4.0 or newer of the esp8266 core for arduino\nin arduino ide got to sketch/include library/manage libraries\nsearch for wifimanager\nclick install and start using it\ncheckout from github\ngithub version works with release 2.4.0 or newer of the esp8266 core for arduino\ncheckout library to your arduino libraries folder\nusing\ninclude in your sketch\n#include <wifimanager.h> //https://github.com/tzapu/wifimanager wifi configuration magic\ninitialize library, in your setup function add, noteif you are using non blocking you will make sure you create this in global scope or handle appropriatly , it will not work if in setup and using non blocking mode.\nwifimanager wifimanager;\nalso in the setup function add\n//first parameter is name of access point, second is the password\nwifimanager.autoconnect(\"ap-name\", \"ap-password\");\nif you just want an unsecured access point\nwifimanager.autoconnect(\"ap-name\");\nor if you want to use and auto generated name from 'esp' and the esp's chip id use\nwifimanager.autoconnect();\nafter you write your sketch and start the esp, it will try to connect to wifi. if it fails it starts in access point mode. while in ap mode, connect to it then open a browser to the gateway ip, default 192.168.4.1, configure wifi, save and it should reboot and connect.\nalso see examples.\ninstall using platformio\nplatformio is an emerging ecosystem for iot development, and is an alternative to using the arduino ide. install wifimanager using the platformio library manager in your editor, or using the platformio core cli, or by adding it to your platformio.ini as shown below (recommended approach).\nthe simplest way is to open the platformio.ini file at the root of your project, and wifimanager to the common top-level env lib_deps key like so:\n[env]\nlib_deps =\nwifimanager\n[env]\nlib_deps =\nhttps://github.com/tzapu/wifimanager.git\ndocumentation\npassword protect the configuration access point\nyou can and should password protect the configuration access point. simply add the password as a second parameter to autoconnect. a short password seems to have unpredictable results so use one that's around 8 characters or more in length. the guidelines are that a wifi password must consist of 8 to 63 ascii-encoded characters in the range of 32 to 126 (decimal)\nwifimanager.autoconnect(\"autoconnectap\", \"password\")\ncallbacks\nenter config mode\nuse this if you need to do something when your device enters configuration mode on failed wifi connection attempt. before autoconnect()\nwifimanager.setapcallback(configmodecallback);\nconfigmodecallback declaration and example\nvoid configmodecallback (wifimanager *mywifimanager) {\nserial.println(\"entered config mode\");\nserial.println(wifi.softapip());\nserial.println(mywifimanager->getconfigportalssid());\n}\nsave settings\nthis gets called when custom parameters have been set and a connection has been established. use it to set a flag, so when all the configuration finishes, you can save the extra parameters somewhere.\nif you need to save parameters even on wifi fail or empty, you must set setbreakafterconfig to true, or else saveconfigcallback will not be called.\n//if this is set, it will exit after config, even if connection is unsuccessful.\nvoid setbreakafterconfig(boolean shouldbreak);\nsee autoconnectwithfsparameters example.\nwifimanager.setsaveconfigcallback(saveconfigcallback);\nsaveconfigcallback declaration and example\n//flag for saving data\nbool shouldsaveconfig = false;\n//callback notifying us of the need to save config\nvoid saveconfigcallback () {\nserial.println(\"should save config\");\nshouldsaveconfig = true;\n}\nconfiguration portal timeout\nif you need to set a timeout so the esp doesn't hang waiting to be configured, for instance after a power failure, you can add\nwifimanager.setconfigportaltimeout(180);\nwhich will wait 3 minutes (180 seconds). when the time passes, the autoconnect function will return, no matter the outcome. check for connection and if it's still not established do whatever is needed (on some modules i restart them to retry, on others i enter deep sleep)\non demand configuration portal\nif you would rather start the configuration portal on demand rather than automatically on a failed connection attempt, then this is for you.\ninstead of calling autoconnect() which does all the connecting and failover configuration portal setup for you, you need to use startconfigportal(). do not use both.\nexample usage\nvoid loop() {\n// is configuration portal requested?\nif ( digitalread(trigger_pin) == low ) {\nwifimanager wifimanager;\nwifimanager.startconfigportal(\"ondemandap\");\nserial.println(\"connected...yeey :)\");\n}\n}\nsee example for a more complex version. ondemandconfigportal\nexiting from the configuration portal\nnormally, once entered, the configuration portal will continue to loop until wifi credentials have been successfully entered or a timeout is reached. if you'd prefer to exit without joining a wifi network, say becuase you're going to put the esp into ap mode, then press the \"exit\" button on the main webpage. if started via autoconnect or startconfigportal then it will return false (portalabortresult)\ncustom parameters\nyou can use wifimanager to collect more parameters than just ssid and password. this could be helpful for configuring stuff like mqtt host and port, blynk or emoncms tokens, just to name a few. you are responsible for saving and loading these custom values. the library just collects and displays the data for you as a convenience. usage scenario would be:\nload values from somewhere (eeprom/fs) or generate some defaults\nadd the custom parameters to wifimanager using\n// id/name, placeholder/prompt, default, length\nwifimanagerparameter custom_mqtt_server(\"server\", \"mqtt server\", mqtt_server, 40);\nwifimanager.addparameter(&custom_mqtt_server);\nif connection to ap fails, configuration portal starts and you can set /change the values (or use on demand configuration portal)\nonce configuration is done and connection is established save config callback is called\nonce wifimanager returns control to your application, read and save the new values using the wifimanagerparameter object.\nmqtt_server = custom_mqtt_server.getvalue();\nthis feature is a lot more involved than all the others, so here are some examples to fully show how it is done. you should also take a look at adding custom html to your form.\nsave and load custom parameters to file system in json form autoconnectwithfsparameters\nsave and load custom parameters to eeprom (not done yet)\ncustom ip configuration\nyou can set a custom ip for both ap (access point, config mode) and sta (station mode, client mode, normal project state)\ncustom access point ip configuration\nthis will set your captive portal to a specific ip should you need/want such a feature. add the following snippet before autoconnect()\n//set custom ip for portal\nwifimanager.setapstaticipconfig(ipaddress(10,0,1,1), ipaddress(10,0,1,1), ipaddress(255,255,255,0));\ncustom station (client) static ip configuration\nthis will make use the specified ip configuration instead of using dhcp in station mode.\nwifimanager.setstastaticipconfig(ipaddress(192,168,0,99), ipaddress(192,168,0,1), ipaddress(255,255,255,0)); // optional dns 4th argument\nthere are a couple of examples in the examples folder that show you how to set a static ip and even how to configure it through the web configuration portal.\nnote: you should fill dns server if you have http requests with hostnames or syncronize time (ntp). it's the same as gateway ip or a popular (google dns: 8.8.8.8).\ncustom html, css, javascript\nthere are various ways in which you can inject custom html, css or javascript into the configuration portal. the options are:\ninject custom head element you can use this to any html bit to the head of the configuration portal. if you add a <style> element, bare in mind it overwrites the included css, not replaces.\nwifimanager.setcustomheadelement(\"<style>html{filter: invert(100%); -webkit-filter: invert(100%);}</style>\");\ninject a custom bit of html in the configuration/param form\nwifimanagerparameter custom_text(\"<p>this is just a text paragraph</p>\");\nwifimanager.addparameter(&custom_text);\ninject a custom bit of html in a configuration form element just add the bit you want added as the last parameter to the custom parameter constructor.\nwifimanagerparameter custom_mqtt_server(\"server\", \"mqtt server\", \"iot.eclipse\", 40, \" readonly\");\nwifimanager.addparameter(&custom_mqtt_server);\ntheming\nyou can customize certain elements of the default template with some builtin classes\nwifimanager.setclass(\"invert\"); // dark theme\nwifimanager.setscandispperc(true); // display percentages instead of graphs for rssi\nthere are additional classes in the css you can use in your custom html , see the example template.\nfilter networks\nyou can filter networks based on signal quality and show/hide duplicate networks.\nif you would like to filter low signal quality networks you can tell wifimanager to not show networks below an arbitrary quality %;\nwifimanager.setminimumsignalquality(10);\nwill not show networks under 10% signal quality. if you omit the parameter it defaults to 8%;\nyou can also remove or show duplicate networks (default is remove). use this function to show (or hide) all networks.\nwifimanager.setremoveduplicateaps(false);\ndebug\ndebug is enabled by default on serial in non-stable releases. to disable add before autoconnect/startconfigportal\nwifimanager.setdebugoutput(false);\nyou can pass in a custom stream via constructor\nwifimanager wifimanager(serial1);\nyou can customize the debug level by changing _debuglevel in source options are:\ndebug_error\ndebug_notify\ndebug_verbose\ndebug_dev\ndebug_max\ntroubleshooting\nif you get compilation errors, more often than not, you may need to install a newer version of the esp8266 core for arduino.\nchanges added on 0.8 should make the latest -----> trunk !!!  work without compilation errors. tested down to esp8266 core 2.0.0. please update to version 0.8\ni am trying to keep releases working with release versions of the core, so they can be installed through boards manager, but if you checkout the latest version directly from github, sometimes, the library will only work if you update the esp8266 core to the latest version because i am using some newly added function.\nif you connect to the created configuration access point but the configuration portal does not show up, just open a browser and type in the ip of the web portal, by default 192.168.4.1.\nif trying to connect ends up in an endless loop, try to add setconnecttimeout(60) before autoconnect();. the parameter is timeout to try connecting in seconds.\ni get stuck in ap mode when the power goes out or modem resets, try a setconfigportaltimeout(seconds). this will cause the configportal to close after no activity, and you can reboot or attempt reconnection in your code.\nreleases\n1.0.1\ndevelopment overview\nadded public methods\nsetconfigportalblocking\nsetshowstaticfields\nsetcaptiveportalenable\nsetrestorepersistent\nsetcaptiveportalclientcheck\nsetwebportalclientcheck\nstartwebportal\nstopwebportal\nprocess\ndisconnect\nerase\ndebugsoftapconfig\ndebugplatforminfo\nsetscandispperc\nsethostname\nsetmenu(menu_page_t[])\nsetwifiautoreconnect\nsetstastaticipconfig(..,dns)\nsetshowdnsfields\ngetlastconxresult\ngetwlstatusstring\ngetmodestring\ngetwifiissaved\nsetshowinfoerase\nsetenableconfigportal\nsetcountry\nsetclass\nhtmleetities\nwifimanagerparameter\nwifimanagerparameter(id,label)\nwifimanagerparameter.setvalue(value,length)\ngetparameters\ngetparameterscount\nconstructors\nwifimanager(stream& consoleport)\ndefine flags\n\u2757\ufe0f defines cannot be set in user sketches #define wm_mdns // use mdns\n#define wm_fixeraseconfig // use erase flash fix, esp8266 2.4.0\n#define wm_erase_nvs // esp32 erase(true) will erase nvs\n#include <rom/rtc.h> // esp32 info page will show last reset reasons if this file is included\nchanges overview\nesp32 support ( fairly stable )\ncomplete refactor of strings strings_en.h\nadds new tokens for wifiscan, and some classes (left , invert icons, msg color)\nadds status callout panel default, primary, special colors\nadds tons of info on info page, and erase capability\nadds signal icons, replaces percentage ( has hover titles )\nadds labels to all inputs (replaces placeholders)\nall html ( and eventually all strings except debug) moved to strings_en.h\nadded additional debugging, compressed debug lines, debuglevels\npersistent disabled, and restored via de/con-stuctor (uses setrestorepersistent)\nshould retain all user modes including ap, should not overwrite or persist user modes or configs,even sta (storestamode) (buggy)\n\u26a0\ufe0f return values may have changed depending on portal abort, or timeout ( portaltimeoutresult,portalabortresult)\nparams memory is auto allocated by increment of wifi_manager_max_params(5) when exceeded, user no longer needs to specify this at all.\naddparameter now returns bool, and it returns false if param id is not alphanum [0-9,a-z,a-z,_]\nparam field ids allow {i} token to use param_n instead of string in case someones wants to change this due to i18n or character issues\nprovides #define fixeraseconfig to help deal with https://github.com/esp8266/arduino/pull/3635\nfailure reason reporting on portal\nset esp8266 sta hostname, esp32 sta+ap hostname ( dhcp client id)\npass in debug stream in constructor wifimanager(stream& consoleport)\nyou can force ip fields off with showxfields(false) if you set _disableipfields=true\nparam menu/page (setup) added to separate params from wifi page, handled automatically by setmenu\nset custom root menu\ndisable configportal on autoconnect\nwm parameters init is now protected, allowing child classes, example included\nwifiscans are precached and async for faster page loads, refresh forces rescan\nadds esp32 gettemperature ( currently commented out, useful for relative measurement only )\n0.12\nremoved 204 header response\nfixed incompatibility with other libs using isnan and other std:: functions without namespace\n0.11\na lot more reliable reconnecting to networks\ncustom html in custom parameters (for read only params)\ncustom html in custom parameter form (like labels)\ncustom head element (like custom css)\nsort networks based on signal quality\nremove duplicate networks\n0.10\nsome css changes\nbug fixes and speed improvements\nadded an alternative to waitforconnectresult() for debugging\nchanged settimeout(seconds) to setconfigportaltimeout(seconds)\ncontributions and thanks\nthe support and help i got from the community has been nothing short of phenomenal. i can't thank you guys enough. this is my first real attept in developing open source stuff and i must say, now i understand why people are so dedicated to it, it is because of all the wonderful people involved.\nthank you\nthe esp8266 and esp32 arduino and idf maintainers!\nshawn a aka tablatronix\nliebman\nevgeny dontsov\nchris marrin\nbbx10\nkentaylor\nmaximiliano duarte\nalltheblinkythings\nniklas wall\njakub piasecki\npeter allan\njohn little\nmarkaswift\nfranklinvv\nalberto ricci bitti\nsebipanther\njonathanendersby\nwalthercarsten\nand countless others\ninspiration\nhttp://www.esp8266.com/viewtopic.php?f=29&t=2520\nhttps://github.com/chriscook8/esp-arduino-apboot\nhttps://github.com/esp8266/arduino/tree/master/libraries/dnsserver/examples/captiveportaladvanced\nbuilt by alext https://github.com/tzapu", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000011, "year": null}, {"Unnamed: 0": 2885, "autor": 845, "date": null, "content": "WiFiManager\nESP8266 WiFi Connection manager with fallback web configuration portal\nThe configuration portal is of the captive variety, so on various devices it will present the configuration dialogue as soon as you connect to the created access point.\nFirst attempt at a library. Lots more changes and fixes to do. Contributions are welcome.\nThis works with the ESP8266 Arduino platform with a recent stable release(2.0.0 or newer) https://github.com/esp8266/Arduino\nContents\nHow it works\nWishlist\nQuick start\nInstalling\nThrough Library Manager\nFrom Github\nUsing\nDocumentation\nAccess Point Password\nCallbacks\nConfiguration Portal Timeout\nOn Demand Configuration\nCustom Parameters\nCustom IP Configuration\nFilter Low Quality Networks\nDebug Output\nTroubleshooting\nReleases\nContributors\nHow It Works\nwhen your ESP starts up, it sets it up in Station mode and tries to connect to a previously saved Access Point\nif this is unsuccessful (or no previous network saved) it moves the ESP into Access Point mode and spins up a DNS and WebServer (default ip 192.168.4.1)\nusing any wifi enabled device with a browser (computer, phone, tablet) connect to the newly created Access Point\nbecause of the Captive Portal and the DNS server you will either get a 'Join to network' type of popup or get any domain you try to access redirected to the configuration portal\nchoose one of the access points scanned, enter password, click save\nESP will try to connect. If successful, it relinquishes control back to your app. If not, reconnect to AP and reconfigure.\nHow It Looks\nWishlist\nremove dependency on EEPROM library\nmove HTML Strings to PROGMEM\ncleanup and streamline code (although this is ongoing)\nif timeout is set, extend it when a page is fetched in AP mode\nadd ability to configure more parameters than ssid/password\nmaybe allow setting ip of ESP after reboot\nadd to Arduino Library Manager\nadd to PlatformIO\nadd multiple sets of network credentials\nallow users to customize CSS\nESP32 support or instructions\nrewrite documentation for simplicity, based on scenarios/goals\nrely on the SDK's built in auto connect more than forcing a connect\nQuick Start\nInstalling\nYou can either install through the Arduino Library Manager or checkout the latest changes or a release from github\nInstall through Library Manager\nCurrently version 0.8+ works with release 2.0.0 or newer of the ESP8266 core for Arduino\nin Arduino IDE got to Sketch/Include Library/Manage Libraries\nsearch for WiFiManager\nclick Install and start using it\nCheckout from github\nGithub version works with release 2.0.0 or newer of the ESP8266 core for Arduino\nCheckout library to your Arduino libraries folder\nUsing\nInclude in your sketch\n#include <ESP8266WiFi.h> //ESP8266 Core WiFi Library (you most likely already have this in your sketch)\n#include <DNSServer.h> //Local DNS Server used for redirecting all requests to the configuration portal\n#include <ESP8266WebServer.h> //Local WebServer used to serve the configuration portal\n#include <WiFiManager.h> //https://github.com/tzapu/WiFiManager WiFi Configuration Magic\nInitialize library, in your setup function add\nWiFiManager wifiManager;\nAlso in the setup function add\n//first parameter is name of access point, second is the password\nwifiManager.autoConnect(\"AP-NAME\", \"AP-PASSWORD\");\nif you just want an unsecured access point\nwifiManager.autoConnect(\"AP-NAME\");\nor if you want to use and auto generated name from 'ESP' and the esp's Chip ID use\nwifiManager.autoConnect();\nAfter you write your sketch and start the ESP, it will try to connect to WiFi. If it fails it starts in Access Point mode. While in AP mode, connect to it then open a browser to the gateway IP, default 192.168.4.1, configure wifi, save and it should reboot and connect.\nAlso see examples.\nDocumentation\nPassword protect the configuration Access Point\nYou can and should password protect the configuration access point. Simply add the password as a second parameter to autoConnect. A short password seems to have unpredictable results so use one that's around 8 characters or more in length. The guidelines are that a wifi password must consist of 8 to 63 ASCII-encoded characters in the range of 32 to 126 (decimal)\nwifiManager.autoConnect(\"AutoConnectAP\", \"password\")\nCallbacks\nEnter Config mode\nUse this if you need to do something when your device enters configuration mode on failed WiFi connection attempt. Before autoConnect()\nwifiManager.setAPCallback(configModeCallback);\nconfigModeCallback declaration and example\nvoid configModeCallback (WiFiManager *myWiFiManager) {\nSerial.println(\"Entered config mode\");\nSerial.println(WiFi.softAPIP());\nSerial.println(myWiFiManager->getConfigPortalSSID());\n}\nSave settings\nThis gets called when custom parameters have been set AND a connection has been established. Use it to set a flag, so when all the configuration finishes, you can save the extra parameters somewhere.\nSee AutoConnectWithFSParameters Example.\nwifiManager.setSaveConfigCallback(saveConfigCallback);\nsaveConfigCallback declaration and example\n//flag for saving data\nbool shouldSaveConfig = false;\n//callback notifying us of the need to save config\nvoid saveConfigCallback () {\nSerial.println(\"Should save config\");\nshouldSaveConfig = true;\n}\nConfiguration Portal Timeout\nIf you need to set a timeout so the ESP doesn't hang waiting to be configured, for instance after a power failure, you can add\nwifiManager.setConfigPortalTimeout(180);\nwhich will wait 3 minutes (180 seconds). When the time passes, the autoConnect function will return, no matter the outcome. Check for connection and if it's still not established do whatever is needed (on some modules I restart them to retry, on others I enter deep sleep)\nOn Demand Configuration Portal\nIf you would rather start the configuration portal on demand rather than automatically on a failed connection attempt, then this is for you.\nInstead of calling autoConnect() which does all the connecting and failover configuration portal setup for you, you need to use startConfigPortal(). Do not use BOTH.\nExample usage\nvoid loop() {\n// is configuration portal requested?\nif ( digitalRead(TRIGGER_PIN) == LOW ) {\nWiFiManager wifiManager;\nwifiManager.startConfigPortal(\"OnDemandAP\");\nSerial.println(\"connected...yeey :)\");\n}\n}\nSee example for a more complex version. OnDemandConfigPortal\nCustom Parameters\nYou can use WiFiManager to collect more parameters than just SSID and password. This could be helpful for configuring stuff like MQTT host and port, blynk or emoncms tokens, just to name a few. You are responsible for saving and loading these custom values. The library just collects and displays the data for you as a convenience. Usage scenario would be:\nload values from somewhere (EEPROM/FS) or generate some defaults\nadd the custom parameters to WiFiManager using\n// id/name, placeholder/prompt, default, length\nWiFiManagerParameter custom_mqtt_server(\"server\", \"mqtt server\", mqtt_server, 40);\nwifiManager.addParameter(&custom_mqtt_server);\nif connection to AP fails, configuration portal starts and you can set /change the values (or use on demand configuration portal)\nonce configuration is done and connection is established save config callback is called\nonce WiFiManager returns control to your application, read and save the new values using the WiFiManagerParameter object.\nmqtt_server = custom_mqtt_server.getValue();\nThis feature is a lot more involved than all the others, so here are some examples to fully show how it is done. You should also take a look at adding custom HTML to your form.\nSave and load custom parameters to file system in json form AutoConnectWithFSParameters\nSave and load custom parameters to EEPROM (not done yet)\nCustom IP Configuration\nYou can set a custom IP for both AP (access point, config mode) and STA (station mode, client mode, normal project state)\nCustom Access Point IP Configuration\nThis will set your captive portal to a specific IP should you need/want such a feature. Add the following snippet before autoConnect()\n//set custom ip for portal\nwifiManager.setAPStaticIPConfig(IPAddress(10,0,1,1), IPAddress(10,0,1,1), IPAddress(255,255,255,0));\nCustom Station (client) Static IP Configuration\nThis will make use the specified IP configuration instead of using DHCP in station mode.\nwifiManager.setSTAStaticIPConfig(IPAddress(192,168,0,99), IPAddress(192,168,0,1), IPAddress(255,255,255,0));\nThere are a couple of examples in the examples folder that show you how to set a static IP and even how to configure it through the web configuration portal.\nCustom HTML, CSS, Javascript\nThere are various ways in which you can inject custom HTML, CSS or Javascript into the configuration portal. The options are:\ninject custom head element You can use this to any html bit to the head of the configuration portal. If you add a <style> element, bare in mind it overwrites the included css, not replaces.\nwifiManager.setCustomHeadElement(\"<style>html{filter: invert(100%); -webkit-filter: invert(100%);}</style>\");\ninject a custom bit of html in the configuration form\nWiFiManagerParameter custom_text(\"<p>This is just a text paragraph</p>\");\nwifiManager.addParameter(&custom_text);\ninject a custom bit of html in a configuration form element Just add the bit you want added as the last parameter to the custom parameter constructor.\nWiFiManagerParameter custom_mqtt_server(\"server\", \"mqtt server\", \"iot.eclipse\", 40, \" readonly\");\nFilter Networks\nYou can filter networks based on signal quality and show/hide duplicate networks.\nIf you would like to filter low signal quality networks you can tell WiFiManager to not show networks below an arbitrary quality %;\nwifiManager.setMinimumSignalQuality(10);\nwill not show networks under 10% signal quality. If you omit the parameter it defaults to 8%;\nYou can also remove or show duplicate networks (default is remove). Use this function to show (or hide) all networks.\nwifiManager.setRemoveDuplicateAPs(false);\nDebug\nDebug is enabled by default on Serial. To disable add before autoConnect\nwifiManager.setDebugOutput(false);\nTroubleshooting\nIf you get compilation errors, more often than not, you may need to install a newer version of the ESP8266 core for Arduino.\nChanges added on 0.8 should make the latest trunk work without compilation errors. Tested down to ESP8266 core 2.0.0. Please update to version 0.8\nI am trying to keep releases working with release versions of the core, so they can be installed through boards manager, but if you checkout the latest version directly from github, sometimes, the library will only work if you update the ESP8266 core to the latest version because I am using some newly added function.\nIf you connect to the created configuration Access Point but the configuration portal does not show up, just open a browser and type in the IP of the web portal, by default 192.168.4.1.\nIf trying to connect ends up in an endless loop, try to add setConnectTimeout(60) before autoConnect();. The parameter is timeout to try connecting in seconds.\nReleases\n0.12\nremoved 204 header response\nfixed incompatibility with other libs using isnan and other std:: functions without namespace\n0.11\na lot more reliable reconnecting to networks\ncustom html in custom parameters (for read only params)\ncustom html in custom parameter form (like labels)\ncustom head element (like custom css)\nsort networks based on signal quality\nremove duplicate networks\n0.10\nsome css changes\nbug fixes and speed improvements\nadded an alternative to waitForConnectResult() for debugging\nchanged setTimeout(seconds) to setConfigPortalTimeout(seconds)\n0.9\nfixed support for encoded characters in ssid/pass\n0.8\nmade it compile on older versions of ESP8266 core as well, tested down to 2.0.0\nadded simple example for Custom IP\n0.7\nadded static IP in station mode\nadded example of persisting custom IP to FS config.json\nmore option on portal homepage\nadded on PlatformIO\n0.6\ncustom parameters\nprettier\non demand config portal\ncommit #100 :D\n0.5\nAdded to Arduino Boards Manager - Thanks Max\nmoved most stuff to PROGMEM\nadded signal quality and a nice little padlock to show which networks are encrypted\nv0.4 - all of it user contributed changes - Thank you\nadded ability to password protect the configuration Access Point\ncallback for enter configuration mode\nmemory allocation improvements\nv0.3\nremoved the need for EEPROM and works with the 2.0.0 and above stable release of the ESP8266 for Arduino IDE package\nremoved restart on save of credentials\nupdated examples\nv0.2\nneeds the latest staging version (or at least a recent release of the staging version) to work\nv0.1\nworks with the staging release ver. 1.6.5-1044-g170995a, built on Aug 10, 2015 of the ESP8266 Arduino library.\nContributions and thanks\nThe support and help I got from the community has been nothing short of phenomenal. I can't thank you guys enough. This is my first real attept in developing open source stuff and I must say, now I understand why people are so dedicated to it, it is because of all the wonderful people involved.\nTHANK YOU\nShawn A\nMaximiliano Duarte\nalltheblinkythings\nNiklas Wall\nJakub Piasecki\nPeter Allan\nJohn Little\nmarkaswift\nfranklinvv\nAlberto Ricci Bitti\nSebiPanther\njonathanendersby\nwalthercarsten\nSorry if i have missed anyone.\nInspiration\nhttp://www.esp8266.com/viewtopic.php?f=29&t=2520", "link": "https://github.com/bbx10/WiFiManager", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "trunk", "selectorShort": "trunk", "MarkedSent": "wifimanager\nesp8266 wifi connection manager with fallback web configuration portal\nthe configuration portal is of the captive variety, so on various devices it will present the configuration dialogue as soon as you connect to the created access point.\nfirst attempt at a library. lots more changes and fixes to do. contributions are welcome.\nthis works with the esp8266 arduino platform with a recent stable release(2.0.0 or newer) https://github.com/esp8266/arduino\ncontents\nhow it works\nwishlist\nquick start\ninstalling\nthrough library manager\nfrom github\nusing\ndocumentation\naccess point password\ncallbacks\nconfiguration portal timeout\non demand configuration\ncustom parameters\ncustom ip configuration\nfilter low quality networks\ndebug output\ntroubleshooting\nreleases\ncontributors\nhow it works\nwhen your esp starts up, it sets it up in station mode and tries to connect to a previously saved access point\nif this is unsuccessful (or no previous network saved) it moves the esp into access point mode and spins up a dns and webserver (default ip 192.168.4.1)\nusing any wifi enabled device with a browser (computer, phone, tablet) connect to the newly created access point\nbecause of the captive portal and the dns server you will either get a 'join to network' type of popup or get any domain you try to access redirected to the configuration portal\nchoose one of the access points scanned, enter password, click save\nesp will try to connect. if successful, it relinquishes control back to your app. if not, reconnect to ap and reconfigure.\nhow it looks\nwishlist\nremove dependency on eeprom library\nmove html strings to progmem\ncleanup and streamline code (although this is ongoing)\nif timeout is set, extend it when a page is fetched in ap mode\nadd ability to configure more parameters than ssid/password\nmaybe allow setting ip of esp after reboot\nadd to arduino library manager\nadd to platformio\nadd multiple sets of network credentials\nallow users to customize css\nesp32 support or instructions\nrewrite documentation for simplicity, based on scenarios/goals\nrely on the sdk's built in auto connect more than forcing a connect\nquick start\ninstalling\nyou can either install through the arduino library manager or checkout the latest changes or a release from github\ninstall through library manager\ncurrently version 0.8+ works with release 2.0.0 or newer of the esp8266 core for arduino\nin arduino ide got to sketch/include library/manage libraries\nsearch for wifimanager\nclick install and start using it\ncheckout from github\ngithub version works with release 2.0.0 or newer of the esp8266 core for arduino\ncheckout library to your arduino libraries folder\nusing\ninclude in your sketch\n#include <esp8266wifi.h> //esp8266 core wifi library (you most likely already have this in your sketch)\n#include <dnsserver.h> //local dns server used for redirecting all requests to the configuration portal\n#include <esp8266webserver.h> //local webserver used to serve the configuration portal\n#include <wifimanager.h> //https://github.com/tzapu/wifimanager wifi configuration magic\ninitialize library, in your setup function add\nwifimanager wifimanager;\nalso in the setup function add\n//first parameter is name of access point, second is the password\nwifimanager.autoconnect(\"ap-name\", \"ap-password\");\nif you just want an unsecured access point\nwifimanager.autoconnect(\"ap-name\");\nor if you want to use and auto generated name from 'esp' and the esp's chip id use\nwifimanager.autoconnect();\nafter you write your sketch and start the esp, it will try to connect to wifi. if it fails it starts in access point mode. while in ap mode, connect to it then open a browser to the gateway ip, default 192.168.4.1, configure wifi, save and it should reboot and connect.\nalso see examples.\ndocumentation\npassword protect the configuration access point\nyou can and should password protect the configuration access point. simply add the password as a second parameter to autoconnect. a short password seems to have unpredictable results so use one that's around 8 characters or more in length. the guidelines are that a wifi password must consist of 8 to 63 ascii-encoded characters in the range of 32 to 126 (decimal)\nwifimanager.autoconnect(\"autoconnectap\", \"password\")\ncallbacks\nenter config mode\nuse this if you need to do something when your device enters configuration mode on failed wifi connection attempt. before autoconnect()\nwifimanager.setapcallback(configmodecallback);\nconfigmodecallback declaration and example\nvoid configmodecallback (wifimanager *mywifimanager) {\nserial.println(\"entered config mode\");\nserial.println(wifi.softapip());\nserial.println(mywifimanager->getconfigportalssid());\n}\nsave settings\nthis gets called when custom parameters have been set and a connection has been established. use it to set a flag, so when all the configuration finishes, you can save the extra parameters somewhere.\nsee autoconnectwithfsparameters example.\nwifimanager.setsaveconfigcallback(saveconfigcallback);\nsaveconfigcallback declaration and example\n//flag for saving data\nbool shouldsaveconfig = false;\n//callback notifying us of the need to save config\nvoid saveconfigcallback () {\nserial.println(\"should save config\");\nshouldsaveconfig = true;\n}\nconfiguration portal timeout\nif you need to set a timeout so the esp doesn't hang waiting to be configured, for instance after a power failure, you can add\nwifimanager.setconfigportaltimeout(180);\nwhich will wait 3 minutes (180 seconds). when the time passes, the autoconnect function will return, no matter the outcome. check for connection and if it's still not established do whatever is needed (on some modules i restart them to retry, on others i enter deep sleep)\non demand configuration portal\nif you would rather start the configuration portal on demand rather than automatically on a failed connection attempt, then this is for you.\ninstead of calling autoconnect() which does all the connecting and failover configuration portal setup for you, you need to use startconfigportal(). do not use both.\nexample usage\nvoid loop() {\n// is configuration portal requested?\nif ( digitalread(trigger_pin) == low ) {\nwifimanager wifimanager;\nwifimanager.startconfigportal(\"ondemandap\");\nserial.println(\"connected...yeey :)\");\n}\n}\nsee example for a more complex version. ondemandconfigportal\ncustom parameters\nyou can use wifimanager to collect more parameters than just ssid and password. this could be helpful for configuring stuff like mqtt host and port, blynk or emoncms tokens, just to name a few. you are responsible for saving and loading these custom values. the library just collects and displays the data for you as a convenience. usage scenario would be:\nload values from somewhere (eeprom/fs) or generate some defaults\nadd the custom parameters to wifimanager using\n// id/name, placeholder/prompt, default, length\nwifimanagerparameter custom_mqtt_server(\"server\", \"mqtt server\", mqtt_server, 40);\nwifimanager.addparameter(&custom_mqtt_server);\nif connection to ap fails, configuration portal starts and you can set /change the values (or use on demand configuration portal)\nonce configuration is done and connection is established save config callback is called\nonce wifimanager returns control to your application, read and save the new values using the wifimanagerparameter object.\nmqtt_server = custom_mqtt_server.getvalue();\nthis feature is a lot more involved than all the others, so here are some examples to fully show how it is done. you should also take a look at adding custom html to your form.\nsave and load custom parameters to file system in json form autoconnectwithfsparameters\nsave and load custom parameters to eeprom (not done yet)\ncustom ip configuration\nyou can set a custom ip for both ap (access point, config mode) and sta (station mode, client mode, normal project state)\ncustom access point ip configuration\nthis will set your captive portal to a specific ip should you need/want such a feature. add the following snippet before autoconnect()\n//set custom ip for portal\nwifimanager.setapstaticipconfig(ipaddress(10,0,1,1), ipaddress(10,0,1,1), ipaddress(255,255,255,0));\ncustom station (client) static ip configuration\nthis will make use the specified ip configuration instead of using dhcp in station mode.\nwifimanager.setstastaticipconfig(ipaddress(192,168,0,99), ipaddress(192,168,0,1), ipaddress(255,255,255,0));\nthere are a couple of examples in the examples folder that show you how to set a static ip and even how to configure it through the web configuration portal.\ncustom html, css, javascript\nthere are various ways in which you can inject custom html, css or javascript into the configuration portal. the options are:\ninject custom head element you can use this to any html bit to the head of the configuration portal. if you add a <style> element, bare in mind it overwrites the included css, not replaces.\nwifimanager.setcustomheadelement(\"<style>html{filter: invert(100%); -webkit-filter: invert(100%);}</style>\");\ninject a custom bit of html in the configuration form\nwifimanagerparameter custom_text(\"<p>this is just a text paragraph</p>\");\nwifimanager.addparameter(&custom_text);\ninject a custom bit of html in a configuration form element just add the bit you want added as the last parameter to the custom parameter constructor.\nwifimanagerparameter custom_mqtt_server(\"server\", \"mqtt server\", \"iot.eclipse\", 40, \" readonly\");\nfilter networks\nyou can filter networks based on signal quality and show/hide duplicate networks.\nif you would like to filter low signal quality networks you can tell wifimanager to not show networks below an arbitrary quality %;\nwifimanager.setminimumsignalquality(10);\nwill not show networks under 10% signal quality. if you omit the parameter it defaults to 8%;\nyou can also remove or show duplicate networks (default is remove). use this function to show (or hide) all networks.\nwifimanager.setremoveduplicateaps(false);\ndebug\ndebug is enabled by default on serial. to disable add before autoconnect\nwifimanager.setdebugoutput(false);\ntroubleshooting\nif you get compilation errors, more often than not, you may need to install a newer version of the esp8266 core for arduino.\nchanges added on 0.8 should make the latest -----> trunk !!!  work without compilation errors. tested down to esp8266 core 2.0.0. please update to version 0.8\ni am trying to keep releases working with release versions of the core, so they can be installed through boards manager, but if you checkout the latest version directly from github, sometimes, the library will only work if you update the esp8266 core to the latest version because i am using some newly added function.\nif you connect to the created configuration access point but the configuration portal does not show up, just open a browser and type in the ip of the web portal, by default 192.168.4.1.\nif trying to connect ends up in an endless loop, try to add setconnecttimeout(60) before autoconnect();. the parameter is timeout to try connecting in seconds.\nreleases\n0.12\nremoved 204 header response\nfixed incompatibility with other libs using isnan and other std:: functions without namespace\n0.11\na lot more reliable reconnecting to networks\ncustom html in custom parameters (for read only params)\ncustom html in custom parameter form (like labels)\ncustom head element (like custom css)\nsort networks based on signal quality\nremove duplicate networks\n0.10\nsome css changes\nbug fixes and speed improvements\nadded an alternative to waitforconnectresult() for debugging\nchanged settimeout(seconds) to setconfigportaltimeout(seconds)\n0.9\nfixed support for encoded characters in ssid/pass\n0.8\nmade it compile on older versions of esp8266 core as well, tested down to 2.0.0\nadded simple example for custom ip\n0.7\nadded static ip in station mode\nadded example of persisting custom ip to fs config.json\nmore option on portal homepage\nadded on platformio\n0.6\ncustom parameters\nprettier\non demand config portal\ncommit #100 :d\n0.5\nadded to arduino boards manager - thanks max\nmoved most stuff to progmem\nadded signal quality and a nice little padlock to show which networks are encrypted\nv0.4 - all of it user contributed changes - thank you\nadded ability to password protect the configuration access point\ncallback for enter configuration mode\nmemory allocation improvements\nv0.3\nremoved the need for eeprom and works with the 2.0.0 and above stable release of the esp8266 for arduino ide package\nremoved restart on save of credentials\nupdated examples\nv0.2\nneeds the latest staging version (or at least a recent release of the staging version) to work\nv0.1\nworks with the staging release ver. 1.6.5-1044-g170995a, built on aug 10, 2015 of the esp8266 arduino library.\ncontributions and thanks\nthe support and help i got from the community has been nothing short of phenomenal. i can't thank you guys enough. this is my first real attept in developing open source stuff and i must say, now i understand why people are so dedicated to it, it is because of all the wonderful people involved.\nthank you\nshawn a\nmaximiliano duarte\nalltheblinkythings\nniklas wall\njakub piasecki\npeter allan\njohn little\nmarkaswift\nfranklinvv\nalberto ricci bitti\nsebipanther\njonathanendersby\nwalthercarsten\nsorry if i have missed anyone.\ninspiration\nhttp://www.esp8266.com/viewtopic.php?f=29&t=2520", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000845, "year": null}], "name": "trunkarduino"}