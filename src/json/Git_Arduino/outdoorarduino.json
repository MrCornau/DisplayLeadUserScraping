{"interestingcomments": [{"Unnamed: 0": 2236, "autor": 196, "date": null, "content": "SkyLift\nTODO April 2020\nimprove CLI interface and data paths\nfix errors in JSON meta structure\nprovide more examples for getting started\nadd original SMD gerbers\nchange data paths and clean up job file format\nadd emoji SSID example \ud83d\ude43\nAbout\nSkyLift is a low-cost Wi-Fi geolocation spoofing device. It uses the ESP8266 to broadcast Wi-Fi Beacon Frames that exploit a longstanding (2008) vulnerability in Wi-Fi geolocation services. Using SkyLift you can trick your phone to appearing almost anywhere in the connected world. Locations can be collected on-site or remotely using the Wigle.net API.\nSkyLift DataPools edition with the location of Mark Zuckerberg's pool\nSkyLift has been used and tested for art exhibitions at galleries (Zoo Galerie, FACT, Eigen Lab), a museum show (La Ga\u00eet\u00e9 Lyrique), and at events and performances (Transmediale, Cryptoraves, CCC).\nHow Well Does it Work?\nIn environments where cellular strength is poor and there are few Wi-Fi networks (less than 5) SkyLift works well, sometimes perfectly spoofing everyone's location. In dense urban environments where there are dozens of Wi-Fi networks SkyLift may have little or no ability to spoof locations. In such cases using multiple devices has shown slight improvements. Multiple devices can be used with multiple scan sources to cover larger areas.\nIdeal locations are generally where Wi-Fi, GPS, and cellular signals are attenuated either by the building or by bodies. Parties and conference can work well, especially when rooms are located away from roads. Basements also work well because cellular and GPS signals are typically attenuated from metal in the floors, walls, or ceilings. Outdoor street-level areas with dozens of Wi-Fi networks and strong cellular signals tend to not work at all. Locations, such as open parks, with strong overhead GPS but weak/moderate cellular signal and minimal Wi-Fi networks sometimes works well. Basically, crowded indoor areas away from streets will yield better results. This is partially due to people (60% water) acting as Wi-Fi absorbers at 2.4GHz (the resonant frequency of H2O molecules).\nQuick Start: Arduino\nA geolocation demo is provided in arduino/skylift_demo. To run the firmware:\nget a ESP8266 NodeMCU 12E (\u2248$5)\nAdd http://arduino.esp8266.com/stable/package_esp8266com_index.json to boards manager\nSelect board profile: NodeMCU 1.0 (ESP12-E Module)\nOpen arduino/skylift_demo in Arduino and upload sketch\nensure wifi_tx_status = 1; to enable Wi-Fi\nOn a standalone ESP8266 NodeMCU 12E you won't be able to navigate the locations or toggle the Wi-Fi On/Off but you can still change the location in the code by editing place_idx_cur = 1; to you preferred starting location\nQuick Start: Python\ngit clone https://github.com/adamhrv/skylift\ncd skylift\nGet Wi-Fi data from Wigle: python skylift/cli_jobs.py wigle_api --wigle_api_name [your_username] --wigle_api_key [your_api_key] --jobs data/jobs/wigle_api.csv\nConvert networks into Arduino sketch: python skylift/cli_jobs.py arduino --jobs data/jobs/arduino.csv\nopen the Arduino sketch and upload to your ESP12E\nthe demo sketch should start broadcasting the networks around Facebook's corporate office in Menlo Park. The data was obtained from Wigle.net\nget full list of commands by running python skylift/cli_jobs.py\nSetting up SkyLift\nYou can run SkyLift using only the minimal NodeMCU Lua ESP8266 12E device (for less than $5). The OLED, PCB, switches, and case are all optional though recommended if you want to run multiple locations. For either option there are three main parts to setting up SkyLift:\nGetting Wi-Fi scan data remotely or on-site\nProcess scanned data with Python scripts to create Arduino firmware\nUpload firmware to your ESP8266/Arduino micro-controller\nFollow the guides (in progress) to setup each step:\nGetting Data\nPython environment\nData processing job files\nArduino\nYou can also build your own PCBs\nEagle files\nBOM\nOr read up on more of the research on how Beacon Frames and Wi-Fi geolocation works\nTODO\nadd lasercut files for case\nadd BOM for board and case\nimprove board (move drill holes, update text)\nimprove guides for collecting and processing data\nadd more examples\nSkyLift at Exhibitions:\nCryptorave #8 Transmediale (2019)\nCryptorave Barcelona @ The Influencers (2018)\nDataPools with Anastasia Kubrak for Tropez\nDark Technology Dark Web. Spektrum. Berlin. 2017.\nHow Much of This is Fiction. FACT. Liverpool. 2017.\nLanceurs d'alerte . La Ga\u00eet\u00e9 Lyrique. Paris. 2017.\nWelcome to Ecuador. Zoo Galerie. 2016.\nSkyLift Credits\nOriginal concept developed for and in collaboration with !Mediengruppe Bitnik and Surya Mattu for \"Welcome to Ecuador\" installation (2016) curated by Aude Launay for Zoo Galerie. Initial technical advisement from Julian Oliver, development research contributions from Leon Eckert, and beacon broadcasting code (for ESP8266) by https://github.com/kripthor/WiFiBeaconJam.\nDevelopment support from Schloss Solitude Web Residency and tropeztropez.de\nDisclaimer\nUse at your own risk\nThis code is for security and privacy research and artistic invention in consensual environments\nAfter a sustained duration of broadcasting, BSSIDs may be blacklisted or even become associated with another location (this happened at FACT Liverpool, which could reveal your location to other users, or be used creatively for a Bermuda Triangle effect.\nSkyLift is not a GPS spoofing device. For 1.5GHz GPS spoofing, see Spoof GPS location with low cost TX SDRs or Software-Defined GPS Signal Simulator\nSkyLift is currently a 2.4GHz only device\nIn controlled environments where cellular signal is weak and there are few Wi-Fi networks SkyLift may work 100% but in busy urban areas with many Wi-Fi signals it may not work at all\nCheck local Wi-Fi regulations before using\nFurther Reading\nBeacon Frame Overview\nBeacon Frame Packet in more depth\nSpoofing WiFi Geolocation services on Hackaday\nDon't Trust Geolocation\nDevice-to-Identity Linking Attack Using Targeted Wi-Fi Geolocation Spoofing\nHistory\nSkyLift began as an experiment trying to use a Raspberry Pi with a USB Wi-Fi dongle to spoof Wi-Fi access points to reproduce the research from PacketBr\u00fccke and Spoofing WiFi Geolocation services. After much frustration using an entire Linux computer for the highly-specialized task of only broadcasting Beacon Frames, the code from https://github.com/kripthor/WiFiBeaconJam provided a neat opportunity to try spoofing geolocation services with the ESP8266 and it actually worked. After comparing all other ESP Wi-Fi modules the NodeMCU 12E was chosen for this project because it has the lowest entry-level price for the highest functionality (USB serial converters, on-board LED, no assembly required, mass produced / easy to source). The antennae isn't as strong as the newer ESP modules but it is possible to cut the antennae's GND/PWR traces and solder in an antennae connector if you really need a long-range amplifier.\nEarlier versions of SkyLift\nSkyLift is open source project developed and maintained by Adam Harvey", "link": "https://github.com/adamhrv/skylift", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "outdoor", "selectorShort": "outdoor", "MarkedSent": "skylift\ntodo april 2020\nimprove cli interface and data paths\nfix errors in json meta structure\nprovide more examples for getting started\nadd original smd gerbers\nchange data paths and clean up job file format\nadd emoji ssid example \ud83d\ude43\nabout\nskylift is a low-cost wi-fi geolocation spoofing device. it uses the esp8266 to broadcast wi-fi beacon frames that exploit a longstanding (2008) vulnerability in wi-fi geolocation services. using skylift you can trick your phone to appearing almost anywhere in the connected world. locations can be collected on-site or remotely using the wigle.net api.\nskylift datapools edition with the location of mark zuckerberg's pool\nskylift has been used and tested for art exhibitions at galleries (zoo galerie, fact, eigen lab), a museum show (la ga\u00eet\u00e9 lyrique), and at events and performances (transmediale, cryptoraves, ccc).\nhow well does it work?\nin environments where cellular strength is poor and there are few wi-fi networks (less than 5) skylift works well, sometimes perfectly spoofing everyone's location. in dense urban environments where there are dozens of wi-fi networks skylift may have little or no ability to spoof locations. in such cases using multiple devices has shown slight improvements. multiple devices can be used with multiple scan sources to cover larger areas.\nideal locations are generally where wi-fi, gps, and cellular signals are attenuated either by the building or by bodies. parties and conference can work well, especially when rooms are located away from roads. basements also work well because cellular and gps signals are typically attenuated from metal in the floors, walls, or ceilings. -----> outdoor !!!  street-level areas with dozens of wi-fi networks and strong cellular signals tend to not work at all. locations, such as open parks, with strong overhead gps but weak/moderate cellular signal and minimal wi-fi networks sometimes works well. basically, crowded indoor areas away from streets will yield better results. this is partially due to people (60% water) acting as wi-fi absorbers at 2.4ghz (the resonant frequency of h2o molecules).\nquick start: arduino\na geolocation demo is provided in arduino/skylift_demo. to run the firmware:\nget a esp8266 nodemcu 12e (\u2248$5)\nadd http://arduino.esp8266.com/stable/package_esp8266com_index.json to boards manager\nselect board profile: nodemcu 1.0 (esp12-e module)\nopen arduino/skylift_demo in arduino and upload sketch\nensure wifi_tx_status = 1; to enable wi-fi\non a standalone esp8266 nodemcu 12e you won't be able to navigate the locations or toggle the wi-fi on/off but you can still change the location in the code by editing place_idx_cur = 1; to you preferred starting location\nquick start: python\ngit clone https://github.com/adamhrv/skylift\ncd skylift\nget wi-fi data from wigle: python skylift/cli_jobs.py wigle_api --wigle_api_name [your_username] --wigle_api_key [your_api_key] --jobs data/jobs/wigle_api.csv\nconvert networks into arduino sketch: python skylift/cli_jobs.py arduino --jobs data/jobs/arduino.csv\nopen the arduino sketch and upload to your esp12e\nthe demo sketch should start broadcasting the networks around facebook's corporate office in menlo park. the data was obtained from wigle.net\nget full list of commands by running python skylift/cli_jobs.py\nsetting up skylift\nyou can run skylift using only the minimal nodemcu lua esp8266 12e device (for less than $5). the oled, pcb, switches, and case are all optional though recommended if you want to run multiple locations. for either option there are three main parts to setting up skylift:\ngetting wi-fi scan data remotely or on-site\nprocess scanned data with python scripts to create arduino firmware\nupload firmware to your esp8266/arduino micro-controller\nfollow the guides (in progress) to setup each step:\ngetting data\npython environment\ndata processing job files\narduino\nyou can also build your own pcbs\neagle files\nbom\nor read up on more of the research on how beacon frames and wi-fi geolocation works\ntodo\nadd lasercut files for case\nadd bom for board and case\nimprove board (move drill holes, update text)\nimprove guides for collecting and processing data\nadd more examples\nskylift at exhibitions:\ncryptorave #8 transmediale (2019)\ncryptorave barcelona @ the influencers (2018)\ndatapools with anastasia kubrak for tropez\ndark technology dark web. spektrum. berlin. 2017.\nhow much of this is fiction. fact. liverpool. 2017.\nlanceurs d'alerte . la ga\u00eet\u00e9 lyrique. paris. 2017.\nwelcome to ecuador. zoo galerie. 2016.\nskylift credits\noriginal concept developed for and in collaboration with !mediengruppe bitnik and surya mattu for \"welcome to ecuador\" installation (2016) curated by aude launay for zoo galerie. initial technical advisement from julian oliver, development research contributions from leon eckert, and beacon broadcasting code (for esp8266) by https://github.com/kripthor/wifibeaconjam.\ndevelopment support from schloss solitude web residency and tropeztropez.de\ndisclaimer\nuse at your own risk\nthis code is for security and privacy research and artistic invention in consensual environments\nafter a sustained duration of broadcasting, bssids may be blacklisted or even become associated with another location (this happened at fact liverpool, which could reveal your location to other users, or be used creatively for a bermuda triangle effect.\nskylift is not a gps spoofing device. for 1.5ghz gps spoofing, see spoof gps location with low cost tx sdrs or software-defined gps signal simulator\nskylift is currently a 2.4ghz only device\nin controlled environments where cellular signal is weak and there are few wi-fi networks skylift may work 100% but in busy urban areas with many wi-fi signals it may not work at all\ncheck local wi-fi regulations before using\nfurther reading\nbeacon frame overview\nbeacon frame packet in more depth\nspoofing wifi geolocation services on hackaday\ndon't trust geolocation\ndevice-to-identity linking attack using targeted wi-fi geolocation spoofing\nhistory\nskylift began as an experiment trying to use a raspberry pi with a usb wi-fi dongle to spoof wi-fi access points to reproduce the research from packetbr\u00fccke and spoofing wifi geolocation services. after much frustration using an entire linux computer for the highly-specialized task of only broadcasting beacon frames, the code from https://github.com/kripthor/wifibeaconjam provided a neat opportunity to try spoofing geolocation services with the esp8266 and it actually worked. after comparing all other esp wi-fi modules the nodemcu 12e was chosen for this project because it has the lowest entry-level price for the highest functionality (usb serial converters, on-board led, no assembly required, mass produced / easy to source). the antennae isn't as strong as the newer esp modules but it is possible to cut the antennae's gnd/pwr traces and solder in an antennae connector if you really need a long-range amplifier.\nearlier versions of skylift\nskylift is open source project developed and maintained by adam harvey", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000196, "year": null}, {"Unnamed: 0": 2635, "autor": 595, "date": null, "content": "DIY flight controller from scratch\nPictures: First hardware version using Arduino Uno board and second hardware version using Arduino Nano board\n---------------------------Table of contents----------------------------\n1. Introduction\n1.1. Purpose\n1.2. Progress state\n1.3. Videos\n2. Required sensors\n3. Accro mode explained (aka manual)\n3.1. Angle feedback\n3.2. Speed stabilization\n4. Angle mode explained (aka automatic leveling mode)\n4.1. Angles and angular speeds feedback\n4.2. Stabilization\n5. Hardware configuration\n5.1. Components list\n5.2. Connexions\n6. Software setup\n6.1 Using Arduino IDE\n6.2 Using PlatformIO\n6.3. Using Docker\n7. Software detailed design\n7.1 Source Code overview\n7.2 The state machine\n7.3 Radio reception\n7.4 Motors speed control\n7.5 Failsafe\n8. Appendix\n8.1 My BenchTest\n8.2 Exemple of First Person View configuration(FPV)\n10. Glossary\n11. Bibliography\nWarning\nBefore starting this project, you must know that spinning propellers are very dangerous for your eyes and people around. When using the benchtest indoor, you must wear large protective glasses, and set up a power limit. For outside tests, choose a very large area, with nobody around.\n1. Introduction\n1.1 Purpose\nThe aim of this project is to develop a very simple quadrirotor flight controller from scratch, using an Arduino and inertial sensors. There is two benefits:\nto understand UAV flight stabilization\nto have our own system, with no limits for customization: you can add all the sensors you want.\nIn this project, the two main flight modes are addressed:\nAccrobatic mode (or manual mode): the simplest to code, but it requires flight skills\nAngle mode: more complex to implement, but easier to fly: UAV automatically goes back to horizontal\nI strongly advice to start by implementing the accrobatic mode, since a good accro mode will be a solid fundation for angle mode, and it is easy and fast to implement.\n1.2 Progress state\nReleases have been successfully tested during flights tests: I have some nice flights in FPV on a 450mm frame, both in accro and angle modes. BUT, this project is sometimes updated, mainly for code format, and unfortunately, I cannot realize flight tests for each submit. So, I cannot garantee that the last commit will allow to flight without some corrections.\nNote that you may also have to tune PID according to your configuration.\nI advice you to use a large frame (450mm for exemple), because it is more stable, and I did not test the software on smaller frames.\n1.3 Videos\nLoop control indoor test\nOutdoor flight test\n2. Required sensors\nAn IMU (aka MPU) is the only sensor needed for flight.\nAn \u00ab Inertial Measurement Unit \u00bb is a MEMS, \"Microelectromechanical system\", composed by a 3 axis gyroscope sensor, and 3 axis accelerometer sensor.\nIMU sensor Function Pros Cons\nGyroscope Measure angular speeds around each axis (\u00b0/sec) Fast Drift along time\nAccelerometer Measure linear acceleration on each axis (g) Slow Noizy and not usable when UAV is moving\n3. Accro mode (aka manual)\nAccrobatic mode implements minimal stabilization algorithms to make flight possible. UAV is not able to auto-leveling, and pilot skills are required.\nThis mode is the required base for the angle mode, and is easier to realize: do not try to code angle mode if accro mode is not working fine.\n3.1 Compute angle speed feedback\nAccrobatic mode algorithm only needs UAV angular speeds and angular speed command as entry data. Angular speeds are computed from raw gyroscope data integration.\nExemple of pitch angle speed computation using gyroscopes:\n// currentPitch = previousPitch + rawSensorPitch*loopTime\n_pos[0] = _pos[0] + (accGyroRaw[0+3]/GyroSensitivity)*_loop_time;\n3.2 Speed stabilization\nA closed-loop system is needed to control angular speed.\nThis system compares angular speed command to angular speed feedback, and computes a new motor power to apply.\n4. Angle mode (aka automatic leveling mode)\nIt is a more sophisticated flight mode than the accrobatic mode: now, UAV is able to auto-level.\nAuto-leveling mode entry data is UAV attitude: the angles from the horizontal (roll, pitch, yaw) and the angular speeds.\n4.1 Compute angles and angular speeds feedback\nBoth angles speed and angles are required to compute reliable attitude angle feedback along time.\nBoth gyroscopes and accelerometers are involved.\n4.1.1 IMU gyroscopes\nAs seen previously, Angular speeds are computed from raw gyroscope data integration.\n4.1.1 IMU accelerometers\nAttitude angles are computed from accelerations:\nWhen UAV is not moving, or if it is moving at constant speed, accelerometers measure gravity, ie vertical acceleration. Angle between UAV and the gravity vector is computed by trigonometry. Be carefull, this measure is faulty when UAV accelerates.\nExemple of pitch attitude angle computation using accelerometers:\n_pos[0] = atan(accGyroRaw[1]/accGyroRaw[2]))*(180/PI);\n4.1.2 Data merging: the complementary filter\nComplementary filter merges gyroscopes and accelerometers data, to get both sensors benefits, and to reduce theirs drawbacks:\nThe gyroscope if fast but it drifts along time.\nAccelerometers are not fast enougth, they are noizy, and they are usable only when the UAV is not moving, and when UAV receive only earth acceleration.\nThe complementary filter mask their respective errors:\nA low-pass filter is applied on accelerometer data to filter the noize and the unwanted accelerations: these data are usefull on a long time period, fast changes have to be eliminated.\nA high-pass filter is applied on the gyrosope data: these data are usefull on short time period, but they drift and accumulate errors on long time periods.\nCoding exemple\n_pos[0] = HighPassFilterCoeff*(_pos[0] + (accGyroRaw[0+3]/GyroSensitivity)*_loop_time) +\n(LowPassFilterCoeff)*((atan(accGyroRaw[1]/accGyroRaw[2]))*(180/PI));\nNote: LowPassFilterCoeff = 1 - HighPassFilterCoeff\nCoefficients computation\nHighPassFilterCoeff is computed from the Time constant.\nTime constant is a compromise between UAV acceleration filtering, and gyroscopes drift:\nToo low, accelerometer noize are not eliminated\nToo high, gyroscopes drift is not compensated\ntimeConstant = (HighPassFilterCoeff*dt) / (1-HighPassFilterCoeff)\n=> HighPassFilterCoeff = timeConstant / (dt + timeConstant)\nTime constant in this project is set to 5 milliseconds. It implies a coefficient \"HighPassFilterCoeff\" of 0.9995 for a loop time of 2.49 ms.\nNote: More efficient filters like the Kalman one are used in UAV, but they are more complicated to understand, and we want a very simple DIY software!\n4.2 Stabilization\nA double closed-loop system is needed to control attitude angles. It consists of a speed closed-loop [like the one in the accro mode], inside a position closed-loop.\nThis system compares angle command to angle feedback, and computes a new motor power to apply. Angular feedback is computed using a complementary filter to merge gyroscope dans accelerometer data.\nThe pilot controls each attitude angle, and if transmitter sticks are centered, command is 0\u00b0, and UAV automatically goes back to horizontal.\n5. Hardware configuration\n5.1 Components list\nAs exemple, my hardware configuration for a 450mm quad:\nComponent Reference\nMicrocontroller board Arduino Nano/Uno (ATmega328P MCU)\nESC Afro 20A-Simonk firmware 500Hz, BEC 0.5A 1060 to 1860 us pulse width\nMotors Multistar 2216-800Kv 14 Poles - 222W Current max: 20A Shaft: 3mm 2-4S\nPropellers 10x4.5 SF Props 2pc CW 2 pc CCW Rotation (Orange)\nBattery Zippy Flightmax 3000mAh 4S\nReceiver OrangeRx R617XL CPPM DSM2/DSMX 6 ch\nIMU MPU6050 (GY-86 breakout board)\nCompass HMC5883L (GY-86 breakout board)\nBuzzer Matek lost model beeper - Built-in MCU\nFrame Diatone Q450 Quad 450 V3. 450 mm wide frame choosen for better stability and higher autonomy (the lower the size, the lower the stability).\n5.2 Connexions\nTODO: add receiver in schematic\nFull view:\nZoomed view:\nArduino pin Component\nPD2 receiver\nPD4 ESC0\nPD5 ESC1\nPD6 ESC2\nPD7 ESC3\nPC0 potentiometer\nPC4 SDA MPU6050\nPC5 SCL MPU6050\n6. Software setup\n6.1 Using Arduino IDE\nWith minor modifications, project can be build using Arduino IDE:\nrename \"main.cpp\" to \"CodeDroneDIY.ino\"\ncopy all source files from \"CodeDroneDIY/src\" to \"CodeDroneDIY\"\nlaunch and compile \"CodeDroneDIY.ino\" using Arduino IDE\n6.2. Using Visual Studio Code IDE and PlatformIO\nInstall Visual Studio code\nStart VSCode and click on \"Extensions\" icon\nInstall PlatformIO IDE\n6.3. Using Linux terminal and PlatformIO\nPlatformIO is an open source ecosystem for IoT development.\n6.2.1. PlatformIO installation\nsudo apt-get install python-pip\nsudo pip install --upgrade pip && sudo pip install -U platformio==3.5.2\nplatformio platform install atmelavr --with-package=framework-arduinoavr\nplatformio lib install MPU6050\npio lib install \"I2Cdevlib-MPU6050\"\nOptional, for code format:\nsudo apt-get install -y clang-format\n6.2.2. Build project\nplatformio run\n6.2.3. Flash target\nplatformio upload --upload-port/ttyACM0\n6.2.4. Run unit tests\nplatformio test -e uno --verbose\n6.4. Using Docker and PlatformIO\nThe development tool \"Docker\" is a container platoform: it is a stand-alone, executable package of a piece of software that includes everything needed to run it: code, runtime, system tools, system libraries, settings. It isolates software from its surroundings.\nInstall Docker\nMove inside docker's folder: cd docker\nBuild docker image: make image\nFormat code: make format-all\nbuild project: make build-codedronediy\n7. Software detailed design\n7.1 Source code overview\nStateMachine folder:\nFile Description\nStateMachine.h Contains current state\nstates/IState.h Interface for the states (mother class)\nstates/AccroMode.cpp/h Computes stabilization for accro mode\nstates/AngleMode.cpp/h Computes stabilization for angle mode\nstates/Disarmed.cpp/h Sets motors to idle\nstates/Initializing.cpp/h Computes offsets\nstates/Safety.cpp/h Sets motors to idle\nStabilization folder:\nFile Description\nhardware/InertialMeasurementUnit.cpp/h Read roll, pitch, yaw angles from MPU6050\nhardware/MotorsSpeedControl.cpp/h Manage an ESC: PWM to set\nhardware/RadioReception.h Receives CPPM signal acquisition using INT0\nStabilization.cpp/h Computes and apply new command from receiver sticks and current attitude\nControlLoop.cpp/h Proportionnal, integral, derivative loop correction\ncustomLibs folder:\nFile Description\nCustomMath.h Mathermatical functions: mean and delta max computations\nCustomTime.h To measure loop time and elapsed time\nCustomSerialPrint.h Custom serial print to enable or disable printing\n7.2 The state machine\nDue to security reasons, the UAV cannot start running with a flight mode enabled. Five states are defined to enable or disable flight mode safely. These states are ruled by a statemachine.\nThe five StateMachine states:\nState Description\nInitialization UAV must be on the ground, horizontal, and not moving. Sensors offsets are computed. Then, if receiver switch is disarmed, the system changes to the next state.\nDisarmed Throttle is disabled. When the receiver switch is set to a flight mode, the system changes to the corresponding state.\nAngleMode/AccroMode Throttle is enabled, flight can start. After 5 seconds of power idle, the system is set to \"safety\" state.\nSafety Throttle command is disabled and power is cut. To re-arm, switch to disarmed, then choose the flight mode accroMode or angleMode\n7.3. Radio reception\nA CPPM receiver is used to fly the UAV using a remote control.\nCPPM (Pulse Position Modulation) reception allows to receive all channels using only one entry pin. Each rising edge correpond to the end of the previous channel impulsion, and at the beginning of the next channel impulsion. Elapsed time between two rising edge correspond to the pulse width of a given channel.\nIn this projet, each pulse width is measured using INT0, and then stored in the correponding channel of an array.\n7.4 Motors speed control\nEach motor is controlled by an ESC. The microcontroller drives the 4 ESC.\nMotor speed is tuned by modifying the pulse width on the ESC signal wire. A pulse must be send at least every 20ms.\nMax motor speed is set by a pulse of 1860ms\nMotor is stopped by a pulse of 1060ms\nAll speeds between this two values are possible.\nEach timer1 interrupt call the function \"SetMotorsSpeed\", which generate a falling edge on the previous motor and a rising edge on the current motor:\n7.5 Failsafe\nFor security, you must set the failsafe to cut motors power when radio link is lost.\nTo set the failsafe:\nPut transmitter sticks in the configuration wanted when reception is lost\nBind the receiver with the transmitter\nTransmitter configuration used during the \u00ab bind \u00bb operation defines the \u00ab failsafe. \u00bb\n8. Appendix\n8.1 The benchtest\n8.2 FPV - First Person View\nMy cheap configuration:\nComponent Reference\nGooggles Quanum DIY FPV Goggle V2 Pro\nGooggles battery 1000 mAh 3S\nReceiver Eachine RC832 Boscam FPV 5.8G 48CH Wireless AV Receiver\nReceiver antenna DYS FPV 5.8G Antenna 4dBi Mushroom Antenna RHCP TX RX\nCamera Foxeer XAT600M HS1177 600TVL CCD 2.8MM IR Mini FPV Camera IR Blocked 5-22v\nCamera antenna Realacc 5.8G 5dBi 50W RHCP Omnidirectional 3 Leaf Clover FPV Antenna Red\nVideo transmitter Upgrade Aomway Mini 5.8Ghz 200mW 32CH AV Wireless Transmitter Module\n10. Glossary\nESC Electronic Speed Control\nPID It is a Proportionnal Integral Derivative control loop\nIMU Inertial Measurement Unit\nMPU Motion Processor Unit\nFPV First Person View\n11. Bibliography\nArduino\nhttps://www.arduino.cc/en/Reference/Libraries.html\nhttps://www.arduino.cc/en/Reference/HomePage\nPWM\nhttps://librepilot.atlassian.net/wiki/display/LPDOC/PWM,+PWMSync,+Oneshot+Output\nhttp://forum.arduino.cc/index.php?topic=46487.0\nPPM\nhttp://frskytaranis.forumactif.org/t4426-tuto-pwm-cppm-ccpm-ppm-s-bus-s-port-kesako\nPID\nhttp://www.fpv-passion.fr/docteur-pid/\nQuadricopter\nhttps://www.mondrone.net/fabriquer-quadricoptere-la-propulsion/\nData processing\nhttps://ericjformanteaching.wordpress.com/2013/10/08/smoothing-sensor-input/\nData merging\nhttp://www.mouser.fr/applications/sensor_solutions_mems/\nhttp://www.pieter-jan.com/node/11\nProgramme python\nAndy BAKER\nhttp://pythonfiddle.com/andy-baker-quadcopter/\nVibrations\nhttp://ardupilot.org/plane/docs/common-vibration-damping.html", "link": "https://github.com/liourej/CodeDroneDIY", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "outdoor", "selectorShort": "outdoor", "MarkedSent": "diy flight controller from scratch\npictures: first hardware version using arduino uno board and second hardware version using arduino nano board\n---------------------------table of contents----------------------------\n1. introduction\n1.1. purpose\n1.2. progress state\n1.3. videos\n2. required sensors\n3. accro mode explained (aka manual)\n3.1. angle feedback\n3.2. speed stabilization\n4. angle mode explained (aka automatic leveling mode)\n4.1. angles and angular speeds feedback\n4.2. stabilization\n5. hardware configuration\n5.1. components list\n5.2. connexions\n6. software setup\n6.1 using arduino ide\n6.2 using platformio\n6.3. using docker\n7. software detailed design\n7.1 source code overview\n7.2 the state machine\n7.3 radio reception\n7.4 motors speed control\n7.5 failsafe\n8. appendix\n8.1 my benchtest\n8.2 exemple of first person view configuration(fpv)\n10. glossary\n11. bibliography\nwarning\nbefore starting this project, you must know that spinning propellers are very dangerous for your eyes and people around. when using the benchtest indoor, you must wear large protective glasses, and set up a power limit. for outside tests, choose a very large area, with nobody around.\n1. introduction\n1.1 purpose\nthe aim of this project is to develop a very simple quadrirotor flight controller from scratch, using an arduino and inertial sensors. there is two benefits:\nto understand uav flight stabilization\nto have our own system, with no limits for customization: you can add all the sensors you want.\nin this project, the two main flight modes are addressed:\naccrobatic mode (or manual mode): the simplest to code, but it requires flight skills\nangle mode: more complex to implement, but easier to fly: uav automatically goes back to horizontal\ni strongly advice to start by implementing the accrobatic mode, since a good accro mode will be a solid fundation for angle mode, and it is easy and fast to implement.\n1.2 progress state\nreleases have been successfully tested during flights tests: i have some nice flights in fpv on a 450mm frame, both in accro and angle modes. but, this project is sometimes updated, mainly for code format, and unfortunately, i cannot realize flight tests for each submit. so, i cannot garantee that the last commit will allow to flight without some corrections.\nnote that you may also have to tune pid according to your configuration.\ni advice you to use a large frame (450mm for exemple), because it is more stable, and i did not test the software on smaller frames.\n1.3 videos\nloop control indoor test\n-----> outdoor !!!  flight test\n2. required sensors\nan imu (aka mpu) is the only sensor needed for flight.\nan \u00ab inertial measurement unit \u00bb is a mems, \"microelectromechanical system\", composed by a 3 axis gyroscope sensor, and 3 axis accelerometer sensor.\nimu sensor function pros cons\ngyroscope measure angular speeds around each axis (\u00b0/sec) fast drift along time\naccelerometer measure linear acceleration on each axis (g) slow noizy and not usable when uav is moving\n3. accro mode (aka manual)\naccrobatic mode implements minimal stabilization algorithms to make flight possible. uav is not able to auto-leveling, and pilot skills are required.\nthis mode is the required base for the angle mode, and is easier to realize: do not try to code angle mode if accro mode is not working fine.\n3.1 compute angle speed feedback\naccrobatic mode algorithm only needs uav angular speeds and angular speed command as entry data. angular speeds are computed from raw gyroscope data integration.\nexemple of pitch angle speed computation using gyroscopes:\n// currentpitch = previouspitch + rawsensorpitch*looptime\n_pos[0] = _pos[0] + (accgyroraw[0+3]/gyrosensitivity)*_loop_time;\n3.2 speed stabilization\na closed-loop system is needed to control angular speed.\nthis system compares angular speed command to angular speed feedback, and computes a new motor power to apply.\n4. angle mode (aka automatic leveling mode)\nit is a more sophisticated flight mode than the accrobatic mode: now, uav is able to auto-level.\nauto-leveling mode entry data is uav attitude: the angles from the horizontal (roll, pitch, yaw) and the angular speeds.\n4.1 compute angles and angular speeds feedback\nboth angles speed and angles are required to compute reliable attitude angle feedback along time.\nboth gyroscopes and accelerometers are involved.\n4.1.1 imu gyroscopes\nas seen previously, angular speeds are computed from raw gyroscope data integration.\n4.1.1 imu accelerometers\nattitude angles are computed from accelerations:\nwhen uav is not moving, or if it is moving at constant speed, accelerometers measure gravity, ie vertical acceleration. angle between uav and the gravity vector is computed by trigonometry. be carefull, this measure is faulty when uav accelerates.\nexemple of pitch attitude angle computation using accelerometers:\n_pos[0] = atan(accgyroraw[1]/accgyroraw[2]))*(180/pi);\n4.1.2 data merging: the complementary filter\ncomplementary filter merges gyroscopes and accelerometers data, to get both sensors benefits, and to reduce theirs drawbacks:\nthe gyroscope if fast but it drifts along time.\naccelerometers are not fast enougth, they are noizy, and they are usable only when the uav is not moving, and when uav receive only earth acceleration.\nthe complementary filter mask their respective errors:\na low-pass filter is applied on accelerometer data to filter the noize and the unwanted accelerations: these data are usefull on a long time period, fast changes have to be eliminated.\na high-pass filter is applied on the gyrosope data: these data are usefull on short time period, but they drift and accumulate errors on long time periods.\ncoding exemple\n_pos[0] = highpassfiltercoeff*(_pos[0] + (accgyroraw[0+3]/gyrosensitivity)*_loop_time) +\n(lowpassfiltercoeff)*((atan(accgyroraw[1]/accgyroraw[2]))*(180/pi));\nnote: lowpassfiltercoeff = 1 - highpassfiltercoeff\ncoefficients computation\nhighpassfiltercoeff is computed from the time constant.\ntime constant is a compromise between uav acceleration filtering, and gyroscopes drift:\ntoo low, accelerometer noize are not eliminated\ntoo high, gyroscopes drift is not compensated\ntimeconstant = (highpassfiltercoeff*dt) / (1-highpassfiltercoeff)\n=> highpassfiltercoeff = timeconstant / (dt + timeconstant)\ntime constant in this project is set to 5 milliseconds. it implies a coefficient \"highpassfiltercoeff\" of 0.9995 for a loop time of 2.49 ms.\nnote: more efficient filters like the kalman one are used in uav, but they are more complicated to understand, and we want a very simple diy software!\n4.2 stabilization\na double closed-loop system is needed to control attitude angles. it consists of a speed closed-loop [like the one in the accro mode], inside a position closed-loop.\nthis system compares angle command to angle feedback, and computes a new motor power to apply. angular feedback is computed using a complementary filter to merge gyroscope dans accelerometer data.\nthe pilot controls each attitude angle, and if transmitter sticks are centered, command is 0\u00b0, and uav automatically goes back to horizontal.\n5. hardware configuration\n5.1 components list\nas exemple, my hardware configuration for a 450mm quad:\ncomponent reference\nmicrocontroller board arduino nano/uno (atmega328p mcu)\nesc afro 20a-simonk firmware 500hz, bec 0.5a 1060 to 1860 us pulse width\nmotors multistar 2216-800kv 14 poles - 222w current max: 20a shaft: 3mm 2-4s\npropellers 10x4.5 sf props 2pc cw 2 pc ccw rotation (orange)\nbattery zippy flightmax 3000mah 4s\nreceiver orangerx r617xl cppm dsm2/dsmx 6 ch\nimu mpu6050 (gy-86 breakout board)\ncompass hmc5883l (gy-86 breakout board)\nbuzzer matek lost model beeper - built-in mcu\nframe diatone q450 quad 450 v3. 450 mm wide frame choosen for better stability and higher autonomy (the lower the size, the lower the stability).\n5.2 connexions\ntodo: add receiver in schematic\nfull view:\nzoomed view:\narduino pin component\npd2 receiver\npd4 esc0\npd5 esc1\npd6 esc2\npd7 esc3\npc0 potentiometer\npc4 sda mpu6050\npc5 scl mpu6050\n6. software setup\n6.1 using arduino ide\nwith minor modifications, project can be build using arduino ide:\nrename \"main.cpp\" to \"codedronediy.ino\"\ncopy all source files from \"codedronediy/src\" to \"codedronediy\"\nlaunch and compile \"codedronediy.ino\" using arduino ide\n6.2. using visual studio code ide and platformio\ninstall visual studio code\nstart vscode and click on \"extensions\" icon\ninstall platformio ide\n6.3. using linux terminal and platformio\nplatformio is an open source ecosystem for iot development.\n6.2.1. platformio installation\nsudo apt-get install python-pip\nsudo pip install --upgrade pip && sudo pip install -u platformio==3.5.2\nplatformio platform install atmelavr --with-package=framework-arduinoavr\nplatformio lib install mpu6050\npio lib install \"i2cdevlib-mpu6050\"\noptional, for code format:\nsudo apt-get install -y clang-format\n6.2.2. build project\nplatformio run\n6.2.3. flash target\nplatformio upload --upload-port/ttyacm0\n6.2.4. run unit tests\nplatformio test -e uno --verbose\n6.4. using docker and platformio\nthe development tool \"docker\" is a container platoform: it is a stand-alone, executable package of a piece of software that includes everything needed to run it: code, runtime, system tools, system libraries, settings. it isolates software from its surroundings.\ninstall docker\nmove inside docker's folder: cd docker\nbuild docker image: make image\nformat code: make format-all\nbuild project: make build-codedronediy\n7. software detailed design\n7.1 source code overview\nstatemachine folder:\nfile description\nstatemachine.h contains current state\nstates/istate.h interface for the states (mother class)\nstates/accromode.cpp/h computes stabilization for accro mode\nstates/anglemode.cpp/h computes stabilization for angle mode\nstates/disarmed.cpp/h sets motors to idle\nstates/initializing.cpp/h computes offsets\nstates/safety.cpp/h sets motors to idle\nstabilization folder:\nfile description\nhardware/inertialmeasurementunit.cpp/h read roll, pitch, yaw angles from mpu6050\nhardware/motorsspeedcontrol.cpp/h manage an esc: pwm to set\nhardware/radioreception.h receives cppm signal acquisition using int0\nstabilization.cpp/h computes and apply new command from receiver sticks and current attitude\ncontrolloop.cpp/h proportionnal, integral, derivative loop correction\ncustomlibs folder:\nfile description\ncustommath.h mathermatical functions: mean and delta max computations\ncustomtime.h to measure loop time and elapsed time\ncustomserialprint.h custom serial print to enable or disable printing\n7.2 the state machine\ndue to security reasons, the uav cannot start running with a flight mode enabled. five states are defined to enable or disable flight mode safely. these states are ruled by a statemachine.\nthe five statemachine states:\nstate description\ninitialization uav must be on the ground, horizontal, and not moving. sensors offsets are computed. then, if receiver switch is disarmed, the system changes to the next state.\ndisarmed throttle is disabled. when the receiver switch is set to a flight mode, the system changes to the corresponding state.\nanglemode/accromode throttle is enabled, flight can start. after 5 seconds of power idle, the system is set to \"safety\" state.\nsafety throttle command is disabled and power is cut. to re-arm, switch to disarmed, then choose the flight mode accromode or anglemode\n7.3. radio reception\na cppm receiver is used to fly the uav using a remote control.\ncppm (pulse position modulation) reception allows to receive all channels using only one entry pin. each rising edge correpond to the end of the previous channel impulsion, and at the beginning of the next channel impulsion. elapsed time between two rising edge correspond to the pulse width of a given channel.\nin this projet, each pulse width is measured using int0, and then stored in the correponding channel of an array.\n7.4 motors speed control\neach motor is controlled by an esc. the microcontroller drives the 4 esc.\nmotor speed is tuned by modifying the pulse width on the esc signal wire. a pulse must be send at least every 20ms.\nmax motor speed is set by a pulse of 1860ms\nmotor is stopped by a pulse of 1060ms\nall speeds between this two values are possible.\neach timer1 interrupt call the function \"setmotorsspeed\", which generate a falling edge on the previous motor and a rising edge on the current motor:\n7.5 failsafe\nfor security, you must set the failsafe to cut motors power when radio link is lost.\nto set the failsafe:\nput transmitter sticks in the configuration wanted when reception is lost\nbind the receiver with the transmitter\ntransmitter configuration used during the \u00ab bind \u00bb operation defines the \u00ab failsafe. \u00bb\n8. appendix\n8.1 the benchtest\n8.2 fpv - first person view\nmy cheap configuration:\ncomponent reference\ngooggles quanum diy fpv goggle v2 pro\ngooggles battery 1000 mah 3s\nreceiver eachine rc832 boscam fpv 5.8g 48ch wireless av receiver\nreceiver antenna dys fpv 5.8g antenna 4dbi mushroom antenna rhcp tx rx\ncamera foxeer xat600m hs1177 600tvl ccd 2.8mm ir mini fpv camera ir blocked 5-22v\ncamera antenna realacc 5.8g 5dbi 50w rhcp omnidirectional 3 leaf clover fpv antenna red\nvideo transmitter upgrade aomway mini 5.8ghz 200mw 32ch av wireless transmitter module\n10. glossary\nesc electronic speed control\npid it is a proportionnal integral derivative control loop\nimu inertial measurement unit\nmpu motion processor unit\nfpv first person view\n11. bibliography\narduino\nhttps://www.arduino.cc/en/reference/libraries.html\nhttps://www.arduino.cc/en/reference/homepage\npwm\nhttps://librepilot.atlassian.net/wiki/display/lpdoc/pwm,+pwmsync,+oneshot+output\nhttp://forum.arduino.cc/index.php?topic=46487.0\nppm\nhttp://frskytaranis.forumactif.org/t4426-tuto-pwm-cppm-ccpm-ppm-s-bus-s-port-kesako\npid\nhttp://www.fpv-passion.fr/docteur-pid/\nquadricopter\nhttps://www.mondrone.net/fabriquer-quadricoptere-la-propulsion/\ndata processing\nhttps://ericjformanteaching.wordpress.com/2013/10/08/smoothing-sensor-input/\ndata merging\nhttp://www.mouser.fr/applications/sensor_solutions_mems/\nhttp://www.pieter-jan.com/node/11\nprogramme python\nandy baker\nhttp://pythonfiddle.com/andy-baker-quadcopter/\nvibrations\nhttp://ardupilot.org/plane/docs/common-vibration-damping.html", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000595, "year": null}, {"Unnamed: 0": 2720, "autor": 680, "date": null, "content": "Autonomous Delivery Robot (Technical Report)\nThis is the first version of IvLabs' autonomous driving platform. Built using the chassis of a racing grade 1/10th RC car, it can be used in outdoor road environments. It has additional sensors and components which enable perception, localization, planning and control for autonomous driving applications.\nThis project aims to accomplish A to B navigation with obstacle avoidance within our institute (VNIT, Nagpur) campus.\nThis repo will be updated soon to include installation and usage instructions", "link": "https://github.com/IvLabs/autonomous-delivery-robot", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "outdoor", "selectorShort": "outdoor", "MarkedSent": "autonomous delivery robot (technical report)\nthis is the first version of ivlabs' autonomous driving platform. built using the chassis of a racing grade 1/10th rc car, it can be used in -----> outdoor !!!  road environments. it has additional sensors and components which enable perception, localization, planning and control for autonomous driving applications.\nthis project aims to accomplish a to b navigation with obstacle avoidance within our institute (vnit, nagpur) campus.\nthis repo will be updated soon to include installation and usage instructions", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000680, "year": null}, {"Unnamed: 0": 2782, "autor": 742, "date": null, "content": "Valden Heat Pump Controller v1.x\nThe Valden Heat Pump controller is an open source platform to precisely control heat pumps. This controller can be used for the automation of newly built Heat Pumps (HPs), as a repair controller for old systems or as control system for performing experiments on refrigeration equipment.\nSpecs\n12V 0.5A DC power supply,\n230V output,\n4 16A relays: Compressor, Hot Circulating Pump (CP) or Air Fan, Cold CP or Air Fan, Crankcase Heater,\n2 inputs: Hot and cold side refrigerant over/under pressure NC sensors,\nup to 12 temperature (T) sensors, -55..+125 \u00b0C range,\nElectronic Expansion Valve (EEV) supported, 6 pin EEV connection: 4 * coils + 2 * 12V,\nautomatically turns on/of system when heating required,\nautomatic power saving mode,\nbuilt-in protections: cold start, overheat, short-term power loss, power overload, ground loop freeze, compressor protection against liquid and other,\nLED indication,\ncontrol via remote display or local Serial (UART 5V).\nRefrigeration schemes supported\nHeat Pump (HP) with Electronic Expansion Valve (EEV),\nHP with capillary tube or TXV,\nEEV-only controller.\nInstallations supported\nIndoor: a house or technical building with an almost stable temperature,\nOutdoor: harsh climatic conditions taken into account. Outdoor HP installations tested down to a minus 32 \u00b0C.\nChangelog and history\n2018: PCB prototype, first real installation,\n2019: 2-layer PCB, through-hole components, integrated buttons and display (public access),\n2019: controller redesigned taking into account development and operating experience, 2-layer PCB, SMD,\n2019-2021: installations, development, tests, revisions, redesigns (limited access),\n06 Feb 2021: product is technically completed and ready for public access. Documentation and release stage,\n31 Aug 2021: public access granted.\nGet your own PCB copy. Assembly.\ndownload PCB Gerber file here or get your own copy there,\norder electronic components, see BOM (Bill Of Materials) appendix,\nsolder electronic components, assembly instructions here\n.\nFirmware upload\nThis process is the same as for other Arduinos:\nconnect USB-> UART converter,\nstart Arduino IDE,\ndownload and open the firmware file,\nselect board and MCU in the Tools menu (hint: we are using \"mini\" board with 328p MCU),\npress the \"Upload\" button in the interface and \"Reset\" on the Arduino.\nFor arduinos with an old bootloader you need to update it. (Tools-> Burn Bootloader).\nFor successful compilation, you must have \"SoftwareSerial\", \"OneWire\" and \"DallasTemperature\" libraries installed (see Tools -> Manage Libraries).\nFor the first time it's enough to upload firmware without any tuning. Think of it as of a commercial closed-source controller, where you cannot fine-tune internal options. And any other manual configuration do not required too, just upload firmware. You will see an error LED indication and hear a beep, since no sensors connected to your controller. Follow the next steps.\nSelf-tests\nQA tests are available to test the assembled board.\nSelf-test helps you check relays, indicators, speaker and temperature sensors.\nTo run a self-tests:\nuncomment this 3 defines in source code header,\n//#define SELFTEST_RELAYS_LEDS_SPEAKER //speaker and relays QA test, uncomment to enable\n//#define SELFTEST_EEV //EEV QA test, uncomment to enable\n//#define SELFTEST_T_SENSORS //temperature sensors QA test, uncomment to enable\nupload firmware,\nconnect 12V power supply,\ndisconnect +5V wire from USB-UART converter.\nTo check EEV connection, you can use a stepper motor. If you are testing a real EEV, it will be closed after the first \"beep\" and partially opened after the second \"beep\". If it's not, check if stepper or EEV center pin(s) connected to +12V and try to swap coil-end pins (EEV1..EEV4).\nTo check temperature sensors connectors crimp one array of sensors. Plug it to all sensor connectors one-by-one and check results in a serial console.\nAfter tests completed, comment 3 self-test defines.\nChoose your installation scheme and uncomment one of those options:\n#define SETPOINT_THI //\"warm floor\" scheme: \"hot in\" (Thi) temperature used as setpoint\n//#define SETPOINT_TS1 //\"swimming pool\" or \"water tank heater\" scheme: \"sensor 1\" (Ts1) is used as setpoint and located somewhere in a water tank\nRe-upload firmware. Your controller is ready for the first start (after wiring). Probably you'll never need to change other options.\nWiring (permanent controller installation).\nHere are no instructions for choosing the right placement for permanent installation of the controller. It depends. You're building your system, and you know much better \"where\" and \"how\".\nAssuming you have installed your controller to the permanent place, the next step is wiring.\nWiring is very simple, despite a lot of terminals.\nPhases (1st wire in electrical cables):\nconnect the \"power inlet\" wire to one of the \"phase\" terminals,\nconnect the \"Compressor\" relay output to the Compressor input,\nconnect the \"Hot CP\" relay output to the Hot Circulation Pump input (or to the fan power input of the indoor unit if you are using an air system),\nconnect the \"Cold CP\" relay output to the Cold Circulation Pump input (or to the fan power input of the outdoor unit),\nwhen using a compressor heater: connect the \"Crankcase heater\" relay output to the heater cable (highly recommended for outdoor installation and year-round use),\nconnect all the second wires of power cords to the \"neutral\" terminals on the board.\n12V Power Supply:\nconnect the second \"phase\" and one of \"neutral\" terminals to the AC input of the 12V power supply,\nconnect 12V power supply output to GND and 12V\nCrimp and plug low-voltage connectors:\ncrimp SCT013 sensor wires (the only one low-voltage device in this circuit with interchangeable wires), connect and install it on the inlet phase wire,\ncrimp RS485 to the Remote Display, using a wire of desired length (note that A is connected to A, B to B and GND to GND),\ncrimp 12V and GND secondary terminals to the remote display,\nconnect EEV to EEV terminal,\ninstall all T sensors on pipes, insulate tubes,\ncrimp T sensors arrays, you can crimp all four GND wires at every array to one GND connector pin or make 1-to-4 connection somewhere closer to sensors location (same for +5V wires),\ninsert T sensors arrays to appropriate terminals (if you do not need to control over all temperatures, disable and do not install unnecessary sensors),\ncrimp and plug pressure sensors outputs: crimp 1st wires together to 12V (right output of the terminal), 2nd cold side wire to the Pco (left), 2nd hot side wire to the Phi (middle); use the dummy if no pressure sensors used in your system.\nYou may prefer to solder the wires over using terminals and crimping connectors. But in this case, it will be difficult to disassemble the system if you want to change something. The choice is yours.\nAnd one more: remember! 230V inside! Do not turn on the phase without need.\nHave you ever received 230V with your own hands? If yes - you know. If no - do not try.\nAlso remember about animals and children during the installation at a permanent place.\nControl and usage: serial console\nThis is a first interface to Heat Pump controller you'll see after uploading firmware (Tools->Serial Monitor).\nThe console itself is simple to use, several commands are available. Type in command, press \"Send\". Help and hotkeys:\nEvery 30 sec. (HUMAN_AUTOINFO option) you'll see stats. For example, after a startup of your compressor, you'll see something like this:\nAt this example, \"hot in\" ~30 \u00b0C, compressor ~80 \u00b0C and so on. Heat Pump (HP, compressor) ON, Hot water pump ON, Cold water pump ON. Power consumption 980 watts. Abbreviations: refer to Appendix A below.\nAlso, you'll see diagnostic messages in your serial console.\nDo not connect +5V wire from USB-UART converter, if you are using a serial console.\nControl and usage: Remote Control Display\nThis is a way for the end user to control Heat Pump.\nEnd user does not want to know much about refrigerants, evaporation, discharge temperatures and so on, so this display designed as simple as it was possible. See Remote Display page for details. And yes, this display is open product too, with available Gerber, PCB and source code.\nControl and usage: Service Display\nOne day I've realized that a netbook with a serial console is a good diagnostic tool, but I want a compact tool to get maximum available information from a Heat Pumps. So, this \"Quickly Assembled Service Display\" appeared. It fits everywhere and with a good power bank it can work 2-3 days long, without any additional power source. The diagnostic display is build from scratch, no PCB and housing here (and no plans to create it), because I do not see this service display as a permanently mounted device.\nIf you want a compact and visual tool - this device is for you, so check the Service Display Page .\nStarting up the heat pump system for the first time and charging refrigerant\nThis is an easy part, but if you don't have experience it will take time.\nYou have performed a pressure test and vacuuming. It's time to charge your system.\nLet's say you don't know how to calculate the amount of refrigerant in a recently built system, so follow next steps:\ncharge a small amount (for example 300 g) of refrigerant,\nget ready for a system protective stops by Tae or Tbe temperature, this is a normal system behavior while refilling refrigerant,\npower on your heat pump,\nafter compressor startup suction temperature will be about -20 ...- 40 \u00b0C (according to the suction pressure on the pressure gauge),\nfor single-component refrigerants: slightly open the valve of the HVAC gauge manifold and start adding refrigerant through the gas phase on the cold side,\nfor multi-component refrigerants: turn over the refrigerant cylinder, VERY SLIGHTLY open the HVAC manifold valve and start adding VERY LITTLE amounts through the liquid phase,\ncontinue, until the suction temperature (according to the suction pressure on the manometer) is ~ 10 ... 12 \u00b0C lower than the temperature of the heat source (example: the temperature at the inlet of the mixture of water and antifreeze from the closed ground loop is + 8 \u00b0C, so the suction temperature should be -2 ..- 4),\nclose the manifold valve,\nat every step check the discharge pressure: it should not be above the discharge sensor temperature (Tbc),\nwait for the system to heat the target to an almost stable temperature, add little amounts of refrigerant while temperature increases (and suction decreases),\nstop if you are sure that the heating process proceeding slowly,\ntake a final look and charge when the system is stable and the heat pump stops normally (setpoint is reached), this may take 12 hours or more,\nafter the final refilling difference between the suction pressure temperature and the Tae sensor temperature should be 3 ... 6 \u00b0C.\nThis algo is good and safe both the first time and as a starting point. As you gain experience, you will get yours much easier and faster.\nAlso, use \"manual EEV mode\" during refilling process.\nKeep your eyes protected and do not freeze your fingers.\nHints\nFor more information about Heat Pumps look at Wikipedia HP page.\nIf you want to know \"how the refrigeration systems work\", read Patrick Kotzaoglanian books.\nIf you want more technical details, sophisticated schemes, \"how EEV can be driven by temperature\" diagrams, etc. refer to vendor manuals (you'll find all you need in the Alfa Laval brochures, Danfoss guides, and so on).\nFor refrigerants and oils types comparison see wiki.\nPersonal experience\nNote that the SCT013 sensor and the current monitoring scheme cannot be used for accurate measurements and accurate COP calculations. Use a watt meter for accurate power measurements.\nTemperature sensor installation at a warm floor surface is a bad idea - it's better to get \"hot in\" water temperature coming from all over the floor, as implemented in firmware.\nThe weather-dependent (both outdoor and indoor temperature dependent) system does not work fine for 30-150 m2 buildings. Such a system is too complex and works unpredictable due to random ventilation. And also due to the unpredictability of heat emitted in the house by other sources.\nI tried the scheme with a flooded evaporator in 2019 and found it terribly tricky, then refused to use it.\nDeep regeneration schemes are useful only for some refrigerants and only in certain temperature ranges. I've tried deep regeneration too. As a result, the theory coincided with practice and I also refused this idea.\nIn general, it is possible by complicating the refrigeration scheme to win somewhere 1%, somewhere 3%, but all this leads to significant time and money cost getting suddenly a small profit.\nSummary: If you want experiments - Experiment. Want reliably - make the system simple.\nAuthor\ngonzho \u0410\u0422 web.de (c) 2018-2021\nAppendix A: Abbreviations\nAbbreviations used in the documentation and firmware.\nMain sensors:\nAbbr. Full name\nTae after evaporator\nTbe before evaporator\nTci cold side \"input\"\nTco cold side \"output\"\nTbc before condenser\nTac after condenser\nThi hot side \"input\"\nTho hot side \"output\"\nTcrc crankcase (compressor itself)\nThe additional sensor used in \"swimming pool heater\" or \"water tank heater\" schemes, check SETPOINT_TS1 option:\nAbbr. Full name\nTs1 additional sensor1\nAdditional sensors, disabled and not used by default:\nAbbr. Full name\nTreg regenerator temperature\nTs2 additional sensor2\nRelays:\nAbbr. Full name\nRCRCH crankcase heater relay\nRC cold side water pump relay\nRH cold side water pump relay\nRP heat pump (compressor) relay\nOther:\nAbbr. Full name\nLSM LastStopCause\nLSC LastStartMessage\nCWP/CCP cold side water (circulating) pump\nHWP/HCP cold side water (circulating) pump\nEEVP EEV position\nHP heat pump\nAppendix B: LEDs\nLEDs allow you to make rapid diagnostics without connecting a serial console or a Service Display.\nLED description\nEEV_opening EEV is opening\nEEV_closing EEV is closing\nEEV_fast EEV mode is \"fast\" (non-precise)\n485_RX 485 transceiver is in listening state\n485_TX 485 transceiver transmits a reply\nManual mode EEV in a manual mode\nLSC: error Last stop was caused by an error. If you see this LED ON, it's a reason to connect either console or Service Display. Diagnostics required.\nLSC: protection Last stop was caused by protection. In some cases (like long powered-on periods or refilling) this can occur. Here no recommendations about diagnostic, since all systems and operation conditions are different. This LED indicates that something exceeded normal run conditions.\nOK System OK.\nERROR Something wrong: not all T sensors connected, one of the pressure sensors is not OK. Diagnostics required.\nRelays LEDs Indicates corresponding relay state\nAppendix C: Diagnostic and status messages\nLastStopCause (LSC) messages. Why the compressor has stopped working.\nMessage description\nNormal_stop Normal stop, i.e. setpoint sensor temperature > setpoint, so heat not needed.\nP.WtMax:WATTS Protective stop. Overcurrent, double-check your system, then MAX_WATTS and POWERON_HIGHTIME options.\nP.W.wattMIN Protective stop. Abnormally low power consumption (<max watts/5). Check your system, see MAX_WATTS option.\nP.W.TcrcMIN Protective stop. Abnormally low \"Compressor\" temperature. Check your system, see T_WORKINGOK_CRANKCASE_MIN option.\nP.Tho Protective stop. \"Hot out\" temperature is too high. Check your system, see T_HOT_MAX option.\nP.Thi Protective stop. \"Hot in\" temperature is too high. Check system, see T_HOT_MAX option.\nP.Tcrc Protective stop. \"Compressor\" temperature is too high. Overheat protection. This is an ordinary situation during long runs. See T_CRANKCASE_MAX option and compressor manual if you want to tune it (~115 \u00b0C for wide-available compressors).\nP.Tae Protective stop. \"After evaporator\" temperature too low. Preventing cold loop from freezing and protecting suction line from liquid. See T_COLDREF_MIN option.\nP.Tbe Protective stop. \"Before evaporator\" temperature too low. Preventing cold loop from freezing. See T_BEFORE_EVAP_WORK_MIN option.\nP.Tbc Protective stop. \"Before condenser\" temperature is too high. Overheat protection. This is an ordinary situation during long runs. See T_BEFORE_CONDENSER_MAX option.\nP.Tci Protective stop. \"Cold in\" temperature is too low. Preventing cold loop from freezing. See T_COLD_MIN option.\nP.Tco Protective stop. \"Cold out\" temperature is too low. Preventing cold loop from freezing. See T_COLD_MIN option.\nE.Tci, E.Tco, E.Tbe, E.Tae, E.Ts1, E.Ts2, E.Tcrc, E.Treg, E.Tac, E.Tbc, E.Tho, E.Thi Sensor lost, check wiring. Refer to \"T sensor abbreviations\".\nE.PresCold Cold side pressure too low, check refrigerant charge and pressure sensors.\nE.PresHot Hot side pressure too high, check refrigerant charge and pressure sensors.\nLastStartMessage (LSM) messages. What condition the system expects. Some informational messages.\nMessage description\nStCntd:seconds Startup countdown, short-term power loss protection.\nHP_Started Normal start.\n#Thi>Setp. \"Hot in\" temperature > setpoint, so no reason to start.\n#Ts1>Setp. \"Ts1\" temperature > setpoint, so no reason to start. See SETPOINT_TS1 option to switch between Thi and Ts1 as setpoint sensor.\nHWP_OFF Setpoint sensor temperature > setpoint, so after some time (HOTCIRCLE_STOP_AFTER option) hot side pump powered off and gone to power saving mode.\nHWP_ON_by_ev Hot side pump started after power saving. See HOTCIRCLE_START_EVERY option.\n#HotPrp:seconds Hot side pump is on, waiting for T stabilization. Countdown, seconds. See HOTCIRCLE_CHECK_PREPARE option.\n#HotSlp:seconds Hot side pump in power save mode (sleeping). Waiting for next startup. Countdown, seconds. See HOTCIRCLE_START_EVERY option.\n#HPSlp:seconds Compressor: pause between starts. Countdown, seconds. MINCYCLE_POWEROFF option.\n#CPpStart Cold side pump started.\n#CPp:seconds Cold side pumping. Preparing the system to compressor start. Countdown, seconds. COLDCIRCLE_PREPARE option.\n#Tho>Max \"Hot out\" temperature is too high. See T_HOT_MAX option.\n#Thi>Max \"Hot in\" temperature is too high. See T_HOT_MAX option.\n#CaseCold Compressor crankcase temperature is too low. The system can't start. This situation occurs on outdoor installations during a winter season and if AC power lost for a few hours. Wait, while the crankcase heater stabilizing your compressor temperature. See T_CRANKCASE_MIN option.\n#CaseHot Compressor is still overheated, waiting. See T_CRANKCASE_MAX option.\n#Tae<RefMin \"After evaporator\" temperature too low. Preventing cold loop from freezing and protecting suction line from liquid. See T_COLDREF_MIN option.\n#Tbe<RefMin \"Before evaporator\" temperature too low. Preventing cold loop from freezing. See T_COLDREF_MIN option.\n#Tbc>Max \"Before condenser\" temperature is too high. Overheat protection. See T_BEFORE_CONDENSER_MAX option.\n#Tci<ColdMin \"Cold in\" temperature is too low. Preventing cold loop from freezing. See T_COLD_MIN option.\n#Tco<ColdMin \"Cold out\" temperature is too low. Preventing cold loop from freezing. See T_COLD_MIN option.\nCWP_ON_CoMin Cold side pump started because cold side temperature is too low, so preventing cold loop freeze, see T_COLD_MIN option.\nAdditional messages\nMessage description\nOK:Pr.Cold Cold side pressure restored.\nOK:Pr.Hot Hot side pressure restored.\nOK:E.T.Sens. Temperature sensors restored.\nHWP_ON Hot side pump powered on.\nErr:errorcode Error code: 1 = temperature sensor error, 2 = Hot side pressure too high, 3 = cold side pressure too low.\nAppendix D: secret appendix\nAre you still reading? It seems you are interested in Heat Pumps, so this appendix is for you.\nAbout sensors: avoid using cheap \"waterproof epoxy-covered\" sensors. \"Waterproof\" lasts for a short time.\nBuy DS18B20s chips. No matter what sensors are buying: cheap or at a high price. I've never seen \"bad\" DSes. Solder sensors to the wires and cover with two layers of 2-component epoxy resin as pictured below. It will work for years. White/orange - GND, white/blue - signal, orange - +5V.\nFor sensors at your compressor and discharge (+100 \u00b0C and higher) use heat-resistant sleeves at every wire.\nTo get precise temperature readings protect sensors against ambient air temperature influence with additional thermal insulation. Temperature readings from most of the sensors are interesting, but +/- few degrees does not matter. So, cover most of the sensors with thermal insulation as you wish.\nBut two sensors \"Before evaporator\" and \"After evaporator\" are critical to EEV and needs an extra attention. The temperature of these sensors must be as close to the temperature of the copper tube as it possible. So, install Tae and Tbe sensors as pictured below. You can use thermal paste, but it is no significant difference with much more available silicone. Tape not shown at photos below, for clarity, but should be used with every insulation layer.\nAbout water(glycol)<->refrigerant heat exchangers. You can use plate heat exchangers. Pros: the best efficiency. Cons: costs money. Potential oil return difficulties.\nAnd oxygen brazing with (20%+)silver+copper solder required here:\nYou can build your own \"tube-in-tube\" heat exchangers. It's not hard. Cheaper. The heat exchange efficiency is worse. No oil return problems. Very easy soldering. Heat exchanger math: 0.7..1.5 m2 of a copper tube per every 3kW of heat transfer.\nAdditionally, you can think \"I'll take an old AC parts... Housing... Slightly change... An hour or two, day of work maximum and I'll get a refrigerant<->water heat exchanger in for a penny!\". This idea is obvious. It was the first thing I've tried. You can try this, but to achieve \"not very bad\" performance it'll take more than a one day and much more than a few $$, even if you have unlimited access to older ACs.\nOk, I think that's enough for this appendix, this is a controller page, and not how-to-build-refrigeration-systems page.\nOverall, your system with sensor locations will look like at a scheme below. Refrigerators (heat pumps) are simple devices.\nYour system works (or sleeps) depending on Thi temperature. For the end user it looks like setting up comfortable temperature of the warm floor via Remote Display.\nAppendix E: Firmware options and fine-tuning\nQA tests, uncomment to enable\n//#define SELFTEST_RELAYS_LEDS_SPEAKER //speaker and relays QA test, uncomment to enable\n//#define SELFTEST_EEV //EEV QA test, uncomment to enable\n//#define SELFTEST_T_SENSORS //temperature sensors QA test, uncomment to enable\nCommunication protocol with an external world. Choose one\n//#define RS485_JSON 1 //JSON, external systems integration\n//#define RS485_HUMAN 2 //RS485 is used in the same way as the local console, warning: Use only if 2 devices (server and this controller) connected to the same RS485 line\n#define RS485_MODBUS 3 //default, MODBUS via RS485, connection to the display (both sensor or 1602, see https://GitHub.com/OpenHP/Display/) or connection to any other MODBUS application or device\nSystem type, comment both if HP with EEV\n//#define EEV_ONLY //Valden controller as EEV controller: NO target T sensor. No relays. Oly EEV. Sensors required: Tae, Tbe, current sensor. Additional T sensors can be used but not required.\n//#define NO_EEV //capillary tube or TXV, EEV not used\nSensor used to check setpoint, uncomment one of those options\n#define SETPOINT_THI //\"warm floor\" scheme: \"hot in\" (Thi) temperature used as setpoint\n//#define SETPOINT_TS1 //\"swimming pool\" or \"water tank heater\" scheme: \"sensor 1\" (Ts1) is used as setpoint and located somewhere in a water tank\nSome more options\n#define HUMAN_AUTOINFO30000//print stats to console, every milliseconds\n#define WATCHDOG//disable for older bootloaders\nNext sections: advanced options\nTemperature sensors used in a system, comment to disable\n#define T_cold_in;//cold side (heat source) inlet sensor\n#define T_cold_out;//cold side outlet sensor\n#define T_before_evaporator;//\"before\" and \"after evaporator\" sensors required to control EEV, both \"EEV_ONLY\" and \"full\" schemes\n#define T_after_evaporator;//\"before\" and \"after evaporator\" sensors required to control EEV, both \"EEV_ONLY\" and \"full\" schemes\n#ifdef SETPOINT_TS1\n#define T_sensor_1;//T values from the additional sensor S1 used as a \"setpoint\" in \"pool\" or \"water tank heater\" schemes\n#endif\n//#define T_sensor_2;//additional sensor, any source; for example, outdoor temperature, in-case temperature, and so on\n#define T_crc;//if defined, enables the crankcase T sensor and crankcase heater on the relay \"Crankcase heater\"\n//#define T_regenerator;//an additional sensor, the regenerator temperature sensor (inlet or outlet or housing); used only to obtain a temperature data if necessary\n#define T_afrer_condenser;//after condenser (and before valve)\n#define T_before_condenser;//before condenser (discharge)\n#define T_hot_out;//hot side outlet\n//In full scheme Hot IN required! Optional in \"EEV_ONLY\" scheme (see \"EEV_ONLY\" option),\n#define T_hot_in;//hot side inlet\nTemperature limits\n#define MAGIC0x66;//change this value if you want to rewrite the T setpoint in EEPROM\n#defineT_SETPOINT26.0;//This is a predefined target temperature value (start temperature). EEPROM-saved. Ways to change this value: 1. Console command 2. Change the \"setpoint\" on a display 3. Change value here AND change \"magic number\" 4. JSON command\n#define T_SETPOINT_MAX48.0;//maximum \"setpoint\" temperature that an ordinary user can set\n#define T_SETPOINT_MIN10.0;//min. \"setpoint\" temperature that an ordinary user can set, lower values not recommended until antifreeze fluids at hot side used.\n#define T_CRANKCASE_MIN8.0;//compressor (crankcase) min. temperature, HP will not start if T lower\n#define T_CRANKCASE_MAX110.0;//compressor (crankcase) max. temperature, overheating protection, HP will stop if T higher\n#define T_CRANKCASE_HEAT_THRESHOLD 16.0;//crankcase heater threshold, the compressor heater will be powered on if T lower\n#define T_WORKINGOK_CRANKCASE_MIN 25.0;//compressor temperature: additional check. HP will stop if T is lower than this value after 5 minutes of work. Do not set the value too high to ensure normal operation after long pauses.\n#define T_BEFORE_CONDENSER_MAX108.0;//discharge MAX, system stops if discharge higher\n#define T_COLDREF_MIN -14.0;//suction min., HP stops if T lower, cold side (glycol) loop freeze protection and compressor protection against liquid\n#define T_BEFORE_EVAP_WORK_MIN -25.5;//!!!before evaporator (after valve) min. T; can be very low for a few minutes after a startup, ex: capillary tube in some conditions; and for all systems: after long shut-off, lack of refrigerant, 1st starts, and many others\n#define T_COLD_MIN -15.5;//cold side (glycol) loop freeze protection: HP stops if inlet or outlet temperature lower\n#define T_HOT_MAX 50.0;//hot loop: HP stops if hot side inlet or outlet temperature higher than this threshold\nWatts, cycles times (milliseconds)\n#define MAX_WATTS1000.0 + 70.0 + 80.0//power limit, watt, HP stops if exceeded, example: compressor: ~1000 + hot CP 70 + cold CP 80\n#define POWERON_PAUSE 300000 //after power on: wait 5 minutes before starting HP (power faults protection)\n#define MINCYCLE_POWEROFF 600000 //after a normal compressor stop: 10 minutes pause (max 99999 seconds)\n#define MINCYCLE_POWERON 3600000 //after compressor start: minimum compressor operation time, i.e. work time is not less than this value (or more, depending on the setpoint temperature) 60 minutes = 3.6 KK 120mins = 5.4 kK.\n#define POWERON_HIGHTIME7000//after compressor start: defines time when power consumption can be 3 times greater than normal, 7 sec. by default\n#define COLDCIRCLE_PREPARE90000//before compressor start:power on cold CP and wait 90 sec.; if false start: CP will off twice this time; and (hotcircle_stop_after - this_value) must be > hotcircle_check_prepare or HP will go sleep cycle instead of start\n#define DEFFERED_STOP_HOTCIRCLE1200000//after compressor stop:wait 20 minutes, if no need to start compressor: stop hot WP; value must be > 0\n#define HOTCIRCLE_START_EVERY2400000//while pauses:pump on \"hot side\" starts every 40 minutes (by default) (max 9999 seconds) to circulate water and get exact temperature reading, option used if \"warm floor\" installation (Thi as setpoint)...\n#define HOTCIRCLE_CHECK_PREPARE150000//while pauses:...and wait for temperature stabilization 2.5 minutes (by default), after that do setpoint checks...\n#define HOTCIRCLE_STOP_AFTER(HOTCIRCLE_CHECK_PREPARE + COLDCIRCLE_PREPARE + 30000)//...and then stop after few minutes of circulating, if temperature is high and no need to start compressor; value must be check_prepare + coldcircle_prepare + 30 seconds (or more)\nEEV options.\nIf you are using a capillary tube or TXV: simply skip next section.\nDepending on how many milliseconds allocated per step, the speed of automatic tuning will change.\nRemember that your refrigeration system reaction on every step is not immediate. The system reacts after a few minutes, sometimes after tens of minutes.\n#define EEV_MAXPULSES250//max steps, 250 is tested for sanhua 1.3\n//steps tuning: milliseconds per fast and slow (precise) steps\n#define EEV_PULSE_FCLOSE_MILLIS20//fast closing, closing on danger(milliseconds per step)\n#define EEV_PULSE_CLOSE_MILLIS60000//accurate closing while the compressor works (milliseconds per step)\n#define EEV_PULSE_WOPEN_MILLIS20//standby (waiting) pos. set(milliseconds per step)\n#define EEV_PULSE_FOPEN_MILLIS1400//fast opening, fast search (milliseconds per step)\n#define EEV_PULSE_OPEN_MILLIS70000//accurate opening while the compressor works(milliseconds per step)\n#define EEV_STOP_HOLD500//0.1..1sec for Sanhuahold time(milliseconds per step)\n#define EEV_CLOSEEVERY86400000//86400000: EEV full close (zero calibration) every 24 hours, executed while HP is NOT working(milliseconds per cycle)\n//positions\n#define EEV_CLOSE_ADD_PULSES8//read below, additional steps after zero position while full closing\n#define EEV_OPEN_AFTER_CLOSE45//0 - set the zero position, then add EEV_CLOSE_ADD_PULSES (zero insurance, read EEV guides for this value) and stop, EEV will be in zero position.\n//N - set the zero position, then add EEV_CLOSE_ADD_PULSES, than open EEV on EEV_OPEN_AFTER_CLOSE pulses\n//i.e. it's a \"waiting position\" while HP isn't working, value must be <= MINWORKPOS\n#define EEV_MINWORKPOS50//position will be not less during normal work, open EEV to this position after compressor start\n//temperatures\n#define EEV_PRECISE_START7.0//precise tuning threshold: make slower pulses if (real_diff-target_diff) less than this value. Used for fine auto-tuning\n#define EEV_EMERG_DIFF1.7//liquid at suction threshold:if dangerous condition occurred, real_diff =< (target_diff - EEV_EMERG_DIFF) then EEV will be closed to min. work position //Ex: EEV_EMERG_DIFF = 2.0, target diff 5.0, if real_diff =< (5.0 - 2.0) then EEV will be closed to EEV_MINWORKPOS\n#define EEV_HYSTERESIS0.5//hysteresis, to stop fine-tuning:must be less than EEV_PRECISE_START, ex: target difference = 4.0, hysteresis = 0.3, no EEV pulses will be done while real difference in range 4.0..4.3\n#define EEV_TARGET_TEMP_DIFF3.6//target difference between Before Evaporator and After Evaporator, the head of the whole algorithm\n//additional options\n#define EEV_REOPENLAST1//1 = reopen to last position on compressor start, useful for ordinary schemes with everyday working cycles, 0 = not\n#define EEV_REOPENMINTIME40000//after system start: min. delay between \"min. work pos.\" (must be > 0 in this case and > waiting position) set and reopening start\n//#define EEV_MANUAL//comment to disable, manual set of EEV position via a console; warning: this option will stop all EEV auto-activities, including zero position find procedure; so this option not recommended: switch auto/manual mode from a console\n//do not use next option if you're not sure what are you doing\n//#define EEV_DEBUG//debug, useful during system fine-tuning, works both with local serial and RS485_HUMAN\nCommunication addresses\nconst char devID = 0x45;//used only if JSON communication, does not matter for MODBUS and Valden display https://github.com/OpenHP/Display/\nconst char hostID = 0x30;//used only if JSON communication, not used for MODBUS\nLast option\n#define MAX_SEQUENTIAL_ERRORS 15 //max cycles to wait auto-clean error, ex: T sensor appears, stop compressor after counter exceeded (millis_cycle * MAX_SEQUENTIAL_ERRORS)\nAppendix D: bill of materials\nPart Quantity\n1206 Resistors:\n10 1\n100 1\n120 1\n1K 7\n10K 6\n100K 2\n22 1\n2.2K 4\n470 10\n1206 Caps:\n0.01uF 2\n0.1uF 4\n1uF 8\n10uF 5\n1206 LEDs:\nRed (error LEDs) 2\nGreen (OK LED) 1\nYellow 11\nSOP(SOIC) ICs:\nADM2587EBRWZ (SOIC-20) 1\n74HC4067D (SOIC-24) 1\n74HC595D (SOP-16) 3\nULN2003A_(SOP-16) 2\n817S (SOP-4) 2\nXH2.54 Headers + Plugs:\nXH2.54-6P header + 6P plug 4\nXH2.54-3P header + 3P plugs 2\nXH2.54-2P header + 2P Plugs 1\nXH2.54 Crimp terminal 40\nPower terminals:\n6.35 Blade terminal (726386-2 or same) 16\n6.35 Quick disconnect crimp terminal insulated 16\nOthers:\n10nF HV-9.0x3.0 (blue disc 2kV HV cap) 1\n22uf_16v D5.0xF2.0 (electrolytic cap) 1\nResistor Network*4 DIP-1X5P-2.54 (3..5K) 3\nMMBT2222A (SOT-23-3) 1\nLM7805 (TO-220) 1\nSMIH-12VDC-SL-C 4\nBUZZER-R9.0-2P-4.0 1\nARDUINO PRO MINI 1\nPower supply, 12v1.25A 70x30x40 (or any 0.5A+) 1\nDS18B20 12\nUSB<->UART (to upload firmware) 1\nCurrent sensor SCT-013-000 1\nLicense\n\u00a9 2018-2021 D.A.A. All rights reserved; gonzho AT web.de; https://github.com/openhp/HeatPumpController/.\nText, media and other materials licensed under CC-BY-SA License v4.0.\nAttribution: You must clearly attribute Valden Heat Pump Controller (https://github.com/openhp/HeatPumpController/) original work in any derivative works.\nShare and Share Alike: If you make modifications or additions to the content you re-use, you must license them under the CC-BY-SA License v4.0 or later.\nIndicate changes: If you make modifications or additions, you must indicate in a reasonable fashion that the original work has been modified.\nYou are free: to share and adapt the material for any purpose, even commercially, as long as you follow the license terms.\nThe firmware source code licensed under GPLv3.\nThis product is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\nFor third-party libraries licenses used in this product please refer to those libraries.\nAuthor\ngonzho \u0410\u0422 web.de (c) 2018-2021", "link": "https://github.com/openhp/HeatPumpController", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "outdoor", "selectorShort": "outdoor", "MarkedSent": "valden heat pump controller v1.x\nthe valden heat pump controller is an open source platform to precisely control heat pumps. this controller can be used for the automation of newly built heat pumps (hps), as a repair controller for old systems or as control system for performing experiments on refrigeration equipment.\nspecs\n12v 0.5a dc power supply,\n230v output,\n4 16a relays: compressor, hot circulating pump (cp) or air fan, cold cp or air fan, crankcase heater,\n2 inputs: hot and cold side refrigerant over/under pressure nc sensors,\nup to 12 temperature (t) sensors, -55..+125 \u00b0c range,\nelectronic expansion valve (eev) supported, 6 pin eev connection: 4 * coils + 2 * 12v,\nautomatically turns on/of system when heating required,\nautomatic power saving mode,\nbuilt-in protections: cold start, overheat, short-term power loss, power overload, ground loop freeze, compressor protection against liquid and other,\nled indication,\ncontrol via remote display or local serial (uart 5v).\nrefrigeration schemes supported\nheat pump (hp) with electronic expansion valve (eev),\nhp with capillary tube or txv,\neev-only controller.\ninstallations supported\nindoor: a house or technical building with an almost stable temperature,\n-----> outdoor !!! : harsh climatic conditions taken into account. outdoor hp installations tested down to a minus 32 \u00b0c.\nchangelog and history\n2018: pcb prototype, first real installation,\n2019: 2-layer pcb, through-hole components, integrated buttons and display (public access),\n2019: controller redesigned taking into account development and operating experience, 2-layer pcb, smd,\n2019-2021: installations, development, tests, revisions, redesigns (limited access),\n06 feb 2021: product is technically completed and ready for public access. documentation and release stage,\n31 aug 2021: public access granted.\nget your own pcb copy. assembly.\ndownload pcb gerber file here or get your own copy there,\norder electronic components, see bom (bill of materials) appendix,\nsolder electronic components, assembly instructions here\n.\nfirmware upload\nthis process is the same as for other arduinos:\nconnect usb-> uart converter,\nstart arduino ide,\ndownload and open the firmware file,\nselect board and mcu in the tools menu (hint: we are using \"mini\" board with 328p mcu),\npress the \"upload\" button in the interface and \"reset\" on the arduino.\nfor arduinos with an old bootloader you need to update it. (tools-> burn bootloader).\nfor successful compilation, you must have \"softwareserial\", \"onewire\" and \"dallastemperature\" libraries installed (see tools -> manage libraries).\nfor the first time it's enough to upload firmware without any tuning. think of it as of a commercial closed-source controller, where you cannot fine-tune internal options. and any other manual configuration do not required too, just upload firmware. you will see an error led indication and hear a beep, since no sensors connected to your controller. follow the next steps.\nself-tests\nqa tests are available to test the assembled board.\nself-test helps you check relays, indicators, speaker and temperature sensors.\nto run a self-tests:\nuncomment this 3 defines in source code header,\n//#define selftest_relays_leds_speaker //speaker and relays qa test, uncomment to enable\n//#define selftest_eev //eev qa test, uncomment to enable\n//#define selftest_t_sensors //temperature sensors qa test, uncomment to enable\nupload firmware,\nconnect 12v power supply,\ndisconnect +5v wire from usb-uart converter.\nto check eev connection, you can use a stepper motor. if you are testing a real eev, it will be closed after the first \"beep\" and partially opened after the second \"beep\". if it's not, check if stepper or eev center pin(s) connected to +12v and try to swap coil-end pins (eev1..eev4).\nto check temperature sensors connectors crimp one array of sensors. plug it to all sensor connectors one-by-one and check results in a serial console.\nafter tests completed, comment 3 self-test defines.\nchoose your installation scheme and uncomment one of those options:\n#define setpoint_thi //\"warm floor\" scheme: \"hot in\" (thi) temperature used as setpoint\n//#define setpoint_ts1 //\"swimming pool\" or \"water tank heater\" scheme: \"sensor 1\" (ts1) is used as setpoint and located somewhere in a water tank\nre-upload firmware. your controller is ready for the first start (after wiring). probably you'll never need to change other options.\nwiring (permanent controller installation).\nhere are no instructions for choosing the right placement for permanent installation of the controller. it depends. you're building your system, and you know much better \"where\" and \"how\".\nassuming you have installed your controller to the permanent place, the next step is wiring.\nwiring is very simple, despite a lot of terminals.\nphases (1st wire in electrical cables):\nconnect the \"power inlet\" wire to one of the \"phase\" terminals,\nconnect the \"compressor\" relay output to the compressor input,\nconnect the \"hot cp\" relay output to the hot circulation pump input (or to the fan power input of the indoor unit if you are using an air system),\nconnect the \"cold cp\" relay output to the cold circulation pump input (or to the fan power input of the outdoor unit),\nwhen using a compressor heater: connect the \"crankcase heater\" relay output to the heater cable (highly recommended for outdoor installation and year-round use),\nconnect all the second wires of power cords to the \"neutral\" terminals on the board.\n12v power supply:\nconnect the second \"phase\" and one of \"neutral\" terminals to the ac input of the 12v power supply,\nconnect 12v power supply output to gnd and 12v\ncrimp and plug low-voltage connectors:\ncrimp sct013 sensor wires (the only one low-voltage device in this circuit with interchangeable wires), connect and install it on the inlet phase wire,\ncrimp rs485 to the remote display, using a wire of desired length (note that a is connected to a, b to b and gnd to gnd),\ncrimp 12v and gnd secondary terminals to the remote display,\nconnect eev to eev terminal,\ninstall all t sensors on pipes, insulate tubes,\ncrimp t sensors arrays, you can crimp all four gnd wires at every array to one gnd connector pin or make 1-to-4 connection somewhere closer to sensors location (same for +5v wires),\ninsert t sensors arrays to appropriate terminals (if you do not need to control over all temperatures, disable and do not install unnecessary sensors),\ncrimp and plug pressure sensors outputs: crimp 1st wires together to 12v (right output of the terminal), 2nd cold side wire to the pco (left), 2nd hot side wire to the phi (middle); use the dummy if no pressure sensors used in your system.\nyou may prefer to solder the wires over using terminals and crimping connectors. but in this case, it will be difficult to disassemble the system if you want to change something. the choice is yours.\nand one more: remember! 230v inside! do not turn on the phase without need.\nhave you ever received 230v with your own hands? if yes - you know. if no - do not try.\nalso remember about animals and children during the installation at a permanent place.\ncontrol and usage: serial console\nthis is a first interface to heat pump controller you'll see after uploading firmware (tools->serial monitor).\nthe console itself is simple to use, several commands are available. type in command, press \"send\". help and hotkeys:\nevery 30 sec. (human_autoinfo option) you'll see stats. for example, after a startup of your compressor, you'll see something like this:\nat this example, \"hot in\" ~30 \u00b0c, compressor ~80 \u00b0c and so on. heat pump (hp, compressor) on, hot water pump on, cold water pump on. power consumption 980 watts. abbreviations: refer to appendix a below.\nalso, you'll see diagnostic messages in your serial console.\ndo not connect +5v wire from usb-uart converter, if you are using a serial console.\ncontrol and usage: remote control display\nthis is a way for the end user to control heat pump.\nend user does not want to know much about refrigerants, evaporation, discharge temperatures and so on, so this display designed as simple as it was possible. see remote display page for details. and yes, this display is open product too, with available gerber, pcb and source code.\ncontrol and usage: service display\none day i've realized that a netbook with a serial console is a good diagnostic tool, but i want a compact tool to get maximum available information from a heat pumps. so, this \"quickly assembled service display\" appeared. it fits everywhere and with a good power bank it can work 2-3 days long, without any additional power source. the diagnostic display is build from scratch, no pcb and housing here (and no plans to create it), because i do not see this service display as a permanently mounted device.\nif you want a compact and visual tool - this device is for you, so check the service display page .\nstarting up the heat pump system for the first time and charging refrigerant\nthis is an easy part, but if you don't have experience it will take time.\nyou have performed a pressure test and vacuuming. it's time to charge your system.\nlet's say you don't know how to calculate the amount of refrigerant in a recently built system, so follow next steps:\ncharge a small amount (for example 300 g) of refrigerant,\nget ready for a system protective stops by tae or tbe temperature, this is a normal system behavior while refilling refrigerant,\npower on your heat pump,\nafter compressor startup suction temperature will be about -20 ...- 40 \u00b0c (according to the suction pressure on the pressure gauge),\nfor single-component refrigerants: slightly open the valve of the hvac gauge manifold and start adding refrigerant through the gas phase on the cold side,\nfor multi-component refrigerants: turn over the refrigerant cylinder, very slightly open the hvac manifold valve and start adding very little amounts through the liquid phase,\ncontinue, until the suction temperature (according to the suction pressure on the manometer) is ~ 10 ... 12 \u00b0c lower than the temperature of the heat source (example: the temperature at the inlet of the mixture of water and antifreeze from the closed ground loop is + 8 \u00b0c, so the suction temperature should be -2 ..- 4),\nclose the manifold valve,\nat every step check the discharge pressure: it should not be above the discharge sensor temperature (tbc),\nwait for the system to heat the target to an almost stable temperature, add little amounts of refrigerant while temperature increases (and suction decreases),\nstop if you are sure that the heating process proceeding slowly,\ntake a final look and charge when the system is stable and the heat pump stops normally (setpoint is reached), this may take 12 hours or more,\nafter the final refilling difference between the suction pressure temperature and the tae sensor temperature should be 3 ... 6 \u00b0c.\nthis algo is good and safe both the first time and as a starting point. as you gain experience, you will get yours much easier and faster.\nalso, use \"manual eev mode\" during refilling process.\nkeep your eyes protected and do not freeze your fingers.\nhints\nfor more information about heat pumps look at wikipedia hp page.\nif you want to know \"how the refrigeration systems work\", read patrick kotzaoglanian books.\nif you want more technical details, sophisticated schemes, \"how eev can be driven by temperature\" diagrams, etc. refer to vendor manuals (you'll find all you need in the alfa laval brochures, danfoss guides, and so on).\nfor refrigerants and oils types comparison see wiki.\npersonal experience\nnote that the sct013 sensor and the current monitoring scheme cannot be used for accurate measurements and accurate cop calculations. use a watt meter for accurate power measurements.\ntemperature sensor installation at a warm floor surface is a bad idea - it's better to get \"hot in\" water temperature coming from all over the floor, as implemented in firmware.\nthe weather-dependent (both outdoor and indoor temperature dependent) system does not work fine for 30-150 m2 buildings. such a system is too complex and works unpredictable due to random ventilation. and also due to the unpredictability of heat emitted in the house by other sources.\ni tried the scheme with a flooded evaporator in 2019 and found it terribly tricky, then refused to use it.\ndeep regeneration schemes are useful only for some refrigerants and only in certain temperature ranges. i've tried deep regeneration too. as a result, the theory coincided with practice and i also refused this idea.\nin general, it is possible by complicating the refrigeration scheme to win somewhere 1%, somewhere 3%, but all this leads to significant time and money cost getting suddenly a small profit.\nsummary: if you want experiments - experiment. want reliably - make the system simple.\nauthor\ngonzho \u0430\u0442 web.de (c) 2018-2021\nappendix a: abbreviations\nabbreviations used in the documentation and firmware.\nmain sensors:\nabbr. full name\ntae after evaporator\ntbe before evaporator\ntci cold side \"input\"\ntco cold side \"output\"\ntbc before condenser\ntac after condenser\nthi hot side \"input\"\ntho hot side \"output\"\ntcrc crankcase (compressor itself)\nthe additional sensor used in \"swimming pool heater\" or \"water tank heater\" schemes, check setpoint_ts1 option:\nabbr. full name\nts1 additional sensor1\nadditional sensors, disabled and not used by default:\nabbr. full name\ntreg regenerator temperature\nts2 additional sensor2\nrelays:\nabbr. full name\nrcrch crankcase heater relay\nrc cold side water pump relay\nrh cold side water pump relay\nrp heat pump (compressor) relay\nother:\nabbr. full name\nlsm laststopcause\nlsc laststartmessage\ncwp/ccp cold side water (circulating) pump\nhwp/hcp cold side water (circulating) pump\neevp eev position\nhp heat pump\nappendix b: leds\nleds allow you to make rapid diagnostics without connecting a serial console or a service display.\nled description\neev_opening eev is opening\neev_closing eev is closing\neev_fast eev mode is \"fast\" (non-precise)\n485_rx 485 transceiver is in listening state\n485_tx 485 transceiver transmits a reply\nmanual mode eev in a manual mode\nlsc: error last stop was caused by an error. if you see this led on, it's a reason to connect either console or service display. diagnostics required.\nlsc: protection last stop was caused by protection. in some cases (like long powered-on periods or refilling) this can occur. here no recommendations about diagnostic, since all systems and operation conditions are different. this led indicates that something exceeded normal run conditions.\nok system ok.\nerror something wrong: not all t sensors connected, one of the pressure sensors is not ok. diagnostics required.\nrelays leds indicates corresponding relay state\nappendix c: diagnostic and status messages\nlaststopcause (lsc) messages. why the compressor has stopped working.\nmessage description\nnormal_stop normal stop, i.e. setpoint sensor temperature > setpoint, so heat not needed.\np.wtmax:watts protective stop. overcurrent, double-check your system, then max_watts and poweron_hightime options.\np.w.wattmin protective stop. abnormally low power consumption (<max watts/5). check your system, see max_watts option.\np.w.tcrcmin protective stop. abnormally low \"compressor\" temperature. check your system, see t_workingok_crankcase_min option.\np.tho protective stop. \"hot out\" temperature is too high. check your system, see t_hot_max option.\np.thi protective stop. \"hot in\" temperature is too high. check system, see t_hot_max option.\np.tcrc protective stop. \"compressor\" temperature is too high. overheat protection. this is an ordinary situation during long runs. see t_crankcase_max option and compressor manual if you want to tune it (~115 \u00b0c for wide-available compressors).\np.tae protective stop. \"after evaporator\" temperature too low. preventing cold loop from freezing and protecting suction line from liquid. see t_coldref_min option.\np.tbe protective stop. \"before evaporator\" temperature too low. preventing cold loop from freezing. see t_before_evap_work_min option.\np.tbc protective stop. \"before condenser\" temperature is too high. overheat protection. this is an ordinary situation during long runs. see t_before_condenser_max option.\np.tci protective stop. \"cold in\" temperature is too low. preventing cold loop from freezing. see t_cold_min option.\np.tco protective stop. \"cold out\" temperature is too low. preventing cold loop from freezing. see t_cold_min option.\ne.tci, e.tco, e.tbe, e.tae, e.ts1, e.ts2, e.tcrc, e.treg, e.tac, e.tbc, e.tho, e.thi sensor lost, check wiring. refer to \"t sensor abbreviations\".\ne.prescold cold side pressure too low, check refrigerant charge and pressure sensors.\ne.preshot hot side pressure too high, check refrigerant charge and pressure sensors.\nlaststartmessage (lsm) messages. what condition the system expects. some informational messages.\nmessage description\nstcntd:seconds startup countdown, short-term power loss protection.\nhp_started normal start.\n#thi>setp. \"hot in\" temperature > setpoint, so no reason to start.\n#ts1>setp. \"ts1\" temperature > setpoint, so no reason to start. see setpoint_ts1 option to switch between thi and ts1 as setpoint sensor.\nhwp_off setpoint sensor temperature > setpoint, so after some time (hotcircle_stop_after option) hot side pump powered off and gone to power saving mode.\nhwp_on_by_ev hot side pump started after power saving. see hotcircle_start_every option.\n#hotprp:seconds hot side pump is on, waiting for t stabilization. countdown, seconds. see hotcircle_check_prepare option.\n#hotslp:seconds hot side pump in power save mode (sleeping). waiting for next startup. countdown, seconds. see hotcircle_start_every option.\n#hpslp:seconds compressor: pause between starts. countdown, seconds. mincycle_poweroff option.\n#cppstart cold side pump started.\n#cpp:seconds cold side pumping. preparing the system to compressor start. countdown, seconds. coldcircle_prepare option.\n#tho>max \"hot out\" temperature is too high. see t_hot_max option.\n#thi>max \"hot in\" temperature is too high. see t_hot_max option.\n#casecold compressor crankcase temperature is too low. the system can't start. this situation occurs on outdoor installations during a winter season and if ac power lost for a few hours. wait, while the crankcase heater stabilizing your compressor temperature. see t_crankcase_min option.\n#casehot compressor is still overheated, waiting. see t_crankcase_max option.\n#tae<refmin \"after evaporator\" temperature too low. preventing cold loop from freezing and protecting suction line from liquid. see t_coldref_min option.\n#tbe<refmin \"before evaporator\" temperature too low. preventing cold loop from freezing. see t_coldref_min option.\n#tbc>max \"before condenser\" temperature is too high. overheat protection. see t_before_condenser_max option.\n#tci<coldmin \"cold in\" temperature is too low. preventing cold loop from freezing. see t_cold_min option.\n#tco<coldmin \"cold out\" temperature is too low. preventing cold loop from freezing. see t_cold_min option.\ncwp_on_comin cold side pump started because cold side temperature is too low, so preventing cold loop freeze, see t_cold_min option.\nadditional messages\nmessage description\nok:pr.cold cold side pressure restored.\nok:pr.hot hot side pressure restored.\nok:e.t.sens. temperature sensors restored.\nhwp_on hot side pump powered on.\nerr:errorcode error code: 1 = temperature sensor error, 2 = hot side pressure too high, 3 = cold side pressure too low.\nappendix d: secret appendix\nare you still reading? it seems you are interested in heat pumps, so this appendix is for you.\nabout sensors: avoid using cheap \"waterproof epoxy-covered\" sensors. \"waterproof\" lasts for a short time.\nbuy ds18b20s chips. no matter what sensors are buying: cheap or at a high price. i've never seen \"bad\" dses. solder sensors to the wires and cover with two layers of 2-component epoxy resin as pictured below. it will work for years. white/orange - gnd, white/blue - signal, orange - +5v.\nfor sensors at your compressor and discharge (+100 \u00b0c and higher) use heat-resistant sleeves at every wire.\nto get precise temperature readings protect sensors against ambient air temperature influence with additional thermal insulation. temperature readings from most of the sensors are interesting, but +/- few degrees does not matter. so, cover most of the sensors with thermal insulation as you wish.\nbut two sensors \"before evaporator\" and \"after evaporator\" are critical to eev and needs an extra attention. the temperature of these sensors must be as close to the temperature of the copper tube as it possible. so, install tae and tbe sensors as pictured below. you can use thermal paste, but it is no significant difference with much more available silicone. tape not shown at photos below, for clarity, but should be used with every insulation layer.\nabout water(glycol)<->refrigerant heat exchangers. you can use plate heat exchangers. pros: the best efficiency. cons: costs money. potential oil return difficulties.\nand oxygen brazing with (20%+)silver+copper solder required here:\nyou can build your own \"tube-in-tube\" heat exchangers. it's not hard. cheaper. the heat exchange efficiency is worse. no oil return problems. very easy soldering. heat exchanger math: 0.7..1.5 m2 of a copper tube per every 3kw of heat transfer.\nadditionally, you can think \"i'll take an old ac parts... housing... slightly change... an hour or two, day of work maximum and i'll get a refrigerant<->water heat exchanger in for a penny!\". this idea is obvious. it was the first thing i've tried. you can try this, but to achieve \"not very bad\" performance it'll take more than a one day and much more than a few $$, even if you have unlimited access to older acs.\nok, i think that's enough for this appendix, this is a controller page, and not how-to-build-refrigeration-systems page.\noverall, your system with sensor locations will look like at a scheme below. refrigerators (heat pumps) are simple devices.\nyour system works (or sleeps) depending on thi temperature. for the end user it looks like setting up comfortable temperature of the warm floor via remote display.\nappendix e: firmware options and fine-tuning\nqa tests, uncomment to enable\n//#define selftest_relays_leds_speaker //speaker and relays qa test, uncomment to enable\n//#define selftest_eev //eev qa test, uncomment to enable\n//#define selftest_t_sensors //temperature sensors qa test, uncomment to enable\ncommunication protocol with an external world. choose one\n//#define rs485_json 1 //json, external systems integration\n//#define rs485_human 2 //rs485 is used in the same way as the local console, warning: use only if 2 devices (server and this controller) connected to the same rs485 line\n#define rs485_modbus 3 //default, modbus via rs485, connection to the display (both sensor or 1602, see https://github.com/openhp/display/) or connection to any other modbus application or device\nsystem type, comment both if hp with eev\n//#define eev_only //valden controller as eev controller: no target t sensor. no relays. oly eev. sensors required: tae, tbe, current sensor. additional t sensors can be used but not required.\n//#define no_eev //capillary tube or txv, eev not used\nsensor used to check setpoint, uncomment one of those options\n#define setpoint_thi //\"warm floor\" scheme: \"hot in\" (thi) temperature used as setpoint\n//#define setpoint_ts1 //\"swimming pool\" or \"water tank heater\" scheme: \"sensor 1\" (ts1) is used as setpoint and located somewhere in a water tank\nsome more options\n#define human_autoinfo30000//print stats to console, every milliseconds\n#define watchdog//disable for older bootloaders\nnext sections: advanced options\ntemperature sensors used in a system, comment to disable\n#define t_cold_in;//cold side (heat source) inlet sensor\n#define t_cold_out;//cold side outlet sensor\n#define t_before_evaporator;//\"before\" and \"after evaporator\" sensors required to control eev, both \"eev_only\" and \"full\" schemes\n#define t_after_evaporator;//\"before\" and \"after evaporator\" sensors required to control eev, both \"eev_only\" and \"full\" schemes\n#ifdef setpoint_ts1\n#define t_sensor_1;//t values from the additional sensor s1 used as a \"setpoint\" in \"pool\" or \"water tank heater\" schemes\n#endif\n//#define t_sensor_2;//additional sensor, any source; for example, outdoor temperature, in-case temperature, and so on\n#define t_crc;//if defined, enables the crankcase t sensor and crankcase heater on the relay \"crankcase heater\"\n//#define t_regenerator;//an additional sensor, the regenerator temperature sensor (inlet or outlet or housing); used only to obtain a temperature data if necessary\n#define t_afrer_condenser;//after condenser (and before valve)\n#define t_before_condenser;//before condenser (discharge)\n#define t_hot_out;//hot side outlet\n//in full scheme hot in required! optional in \"eev_only\" scheme (see \"eev_only\" option),\n#define t_hot_in;//hot side inlet\ntemperature limits\n#define magic0x66;//change this value if you want to rewrite the t setpoint in eeprom\n#definet_setpoint26.0;//this is a predefined target temperature value (start temperature). eeprom-saved. ways to change this value: 1. console command 2. change the \"setpoint\" on a display 3. change value here and change \"magic number\" 4. json command\n#define t_setpoint_max48.0;//maximum \"setpoint\" temperature that an ordinary user can set\n#define t_setpoint_min10.0;//min. \"setpoint\" temperature that an ordinary user can set, lower values not recommended until antifreeze fluids at hot side used.\n#define t_crankcase_min8.0;//compressor (crankcase) min. temperature, hp will not start if t lower\n#define t_crankcase_max110.0;//compressor (crankcase) max. temperature, overheating protection, hp will stop if t higher\n#define t_crankcase_heat_threshold 16.0;//crankcase heater threshold, the compressor heater will be powered on if t lower\n#define t_workingok_crankcase_min 25.0;//compressor temperature: additional check. hp will stop if t is lower than this value after 5 minutes of work. do not set the value too high to ensure normal operation after long pauses.\n#define t_before_condenser_max108.0;//discharge max, system stops if discharge higher\n#define t_coldref_min -14.0;//suction min., hp stops if t lower, cold side (glycol) loop freeze protection and compressor protection against liquid\n#define t_before_evap_work_min -25.5;//!!!before evaporator (after valve) min. t; can be very low for a few minutes after a startup, ex: capillary tube in some conditions; and for all systems: after long shut-off, lack of refrigerant, 1st starts, and many others\n#define t_cold_min -15.5;//cold side (glycol) loop freeze protection: hp stops if inlet or outlet temperature lower\n#define t_hot_max 50.0;//hot loop: hp stops if hot side inlet or outlet temperature higher than this threshold\nwatts, cycles times (milliseconds)\n#define max_watts1000.0 + 70.0 + 80.0//power limit, watt, hp stops if exceeded, example: compressor: ~1000 + hot cp 70 + cold cp 80\n#define poweron_pause 300000 //after power on: wait 5 minutes before starting hp (power faults protection)\n#define mincycle_poweroff 600000 //after a normal compressor stop: 10 minutes pause (max 99999 seconds)\n#define mincycle_poweron 3600000 //after compressor start: minimum compressor operation time, i.e. work time is not less than this value (or more, depending on the setpoint temperature) 60 minutes = 3.6 kk 120mins = 5.4 kk.\n#define poweron_hightime7000//after compressor start: defines time when power consumption can be 3 times greater than normal, 7 sec. by default\n#define coldcircle_prepare90000//before compressor start:power on cold cp and wait 90 sec.; if false start: cp will off twice this time; and (hotcircle_stop_after - this_value) must be > hotcircle_check_prepare or hp will go sleep cycle instead of start\n#define deffered_stop_hotcircle1200000//after compressor stop:wait 20 minutes, if no need to start compressor: stop hot wp; value must be > 0\n#define hotcircle_start_every2400000//while pauses:pump on \"hot side\" starts every 40 minutes (by default) (max 9999 seconds) to circulate water and get exact temperature reading, option used if \"warm floor\" installation (thi as setpoint)...\n#define hotcircle_check_prepare150000//while pauses:...and wait for temperature stabilization 2.5 minutes (by default), after that do setpoint checks...\n#define hotcircle_stop_after(hotcircle_check_prepare + coldcircle_prepare + 30000)//...and then stop after few minutes of circulating, if temperature is high and no need to start compressor; value must be check_prepare + coldcircle_prepare + 30 seconds (or more)\neev options.\nif you are using a capillary tube or txv: simply skip next section.\ndepending on how many milliseconds allocated per step, the speed of automatic tuning will change.\nremember that your refrigeration system reaction on every step is not immediate. the system reacts after a few minutes, sometimes after tens of minutes.\n#define eev_maxpulses250//max steps, 250 is tested for sanhua 1.3\n//steps tuning: milliseconds per fast and slow (precise) steps\n#define eev_pulse_fclose_millis20//fast closing, closing on danger(milliseconds per step)\n#define eev_pulse_close_millis60000//accurate closing while the compressor works (milliseconds per step)\n#define eev_pulse_wopen_millis20//standby (waiting) pos. set(milliseconds per step)\n#define eev_pulse_fopen_millis1400//fast opening, fast search (milliseconds per step)\n#define eev_pulse_open_millis70000//accurate opening while the compressor works(milliseconds per step)\n#define eev_stop_hold500//0.1..1sec for sanhuahold time(milliseconds per step)\n#define eev_closeevery86400000//86400000: eev full close (zero calibration) every 24 hours, executed while hp is not working(milliseconds per cycle)\n//positions\n#define eev_close_add_pulses8//read below, additional steps after zero position while full closing\n#define eev_open_after_close45//0 - set the zero position, then add eev_close_add_pulses (zero insurance, read eev guides for this value) and stop, eev will be in zero position.\n//n - set the zero position, then add eev_close_add_pulses, than open eev on eev_open_after_close pulses\n//i.e. it's a \"waiting position\" while hp isn't working, value must be <= minworkpos\n#define eev_minworkpos50//position will be not less during normal work, open eev to this position after compressor start\n//temperatures\n#define eev_precise_start7.0//precise tuning threshold: make slower pulses if (real_diff-target_diff) less than this value. used for fine auto-tuning\n#define eev_emerg_diff1.7//liquid at suction threshold:if dangerous condition occurred, real_diff =< (target_diff - eev_emerg_diff) then eev will be closed to min. work position //ex: eev_emerg_diff = 2.0, target diff 5.0, if real_diff =< (5.0 - 2.0) then eev will be closed to eev_minworkpos\n#define eev_hysteresis0.5//hysteresis, to stop fine-tuning:must be less than eev_precise_start, ex: target difference = 4.0, hysteresis = 0.3, no eev pulses will be done while real difference in range 4.0..4.3\n#define eev_target_temp_diff3.6//target difference between before evaporator and after evaporator, the head of the whole algorithm\n//additional options\n#define eev_reopenlast1//1 = reopen to last position on compressor start, useful for ordinary schemes with everyday working cycles, 0 = not\n#define eev_reopenmintime40000//after system start: min. delay between \"min. work pos.\" (must be > 0 in this case and > waiting position) set and reopening start\n//#define eev_manual//comment to disable, manual set of eev position via a console; warning: this option will stop all eev auto-activities, including zero position find procedure; so this option not recommended: switch auto/manual mode from a console\n//do not use next option if you're not sure what are you doing\n//#define eev_debug//debug, useful during system fine-tuning, works both with local serial and rs485_human\ncommunication addresses\nconst char devid = 0x45;//used only if json communication, does not matter for modbus and valden display https://github.com/openhp/display/\nconst char hostid = 0x30;//used only if json communication, not used for modbus\nlast option\n#define max_sequential_errors 15 //max cycles to wait auto-clean error, ex: t sensor appears, stop compressor after counter exceeded (millis_cycle * max_sequential_errors)\nappendix d: bill of materials\npart quantity\n1206 resistors:\n10 1\n100 1\n120 1\n1k 7\n10k 6\n100k 2\n22 1\n2.2k 4\n470 10\n1206 caps:\n0.01uf 2\n0.1uf 4\n1uf 8\n10uf 5\n1206 leds:\nred (error leds) 2\ngreen (ok led) 1\nyellow 11\nsop(soic) ics:\nadm2587ebrwz (soic-20) 1\n74hc4067d (soic-24) 1\n74hc595d (sop-16) 3\nuln2003a_(sop-16) 2\n817s (sop-4) 2\nxh2.54 headers + plugs:\nxh2.54-6p header + 6p plug 4\nxh2.54-3p header + 3p plugs 2\nxh2.54-2p header + 2p plugs 1\nxh2.54 crimp terminal 40\npower terminals:\n6.35 blade terminal (726386-2 or same) 16\n6.35 quick disconnect crimp terminal insulated 16\nothers:\n10nf hv-9.0x3.0 (blue disc 2kv hv cap) 1\n22uf_16v d5.0xf2.0 (electrolytic cap) 1\nresistor network*4 dip-1x5p-2.54 (3..5k) 3\nmmbt2222a (sot-23-3) 1\nlm7805 (to-220) 1\nsmih-12vdc-sl-c 4\nbuzzer-r9.0-2p-4.0 1\narduino pro mini 1\npower supply, 12v1.25a 70x30x40 (or any 0.5a+) 1\nds18b20 12\nusb<->uart (to upload firmware) 1\ncurrent sensor sct-013-000 1\nlicense\n\u00a9 2018-2021 d.a.a. all rights reserved; gonzho at web.de; https://github.com/openhp/heatpumpcontroller/.\ntext, media and other materials licensed under cc-by-sa license v4.0.\nattribution: you must clearly attribute valden heat pump controller (https://github.com/openhp/heatpumpcontroller/) original work in any derivative works.\nshare and share alike: if you make modifications or additions to the content you re-use, you must license them under the cc-by-sa license v4.0 or later.\nindicate changes: if you make modifications or additions, you must indicate in a reasonable fashion that the original work has been modified.\nyou are free: to share and adapt the material for any purpose, even commercially, as long as you follow the license terms.\nthe firmware source code licensed under gplv3.\nthis product is distributed in the hope that it will be useful, but without any warranty; without even the implied warranty of merchantability or fitness for a particular purpose. see the gnu general public license for more details.\nfor third-party libraries licenses used in this product please refer to those libraries.\nauthor\ngonzho \u0430\u0442 web.de (c) 2018-2021", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000742, "year": null}, {"Unnamed: 0": 2928, "autor": 888, "date": null, "content": "This is an attempt at creating an Arduino library for use on ESP32 boards with a CC1101 transceiver with the device decoders from the rtl_433 package. And be available for use with openMQTTGateway as an available module.\nInspiration for this came from the ESPiLight effort. Kudos to puuu for this, and the awesome package.\nThe initial port implements only enables a subset of the available modulations and device decoders, and is limited to devices I have access to and can test with.\nEnabled Pulse Demodulation modules\nOOK_PPM : Pulse Position Modulation\nOOK_PWM : Pulse Width Modulation\nEnabled Device Decoders\nRegistering protocol [2] \"Acurite 609TXC Temperature and Humidity Sensor\"\nRegistering protocol [3] \"Acurite 592TXR Temp/Humidity, 5n1 Weather Station, 6045 Lightning, 3N1, Atlas\"\nRegistering protocol [4] \"Acurite 986 Refrigerator / Freezer Thermometer\"\nRegistering protocol [5] \"Acurite 606TX Temperature Sensor\"\nRegistering protocol [6] \"Acurite 00275rm,00276rm Temp/Humidity with optional probe\"\nRegistering protocol [7] \"Acurite 590TX Temperature with optional Humidity\"\nRegistering protocol [8] \"Akhan 100F14 remote keyless entry\"\nRegistering protocol [9] \"AlectoV1 Weather Sensor (Alecto WS3500 WS4500 Ventus W155/W044 Oregon)\"\nRegistering protocol [10] \"Ambient Weather TX-8300 Temperature/Humidity Sensor\"\nRegistering protocol [11] \"Auriol AFW2A1 temperature/humidity sensor\"\nRegistering protocol [12] \"Auriol HG02832, HG05124A-DCF, Rubicson 48957 temperature/humidity sensor\"\nRegistering protocol [13] \"BlueLine Power Monitor\"\nRegistering protocol [14] \"Blyss DC5-UK-WH\"\nRegistering protocol [16] \"Bresser Thermo-/Hygro-Sensor 3CH\"\nRegistering protocol [18] \"Burnhard BBQ thermometer\"\nRegistering protocol [19] \"Calibeur RF-104 Sensor\"\nRegistering protocol [20] \"Cardin S466-TX2\"\nRegistering protocol [21] \"Chuango Security Technology\"\nRegistering protocol [22] \"Companion WTR001 Temperature Sensor\"\nRegistering protocol [25] \"Ecowitt Wireless Outdoor Thermometer WH53/WH0280/WH0281A\"\nRegistering protocol [26] \"Eurochron EFTH-800 temperature and humidity sensor\"\nRegistering protocol [30] \"Esperanza EWS\"\nRegistering protocol [32] \"Fine Offset Electronics, WH2, WH5, Telldus Temperature/Humidity/Rain Sensor\"\nRegistering protocol [33] \"Fine Offset Electronics, WH0530 Temperature/Rain Sensor\"\nRegistering protocol [34] \"Fine Offset WH1050 Weather Station\"\nRegistering protocol [35] \"Fine Offset Electronics WH1080/WH3080 Weather Station\"\nRegistering protocol [37] \"FT-004-B Temperature Sensor\"\nRegistering protocol [38] \"Generic wireless motion sensor\"\nRegistering protocol [39] \"Generic Remote SC226x EV1527\"\nRegistering protocol [40] \"Generic temperature sensor 1\"\nRegistering protocol [41] \"Globaltronics QUIGG GT-TMBBQ-05\"\nRegistering protocol [42] \"Globaltronics GT-WT-02 Sensor\"\nRegistering protocol [43] \"Globaltronics GT-WT-03 Sensor\"\nRegistering protocol [44] \"Microchip HCS200 KeeLoq Hopping Encoder based remotes\"\nRegistering protocol [45] \"Honeywell ActivLink, Wireless Doorbell\"\nRegistering protocol [46] \"HT680 Remote control\"\nRegistering protocol [47] \"inFactory, nor-tec, FreeTec NC-3982-913 temperature humidity sensor\"\nRegistering protocol [49] \"Interlogix GE UTC Security Devices\"\nRegistering protocol [51] \"Kedsum Temperature & Humidity Sensor, Pearl NC-7415\"\nRegistering protocol [52] \"Kerui PIR / Contact Sensor\"\nRegistering protocol [53] \"LaCrosse TX Temperature / Humidity Sensor\"\nRegistering protocol [54] \"LaCrosse TX141-Bv2, TX141TH-Bv2, TX141-Bv3, TX141W, TX145wsdth sensor\"\nRegistering protocol [55] \"LaCrosse/ELV/Conrad WS7000/WS2500 weather sensors\"\nRegistering protocol [56] \"LaCrosse WS-2310 / WS-3600 Weather Station\"\nRegistering protocol [58] \"Maverick et73\"\nRegistering protocol [60] \"Missil ML0757 weather station\"\nRegistering protocol [64] \"Nexus, FreeTec NC-7345, NX-3980, Solight TE82S, TFA 30.3209 temperature/humidity sensor\"\nRegistering protocol [66] \"Opus/Imagintronix XT300 Soil Moisture\"\nRegistering protocol [67] \"Oregon Scientific SL109H Remote Thermal Hygro Sensor\"\nRegistering protocol [69] \"Philips outdoor temperature sensor (type AJ3650)\"\nRegistering protocol [70] \"Philips outdoor temperature sensor (type AJ7010)\"\nRegistering protocol [71] \"Prologue, FreeTec NC-7104, NC-7159-675 temperature sensor\"\nRegistering protocol [73] \"Quhwa\"\nRegistering protocol [75] \"Rubicson Temperature Sensor\"\nRegistering protocol [76] \"Rubicson 48659 Thermometer\"\nRegistering protocol [77] \"Conrad S3318P, FreeTec NC-5849-913 temperature humidity sensor\"\nRegistering protocol [78] \"Silvercrest Remote Control\"\nRegistering protocol [79] \"Skylink HA-434TL motion sensor\"\nRegistering protocol [80] \"Wireless Smoke and Heat Detector GS 558\"\nRegistering protocol [81] \"Solight TE44/TE66, EMOS E0107T, NX-6876-917\"\nRegistering protocol [82] \"Springfield Temperature and Soil Moisture\"\nRegistering protocol [83] \"TFA Dostmann 30.3221.02 T/H Outdoor Sensor\"\nRegistering protocol [84] \"TFA Drop Rain Gauge 30.3233.01\"\nRegistering protocol [85] \"TFA pool temperature sensor\"\nRegistering protocol [86] \"TFA-Twin-Plus-30.3049, Conrad KW9010, Ea2 BL999\"\nRegistering protocol [87] \"Thermopro TP11 Thermometer\"\nRegistering protocol [88] \"Thermopro TP08/TP12/TP20 thermometer\"\nRegistering protocol [90] \"TS-FT002 Wireless Ultrasonic Tank Liquid Level Meter With Temperature Sensor\"\nRegistering protocol [91] \"Visonic powercode\"\nRegistering protocol [92] \"Waveman Switch Transmitter\"\nRegistering protocol [93] \"WG-PB12V1 Temperature Sensor\"\nRegistering protocol [94] \"WS2032 weather station\"\nRegistering protocol [95] \"Hyundai WS SENZOR Remote Temperature Sensor\"\nRegistering protocol [96] \"WT0124 Pool Thermometer\"\nRegistering protocol [98] \"X10 Security\"\nThe gaps in the numbers are device decoders disabled by default.\nWiring and Building the Example\nTo wire my device, I followed this guide\nhttps://github.com/LSatan/SmartRC-CC1101-Driver-Lib/blob/master/img/Esp32_CC1101.png\nAnd to build the example I use platformio and opened the example folder as a new window and built from their.\nProjects using the library\nOpenMQTTGateway - https://github.com/1technophile/OpenMQTTGateway\nCurrently available in the development branch\nRoadmap / Next Steps\nFirmware size tuning\nFurther heap usage tuning\nFind stack leak when running all devices\nEnable addition pulse demod functions\nCompile definition options\nMINRSSI; Default rssi to enable receiver, defaults to -82\nMY_DEVICES; Only include my personal subset of devices\nDEMOD_DEBUG; enable verbose debugging of signal processing\nDEVICE_DEBUG; Validate fields are mapped to response object ( rtl_433 )\nMEMORY_DEBUG; display heap usage information\nRAW_SIGNAL_DEBUG; display raw received messages\nRSSI; Enable collection of per pulse RSSI Values during signal reception\nRTL_DEBUG; Enable RTL_433 Verbose option ( 0=normal, 1=verbose, 2=verbose decoders, 3=debug decoders, 4=trace decoding. )\nSUPPRESS_UNPARSED; Enable suppression of publishing MQTT messages for unparsed signals, e.g. {model\":\"unknown\",\"protocol\":\"signal parsing failed\"\u2026\nPorting approach\nCopy subset of files in src/rtl_433/devices without any modification\nGenerated a list of files that used OOK_PPM and OOK_PWM with tools/device.awk\nCopied into src/rtl_433/devices\nMarked newkaku.c, nexa.c, and proove.c as unavailable as the device decoder triggers a stack overflow\nBased on the reduced list, updated include/rtl_433_devices.h, src/rtl_433_ESP.cpp, and src/rtl_433_ESP.h\nCopy of only used files in src/rtl_433, with minimal modifications\nabuf.c - No changes made\nbitbuffer.c - No changes made\ndata.c - Defined out unneeded functions ( #ifndef ESP32 )\ndecoder_util.c - No changes made\nlist.c - No changes made\npulse_demod.c - Move 'bitbuffer_t bits' to class level\nr_api.c - Significant tuning and tweaking applied\nr_util.c - No changes made\nutil.c - No changes made\ninclude directory is a copy\nabuf.h - No changes made\nam_analyze.h - No changes made\nbaseband.h - No changes made\nbitbuffer.h - No changes made\ncompat_time.h - No changes made\ndata.h - Added '#define _POSIX_HOST_NAME_MAX 128'\ndecoder.h - No changes made\ndecoder_util.h - No changes made\nfatal.h - No changes made\nfileformat.h - No changes made\nlist.h - No changes made\nlog.h - Not from rtl_433.h\noptparse.h - No changes made\npulse_demod.h - No changes made\npulse_detect.h - Adjusted structures to reduce size\nr_api.h - No changes made\nr_device.h - Adjusted structures to reduce size\nr_private.h - Adjusted structures to reduce size\nr_util.h - No changes made\nrtl_433.h - Adjusted structures to reduce size\nrtl_433_devices.h - Only added my skylink device\nrtl_devices.h - Not needed ??\nsamp_grab.h - No changes made\nterm_ctl.h - No changes made\nutil.h - No changes made\nCodebase conflicts\nESPiLight and rtl_433 conflict on silvercrest\n.platformio/packages/toolchain-xtensa32/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/bin/ld: Warning: size of symbol `silvercrest' changed from 4 in .pio/build/rtl_433-9e0770/libb28/libESPiLight.a(protocol.c.o) to 76 in .pio/build/rtl_433-9e0770/lib395/librtl_433_ESP.a(silvercrest.c.o)\nMemory footprint\nOpenMQTTGateway\nBuild definitions\n'-Dota_password=\"\"'\n'-DMQTT_SERVER=\"192.168.1.12\"'\n; '-DMDNS_SD=true'\n'-DESPWifiManualSetup=true'\n'-DGateway_Name=\"cc1101-ec20dc\"' ; 9e0770 ; ec20dc\n'-DOMG_VERSION=\"$PIOENV\"'\n'-DSERIAL_BAUD=921600'\n; '-DZgatewayRF=\"RF\"'\n'-DZgatewayRTL_433=\"rtl_433\"'\n; '-DZgatewayPilight=\"Pilight\"'\n'-DZradioCC1101=\"CC1101\"'\n; '-DZsensorBH1750=\"BH1750\"'\n; '-DZsensorBME280=\"BME280\"'\n; '-DLOG_LEVEL=LOG_LEVEL_TRACE'\n; '-DMEMORY_DEBUG=true'\n; '-DDEMOD_DEBUG=true'\n; '-DRTL_DEBUG=4' ; rtl_433 verbose mode\n; '-DRAW_SIGNAL_DEBUG=true'\n; '-DSUPPRESS_UNPARSED=true'\n'-DRF_EMITTER_GPIO=2'\n'-DRF_RECEIVER_GPIO=4'\n; '-DMY_DEVICES=true'\n'-UZmqttDiscovery'\nVersion 1\nAdvanced Memory Usage is available via \"PlatformIO Home > Project Inspect\"\nRAM: [== ] 23.1% (used 75776 bytes from 327680 bytes)\nFlash: [======== ] 79.1% (used 1036818 bytes from 1310720 bytes)\nVersion 2\nCleaned up device decoder list, ( OOK PPM and PWM only)\nAdvanced Memory Usage is available via \"PlatformIO Home > Project Inspect\"\nRAM: [== ] 20.6% (used 67344 bytes from 327680 bytes)\nFlash: [======= ] 70.4% (used 922990 bytes from 1310720 bytes)", "link": "https://github.com/NorthernMan54/rtl_433_ESP", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "outdoor", "selectorShort": "outdoor", "MarkedSent": "this is an attempt at creating an arduino library for use on esp32 boards with a cc1101 transceiver with the device decoders from the rtl_433 package. and be available for use with openmqttgateway as an available module.\ninspiration for this came from the espilight effort. kudos to puuu for this, and the awesome package.\nthe initial port implements only enables a subset of the available modulations and device decoders, and is limited to devices i have access to and can test with.\nenabled pulse demodulation modules\nook_ppm : pulse position modulation\nook_pwm : pulse width modulation\nenabled device decoders\nregistering protocol [2] \"acurite 609txc temperature and humidity sensor\"\nregistering protocol [3] \"acurite 592txr temp/humidity, 5n1 weather station, 6045 lightning, 3n1, atlas\"\nregistering protocol [4] \"acurite 986 refrigerator / freezer thermometer\"\nregistering protocol [5] \"acurite 606tx temperature sensor\"\nregistering protocol [6] \"acurite 00275rm,00276rm temp/humidity with optional probe\"\nregistering protocol [7] \"acurite 590tx temperature with optional humidity\"\nregistering protocol [8] \"akhan 100f14 remote keyless entry\"\nregistering protocol [9] \"alectov1 weather sensor (alecto ws3500 ws4500 ventus w155/w044 oregon)\"\nregistering protocol [10] \"ambient weather tx-8300 temperature/humidity sensor\"\nregistering protocol [11] \"auriol afw2a1 temperature/humidity sensor\"\nregistering protocol [12] \"auriol hg02832, hg05124a-dcf, rubicson 48957 temperature/humidity sensor\"\nregistering protocol [13] \"blueline power monitor\"\nregistering protocol [14] \"blyss dc5-uk-wh\"\nregistering protocol [16] \"bresser thermo-/hygro-sensor 3ch\"\nregistering protocol [18] \"burnhard bbq thermometer\"\nregistering protocol [19] \"calibeur rf-104 sensor\"\nregistering protocol [20] \"cardin s466-tx2\"\nregistering protocol [21] \"chuango security technology\"\nregistering protocol [22] \"companion wtr001 temperature sensor\"\nregistering protocol [25] \"ecowitt wireless -----> outdoor !!!  thermometer wh53/wh0280/wh0281a\"\nregistering protocol [26] \"eurochron efth-800 temperature and humidity sensor\"\nregistering protocol [30] \"esperanza ews\"\nregistering protocol [32] \"fine offset electronics, wh2, wh5, telldus temperature/humidity/rain sensor\"\nregistering protocol [33] \"fine offset electronics, wh0530 temperature/rain sensor\"\nregistering protocol [34] \"fine offset wh1050 weather station\"\nregistering protocol [35] \"fine offset electronics wh1080/wh3080 weather station\"\nregistering protocol [37] \"ft-004-b temperature sensor\"\nregistering protocol [38] \"generic wireless motion sensor\"\nregistering protocol [39] \"generic remote sc226x ev1527\"\nregistering protocol [40] \"generic temperature sensor 1\"\nregistering protocol [41] \"globaltronics quigg gt-tmbbq-05\"\nregistering protocol [42] \"globaltronics gt-wt-02 sensor\"\nregistering protocol [43] \"globaltronics gt-wt-03 sensor\"\nregistering protocol [44] \"microchip hcs200 keeloq hopping encoder based remotes\"\nregistering protocol [45] \"honeywell activlink, wireless doorbell\"\nregistering protocol [46] \"ht680 remote control\"\nregistering protocol [47] \"infactory, nor-tec, freetec nc-3982-913 temperature humidity sensor\"\nregistering protocol [49] \"interlogix ge utc security devices\"\nregistering protocol [51] \"kedsum temperature & humidity sensor, pearl nc-7415\"\nregistering protocol [52] \"kerui pir / contact sensor\"\nregistering protocol [53] \"lacrosse tx temperature / humidity sensor\"\nregistering protocol [54] \"lacrosse tx141-bv2, tx141th-bv2, tx141-bv3, tx141w, tx145wsdth sensor\"\nregistering protocol [55] \"lacrosse/elv/conrad ws7000/ws2500 weather sensors\"\nregistering protocol [56] \"lacrosse ws-2310 / ws-3600 weather station\"\nregistering protocol [58] \"maverick et73\"\nregistering protocol [60] \"missil ml0757 weather station\"\nregistering protocol [64] \"nexus, freetec nc-7345, nx-3980, solight te82s, tfa 30.3209 temperature/humidity sensor\"\nregistering protocol [66] \"opus/imagintronix xt300 soil moisture\"\nregistering protocol [67] \"oregon scientific sl109h remote thermal hygro sensor\"\nregistering protocol [69] \"philips outdoor temperature sensor (type aj3650)\"\nregistering protocol [70] \"philips outdoor temperature sensor (type aj7010)\"\nregistering protocol [71] \"prologue, freetec nc-7104, nc-7159-675 temperature sensor\"\nregistering protocol [73] \"quhwa\"\nregistering protocol [75] \"rubicson temperature sensor\"\nregistering protocol [76] \"rubicson 48659 thermometer\"\nregistering protocol [77] \"conrad s3318p, freetec nc-5849-913 temperature humidity sensor\"\nregistering protocol [78] \"silvercrest remote control\"\nregistering protocol [79] \"skylink ha-434tl motion sensor\"\nregistering protocol [80] \"wireless smoke and heat detector gs 558\"\nregistering protocol [81] \"solight te44/te66, emos e0107t, nx-6876-917\"\nregistering protocol [82] \"springfield temperature and soil moisture\"\nregistering protocol [83] \"tfa dostmann 30.3221.02 t/h outdoor sensor\"\nregistering protocol [84] \"tfa drop rain gauge 30.3233.01\"\nregistering protocol [85] \"tfa pool temperature sensor\"\nregistering protocol [86] \"tfa-twin-plus-30.3049, conrad kw9010, ea2 bl999\"\nregistering protocol [87] \"thermopro tp11 thermometer\"\nregistering protocol [88] \"thermopro tp08/tp12/tp20 thermometer\"\nregistering protocol [90] \"ts-ft002 wireless ultrasonic tank liquid level meter with temperature sensor\"\nregistering protocol [91] \"visonic powercode\"\nregistering protocol [92] \"waveman switch transmitter\"\nregistering protocol [93] \"wg-pb12v1 temperature sensor\"\nregistering protocol [94] \"ws2032 weather station\"\nregistering protocol [95] \"hyundai ws senzor remote temperature sensor\"\nregistering protocol [96] \"wt0124 pool thermometer\"\nregistering protocol [98] \"x10 security\"\nthe gaps in the numbers are device decoders disabled by default.\nwiring and building the example\nto wire my device, i followed this guide\nhttps://github.com/lsatan/smartrc-cc1101-driver-lib/blob/master/img/esp32_cc1101.png\nand to build the example i use platformio and opened the example folder as a new window and built from their.\nprojects using the library\nopenmqttgateway - https://github.com/1technophile/openmqttgateway\ncurrently available in the development branch\nroadmap / next steps\nfirmware size tuning\nfurther heap usage tuning\nfind stack leak when running all devices\nenable addition pulse demod functions\ncompile definition options\nminrssi; default rssi to enable receiver, defaults to -82\nmy_devices; only include my personal subset of devices\ndemod_debug; enable verbose debugging of signal processing\ndevice_debug; validate fields are mapped to response object ( rtl_433 )\nmemory_debug; display heap usage information\nraw_signal_debug; display raw received messages\nrssi; enable collection of per pulse rssi values during signal reception\nrtl_debug; enable rtl_433 verbose option ( 0=normal, 1=verbose, 2=verbose decoders, 3=debug decoders, 4=trace decoding. )\nsuppress_unparsed; enable suppression of publishing mqtt messages for unparsed signals, e.g. {model\":\"unknown\",\"protocol\":\"signal parsing failed\"\u2026\nporting approach\ncopy subset of files in src/rtl_433/devices without any modification\ngenerated a list of files that used ook_ppm and ook_pwm with tools/device.awk\ncopied into src/rtl_433/devices\nmarked newkaku.c, nexa.c, and proove.c as unavailable as the device decoder triggers a stack overflow\nbased on the reduced list, updated include/rtl_433_devices.h, src/rtl_433_esp.cpp, and src/rtl_433_esp.h\ncopy of only used files in src/rtl_433, with minimal modifications\nabuf.c - no changes made\nbitbuffer.c - no changes made\ndata.c - defined out unneeded functions ( #ifndef esp32 )\ndecoder_util.c - no changes made\nlist.c - no changes made\npulse_demod.c - move 'bitbuffer_t bits' to class level\nr_api.c - significant tuning and tweaking applied\nr_util.c - no changes made\nutil.c - no changes made\ninclude directory is a copy\nabuf.h - no changes made\nam_analyze.h - no changes made\nbaseband.h - no changes made\nbitbuffer.h - no changes made\ncompat_time.h - no changes made\ndata.h - added '#define _posix_host_name_max 128'\ndecoder.h - no changes made\ndecoder_util.h - no changes made\nfatal.h - no changes made\nfileformat.h - no changes made\nlist.h - no changes made\nlog.h - not from rtl_433.h\noptparse.h - no changes made\npulse_demod.h - no changes made\npulse_detect.h - adjusted structures to reduce size\nr_api.h - no changes made\nr_device.h - adjusted structures to reduce size\nr_private.h - adjusted structures to reduce size\nr_util.h - no changes made\nrtl_433.h - adjusted structures to reduce size\nrtl_433_devices.h - only added my skylink device\nrtl_devices.h - not needed ??\nsamp_grab.h - no changes made\nterm_ctl.h - no changes made\nutil.h - no changes made\ncodebase conflicts\nespilight and rtl_433 conflict on silvercrest\n.platformio/packages/toolchain-xtensa32/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/bin/ld: warning: size of symbol `silvercrest' changed from 4 in .pio/build/rtl_433-9e0770/libb28/libespilight.a(protocol.c.o) to 76 in .pio/build/rtl_433-9e0770/lib395/librtl_433_esp.a(silvercrest.c.o)\nmemory footprint\nopenmqttgateway\nbuild definitions\n'-dota_password=\"\"'\n'-dmqtt_server=\"192.168.1.12\"'\n; '-dmdns_sd=true'\n'-despwifimanualsetup=true'\n'-dgateway_name=\"cc1101-ec20dc\"' ; 9e0770 ; ec20dc\n'-domg_version=\"$pioenv\"'\n'-dserial_baud=921600'\n; '-dzgatewayrf=\"rf\"'\n'-dzgatewayrtl_433=\"rtl_433\"'\n; '-dzgatewaypilight=\"pilight\"'\n'-dzradiocc1101=\"cc1101\"'\n; '-dzsensorbh1750=\"bh1750\"'\n; '-dzsensorbme280=\"bme280\"'\n; '-dlog_level=log_level_trace'\n; '-dmemory_debug=true'\n; '-ddemod_debug=true'\n; '-drtl_debug=4' ; rtl_433 verbose mode\n; '-draw_signal_debug=true'\n; '-dsuppress_unparsed=true'\n'-drf_emitter_gpio=2'\n'-drf_receiver_gpio=4'\n; '-dmy_devices=true'\n'-uzmqttdiscovery'\nversion 1\nadvanced memory usage is available via \"platformio home > project inspect\"\nram: [== ] 23.1% (used 75776 bytes from 327680 bytes)\nflash: [======== ] 79.1% (used 1036818 bytes from 1310720 bytes)\nversion 2\ncleaned up device decoder list, ( ook ppm and pwm only)\nadvanced memory usage is available via \"platformio home > project inspect\"\nram: [== ] 20.6% (used 67344 bytes from 327680 bytes)\nflash: [======= ] 70.4% (used 922990 bytes from 1310720 bytes)", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000888, "year": null}], "name": "outdoorarduino"}