{"interestingcomments": [{"Unnamed: 0": 2832, "autor": 792, "date": null, "content": "Juniper\nJuniper is a functional reactive programming language currently being developed at Tufts University by Caleb Helbling and Louis Ades.\nThe grammar in EBNF (extended Backus-Naur Form) is available in grammer.bnf\nThe purpose of Juniper is to provide a functional reactive programming platform for designing Arduino projects. FRP's high-level approach to timing-based events fits naturally with Arduino, with which programming almost entirely revolves around reacting to realtime events. Juniper transpiles to Arduino C++, which is then compiled to an Arduino executable.\nLanguage Features\nCompiler written in F#\nTranspiled to C++\nStatically typed\nAlgebraic datatypes\nUse of records as datatypes (the equivalent of structs in C++)\nFirst class functions\nType inference\nUse of templates to create maximum capacity length lists.\nRepository Contents\njuniper.sln\nMicrosoft Visual F# Solution used for developing this project\ngrammar.bnf\nJuniper Grammar and Concrete Syntax\nThis is the grammar used for our language in this repository. It is represented in Extended Backus-Naur Form (EBNF), a metasyntax language used for the planning of Juniper's concrete syntax.\nJuniper Subfolder\nContains the code used for the compiler\nBuilding and Running the Juniper Compiler\nTo get started using Juniper, you'll first need to build the compiler using the source in this repository.\nFor Windows machines:\nFor building:\nIf you do not have it already, download and install Microsoft Visual Studio 2022.\nClone this repository to your local machine.\nOpen /Juniper.sln in Visual Studio.\nWhen the solution opens, go to the Solution Explorer and find the \"References\" tab underneath the \"Juniper\" project. Right click on \"References\", and select \"Manage NuGet Packages.\" Verify that FParsec and QuikGraph are installed as part of your solution.\nBuild the Juniper project (either in Debug mode or Build mode).\nThe result should be a built .exe file called \"Juniper.exe\".\n(Optional) Add Juniper.exe to PATH variables so that it can be run from any directory.\nFor Linux machines:\nJuniper is now on .NET 6! Juniper has been tested to work with Visual Studio Code, and probably works with Jetbrains Rider as well.\nInstall .NET 6 and Visual Studio Code on your Linux system\nInstall the Ionide extension for Visual Studio Code\nBuild using Ionide\nEnsure that the junstd/, cppstd/, examples/, wrappers/ and the juniper Linux run script are copied to the directory containing the build.\nTo build for Linux on Windows for distribution:\nEnter the directory containing Juniper.sln from the terminal. Then run dotnet publish -r linux-x64 --self-contained true\nEnsure that all the required directories and files got copied over into the built Linux folder. The folders to look for are: junstd/, cppstd/, examples/, wrappers/ and the juniper Linux run script.\nMove the build to a Linux system for testing/packaging.\nFor MacOS machines:\nFollow these instructions (Option 3: Install Visual Studio for Mac) is tested, but choose the option that works best for you. The package manager is NuGet and has not been updated to paket.\nOpen the Juniper solution. Check the references, and refresh them if necessary. Verify that FParsec, Symbolism and QuikGraph work. Update Nuget packages.\nBuild the Juniper project.\nFor writing Juniper files:\nYou can write Juniper files in any text editor, but the Visual Studio Code text editor supports a plugin for Juniper text highlighting, which is very useful for code readability. Install Visual Studio Code, and install the juniper language package from within the editor.\nFor running the compiler:\nFrom the command line, run \"Juniper.exe -s [.jun modules as arguments] -o [output file]\"\nThis should build your .cpp file. Compile and upload to your Arduino (with your preferred method, such as PlatformIO).", "link": "https://github.com/calebh/Juniper", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "rider", "selectorShort": "rider", "MarkedSent": "juniper\njuniper is a functional reactive programming language currently being developed at tufts university by caleb helbling and louis ades.\nthe grammar in ebnf (extended backus-naur form) is available in grammer.bnf\nthe purpose of juniper is to provide a functional reactive programming platform for designing arduino projects. frp's high-level approach to timing-based events fits naturally with arduino, with which programming almost entirely revolves around reacting to realtime events. juniper transpiles to arduino c++, which is then compiled to an arduino executable.\nlanguage features\ncompiler written in f#\ntranspiled to c++\nstatically typed\nalgebraic datatypes\nuse of records as datatypes (the equivalent of structs in c++)\nfirst class functions\ntype inference\nuse of templates to create maximum capacity length lists.\nrepository contents\njuniper.sln\nmicrosoft visual f# solution used for developing this project\ngrammar.bnf\njuniper grammar and concrete syntax\nthis is the grammar used for our language in this repository. it is represented in extended backus-naur form (ebnf), a metasyntax language used for the planning of juniper's concrete syntax.\njuniper subfolder\ncontains the code used for the compiler\nbuilding and running the juniper compiler\nto get started using juniper, you'll first need to build the compiler using the source in this repository.\nfor windows machines:\nfor building:\nif you do not have it already, download and install microsoft visual studio 2022.\nclone this repository to your local machine.\nopen /juniper.sln in visual studio.\nwhen the solution opens, go to the solution explorer and find the \"references\" tab underneath the \"juniper\" project. right click on \"references\", and select \"manage nuget packages.\" verify that fparsec and quikgraph are installed as part of your solution.\nbuild the juniper project (either in debug mode or build mode).\nthe result should be a built .exe file called \"juniper.exe\".\n(optional) add juniper.exe to path variables so that it can be run from any directory.\nfor linux machines:\njuniper is now on .net 6! juniper has been tested to work with visual studio code, and probably works with jetbrains -----> rider !!!  as well.\ninstall .net 6 and visual studio code on your linux system\ninstall the ionide extension for visual studio code\nbuild using ionide\nensure that the junstd/, cppstd/, examples/, wrappers/ and the juniper linux run script are copied to the directory containing the build.\nto build for linux on windows for distribution:\nenter the directory containing juniper.sln from the terminal. then run dotnet publish -r linux-x64 --self-contained true\nensure that all the required directories and files got copied over into the built linux folder. the folders to look for are: junstd/, cppstd/, examples/, wrappers/ and the juniper linux run script.\nmove the build to a linux system for testing/packaging.\nfor macos machines:\nfollow these instructions (option 3: install visual studio for mac) is tested, but choose the option that works best for you. the package manager is nuget and has not been updated to paket.\nopen the juniper solution. check the references, and refresh them if necessary. verify that fparsec, symbolism and quikgraph work. update nuget packages.\nbuild the juniper project.\nfor writing juniper files:\nyou can write juniper files in any text editor, but the visual studio code text editor supports a plugin for juniper text highlighting, which is very useful for code readability. install visual studio code, and install the juniper language package from within the editor.\nfor running the compiler:\nfrom the command line, run \"juniper.exe -s [.jun modules as arguments] -o [output file]\"\nthis should build your .cpp file. compile and upload to your arduino (with your preferred method, such as platformio).", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000792, "year": null}], "name": "riderarduino"}