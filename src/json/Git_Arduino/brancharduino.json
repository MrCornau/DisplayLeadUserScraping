{"interestingcomments": [{"Unnamed: 0": 2139, "autor": 99, "date": null, "content": "About JTAGenum\nJTAGenum is an open source Arduino JTAGenum.ino or RaspbberyPi JTAGenum.sh (experimental) scanner. This code was built with three primary goals:\nGiven a large set of pins on a device determine which are JTAG lines\nEnumerate the Instruction Register to find undocumented functionality\nbe easy to build and apply\nJTAGenum is a more Arduino'y fork of Arduinull by S\u00e9bastien Bourdeauducq (lekernel), which is inspired by Benedikt Heinz's JTAG scanner. JTAGenum also includes instruction scanning functionality best described by Felix Domke (tmbinc) in his 26c3 paper. The initial version of this branch was built for personal research and while working on various projects at Recurity Labs.\nPlease feel free to contact me with any questions, problems, targets or updates. I would be more than happy if you fork and take the code in whatever direction you choose.\nLinks\nEmbedded Analysis wiki: http://github.com/cyphunk/JTAGenum/wiki\nJTAGenum blog post: http://deadhacker.com/2010/02/03/jtag-enumeration/\nJTAGenum video tutorial \"Ghetto Tools for Embedded Analysis REcon 2011\": https://www.youtube.com/watch?v=ZmBfahwV3ss\nAuthors and code branches\ncyphunk http://github.com/cyphunk/JTAGenum/\njal2 http://github.com/jal2/JTAGenum/\nzoobab http://hackerspace.be/JTAG_pinout_detector\nz1Y2x https://github.com/z1Y2x/JTAGenum/\nSimilar tools or branches:\ngremwell's https://github.com/gremwell/go-jtagenum (RaspberryPi go rewrite + improvements)\njoegrands's http://www.grandideastudio.com/jtagulator/ (purpose built hardware with improvements and added voltage range)\nszymonh's https://github.com/szymonh/SWDscan (arduino based SWD finder)\nszymonh's https://github.com/szymonh/JTAGscan (arduino based with logic similar to jtagulator)\ndxa4481's https://github.com/dxa4481/inputProtectionShield (1.8-5v voltage shifting shield)\ndipusone's https://github.com/dipusone/inputShieldProtection (fork of dxa4481's shield)\ncommercial products MiracleBox, JTAGfinder, EasyJtag (GUI based, some limitations)\nHardware\nJTAGenum has been tested on the following hardware:\nRaspberryPi (3.3V) with mixed results\nstandard Arduino (5V)\nArduino on Teensy (3.3V) (http://www.pjrc.com/teensy/index.html)\nArduino on Texas Instruments Tiva C / Stellaris (3.3V) (https://github.com/cyphunk/JTAGenum/issues/4)\nArduino on STM32 Bluepill board (3.3V) (https://wiki.stm32duino.com/index.php?title=Blue_Pill and http://www.zoobab.com/bluepill-arduinoide)\nWhen picking your micro-controller platform consider two issues:\nHow many pins do you want to check on your target.\nwhat voltage level does your target device require.\nConcerning voltage RaspberryPi's I/O operate at 3.3v, many Arduinos work at 5 volts. Some are switchable but even those that are not could be modified. Alternatively voltage shifting Arduino shields or voltage shifting gadgets can be used. See the Voltage Shifting Appendix discussion on the Embedded Analysis wiki for more details. https://github.com/cyphunk/JTAGenum/wiki/Embedded-Analysis#Voltage_Shifting\nWhen connecting the micro-controller to the pins of your target one thing to be aware of is possible cross-talk between wires. The loopback check function in JTAGenum cab help you determine which wires may produce cross talk.\nUsage\nFor use on Raspberry Pi use and consult the JTAGenum.sh. The Raspberry Pi pins being used for scanning should be specified inside the script file. This script is experimental and only provides the functions for finding JTAG. To use the script should be sourc'ed on the console the user should execute the desired scan. See the comments in the header of the script for further details.\nFor use on a Arduino the JTAGenum.ino sketch is loaded. The Arduino pins being used for scanning should first be specified at the top of the sketch. This is all that is required for basic JTAG scanning functionality. Once the correct JTAG pins on the target have been determined they can be specified in the script and along with the defining the proper IR_LENGTH the user can then execute the search for hidden instructions or print the boundary scan register.\nBefore loading the sketch first define the pins[] and pinnames[] arrays. After loadin the sketch open a serial console at baud of 115200 to access the user interface. Sending a h to the console will print usage information that describes each function. Each function is enacted by sending the defined one character code:\nv > verbose\nToggles verbose output. At times verbose might present too much information or without it too little.\nl > loopback check\nFind loopback pairs that will generate false-positives for other tests. After running you should remove any loopback pairs from your pins[]/pinnames[]. Looback pairs are found by sending a predetermined pattern[] to all possible pins while checking all pins for matching output. Because the JTAG clock (TCK) and state (TMS) pins are NOT being stimulated the input/output pairs where the pattern is found represent loopbacks. NOTE: you should probably run this once with and without internal pull-up resistors set (r) to avoid problems of cross-talk which is discussed in detail later.\ns > scan\nThis routine is used to check all possible pins and find JTAG clock, state, input and output pins lines (TCK,TMS,TDI,TDO). This is done by setting the JTAG state (TMS) into Shift_IR mode and then sending pattern[] to TDI and checking for it on TDO while clocking TCK. This check is run for every possible pin combination and it is important that you remove loopback pins before running. While this scan is meant to determine all of the JTAG pins required it is possible that the TMS pin found is incorrect. This depends on if the target uses the bypass register by default (described later). If an IDCODE register is present then bypass mode is not the default and you can assume that the pin this scan defines as TMS is correct. Otherwise, only the TCK, TDI and TDO pins can be determined. NOTE: run with pull-ups on (r) as any cross-talk might result in false-positives.\ny > brute force IR search\nThis will set the instruction register (IR) to all possible values and check the output. This can be used to find undocumented instructions and examine their results via the data register (DR). To run this scan you should have already determined the 4 JTAG pins and define pins[] as such: [0]=TCK [1]=TMS [2]=TDO [3]=TDI. NOTE: run with pull-ups on (r) as any cross-talk might result in false-positives.\nx > boundary scan\nThis will return the state of all the pins on the target. Actually it is not just the pins but the contents of the scan/sample register. This should be a rather large register and is defined in the code by SCAN_LEN+100. You can check your targets documentation and specify this or just leave it as a large number (currently 1800). To run this scan you should have already determined the 4 JTAG pins and define pins[] as such: [0]=TCK [1]=TMS [2]=TDO [3]=TDI. NOTE: run with pull-ups on (r) as any cross-talk might result in false-positives.\ni > idcode scan\nThe JTAG standards specify that if an idcode register is present it should be set as the default data register (DR) and attached to output (TDO) by default. Meaning, regardless of the state of the JTAG chip (set with TMS line) and regardless of input being sent to the chip (TDI) by clocking the chip (TCK) it should return the contents of the idcode to the output (TDO). Hence, this routine iterates through all possible TCK,TDO pairs of pins and prints the output when it changes (we assume an idcode will not be all 0s or 1s). You should examine the documentation of your target(s) to see if the idcode matches. NOTE: run with pull-ups on (r) as any cross-talk might result in false-positives.\nb > shift_bypass\nBroken atm (need to add TCK enumeration). The JTAG standards specify that if and idcode register is NOT present on the chip then the bypass register (length of 1) should be the default DR. Essentially this means what is sent to the input (TDI) should come out on the output (TDI) with a one clock delay (TCK). It is important that you remove loopbacks before running this test otherwise the loopback pins will look like valid JTAG lines. NOTE: run with pull-ups on (r) as any cross-talk might result in false-positives.\nr > set pull-up resistors & cross-talk\nIf like me the cables you use to connect between JTAGenum to your targets are flimsy or uninsulated you might run into issues of cross-talk whereby when one pin is transmitting a nearby pin picks up the transmission even though they are not connected. To avoid this you can turn on the internal pull-up resistors which will force the pin to a default state. If for some reason you continue to have sporadic issues run the following in sequence to check if the problem is the cable, target or other:\nDisconnect the cables between your target and JTAGenum. Disconnected them entirely from JTAGenum as well.\nRun a loopback check (l) with pull-ups off. In this state the pins are in open mode and might fluctuate. Youll notice that as you move the microcontroller around, turn lights on and off or move other devices close to or away from it that the results change.\nTurn on pull-ups (r) and run the test again. The results should now be consistent. If they arent, then let me know.\nNow attach your cables to JTAGenum but not the target. Run steps 2 and 3 again. Step 2 will give you a feel for how much inconsistency the cable may add. If the loopback check results in actual pattern matches then your cable has cross-talk. Step 3 should still result in a consistent state of either all high (1s) or all low (0s) and if it doesnt then your cross-talk issues are such that all JTAGenum tests are going to be buggy at best. Feel free to give me an email and I will happily try to help solve the problem.\nA bit about JTAG\nBasic understanding of how JTAG works will be helpful when using JTAGenum. There are 4 lines/pins: TDO=output, TDI=input, TCK=clock, TMS=state machine control. Say you want to read the ID of the chip. First you would send the IDCODE instruction to the instruction register (IR). The JTAG controller then places the actual id code value of the chip in a data register which you could then read out. You would think that it would be enough to have one input line going to the IR and one output coming from the DR but JTAG also supports writing to the DR. As apposed to adding another input line specific to the DR instead JTAG works by moving the input and output lines between IR and DR. The TMS line is used to switch TDI/TDO to IR when you want to place an instruction and back to DR when you want to read or write data. With all operations, be it state change (TMS) reading (TDI) or writing (TDO), the clock line must be cycled once (TCK) for every bit or change. This was a brutal and drastic simplification but with that understood reading the Usage section should be comprehensible.\nFor a more detailed discussion of JTAG see https://github.com/cyphunk/JTAGenum/wiki\nTODO\nupload pictures of the hardware setups\nadd ESP32 support\nBusPirate bitbang support", "link": "https://github.com/cyphunk/JTAGenum", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "branches", "selectorShort": "branch", "MarkedSent": "about jtagenum\njtagenum is an open source arduino jtagenum.ino or raspbberypi jtagenum.sh (experimental) scanner. this code was built with three primary goals:\ngiven a large set of pins on a device determine which are jtag lines\nenumerate the instruction register to find undocumented functionality\nbe easy to build and apply\njtagenum is a more arduino'y fork of arduinull by s\u00e9bastien bourdeauducq (lekernel), which is inspired by benedikt heinz's jtag scanner. jtagenum also includes instruction scanning functionality best described by felix domke (tmbinc) in his 26c3 paper. the initial version of this branch was built for personal research and while working on various projects at recurity labs.\nplease feel free to contact me with any questions, problems, targets or updates. i would be more than happy if you fork and take the code in whatever direction you choose.\nlinks\nembedded analysis wiki: http://github.com/cyphunk/jtagenum/wiki\njtagenum blog post: http://deadhacker.com/2010/02/03/jtag-enumeration/\njtagenum video tutorial \"ghetto tools for embedded analysis recon 2011\": https://www.youtube.com/watch?v=zmbfahwv3ss\nauthors and code -----> branches !!! \ncyphunk http://github.com/cyphunk/jtagenum/\njal2 http://github.com/jal2/jtagenum/\nzoobab http://hackerspace.be/jtag_pinout_detector\nz1y2x https://github.com/z1y2x/jtagenum/\nsimilar tools or -----> branches !!! :\ngremwell's https://github.com/gremwell/go-jtagenum (raspberrypi go rewrite + improvements)\njoegrands's http://www.grandideastudio.com/jtagulator/ (purpose built hardware with improvements and added voltage range)\nszymonh's https://github.com/szymonh/swdscan (arduino based swd finder)\nszymonh's https://github.com/szymonh/jtagscan (arduino based with logic similar to jtagulator)\ndxa4481's https://github.com/dxa4481/inputprotectionshield (1.8-5v voltage shifting shield)\ndipusone's https://github.com/dipusone/inputshieldprotection (fork of dxa4481's shield)\ncommercial products miraclebox, jtagfinder, easyjtag (gui based, some limitations)\nhardware\njtagenum has been tested on the following hardware:\nraspberrypi (3.3v) with mixed results\nstandard arduino (5v)\narduino on teensy (3.3v) (http://www.pjrc.com/teensy/index.html)\narduino on texas instruments tiva c / stellaris (3.3v) (https://github.com/cyphunk/jtagenum/issues/4)\narduino on stm32 bluepill board (3.3v) (https://wiki.stm32duino.com/index.php?title=blue_pill and http://www.zoobab.com/bluepill-arduinoide)\nwhen picking your micro-controller platform consider two issues:\nhow many pins do you want to check on your target.\nwhat voltage level does your target device require.\nconcerning voltage raspberrypi's i/o operate at 3.3v, many arduinos work at 5 volts. some are switchable but even those that are not could be modified. alternatively voltage shifting arduino shields or voltage shifting gadgets can be used. see the voltage shifting appendix discussion on the embedded analysis wiki for more details. https://github.com/cyphunk/jtagenum/wiki/embedded-analysis#voltage_shifting\nwhen connecting the micro-controller to the pins of your target one thing to be aware of is possible cross-talk between wires. the loopback check function in jtagenum cab help you determine which wires may produce cross talk.\nusage\nfor use on raspberry pi use and consult the jtagenum.sh. the raspberry pi pins being used for scanning should be specified inside the script file. this script is experimental and only provides the functions for finding jtag. to use the script should be sourc'ed on the console the user should execute the desired scan. see the comments in the header of the script for further details.\nfor use on a arduino the jtagenum.ino sketch is loaded. the arduino pins being used for scanning should first be specified at the top of the sketch. this is all that is required for basic jtag scanning functionality. once the correct jtag pins on the target have been determined they can be specified in the script and along with the defining the proper ir_length the user can then execute the search for hidden instructions or print the boundary scan register.\nbefore loading the sketch first define the pins[] and pinnames[] arrays. after loadin the sketch open a serial console at baud of 115200 to access the user interface. sending a h to the console will print usage information that describes each function. each function is enacted by sending the defined one character code:\nv > verbose\ntoggles verbose output. at times verbose might present too much information or without it too little.\nl > loopback check\nfind loopback pairs that will generate false-positives for other tests. after running you should remove any loopback pairs from your pins[]/pinnames[]. looback pairs are found by sending a predetermined pattern[] to all possible pins while checking all pins for matching output. because the jtag clock (tck) and state (tms) pins are not being stimulated the input/output pairs where the pattern is found represent loopbacks. note: you should probably run this once with and without internal pull-up resistors set (r) to avoid problems of cross-talk which is discussed in detail later.\ns > scan\nthis routine is used to check all possible pins and find jtag clock, state, input and output pins lines (tck,tms,tdi,tdo). this is done by setting the jtag state (tms) into shift_ir mode and then sending pattern[] to tdi and checking for it on tdo while clocking tck. this check is run for every possible pin combination and it is important that you remove loopback pins before running. while this scan is meant to determine all of the jtag pins required it is possible that the tms pin found is incorrect. this depends on if the target uses the bypass register by default (described later). if an idcode register is present then bypass mode is not the default and you can assume that the pin this scan defines as tms is correct. otherwise, only the tck, tdi and tdo pins can be determined. note: run with pull-ups on (r) as any cross-talk might result in false-positives.\ny > brute force ir search\nthis will set the instruction register (ir) to all possible values and check the output. this can be used to find undocumented instructions and examine their results via the data register (dr). to run this scan you should have already determined the 4 jtag pins and define pins[] as such: [0]=tck [1]=tms [2]=tdo [3]=tdi. note: run with pull-ups on (r) as any cross-talk might result in false-positives.\nx > boundary scan\nthis will return the state of all the pins on the target. actually it is not just the pins but the contents of the scan/sample register. this should be a rather large register and is defined in the code by scan_len+100. you can check your targets documentation and specify this or just leave it as a large number (currently 1800). to run this scan you should have already determined the 4 jtag pins and define pins[] as such: [0]=tck [1]=tms [2]=tdo [3]=tdi. note: run with pull-ups on (r) as any cross-talk might result in false-positives.\ni > idcode scan\nthe jtag standards specify that if an idcode register is present it should be set as the default data register (dr) and attached to output (tdo) by default. meaning, regardless of the state of the jtag chip (set with tms line) and regardless of input being sent to the chip (tdi) by clocking the chip (tck) it should return the contents of the idcode to the output (tdo). hence, this routine iterates through all possible tck,tdo pairs of pins and prints the output when it changes (we assume an idcode will not be all 0s or 1s). you should examine the documentation of your target(s) to see if the idcode matches. note: run with pull-ups on (r) as any cross-talk might result in false-positives.\nb > shift_bypass\nbroken atm (need to add tck enumeration). the jtag standards specify that if and idcode register is not present on the chip then the bypass register (length of 1) should be the default dr. essentially this means what is sent to the input (tdi) should come out on the output (tdi) with a one clock delay (tck). it is important that you remove loopbacks before running this test otherwise the loopback pins will look like valid jtag lines. note: run with pull-ups on (r) as any cross-talk might result in false-positives.\nr > set pull-up resistors & cross-talk\nif like me the cables you use to connect between jtagenum to your targets are flimsy or uninsulated you might run into issues of cross-talk whereby when one pin is transmitting a nearby pin picks up the transmission even though they are not connected. to avoid this you can turn on the internal pull-up resistors which will force the pin to a default state. if for some reason you continue to have sporadic issues run the following in sequence to check if the problem is the cable, target or other:\ndisconnect the cables between your target and jtagenum. disconnected them entirely from jtagenum as well.\nrun a loopback check (l) with pull-ups off. in this state the pins are in open mode and might fluctuate. youll notice that as you move the microcontroller around, turn lights on and off or move other devices close to or away from it that the results change.\nturn on pull-ups (r) and run the test again. the results should now be consistent. if they arent, then let me know.\nnow attach your cables to jtagenum but not the target. run steps 2 and 3 again. step 2 will give you a feel for how much inconsistency the cable may add. if the loopback check results in actual pattern matches then your cable has cross-talk. step 3 should still result in a consistent state of either all high (1s) or all low (0s) and if it doesnt then your cross-talk issues are such that all jtagenum tests are going to be buggy at best. feel free to give me an email and i will happily try to help solve the problem.\na bit about jtag\nbasic understanding of how jtag works will be helpful when using jtagenum. there are 4 lines/pins: tdo=output, tdi=input, tck=clock, tms=state machine control. say you want to read the id of the chip. first you would send the idcode instruction to the instruction register (ir). the jtag controller then places the actual id code value of the chip in a data register which you could then read out. you would think that it would be enough to have one input line going to the ir and one output coming from the dr but jtag also supports writing to the dr. as apposed to adding another input line specific to the dr instead jtag works by moving the input and output lines between ir and dr. the tms line is used to switch tdi/tdo to ir when you want to place an instruction and back to dr when you want to read or write data. with all operations, be it state change (tms) reading (tdi) or writing (tdo), the clock line must be cycled once (tck) for every bit or change. this was a brutal and drastic simplification but with that understood reading the usage section should be comprehensible.\nfor a more detailed discussion of jtag see https://github.com/cyphunk/jtagenum/wiki\ntodo\nupload pictures of the hardware setups\nadd esp32 support\nbuspirate bitbang support", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000099, "year": null}, {"Unnamed: 0": 2381, "autor": 341, "date": null, "content": "Arduino Eurorack projects\nDIY Eurorack projects with Arduino and C++ libraries.\n\ud83d\uded2 Some of these modules are for sale on Reverb and Tindie, as PCB and panel kits or fully assembled!\nModules\nEach module has its own detailed README file.\nClock divider: clock divider in 4 HP.\nForks: two Bernoulli gates, clone of Mutable Instruments Branches.\nIn CV: virtual ensemble that plays Terry Riley's \"In C\" on CV/gate outputs.\nMIDI 4+1: polyphonic and monophonic MIDI to 4x CV/gate interface in 6 HP.\nLibraries and tools\nButton class: convenient reading methods, debouncing, combined single and long-press, internal pull-up usage.\nKnob class: analog value reading with low/high thresholds.\nLED class: handles minimum duration to ensure visibility, implements blinking, toggle, flash.\nMCP4728 class: extends Hideaki Tai's lib to include optional LDAC; a sketch for setting I2C address (device ID) is provided.\nMultiPointMap class: maps values using a multi-linear scale that can be persisted in EEPROM, used to implement DACs calibration (adapted from Befaco MIDI Thing and Emilie Gillet's CVpal).\nSR74HC595 class: simple wrapper around shiftOut() to handle 74HC595 shift registers.\nLicense\nCode: GPL 3.0, hardware: CC BY-SA 3.0.", "link": "https://github.com/joeSeggiola/arduino-eurorack-projects", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "branches", "selectorShort": "branch", "MarkedSent": "arduino eurorack projects\ndiy eurorack projects with arduino and c++ libraries.\n\ud83d\uded2 some of these modules are for sale on reverb and tindie, as pcb and panel kits or fully assembled!\nmodules\neach module has its own detailed readme file.\nclock divider: clock divider in 4 hp.\nforks: two bernoulli gates, clone of mutable instruments -----> branches !!! .\nin cv: virtual ensemble that plays terry riley's \"in c\" on cv/gate outputs.\nmidi 4+1: polyphonic and monophonic midi to 4x cv/gate interface in 6 hp.\nlibraries and tools\nbutton class: convenient reading methods, debouncing, combined single and long-press, internal pull-up usage.\nknob class: analog value reading with low/high thresholds.\nled class: handles minimum duration to ensure visibility, implements blinking, toggle, flash.\nmcp4728 class: extends hideaki tai's lib to include optional ldac; a sketch for setting i2c address (device id) is provided.\nmultipointmap class: maps values using a multi-linear scale that can be persisted in eeprom, used to implement dacs calibration (adapted from befaco midi thing and emilie gillet's cvpal).\nsr74hc595 class: simple wrapper around shiftout() to handle 74hc595 shift registers.\nlicense\ncode: gpl 3.0, hardware: cc by-sa 3.0.", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000341, "year": null}, {"Unnamed: 0": 2511, "autor": 471, "date": null, "content": "MegaDrive++\nMegaDrive++ is a modchip for the Sega Mega Drive (AKA Genesis) with Region switching, 50/60 Hz toggling and In-Game-Reset (IGR) functionalities.\nFeatures\nMegaDrive++ has the following features:\nEUR/USA/JAP mode switching: this effectively makes your console universal, allowing it to bypass region checks and to run all games without resorting to an adapter.\nIf you come from a PAL region, you will also be able to run most games at 60 Hz, which means full-speed and full-screen! Get rid of those black bars! See the difference here!\nThe mod is switchless, so you don't need to modify the aesthetics of your console installing ugly switches, but rather you will be able to change the region:\nThrough the Reset button: Keep pushed to cycle through modes.\nFrom the Player 1 controller pad: Press Start + B + Down/Left/Right to set your desired mode.\nThe last used mode is saved automatically after 5 seconds and reused at power up.\nSupports a single, dual or RGB LED to indicate the current mode.\nReset-From-Pad (AKA In-Game-Reset AKA IGR): Press Start + A + B + C.\nSupports consoles with both active-high and active-low reset signals by autosensing (i.e.: all console revisions!).\nUses a cheap Arduino Nano board.\nUses the popular Arduino environment, allowing for easy development, testing and modifications.\nEven though default settings are recommended, everything can be customized to taste.\nLast but not least, it is Open Source and Free Software!\nBranches & Forks\nIf you were a MegaDrive++ user before May 2019, please note that a few things have changed:\nThe old 6button/lcd_support branch has become the master branch: this is now the recommended version to use and the only supported hardware is the Arduino Nano.\nThe old master branch has become the legacy branch: this is only kept for reference, it is no longer supported and won't get any updates in the future.\nSee this for the rationale behind this change.\nIf you are interested in controlling an overclock mod through your controller, please check out this PR and TurBoss's fork.\nInstallation\nIf you are interested in modding your console with MegaDrive++, please head to the wiki. There you will find full instructions about what to buy, how to compile MegaDrive++ and how to wire it in a few different Mega Drive/Genesis models that were sold.\nLicense\nMegaDrive++ is Copyright \u00a9 2015-2019 by SukkoPera.\nThis program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\nThis program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\nYou should have received a copy of the GNU General Public License along with this program. If not, see http://www.gnu.org/licenses/.\nSupport the Project\nIf you want to support the development of this project, buy me a coffee:\nGet Help\nIf you need help or have questions, you can join the official Telegram group.\nThanks\nD4s/Seb for their work on the original mod that inspired this project.\nAll the users who have contributed testing games or suggesting ideas for improvement.", "link": "https://github.com/SukkoPera/MegaDrivePlusPlus", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "branches", "selectorShort": "branch", "MarkedSent": "megadrive++\nmegadrive++ is a modchip for the sega mega drive (aka genesis) with region switching, 50/60 hz toggling and in-game-reset (igr) functionalities.\nfeatures\nmegadrive++ has the following features:\neur/usa/jap mode switching: this effectively makes your console universal, allowing it to bypass region checks and to run all games without resorting to an adapter.\nif you come from a pal region, you will also be able to run most games at 60 hz, which means full-speed and full-screen! get rid of those black bars! see the difference here!\nthe mod is switchless, so you don't need to modify the aesthetics of your console installing ugly switches, but rather you will be able to change the region:\nthrough the reset button: keep pushed to cycle through modes.\nfrom the player 1 controller pad: press start + b + down/left/right to set your desired mode.\nthe last used mode is saved automatically after 5 seconds and reused at power up.\nsupports a single, dual or rgb led to indicate the current mode.\nreset-from-pad (aka in-game-reset aka igr): press start + a + b + c.\nsupports consoles with both active-high and active-low reset signals by autosensing (i.e.: all console revisions!).\nuses a cheap arduino nano board.\nuses the popular arduino environment, allowing for easy development, testing and modifications.\neven though default settings are recommended, everything can be customized to taste.\nlast but not least, it is open source and free software!\n-----> branches !!!  & forks\nif you were a megadrive++ user before may 2019, please note that a few things have changed:\nthe old 6button/lcd_support branch has become the master branch: this is now the recommended version to use and the only supported hardware is the arduino nano.\nthe old master branch has become the legacy branch: this is only kept for reference, it is no longer supported and won't get any updates in the future.\nsee this for the rationale behind this change.\nif you are interested in controlling an overclock mod through your controller, please check out this pr and turboss's fork.\ninstallation\nif you are interested in modding your console with megadrive++, please head to the wiki. there you will find full instructions about what to buy, how to compile megadrive++ and how to wire it in a few different mega drive/genesis models that were sold.\nlicense\nmegadrive++ is copyright \u00a9 2015-2019 by sukkopera.\nthis program is free software: you can redistribute it and/or modify it under the terms of the gnu general public license as published by the free software foundation, either version 3 of the license, or (at your option) any later version.\nthis program is distributed in the hope that it will be useful, but without any warranty; without even the implied warranty of merchantability or fitness for a particular purpose. see the gnu general public license for more details.\nyou should have received a copy of the gnu general public license along with this program. if not, see http://www.gnu.org/licenses/.\nsupport the project\nif you want to support the development of this project, buy me a coffee:\nget help\nif you need help or have questions, you can join the official telegram group.\nthanks\nd4s/seb for their work on the original mod that inspired this project.\nall the users who have contributed testing games or suggesting ideas for improvement.", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000471, "year": null}, {"Unnamed: 0": 2593, "autor": 553, "date": null, "content": ">> Sponsor Me on GitHub <<\nGabriel Staples\nThese are my Linux Ubuntu configuration files and commonly-used scripts--many of which I've written myself.\nThis project is well-maintained, highly-used by myself, and highly-functional. It's not experimental, it's what I use every day. Feel free to use or borrow from it yourself.\nAlso very useful:\nMy eRCaGuy_hello_world repo.\nTable of Contents\n(click to expand)\nProject: eRCaGuy_dotfiles\nhttps://github.com/ElectricRCAircraftGuy/eRCaGuy_dotfiles\nDescription of contents\nThis project started out as just a few helpful nuggets I like to put in my ~/.bashrc file, for example, as well as some scripts and other configuration files, but I decided to make it a place I put all sorts of reference scripts, files, shortcuts, Linux tips & tricks, Eclipse documentation, etc, I've built up over the years.\nHere are some of the contents contained herein:\ngit & Linux cmds, help, tips & tricks - Gabriel.txt - a general note-taking document where I jot down Linux commands, examples, notes about how to use gdb, bazel, various command-line tools, build tools, etc.\nIt's kind of a general place where I write down things I learn which I know I will need later and don't want to forget. Correction: it's actually more correct to say I know I will forget them, so I write them down so I can come back and reference them later.\nI can't remember what I learned, but I can remember where I wrote it down, so I frequently reference this document to remind myself what I learned.\ngit diffn drop-in-replacement program to show git diff with line 'n'umbers. As a thin awk-language-based wrapper around git diff it supports ALL options and features that git diff does! Learn how to install and use it here. Screenshot:\ngit blametool. See: useful_scripts/README.md.\ngit branch_. Same as git branch except don't show \"hidden\", user-backed-up branches. See my answer here: Hide but still save a branch with GIT?\nssh key setup information\nincluding a really good gs_ssh alias which automatically sources a custom .bashrc file in your ssh environment whenever you log in!\n.bashrc file which contains:\nls aliases such as ll, la, & l\nPrompt String 1 (PS1) modifications to add terminal titles, current git branch name checked out [VERY USEFUL FEATURE!], bash shell level, etc\nssh aliases\nfunction to set terminal title\nability to open up default tabs (with unique titles) for rapid launching of tabs in a terminal for development work\n.gitconfig file with meld as my difftool, git lg alias, etc\nPreferences.sublime-settings = Sublime Text 3 settings I like\n.gitignore example\n.imwheelrc config to improve mouse wheel scroll speed in Chrome\nTemplates for right-click --> Create New Document menu in GUI file manager\nDesktop launchers (.desktop) files, including install/uninstall scripts\nArduino tools & resources\nHow to enable uploading to boards by adding user to \"dialout\" group\nHow to enable flashing bootloaders with USBasp tool by setting up proper udev rule\nEclipse tools & resources, including a reference & setup manual I've written:\nEclipse setup instructions on a new Linux (or other OS) computer.pdf\nEclipse color theme to make it have syntax highlighting that looks exactly like Sublime Text 3 (thanks to Jeremy Shepherd!)\n/etc/udev/rules.d/ udev rules\nNoMachine remote login setup info\nUseful scripts: see section below\nRipgrep fuzzy finder, \"rgf.sh\".\netc.\nInstallation & Usage:\nNote: the installation script isn't kept up-to-date very well. It falls behind frequently as I add new features and useful scripts, then I periodically have to update it again. So, it's not a bad idea to run this installation command anyway, to let it install whatever it can, but then still manually look into the useful_scripts folder, the home folder, and elsewhere, for other scripts or tools in this repo which this install script doesn't yet install.\nTo run the install script for this eRCaGuy_dotfiles project:\n./install_all.sh\nEdit this script first if customization is desired. It's all interactive, however, so it won't overwrite anything without your permission.\nHowever, it's still a good idea to back up your home directory first before running the installation script and to: 1) read the installation prompts carefully as it asks you to for permission to overwrite something, and 2) make sure you back any of those files it's prompting you about before allowing it to overwrite them.\nAdditionally:\nMost files contain comments with additional info, instructions, or helpful links to look at.\nMany directories contain readmes, and some contain install scripts, such as my scripts to help install .desktop files.\nIf a readme exists in a subfolder, take a look at it too for more install help or other usage information.\nEssentially, just read the readmes, headers, & other comments and it will become self-explanatory how to use or \"install\" something. If not, open up an issue or pull request and I'll address it.\nUseful Applications\nGood applications to install right after you install Linux.\nSee: useful_apps/README.md.\nUseful Scripts\nSee useful_scripts/README.md\nHere is a list of all of the scripts provided in the \"useful_scripts\" directory. Some of these are so amazingly useful to me, and powerful, they deserve a section all on their own!\nTherefore, I have created an additional readme to describe a few of these scripts in greater detail here: useful_scripts/README.md.\n(tree generated w/tree eRCaGuy_dotfiles/useful_scripts):\nSelect scripts which I find especially useful are marked with up to 5 asterisks (*****):\n$ tree useful_scripts/\nuseful_scripts/\n\u251c\u2500\u2500 apt-cacher-server_proxy.sh\n\u251c\u2500\u2500 apt-cacher-server_proxy_status.sh\n\u251c\u2500\u2500 apt-cacher-server_proxy_toggle.sh\n\u251c\u2500\u2500 desktop_file_install.sh -> ../Desktop_launchers/desktop_file_install.sh\n\u251c\u2500\u2500 desktop_file_uninstall.sh -> ../Desktop_launchers/desktop_file_uninstall.sh\n\u251c\u2500\u2500 *****find_and_replace.sh\n\u251c\u2500\u2500 find_and_replace_test_folder\n\u2502 \u251c\u2500\u2500 readme.md\n\u2502 \u251c\u2500\u2500 test1.cpp\n\u2502 \u251c\u2500\u2500 test1.txt\n\u2502 \u251c\u2500\u2500 test2.cpp\n\u2502 \u251c\u2500\u2500 test2.txt\n\u2502 \u2514\u2500\u2500 test3.txt\n\u251c\u2500\u2500 *****git-changes.sh\n\u251c\u2500\u2500 git-diffc.sh\n\u251c\u2500\u2500 git-diffn_screenshot_cropped.png\n\u251c\u2500\u2500 git-diffn_screenshot.png\n\u251c\u2500\u2500 *****git-diffn.sh\n\u251c\u2500\u2500 *****git-filechange-search.sh\n\u251c\u2500\u2500 git-tree.txt\n\u251c\u2500\u2500 install_all.sh -> ../install_all.sh\n\u251c\u2500\u2500 Link to ElectricRCAircraftGuy - Chrome-Case-Sensitive-Find A case-sensitive Find tool (recommended to use Ctrl + Alt + F) for the Google Chrome Browser.desktop\n\u251c\u2500\u2500 Link to ElectricRCAircraftGuy - eRCaGuy_PyTerm A datalogging serial terminal-console written in Python (I hope to extend it to Telnet and others later).desktop\n\u251c\u2500\u2500 Link to ElectricRCAircraftGuy - git-tree New git features 1) graphically view all your branches in a hierarchical fashion based on forking or desired dependencies; 2) cascade recursive rebases down the line.desktop\n\u251c\u2500\u2500 Link to ElectricRCAircraftGuy - PDF2SearchablePDF `pdf2searchablepdf input.pdf` = voila! ''input_searchable.pdf'' is created & now has searchable text!.desktop\n\u251c\u2500\u2500 *****open_programming_tools.sh\n\u251c\u2500\u2500 README_git-diffn.md\n\u251c\u2500\u2500 README_git-sync_repo_from_pc1_to_pc2.md\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 ****ros_readbagfile.py\n\u251c\u2500\u2500 scratch_work\n\u2502 \u2514\u2500\u2500 gawk_git_diff_with_line_numbers.sh\n\u251c\u2500\u2500 sync_git_repo_from_pc1_to_pc2--notes.txt\n\u251c\u2500\u2500 *****sync_git_repo_from_pc1_to_pc2.sh\n\u251c\u2500\u2500 *****tmux-session.sh\n\u2514\u2500\u2500 *****touchpad_toggle.sh\n2 directories, 34 files\nMisc. Install Instructions:\nInstall speedtest by Ookla:\nGo here: https://www.speedtest.net/apps/cli --> scroll to the bottom and click \"Download for Linux\" --> right-click on the correct architecture option from the download menu dropdown list which shows up, and go to \"Copy link address\". This is the address used in the wget line below. Here, I show it for the x86_64 (64-bit processor) option.\n# Tested in Ubuntu 18.04\nmkdir -p ~/Downloads/Install_Files/speedtest--ookla\ncd ~/Downloads/Install_Files/speedtest--ookla\nwget https://install.speedtest.net/app/cli/ookla-speedtest-1.1.1-linux-x86_64.tgz\nFILENAME=\"ookla-speedtest-1.1.1-linux-x86_64.tgz\"\n# strip off extension to derive the dirname; see: https://stackoverflow.com/a/965072/4561887\nDIRNAME=\"${FILENAME%.*}\"\nmkdir -p \"$DIRNAME\"\ntar -xvzf \"$FILENAME\" --directory=\"$DIRNAME\"\ncd \"$DIRNAME\"\nmkdir -p ~/bin\nln -si \"$(pwd)/speedtest\" ~/bin/speedtest\n# log out and log back in now if this is the first time you've created and used the\n# ~/bin dir, as this will automatically add it to your $PATH variable in Ubuntu.\n# Otherwise, `speedtest` is ready to use immediately.\nAfter extracting speedtest as shown above, a markdown readme for it is found in ~/Downloads/Install_Files/speedtest--ookla/ookla-speedtest-1.1.1-linux-x86_64/speedtest.md.", "link": "https://github.com/ElectricRCAircraftGuy/eRCaGuy_dotfiles", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "branches", "selectorShort": "branch", "MarkedSent": ">> sponsor me on github <<\ngabriel staples\nthese are my linux ubuntu configuration files and commonly-used scripts--many of which i've written myself.\nthis project is well-maintained, highly-used by myself, and highly-functional. it's not experimental, it's what i use every day. feel free to use or borrow from it yourself.\nalso very useful:\nmy ercaguy_hello_world repo.\ntable of contents\n(click to expand)\nproject: ercaguy_dotfiles\nhttps://github.com/electricrcaircraftguy/ercaguy_dotfiles\ndescription of contents\nthis project started out as just a few helpful nuggets i like to put in my ~/.bashrc file, for example, as well as some scripts and other configuration files, but i decided to make it a place i put all sorts of reference scripts, files, shortcuts, linux tips & tricks, eclipse documentation, etc, i've built up over the years.\nhere are some of the contents contained herein:\ngit & linux cmds, help, tips & tricks - gabriel.txt - a general note-taking document where i jot down linux commands, examples, notes about how to use gdb, bazel, various command-line tools, build tools, etc.\nit's kind of a general place where i write down things i learn which i know i will need later and don't want to forget. correction: it's actually more correct to say i know i will forget them, so i write them down so i can come back and reference them later.\ni can't remember what i learned, but i can remember where i wrote it down, so i frequently reference this document to remind myself what i learned.\ngit diffn drop-in-replacement program to show git diff with line 'n'umbers. as a thin awk-language-based wrapper around git diff it supports all options and features that git diff does! learn how to install and use it here. screenshot:\ngit blametool. see: useful_scripts/readme.md.\ngit branch_. same as git branch except don't show \"hidden\", user-backed-up -----> branches !!! . see my answer here: hide but still save a branch with git?\nssh key setup information\nincluding a really good gs_ssh alias which automatically sources a custom .bashrc file in your ssh environment whenever you log in!\n.bashrc file which contains:\nls aliases such as ll, la, & l\nprompt string 1 (ps1) modifications to add terminal titles, current git branch name checked out [very useful feature!], bash shell level, etc\nssh aliases\nfunction to set terminal title\nability to open up default tabs (with unique titles) for rapid launching of tabs in a terminal for development work\n.gitconfig file with meld as my difftool, git lg alias, etc\npreferences.sublime-settings = sublime text 3 settings i like\n.gitignore example\n.imwheelrc config to improve mouse wheel scroll speed in chrome\ntemplates for right-click --> create new document menu in gui file manager\ndesktop launchers (.desktop) files, including install/uninstall scripts\narduino tools & resources\nhow to enable uploading to boards by adding user to \"dialout\" group\nhow to enable flashing bootloaders with usbasp tool by setting up proper udev rule\neclipse tools & resources, including a reference & setup manual i've written:\neclipse setup instructions on a new linux (or other os) computer.pdf\neclipse color theme to make it have syntax highlighting that looks exactly like sublime text 3 (thanks to jeremy shepherd!)\n/etc/udev/rules.d/ udev rules\nnomachine remote login setup info\nuseful scripts: see section below\nripgrep fuzzy finder, \"rgf.sh\".\netc.\ninstallation & usage:\nnote: the installation script isn't kept up-to-date very well. it falls behind frequently as i add new features and useful scripts, then i periodically have to update it again. so, it's not a bad idea to run this installation command anyway, to let it install whatever it can, but then still manually look into the useful_scripts folder, the home folder, and elsewhere, for other scripts or tools in this repo which this install script doesn't yet install.\nto run the install script for this ercaguy_dotfiles project:\n./install_all.sh\nedit this script first if customization is desired. it's all interactive, however, so it won't overwrite anything without your permission.\nhowever, it's still a good idea to back up your home directory first before running the installation script and to: 1) read the installation prompts carefully as it asks you to for permission to overwrite something, and 2) make sure you back any of those files it's prompting you about before allowing it to overwrite them.\nadditionally:\nmost files contain comments with additional info, instructions, or helpful links to look at.\nmany directories contain readmes, and some contain install scripts, such as my scripts to help install .desktop files.\nif a readme exists in a subfolder, take a look at it too for more install help or other usage information.\nessentially, just read the readmes, headers, & other comments and it will become self-explanatory how to use or \"install\" something. if not, open up an issue or pull request and i'll address it.\nuseful applications\ngood applications to install right after you install linux.\nsee: useful_apps/readme.md.\nuseful scripts\nsee useful_scripts/readme.md\nhere is a list of all of the scripts provided in the \"useful_scripts\" directory. some of these are so amazingly useful to me, and powerful, they deserve a section all on their own!\ntherefore, i have created an additional readme to describe a few of these scripts in greater detail here: useful_scripts/readme.md.\n(tree generated w/tree ercaguy_dotfiles/useful_scripts):\nselect scripts which i find especially useful are marked with up to 5 asterisks (*****):\n$ tree useful_scripts/\nuseful_scripts/\n\u251c\u2500\u2500 apt-cacher-server_proxy.sh\n\u251c\u2500\u2500 apt-cacher-server_proxy_status.sh\n\u251c\u2500\u2500 apt-cacher-server_proxy_toggle.sh\n\u251c\u2500\u2500 desktop_file_install.sh -> ../desktop_launchers/desktop_file_install.sh\n\u251c\u2500\u2500 desktop_file_uninstall.sh -> ../desktop_launchers/desktop_file_uninstall.sh\n\u251c\u2500\u2500 *****find_and_replace.sh\n\u251c\u2500\u2500 find_and_replace_test_folder\n\u2502 \u251c\u2500\u2500 readme.md\n\u2502 \u251c\u2500\u2500 test1.cpp\n\u2502 \u251c\u2500\u2500 test1.txt\n\u2502 \u251c\u2500\u2500 test2.cpp\n\u2502 \u251c\u2500\u2500 test2.txt\n\u2502 \u2514\u2500\u2500 test3.txt\n\u251c\u2500\u2500 *****git-changes.sh\n\u251c\u2500\u2500 git-diffc.sh\n\u251c\u2500\u2500 git-diffn_screenshot_cropped.png\n\u251c\u2500\u2500 git-diffn_screenshot.png\n\u251c\u2500\u2500 *****git-diffn.sh\n\u251c\u2500\u2500 *****git-filechange-search.sh\n\u251c\u2500\u2500 git-tree.txt\n\u251c\u2500\u2500 install_all.sh -> ../install_all.sh\n\u251c\u2500\u2500 link to electricrcaircraftguy - chrome-case-sensitive-find a case-sensitive find tool (recommended to use ctrl + alt + f) for the google chrome browser.desktop\n\u251c\u2500\u2500 link to electricrcaircraftguy - ercaguy_pyterm a datalogging serial terminal-console written in python (i hope to extend it to telnet and others later).desktop\n\u251c\u2500\u2500 link to electricrcaircraftguy - git-tree new git features 1) graphically view all your branches in a hierarchical fashion based on forking or desired dependencies; 2) cascade recursive rebases down the line.desktop\n\u251c\u2500\u2500 link to electricrcaircraftguy - pdf2searchablepdf `pdf2searchablepdf input.pdf` = voila! ''input_searchable.pdf'' is created & now has searchable text!.desktop\n\u251c\u2500\u2500 *****open_programming_tools.sh\n\u251c\u2500\u2500 readme_git-diffn.md\n\u251c\u2500\u2500 readme_git-sync_repo_from_pc1_to_pc2.md\n\u251c\u2500\u2500 readme.md\n\u251c\u2500\u2500 ****ros_readbagfile.py\n\u251c\u2500\u2500 scratch_work\n\u2502 \u2514\u2500\u2500 gawk_git_diff_with_line_numbers.sh\n\u251c\u2500\u2500 sync_git_repo_from_pc1_to_pc2--notes.txt\n\u251c\u2500\u2500 *****sync_git_repo_from_pc1_to_pc2.sh\n\u251c\u2500\u2500 *****tmux-session.sh\n\u2514\u2500\u2500 *****touchpad_toggle.sh\n2 directories, 34 files\nmisc. install instructions:\ninstall speedtest by ookla:\ngo here: https://www.speedtest.net/apps/cli --> scroll to the bottom and click \"download for linux\" --> right-click on the correct architecture option from the download menu dropdown list which shows up, and go to \"copy link address\". this is the address used in the wget line below. here, i show it for the x86_64 (64-bit processor) option.\n# tested in ubuntu 18.04\nmkdir -p ~/downloads/install_files/speedtest--ookla\ncd ~/downloads/install_files/speedtest--ookla\nwget https://install.speedtest.net/app/cli/ookla-speedtest-1.1.1-linux-x86_64.tgz\nfilename=\"ookla-speedtest-1.1.1-linux-x86_64.tgz\"\n# strip off extension to derive the dirname; see: https://stackoverflow.com/a/965072/4561887\ndirname=\"${filename%.*}\"\nmkdir -p \"$dirname\"\ntar -xvzf \"$filename\" --directory=\"$dirname\"\ncd \"$dirname\"\nmkdir -p ~/bin\nln -si \"$(pwd)/speedtest\" ~/bin/speedtest\n# log out and log back in now if this is the first time you've created and used the\n# ~/bin dir, as this will automatically add it to your $path variable in ubuntu.\n# otherwise, `speedtest` is ready to use immediately.\nafter extracting speedtest as shown above, a markdown readme for it is found in ~/downloads/install_files/speedtest--ookla/ookla-speedtest-1.1.1-linux-x86_64/speedtest.md.", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000553, "year": null}, {"Unnamed: 0": 2806, "autor": 766, "date": null, "content": "ArduRTOS for Arduino\u00ae FreeRTOS Public Source Repository\nImprove your FreeRTOS knowledge with high quality exams\nClick here for Atmel\u00ae Wikipedia\nClick here for Atmel\u00ae AVR\u00ae Wikipedia\nClick here for Arduino Reference\nClick here for The FreeRTOS Kernel\nWhat It Is\nHow To Use\nFeatures\nRequirements\nDependencies\nAbout\nCollaborators\nBranches\nCopyright & Licensing\nContributing\nContact\nWhat It Is\nArduRTOS for Arduino\u00ae FreeRTOS Library\nArduRTOS guide is an easy and advanced way to learn FreeRTOS programming. It will contribute greatly to both a hobby and a school lesson.\nHow To Use\nJust research the main repository and learn it gradually. Thats all.\nWARNING: Before looking at the exams, please try to solve it yourself first. It's more important than anything. It's a key to success.\nFeatures\nSuitable for new FreeRTOS learners\nSuitable CS101 content\nSuitable for midterm and final exams\nMore than 10+ example content for every chapter\nRich content with screenshots and circuit diagrams (soon)\nRequirements\nYou should be familiar with C programming\nYou will need a text editor (i.e Sublime Text) or IDE (i.e Arduino IDE)\nYou will need an Arduino electronic programming platform (If you want to test with USB cable) - (Skip this if you have an Arduino Virtual Simulator or Proteus)\nYou will need a computer on which you have the rights to install Arduino dependencies\nDependencies\nArduino Development Libaries (for building)\nThe FreeRTOS Kernel for Arduino (Arduino_FreeRTOS.h)\nAbout\nArduRTOS was created to serve three purposes:\nArduRTOS is a basically FreeRTOS programming learning repository coded in Arduino/C language using Arduino IDE\nTo act as a guide to learn basic Arduino/C programming with enhanced and rich content\nTo provide a simplest and easiest way to learn detailed and interesting things about FreeRTOS\nThere is a source for you to develop yourself in RTOS and inreace your Arduino programming level\nCollaborators\nProject Manager - Furkan T\u00fcrkal (GitHub: Dentrax)\nBranches\nWe publish source for the [ArduRTOS] in single rolling branch:\nThe master branch is extensively tested and makes a great starting point for learning the RTOS. Also tracks live changes by commits.\nCopyright & Licensing\nThe base project code is copyrighted by Furkan 'Dentrax' T\u00fcrkal and is covered by single licence.\nAll program code (i.e. ino, .md) is licensed under MIT License unless otherwise specified. Please see the LICENSE.md file for more information.\nArduino\u00ae\nArduino is an open source computer hardware and software company, project, and user community that designs and manufactures single-board microcontrollers and microcontroller kits for building digital devices and interactive objects that can sense and control objects in the physical and digital world.\nAtmel\u00ae\nAtmel is a leading manufacturer of microcontrollers and touch technology semiconductors for mobile, automotive, industrial, smart energy, lighting, ...\nAVR\u00ae\nAVR is a family of microcontrollers developed by Atmel beginning in 1996. These are modified Harvard architecture 8-bit RISC single-chip microcontrollers.\nFreeRTOS\nFreeRTOS is an advanced RealTimeOperatingSystem kernel.\nReferences\nWhile this repository is being prepared, it may have been quoted from some sources.\nhttps://www.freertos.org/\nhttps://aws.amazon.com/freertos/\nhttps://github.com/feilipu/Arduino_FreeRTOS_Library\nIf there is an unspecified source or if you think that I made a copyright infringement, please contact with me.\nContributing\nPlease check the CONTRIBUTING.md file for contribution instructions and naming guidelines.\nContact\nArduRTOS was created by Furkan 'Dentrax' T\u00fcrkal\nhttps://www.furkanturkal.com\nYou can contact by URL: CONTACT\nBest Regards", "link": "https://github.com/Dentrax/ArduRTOS", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "branches", "selectorShort": "branch", "MarkedSent": "ardurtos for arduino\u00ae freertos public source repository\nimprove your freertos knowledge with high quality exams\nclick here for atmel\u00ae wikipedia\nclick here for atmel\u00ae avr\u00ae wikipedia\nclick here for arduino reference\nclick here for the freertos kernel\nwhat it is\nhow to use\nfeatures\nrequirements\ndependencies\nabout\ncollaborators\n-----> branches !!! \ncopyright & licensing\ncontributing\ncontact\nwhat it is\nardurtos for arduino\u00ae freertos library\nardurtos guide is an easy and advanced way to learn freertos programming. it will contribute greatly to both a hobby and a school lesson.\nhow to use\njust research the main repository and learn it gradually. thats all.\nwarning: before looking at the exams, please try to solve it yourself first. it's more important than anything. it's a key to success.\nfeatures\nsuitable for new freertos learners\nsuitable cs101 content\nsuitable for midterm and final exams\nmore than 10+ example content for every chapter\nrich content with screenshots and circuit diagrams (soon)\nrequirements\nyou should be familiar with c programming\nyou will need a text editor (i.e sublime text) or ide (i.e arduino ide)\nyou will need an arduino electronic programming platform (if you want to test with usb cable) - (skip this if you have an arduino virtual simulator or proteus)\nyou will need a computer on which you have the rights to install arduino dependencies\ndependencies\narduino development libaries (for building)\nthe freertos kernel for arduino (arduino_freertos.h)\nabout\nardurtos was created to serve three purposes:\nardurtos is a basically freertos programming learning repository coded in arduino/c language using arduino ide\nto act as a guide to learn basic arduino/c programming with enhanced and rich content\nto provide a simplest and easiest way to learn detailed and interesting things about freertos\nthere is a source for you to develop yourself in rtos and inreace your arduino programming level\ncollaborators\nproject manager - furkan t\u00fcrkal (github: dentrax)\nbranches\nwe publish source for the [ardurtos] in single rolling branch:\nthe master branch is extensively tested and makes a great starting point for learning the rtos. also tracks live changes by commits.\ncopyright & licensing\nthe base project code is copyrighted by furkan 'dentrax' t\u00fcrkal and is covered by single licence.\nall program code (i.e. ino, .md) is licensed under mit license unless otherwise specified. please see the license.md file for more information.\narduino\u00ae\narduino is an open source computer hardware and software company, project, and user community that designs and manufactures single-board microcontrollers and microcontroller kits for building digital devices and interactive objects that can sense and control objects in the physical and digital world.\natmel\u00ae\natmel is a leading manufacturer of microcontrollers and touch technology semiconductors for mobile, automotive, industrial, smart energy, lighting, ...\navr\u00ae\navr is a family of microcontrollers developed by atmel beginning in 1996. these are modified harvard architecture 8-bit risc single-chip microcontrollers.\nfreertos\nfreertos is an advanced realtimeoperatingsystem kernel.\nreferences\nwhile this repository is being prepared, it may have been quoted from some sources.\nhttps://www.freertos.org/\nhttps://aws.amazon.com/freertos/\nhttps://github.com/feilipu/arduino_freertos_library\nif there is an unspecified source or if you think that i made a copyright infringement, please contact with me.\ncontributing\nplease check the contributing.md file for contribution instructions and naming guidelines.\ncontact\nardurtos was created by furkan 'dentrax' t\u00fcrkal\nhttps://www.furkanturkal.com\nyou can contact by url: contact\nbest regards", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000766, "year": null}], "name": "brancharduino"}