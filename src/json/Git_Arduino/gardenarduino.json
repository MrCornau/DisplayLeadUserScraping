{"interestingcomments": [{"Unnamed: 0": 2048, "autor": 8, "date": null, "content": "NOTICE1: Please do not copy the contents of this page to your blog. You can share this page but please share with the original link. That is how we compliment the authors of good document and open source project.\nNOTICE2: Please notice that low-level programming is out of trend and currently there are not many companies hiring low-level developer. It is getting harder for me to find a job. If you haven't started a professional career yet, I would like to recommend you consider other fields either carefully.\nNOTICE3: If you want a quick start, go to \"How to start?\".\nLow-Level Programming University\nWhat is it?\nWhat Is the Low Level\nTheory\nLanguages\nAssembly\nC language\nRust language\nApplications\nHardware && Firmware\nLinux kernel and device driver\nReferences\nOther applications\nFuture of low-level programming\nHow to start?\nTranslation\nWho am I?\nLow-Level Programming University\nWhat is it?\nI'm inspired by google-interview-university. I'd like to share my experience and show a roadmap to becoming a low-level programmer because I have found that these skills are not as common as they once were. In addition, many students and beginners ask me how they could become low-level programmers and Linux kernel engineers.\nThis page cannot include every link/book/course. For example, this page introduces Arduino but there is not detailed information about Arduino and embedded systems. You should go further yourself. You have the keyword \"Arduino\" with which you can start. So your next step is probably googling Arduino, buying a kit, and doing something for yourself, not collecting links or free books. Please remember this page is just a roadmap for beginners.\nLow-level programming is a part of computer science. Absolutely it would be much better to get education for computer science first.\nPath to a free self-taught education in Computer Science!\nWhat Is the Low-Level?\nI classify low-level programming as programming that is very close to the machine, using a lower level programming language like C or assembly. This is in contrast to higher-level programming, typical of user-space applications, using high level languages (e.g. Python, Java).\nWikipedia: Low-level programming language\nYes, systems programming is a very close concept to low-level programming. This page includes the hardware design and firmware development that is not included in systems programming.\nWikipedia: System programming\nFinally, this page includes topics ranging from hardware components to the Linux kernel. That is a huge range of layers. A one page document can never cover the details of all the layers, so the aim of this document is to serve as a starting point for low-level programming.\nTheory\nThere are two background theories to low-level programming:\nComputer Architecture\nOperating Systems\nI think the best way to learn theory is by taking a course. Reading books is not bad but takes too much time and effort. You can find many good classes on online universities, for instance, Coursera.org and edx.org. Theory is theory. I don't think you need to get an A+ in the class, just understand the big picture. You'll get better and better with experience.\nLet me introduce several books that I've read. They are commonly used as textbooks in universities. If there is no class with these books in your university, it's worth spending some time reading them.\nComputer Architecture\nComputer Architecture, Fifth Edition: A Quantitative Approach\nComputer Systems: A Programmer's Perspective\nComputer Organization and Design, Fourth Edition: The Hardware/Software Interface\nOperating Systems\nThe Magic Garden Explained: The Internals of UNIX System V Release 4 an Open Systems Design\nThe Design of the UNIX Operating System\nOperating Systems: Internals and Design Principles by William Stallings\nRecommended Courses\nCS401: Operating Systems from saylor.org\nThere is an infinite list of good books. I don't want to say that you should read many books. Just read one book carefully. Whenever you learn a theory, implement simulation code of it. Implementing one thing is better than knowing one hundred theories.\nLanguages\nAssembly\nChoose one between x86 or ARM. No need to know both. It doesn't matter to know assembly language. The essential thing is understanding the internals of a CPU and computer. So you don't need to practice the assembly of the latest CPU. Select 8086 or Corex-M.\n8086 assembly programming with emu8086\nbasic concepts of CPU and computer architecture\nbasic concepts of C programming language\n64bit assembly programming(translation in progress)\nbasic concepts of modern CPU and computer architecture\nbasic concepts of disassembling and debugging of C code\nneed help for translation\nLearning assembly for linux-x64\npure 64-bit assembly programming with NASM and inline assembly with GCC\nARM Architecture Reference Manual, 2nd Edition\nComplete reference on ARM programming\nComputer Organization and Design\nMIPS Edition\nARM Edition\nRISC-V Edition\nAcademic books that explain how every component of a computer work from the ground up.\nExplains in detail the different concepts that make up computer architecture.\nThey are not targeted at readers who wish to become proficient in a specific assembly language.\nThe MIPS and ARM edition cover the same topics but by dissecting a different architecture.\nBoth editions contain examples in the x86 world\nC language\nThere is no shortcut. Just read the entire book and solve all the exercises.\nC Programming: A Modern Approach, 2nd Edition\nThe C Programming Language 2nd Edition\nModern C\nFor new standard of C\nIs Parallel Programming Hard, And, If So, What Can You Do About It?\nraw implementation of synchronization with C\nEssential for large scale C programming (especially for kernel programming)\nC Project Based Tutorials?\nIf you finish reading one or two C programming books, then you MUST make something.\nChoose whatever you like.\nFirst make on your own and then compare with someone else's source code. It is very important to compare your source and others. You can improve your skill only when you read the other's source and learn better methods. Books are dead and source is live.\nC and other languages based projects\nfind more interesting projects\nMichael Abrash\u2019s Graphics Programming Black Book, Special Edition\nReference on optimization using C and a bit of x86 assembly\nStarts from the 8088 up to today\nSpecial focus on low-level graphics optimization\nFramework and plugin design in C\nHow to develop framework and plugin in C for large scale software\nVery basic programming tips for Linux kernel source reading\nIf you want to be expert of C programming, visit https://leetcode.com/. Good luck!\nRust language\nI am sure that the next language for the systems programming would be Rust. I will make a list what I did to learn Rust.\nThe Rust Programming Language\nGreat introduction, but lack of examples and exercises.\nRust by Example\nWhile reading \"The Rust Programming Language\", you can find examples and exercises here.\nBut there are not many exercises you can do something for yourself. Only some examples includes \"do-this\" exercises and they are very simple.\nProgramming Rust, 2nd\nDeeper introduction, but still lack of examples and exercises.\nExercism\nGood exercises to practice indivisual features of RUST.\nI am not sure Mentors are working actively but it would be enough to compare your solution with others.\nAfter submitting your solution, you can see other's solutions with \"Community solutions\" tab (since Exercism V3).\nMany easy level exercises are for functional feature such as map/filter/any and etc.\nApplications\nHardware && Firmware\nIf you want to be an embedded systems engineer, it would be best to start from a simple hardware kit, rather than starting with the latest ARM chipset.\nArduino Start Kit\nThere are many series of Arduinos but \"Arduino Start Kit\" has the most simple processor(Atmega328P) and guide book\nAtmega328P has an 8-bit core which is a good place to start digital circuit design and firmware development.\nYou don't need to know how to draw schematics and layouts and assemble the chips.\nBut you do need to know how to read schematics and understand how the chips are connected.\nFirmware developers should be able to read the schematics and figure out how to send data to the target device.\nFollow the guide book!\n8086 manual\nIf you're a beginner to x86 architecture, 8086 is also very good guide for processor architecture and 80x86 assembly\n80386 manual\nBest guide for protected mode and paging mechanism of 80x86 processor\nWeb version: https://pdos.csail.mit.edu/6.828/2011/readings/i386/toc.htm\nAt this point, you should be good to start the latest ARM or x86 processor.\nhttps://www.raspberrypi.org/\nhttps://beagleboard.org/\nhttps://www.arduino.cc/en/ArduinoCertified/IntelEdison\nFor example, the Raspberry Pi board has a Cortex-A53 Processor that supports a 64-bit instruction set. This allows you to experience a modern processor architecture with rPi. Yes, you can buy it... but... what are you going to do with it? If you have no target project, you would be likely to throw the board into a drawer and forget it like other gadgets you may have bought before.\nSo, I recommend one project for you.\nMaking your own kernel\nGood references: https://www.reddit.com/r/osdev/\nLearning operating system development using Linux kernel and Raspberry Pi\n(description of the project) This repository contains a step-by-step guide that teaches how to create a simple operating system (OS) kernel from scratch...(skip)...Each lesson is designed in such a way that it first explains how some kernel feature is implemented in the RPi OS, and then it tries to demonstrate how the same functionality works in the Linux kernel.\nI've made a toy kernel that supports 64-bit long mode, paging and very simple context switching. Making a toy kernel is good way to understand modern computer architecture and hardware control.\nIn fact, you have already the latest processor and the latest hardware devices. Your laptop! Your desktop! You already have all that you need in order to start! You don't need to buy anything. The qemu emulator can emulate the latest ARM processors and Intel processors. So everything you need is already on hand. There are many toy kernels and documents you can refer to. Just install qemu emulator and make a tiny kernel that just boots, turns on paging, and prints some messages.\nOther toy kernels:\nhttps://littleosbook.github.io/\nhttps://tuhdo.github.io/os01/\nLinux kernel and device driver\nYou don't need to make a complete operating system. Join the Linux community and participate in development.\nSome resources for Linux kernel and device driver development from beginner to advanced.\nBooks: Read the following in order\nThe Design of the Unix Operating System\nThe basic concepts of Unix are applied into all operating systems.\nThis book is a very good place to learn the core concepts of operating systems.\nLinux Device Drivers\nMake all examples for yourself\nLinux Kernel Development\nUnderstand the design of the Linux Kernel\nUnderstanding the Linux Kernel\nRead this book and the kernel source v2.6 at the same time\nNever start with the latest version, v2.6 is enough!\nUse qemu and gdb to run the kernel source line by line\nhttp://stackoverflow.com/questions/11408041/how-to-debug-the-linux-kernel-with-gdb-and-qemu\nhttps://github.com/gurugio/linuxdeveloptip/blob/master/qemu-gdb-kdump.md\nUse busybox to make the simplest filesystem that takes only one second to boot\nhttps://github.com/gurugio/linuxdeveloptip/blob/master/minikernelwithbusybox.md\nOther resources: Free resources I recommend\nLinux device driver labs\nPractical guide and excellent exercises making Linux device drivers with essential kernel APIs\nI think this document introduces almost all essential kernel APIs.\nThe Eudyptula Challenge\nSadly, this challenge does not accept new challengers because there is no challenge anymore. The maintainer said he/she is planning a new format. I hope it comes back ASAP.\nBut you can find the questions of the challenge with Google. Some people already uploaded what they did. Find the questions and try to solve them on your own, and compare your solution with others.\nThis is like an awesome private teacher who guides you on what to do.\nIf you don't know what to do, just start this.\nLearning operating system development using Linux kernel and Raspberry Pi\nThis project is not completed yet.\nI always think making a kernel similar to the Linux kernel is the best way to understand the Linux kernel.\nBlock layer and device driver\nstart from a simple block device driver example (Ramdisk) with multi-queue mode\ngo forward to block layer\nI completed translation into English. Please send me your feedback.\nmd driver of Linux kernel(Korean)\nhow mdadm tool works and how it calls md driver\nhow md driver works\nReferences\nCheck when you need something\nFree-electrons homepage\nmany slide files introducing good topics, specially ARM-linux\nJulia Evans's posting: You can be a kernel hacker!\nguide to start kernel programming\nOther application\nYes, you might not be interested in Linux or firmware. If so, you can find other applications:\nWindows systems programming & device drivers\nSecurity\nReverse engineering\nI don't have any knowledge about those applications. Please send me any information for beginners.\nKernels and drivers are not all of low-level programming. One more important application of low-level programming is the software-defined storage or distributed filesystem. Detailed descriptions of them is beyond the scope of this document but there is an excellent course where you can try a simple distributed filesystem.\nCourse: https://pdos.csail.mit.edu/archive/6.824-2012/\nreference Source: https://github.com/srned/yfs\nFuture of low-level programming\nI do not know the future, but I keep my eye on RUST.\nhttps://hacks.mozilla.org/2016/11/rust-and-the-future-of-systems-programming/\nIf I could have one week free and alone, I would learn RUST. That is because RUST is the latest language with which I can develop Linux device drivers.\nhttps://github.com/tsgates/rust.ko\nIoT is new trend, so it's worth to check what OSs are for IoT. ARM, Samsung and some companies has their own realtime OS but sadly many of them are closed source. But Linux Foundation also has a solution: Zephyr\nhttps://www.zephyrproject.org/\nTypical cloud servers have many layers; for instance, host OS, kvm driver, qemu process, guest OS and service application. A container has been developed to provide light virtualization. In the near future, a new concept of OS, a so-called library OS or Unikernel, would replace the typical stack of SW for virtualization.\nhttp://unikernel.org/\nBig data and cloud computing require bigger and bigger storage. Some disks directly attached to server machines cannot satisfy the required capacity, stability and performance. Therefore there has been research to make huge storage systems with many storage machines connected by a high speed network. It used to be focused on making one huge storage volume. But currently they are providing many volumes dedicated for many virtual machines.\nhttps://en.wikipedia.org/wiki/Software-defined_storage\nhttps://en.wikipedia.org/wiki/Clustered_file_system\nhttps://en.wikipedia.org/wiki/Ceph_(software)\nHow to start?\nI received an email to ask how to start. There are many information about books, courses and projects in this page. It is my mistake to forget to write how to start. Unfortunately there is no King's Road to King's Landing. I will just write what I did in order. If you have already done something, please skip it. AGAIN, this is just an example that you could do in order, just in case if you do not know how to start or what to do.\nReading OS theory books: at least \"The Design of the UNIX Operating System by Maurice J. Bach\"\nLearn assembly and C\n8086 assembly programming with emu8086\nIt is enough if you understand the concept of assembly programming. You do not need to do something practical.\nThe C Programming Language 2nd Edition\nDO YOUR BEST TO solve every single exercises!\nC Programming: A Modern Approach, 2nd Edition\nDo something practical with C\nC Project Based Tutorials?: Find one or two interesting projects and make your own project.\nleetcode.com: If you cannot find an interesting project, it would be also good to focus on data-structure and algorithm.\nDo a hardware project\nRaspberrypi or Arduino does not matter. You need a experience to control a hardware directly with only C. ONLY C!\nI recommend to buy a Atmega128 kit and make a firmware to turn on/off LEDs, detect switch input and display message on the text LCD. Motor control program is also a very good project: for instance, the line tracer.\nDO NOT use any library. You should make everything on your own, except program downloader.\nBasic of the Linux kernel\nLow-level programming is very close to the operating system. You should know inside of the OS.\nStart with drivers\nRead Linux Device Drivers\nLinux device driver labs\nThe Eudyptula Challenge\nRead Linux Kernel Development to understand the internal of Linux kernel.\nGo to the professional field\nIf you want to be professional Linux Kernel Developer\nmust read Understanding the Linux Kernel\nThen try to make a toy kernel\nLearn operating system development using Linux kernel and Raspberry Pi\nMaking your own kernel\nWrite the github link to your kernel on your resume (Don't forget to write the detail description in commit message)\nCheck the latest issues at https://lwn.net/ and join it.\nCheck \"Recent kernel patches\" at \"https://lwn.net/Kernel/\" or direct link https://lwn.net/Kernel/Patches\nFind an interesting patch to you. Try to understand the source code. Of course it would be really difficult but try. You will be closer and closer whenever you try.\nBuild kernel and test it on your system. For example, performance test, stability test with LTP(https://linux-test-project.github.io/) or static code analysis tools inside of kernel.\nReport any problem if you find any: compile warnings/errors, performance drop, kernel panic/oops or any problem\nIf it works well, report that with the spec of your system. The patch owner would write a \"Reviewed-by\" tag with your name.\nFind your name in kernel git log\nOr find another topics\nThere are many fields where the low-level engineer can work: security, Compiler, Firmware, robot/car and so on\nTranslation\nPlease send me the pull request if you'd like to translate this page. I'll list it here.\nChinese(Traditional)\nChinese(Simplified)\nPortuguese (Brazilian)\nItalian\nCzech\nRussian\nTurkish\nPersian\nWho am I?\nI'm inspired by google-interview-university. I'd like to share my experience and show a roadmap to becoming a low-level programmer because I have found that these skills are not as common as they once were. In addition, many students and beginners ask me how they could become low-level programmers and Linux kernel engineers.\nFYI, I have over 10 years of experience as a low-level programmer:\n80x86 Assembly programming\nHardware device with Atmel chip and firmware\nC language system programming for Unix\nDevice driver in Linux\nLinux kernel: page allocation\nLinux kernel: block device driver and md module", "link": "https://github.com/gurugio/lowlevelprogramming-university", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "garden", "selectorShort": "garden", "MarkedSent": "notice1: please do not copy the contents of this page to your blog. you can share this page but please share with the original link. that is how we compliment the authors of good document and open source project.\nnotice2: please notice that low-level programming is out of trend and currently there are not many companies hiring low-level developer. it is getting harder for me to find a job. if you haven't started a professional career yet, i would like to recommend you consider other fields either carefully.\nnotice3: if you want a quick start, go to \"how to start?\".\nlow-level programming university\nwhat is it?\nwhat is the low level\ntheory\nlanguages\nassembly\nc language\nrust language\napplications\nhardware && firmware\nlinux kernel and device driver\nreferences\nother applications\nfuture of low-level programming\nhow to start?\ntranslation\nwho am i?\nlow-level programming university\nwhat is it?\ni'm inspired by google-interview-university. i'd like to share my experience and show a roadmap to becoming a low-level programmer because i have found that these skills are not as common as they once were. in addition, many students and beginners ask me how they could become low-level programmers and linux kernel engineers.\nthis page cannot include every link/book/course. for example, this page introduces arduino but there is not detailed information about arduino and embedded systems. you should go further yourself. you have the keyword \"arduino\" with which you can start. so your next step is probably googling arduino, buying a kit, and doing something for yourself, not collecting links or free books. please remember this page is just a roadmap for beginners.\nlow-level programming is a part of computer science. absolutely it would be much better to get education for computer science first.\npath to a free self-taught education in computer science!\nwhat is the low-level?\ni classify low-level programming as programming that is very close to the machine, using a lower level programming language like c or assembly. this is in contrast to higher-level programming, typical of user-space applications, using high level languages (e.g. python, java).\nwikipedia: low-level programming language\nyes, systems programming is a very close concept to low-level programming. this page includes the hardware design and firmware development that is not included in systems programming.\nwikipedia: system programming\nfinally, this page includes topics ranging from hardware components to the linux kernel. that is a huge range of layers. a one page document can never cover the details of all the layers, so the aim of this document is to serve as a starting point for low-level programming.\ntheory\nthere are two background theories to low-level programming:\ncomputer architecture\noperating systems\ni think the best way to learn theory is by taking a course. reading books is not bad but takes too much time and effort. you can find many good classes on online universities, for instance, coursera.org and edx.org. theory is theory. i don't think you need to get an a+ in the class, just understand the big picture. you'll get better and better with experience.\nlet me introduce several books that i've read. they are commonly used as textbooks in universities. if there is no class with these books in your university, it's worth spending some time reading them.\ncomputer architecture\ncomputer architecture, fifth edition: a quantitative approach\ncomputer systems: a programmer's perspective\ncomputer organization and design, fourth edition: the hardware/software interface\noperating systems\nthe magic -----> garden !!!  explained: the internals of unix system v release 4 an open systems design\nthe design of the unix operating system\noperating systems: internals and design principles by william stallings\nrecommended courses\ncs401: operating systems from saylor.org\nthere is an infinite list of good books. i don't want to say that you should read many books. just read one book carefully. whenever you learn a theory, implement simulation code of it. implementing one thing is better than knowing one hundred theories.\nlanguages\nassembly\nchoose one between x86 or arm. no need to know both. it doesn't matter to know assembly language. the essential thing is understanding the internals of a cpu and computer. so you don't need to practice the assembly of the latest cpu. select 8086 or corex-m.\n8086 assembly programming with emu8086\nbasic concepts of cpu and computer architecture\nbasic concepts of c programming language\n64bit assembly programming(translation in progress)\nbasic concepts of modern cpu and computer architecture\nbasic concepts of disassembling and debugging of c code\nneed help for translation\nlearning assembly for linux-x64\npure 64-bit assembly programming with nasm and inline assembly with gcc\narm architecture reference manual, 2nd edition\ncomplete reference on arm programming\ncomputer organization and design\nmips edition\narm edition\nrisc-v edition\nacademic books that explain how every component of a computer work from the ground up.\nexplains in detail the different concepts that make up computer architecture.\nthey are not targeted at readers who wish to become proficient in a specific assembly language.\nthe mips and arm edition cover the same topics but by dissecting a different architecture.\nboth editions contain examples in the x86 world\nc language\nthere is no shortcut. just read the entire book and solve all the exercises.\nc programming: a modern approach, 2nd edition\nthe c programming language 2nd edition\nmodern c\nfor new standard of c\nis parallel programming hard, and, if so, what can you do about it?\nraw implementation of synchronization with c\nessential for large scale c programming (especially for kernel programming)\nc project based tutorials?\nif you finish reading one or two c programming books, then you must make something.\nchoose whatever you like.\nfirst make on your own and then compare with someone else's source code. it is very important to compare your source and others. you can improve your skill only when you read the other's source and learn better methods. books are dead and source is live.\nc and other languages based projects\nfind more interesting projects\nmichael abrash\u2019s graphics programming black book, special edition\nreference on optimization using c and a bit of x86 assembly\nstarts from the 8088 up to today\nspecial focus on low-level graphics optimization\nframework and plugin design in c\nhow to develop framework and plugin in c for large scale software\nvery basic programming tips for linux kernel source reading\nif you want to be expert of c programming, visit https://leetcode.com/. good luck!\nrust language\ni am sure that the next language for the systems programming would be rust. i will make a list what i did to learn rust.\nthe rust programming language\ngreat introduction, but lack of examples and exercises.\nrust by example\nwhile reading \"the rust programming language\", you can find examples and exercises here.\nbut there are not many exercises you can do something for yourself. only some examples includes \"do-this\" exercises and they are very simple.\nprogramming rust, 2nd\ndeeper introduction, but still lack of examples and exercises.\nexercism\ngood exercises to practice indivisual features of rust.\ni am not sure mentors are working actively but it would be enough to compare your solution with others.\nafter submitting your solution, you can see other's solutions with \"community solutions\" tab (since exercism v3).\nmany easy level exercises are for functional feature such as map/filter/any and etc.\napplications\nhardware && firmware\nif you want to be an embedded systems engineer, it would be best to start from a simple hardware kit, rather than starting with the latest arm chipset.\narduino start kit\nthere are many series of arduinos but \"arduino start kit\" has the most simple processor(atmega328p) and guide book\natmega328p has an 8-bit core which is a good place to start digital circuit design and firmware development.\nyou don't need to know how to draw schematics and layouts and assemble the chips.\nbut you do need to know how to read schematics and understand how the chips are connected.\nfirmware developers should be able to read the schematics and figure out how to send data to the target device.\nfollow the guide book!\n8086 manual\nif you're a beginner to x86 architecture, 8086 is also very good guide for processor architecture and 80x86 assembly\n80386 manual\nbest guide for protected mode and paging mechanism of 80x86 processor\nweb version: https://pdos.csail.mit.edu/6.828/2011/readings/i386/toc.htm\nat this point, you should be good to start the latest arm or x86 processor.\nhttps://www.raspberrypi.org/\nhttps://beagleboard.org/\nhttps://www.arduino.cc/en/arduinocertified/inteledison\nfor example, the raspberry pi board has a cortex-a53 processor that supports a 64-bit instruction set. this allows you to experience a modern processor architecture with rpi. yes, you can buy it... but... what are you going to do with it? if you have no target project, you would be likely to throw the board into a drawer and forget it like other gadgets you may have bought before.\nso, i recommend one project for you.\nmaking your own kernel\ngood references: https://www.reddit.com/r/osdev/\nlearning operating system development using linux kernel and raspberry pi\n(description of the project) this repository contains a step-by-step guide that teaches how to create a simple operating system (os) kernel from scratch...(skip)...each lesson is designed in such a way that it first explains how some kernel feature is implemented in the rpi os, and then it tries to demonstrate how the same functionality works in the linux kernel.\ni've made a toy kernel that supports 64-bit long mode, paging and very simple context switching. making a toy kernel is good way to understand modern computer architecture and hardware control.\nin fact, you have already the latest processor and the latest hardware devices. your laptop! your desktop! you already have all that you need in order to start! you don't need to buy anything. the qemu emulator can emulate the latest arm processors and intel processors. so everything you need is already on hand. there are many toy kernels and documents you can refer to. just install qemu emulator and make a tiny kernel that just boots, turns on paging, and prints some messages.\nother toy kernels:\nhttps://littleosbook.github.io/\nhttps://tuhdo.github.io/os01/\nlinux kernel and device driver\nyou don't need to make a complete operating system. join the linux community and participate in development.\nsome resources for linux kernel and device driver development from beginner to advanced.\nbooks: read the following in order\nthe design of the unix operating system\nthe basic concepts of unix are applied into all operating systems.\nthis book is a very good place to learn the core concepts of operating systems.\nlinux device drivers\nmake all examples for yourself\nlinux kernel development\nunderstand the design of the linux kernel\nunderstanding the linux kernel\nread this book and the kernel source v2.6 at the same time\nnever start with the latest version, v2.6 is enough!\nuse qemu and gdb to run the kernel source line by line\nhttp://stackoverflow.com/questions/11408041/how-to-debug-the-linux-kernel-with-gdb-and-qemu\nhttps://github.com/gurugio/linuxdeveloptip/blob/master/qemu-gdb-kdump.md\nuse busybox to make the simplest filesystem that takes only one second to boot\nhttps://github.com/gurugio/linuxdeveloptip/blob/master/minikernelwithbusybox.md\nother resources: free resources i recommend\nlinux device driver labs\npractical guide and excellent exercises making linux device drivers with essential kernel apis\ni think this document introduces almost all essential kernel apis.\nthe eudyptula challenge\nsadly, this challenge does not accept new challengers because there is no challenge anymore. the maintainer said he/she is planning a new format. i hope it comes back asap.\nbut you can find the questions of the challenge with google. some people already uploaded what they did. find the questions and try to solve them on your own, and compare your solution with others.\nthis is like an awesome private teacher who guides you on what to do.\nif you don't know what to do, just start this.\nlearning operating system development using linux kernel and raspberry pi\nthis project is not completed yet.\ni always think making a kernel similar to the linux kernel is the best way to understand the linux kernel.\nblock layer and device driver\nstart from a simple block device driver example (ramdisk) with multi-queue mode\ngo forward to block layer\ni completed translation into english. please send me your feedback.\nmd driver of linux kernel(korean)\nhow mdadm tool works and how it calls md driver\nhow md driver works\nreferences\ncheck when you need something\nfree-electrons homepage\nmany slide files introducing good topics, specially arm-linux\njulia evans's posting: you can be a kernel hacker!\nguide to start kernel programming\nother application\nyes, you might not be interested in linux or firmware. if so, you can find other applications:\nwindows systems programming & device drivers\nsecurity\nreverse engineering\ni don't have any knowledge about those applications. please send me any information for beginners.\nkernels and drivers are not all of low-level programming. one more important application of low-level programming is the software-defined storage or distributed filesystem. detailed descriptions of them is beyond the scope of this document but there is an excellent course where you can try a simple distributed filesystem.\ncourse: https://pdos.csail.mit.edu/archive/6.824-2012/\nreference source: https://github.com/srned/yfs\nfuture of low-level programming\ni do not know the future, but i keep my eye on rust.\nhttps://hacks.mozilla.org/2016/11/rust-and-the-future-of-systems-programming/\nif i could have one week free and alone, i would learn rust. that is because rust is the latest language with which i can develop linux device drivers.\nhttps://github.com/tsgates/rust.ko\niot is new trend, so it's worth to check what oss are for iot. arm, samsung and some companies has their own realtime os but sadly many of them are closed source. but linux foundation also has a solution: zephyr\nhttps://www.zephyrproject.org/\ntypical cloud servers have many layers; for instance, host os, kvm driver, qemu process, guest os and service application. a container has been developed to provide light virtualization. in the near future, a new concept of os, a so-called library os or unikernel, would replace the typical stack of sw for virtualization.\nhttp://unikernel.org/\nbig data and cloud computing require bigger and bigger storage. some disks directly attached to server machines cannot satisfy the required capacity, stability and performance. therefore there has been research to make huge storage systems with many storage machines connected by a high speed network. it used to be focused on making one huge storage volume. but currently they are providing many volumes dedicated for many virtual machines.\nhttps://en.wikipedia.org/wiki/software-defined_storage\nhttps://en.wikipedia.org/wiki/clustered_file_system\nhttps://en.wikipedia.org/wiki/ceph_(software)\nhow to start?\ni received an email to ask how to start. there are many information about books, courses and projects in this page. it is my mistake to forget to write how to start. unfortunately there is no king's road to king's landing. i will just write what i did in order. if you have already done something, please skip it. again, this is just an example that you could do in order, just in case if you do not know how to start or what to do.\nreading os theory books: at least \"the design of the unix operating system by maurice j. bach\"\nlearn assembly and c\n8086 assembly programming with emu8086\nit is enough if you understand the concept of assembly programming. you do not need to do something practical.\nthe c programming language 2nd edition\ndo your best to solve every single exercises!\nc programming: a modern approach, 2nd edition\ndo something practical with c\nc project based tutorials?: find one or two interesting projects and make your own project.\nleetcode.com: if you cannot find an interesting project, it would be also good to focus on data-structure and algorithm.\ndo a hardware project\nraspberrypi or arduino does not matter. you need a experience to control a hardware directly with only c. only c!\ni recommend to buy a atmega128 kit and make a firmware to turn on/off leds, detect switch input and display message on the text lcd. motor control program is also a very good project: for instance, the line tracer.\ndo not use any library. you should make everything on your own, except program downloader.\nbasic of the linux kernel\nlow-level programming is very close to the operating system. you should know inside of the os.\nstart with drivers\nread linux device drivers\nlinux device driver labs\nthe eudyptula challenge\nread linux kernel development to understand the internal of linux kernel.\ngo to the professional field\nif you want to be professional linux kernel developer\nmust read understanding the linux kernel\nthen try to make a toy kernel\nlearn operating system development using linux kernel and raspberry pi\nmaking your own kernel\nwrite the github link to your kernel on your resume (don't forget to write the detail description in commit message)\ncheck the latest issues at https://lwn.net/ and join it.\ncheck \"recent kernel patches\" at \"https://lwn.net/kernel/\" or direct link https://lwn.net/kernel/patches\nfind an interesting patch to you. try to understand the source code. of course it would be really difficult but try. you will be closer and closer whenever you try.\nbuild kernel and test it on your system. for example, performance test, stability test with ltp(https://linux-test-project.github.io/) or static code analysis tools inside of kernel.\nreport any problem if you find any: compile warnings/errors, performance drop, kernel panic/oops or any problem\nif it works well, report that with the spec of your system. the patch owner would write a \"reviewed-by\" tag with your name.\nfind your name in kernel git log\nor find another topics\nthere are many fields where the low-level engineer can work: security, compiler, firmware, robot/car and so on\ntranslation\nplease send me the pull request if you'd like to translate this page. i'll list it here.\nchinese(traditional)\nchinese(simplified)\nportuguese (brazilian)\nitalian\nczech\nrussian\nturkish\npersian\nwho am i?\ni'm inspired by google-interview-university. i'd like to share my experience and show a roadmap to becoming a low-level programmer because i have found that these skills are not as common as they once were. in addition, many students and beginners ask me how they could become low-level programmers and linux kernel engineers.\nfyi, i have over 10 years of experience as a low-level programmer:\n80x86 assembly programming\nhardware device with atmel chip and firmware\nc language system programming for unix\ndevice driver in linux\nlinux kernel: page allocation\nlinux kernel: block device driver and md module", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000008, "year": null}, {"Unnamed: 0": 2247, "autor": 207, "date": null, "content": "MudPi Smart Automation for the Garden & Home\nA python package to gather sensor readings, trigger components, control devices and more in an event based system that can be run on a linux SBC, including Raspberry Pi.\nDocumentation\nFor full documentation visit mudpi.app\nInstallation\nInstall MudPi using the Installer that will guide you through the process. You can also view the manual install instructions\nGuides\nFor examples and guides on how to setup and use MudPi check out the free guides available.\nFunding\nMudPi core is open source and has a bunch of free resources built around it. Being a solo developer it has become quite a lot to maintain the various areas of the project. It makes me happy seeing how MudPi has helped many people worldwide. I would like to continue working on MudPi and put even more time into the project to take on bigger ambitions. However it has come to a point that MudPi is taking more time to build with little to no income to help justify it. I really could use help from the community to continue building MudPi. If you like my work and MudPi please consider helping me fund the project and keep the lights on.\nContributing\nAny contributions you can make will be greatly appreciated. If you are interested in contributing please get in touch with me and submit a pull request. There is much more I would like to add support for, however being a single developer limits my scope. Therefore mainly bugs will be accepted as issues.\nVersioning\nBreaking.Major.Minor\nAuthors\nEric Davisson - Website\nTwitter.com/theDavisson\nCommunity\nDiscord - Join\nTwitter.com/MudpiApp\nMudPi Hardware\nThere are custom circuit boards designed around MudPi available.\nLicense\nThis project is licensed under the BSD-4-Clause License - see the LICENSE.md file for details", "link": "https://github.com/mudpi/mudpi-core", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "garden", "selectorShort": "garden", "MarkedSent": "mudpi smart automation for the -----> garden !!!  & home\na python package to gather sensor readings, trigger components, control devices and more in an event based system that can be run on a linux sbc, including raspberry pi.\ndocumentation\nfor full documentation visit mudpi.app\ninstallation\ninstall mudpi using the installer that will guide you through the process. you can also view the manual install instructions\nguides\nfor examples and guides on how to setup and use mudpi check out the free guides available.\nfunding\nmudpi core is open source and has a bunch of free resources built around it. being a solo developer it has become quite a lot to maintain the various areas of the project. it makes me happy seeing how mudpi has helped many people worldwide. i would like to continue working on mudpi and put even more time into the project to take on bigger ambitions. however it has come to a point that mudpi is taking more time to build with little to no income to help justify it. i really could use help from the community to continue building mudpi. if you like my work and mudpi please consider helping me fund the project and keep the lights on.\ncontributing\nany contributions you can make will be greatly appreciated. if you are interested in contributing please get in touch with me and submit a pull request. there is much more i would like to add support for, however being a single developer limits my scope. therefore mainly bugs will be accepted as issues.\nversioning\nbreaking.major.minor\nauthors\neric davisson - website\ntwitter.com/thedavisson\ncommunity\ndiscord - join\ntwitter.com/mudpiapp\nmudpi hardware\nthere are custom circuit boards designed around mudpi available.\nlicense\nthis project is licensed under the bsd-4-clause license - see the license.md file for details", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000207, "year": null}, {"Unnamed: 0": 2752, "autor": 712, "date": null, "content": "hydroAutomation\nThis is a Summer Undergraduate Research Project completed at San Antonio College in 2017\nOriginal contributors: Marshall J. Amey, Kathya Alfaro, Isaac Olson, and Madeline Wrzesinski\nFaculty Advisor: Pete R. Ortega\nThe goal of this research project was to design, build, and test a low-cost prototype system to automate and control critical variables of the environment in a containerized hydroponic garden. Optimizing the production of hydroponic shipping container systems for cost-efficiency and ease of operation could revitalize the health of low-income and urban communities located in food deserts. With these systems, communities would have close access to healthier, more natural food options year-round. By creating simple technology that optimizes plant yield at the lowest cost, more research can be conducted to study the potential of hydroponics to improve environmental sustainability and end hunger, locally and abroad. This project used Arduino microcontroller technology and an array of sensors to measure pH, conductivity, temperature, and oxygen levels of the nutrient solution; temperature, humidity and CO2 levels in the air; and the photosynthetically active radiation of the lights. The data compiled by the system is uploaded to the Internet, where it can be viewed remotely. Conductivity, pH, and dissolved oxygen levels can be monitored and regulated continuously without human intervention. The completed system has the potential to control the environment at a substantially lower cost than most commercially available equipment on the market. More information can be found in the final report located in the documentation folder.\nADDRESSES\nPH - Atlas Scientific pH Sensor\nEC - Atlas Scientific Conductivity Sensor\nDO - Atlas Scientific Dissolved Oxygen Sensor\nWT - Altas Scientific Water Temperature Sensor\nAT - Air Temperature\nHM - Humdity\nCB - Carbon Dioxide\nPR - Photosynthetically Active Radiation", "link": "https://github.com/marshallamey/hydroponic-automation", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "garden", "selectorShort": "garden", "MarkedSent": "hydroautomation\nthis is a summer undergraduate research project completed at san antonio college in 2017\noriginal contributors: marshall j. amey, kathya alfaro, isaac olson, and madeline wrzesinski\nfaculty advisor: pete r. ortega\nthe goal of this research project was to design, build, and test a low-cost prototype system to automate and control critical variables of the environment in a containerized hydroponic -----> garden !!! . optimizing the production of hydroponic shipping container systems for cost-efficiency and ease of operation could revitalize the health of low-income and urban communities located in food deserts. with these systems, communities would have close access to healthier, more natural food options year-round. by creating simple technology that optimizes plant yield at the lowest cost, more research can be conducted to study the potential of hydroponics to improve environmental sustainability and end hunger, locally and abroad. this project used arduino microcontroller technology and an array of sensors to measure ph, conductivity, temperature, and oxygen levels of the nutrient solution; temperature, humidity and co2 levels in the air; and the photosynthetically active radiation of the lights. the data compiled by the system is uploaded to the internet, where it can be viewed remotely. conductivity, ph, and dissolved oxygen levels can be monitored and regulated continuously without human intervention. the completed system has the potential to control the environment at a substantially lower cost than most commercially available equipment on the market. more information can be found in the final report located in the documentation folder.\naddresses\nph - atlas scientific ph sensor\nec - atlas scientific conductivity sensor\ndo - atlas scientific dissolved oxygen sensor\nwt - altas scientific water temperature sensor\nat - air temperature\nhm - humdity\ncb - carbon dioxide\npr - photosynthetically active radiation", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000712, "year": null}, {"Unnamed: 0": 2881, "autor": 841, "date": null, "content": "\ud83d\udcaaCODOS\ud83d\udcaa\nUn sistema de bajo coste basado en ESP8266/ESP32 para la detecci\u00f3n del CO2 y otras variables ambientales para monitorizar la calidad del aire en el aula (o en otros lugares de trabajo)\n(Se trata de un proyecto en constante actualizaci\u00f3n y este documento est\u00e1 en constante redacci\u00f3n)\n\"Algunos cient\u00edficos comentan que mejorar la ventilaci\u00f3n y la calidad del aire es un m\u00e9todo que las escuelas pueden usar para reducir el riesgo de transmisi\u00f3n del coronavirus. Sin embargo, en una encuesta entre distritos escolares grandes del Norte de Texas, The Dallas Morning News encontr\u00f3 que las escuelas est\u00e1n lejos de alcanzar los par\u00e1metros de calidad del aire propuestos en junio por expertos en construcci\u00f3n. Investigadores de la Universidad de Harvard recomendaron instalar filtros de aire de alta graduaci\u00f3n, limpiadores de aire port\u00e1tiles y fuentes de luz ultravioleta dentro de los conductos de aire para eliminar al virus. Al revisar el nivel de di\u00f3xido de carbono en las aulas se puede comprobar si est\u00e1 entrando suficiente aire fresco...\"\nFuente: https://noticiasenlafrontera.net/escuelas-no-siguen-recomendaciones-de-calidad-del-aire-parar-reducir-exposicion-a-covid-19/\nOtro art\u00edculo con informaci\u00f3n al respecto, (gracias Lina por el enlace):\nhttps://www.caloryfrio.com/construccion-sostenible/ventilacion-y-calidad-aire-interior/colegios-coronavirus-calidad-aire-interior-ventilacion-adecuada-covid-19.html\nExisten adem\u00e1s evidencias de que los altos niveles de CO2 influyen sobre el rendimiento de los alumnos en el aula. https://pubmed.ncbi.nlm.nih.gov/25117890/\nArt\u00edculos c\u00f3mo estos y otros me han llevado a elaborar un peque\u00f1o dispositivo de bajo coste que permita monitorizar los niveles de CO2 en las aulas con el objeto de poder medir la concentraci\u00f3n de dicho gas y de esta forma saber cu\u00e1ndo tenemos que renovar el aire de un aula para poder seguir de la mejor forma posible las propias indicaciones al respecto de las administraciones p\u00fablicas espa\u00f1olas:\nhttps://www.miteco.gob.es/es/ministerio/medidas-covid19/sistemas-climatizacion-ventilacion/default.aspx\nSi quieres saber m\u00e1s no dejes de leer este interesant\u00edsimo hilo en twitter: https://twitter.com/PabloFuente/status/1297457593368088576\nUtilizando una hoja de c\u00e1lculo podemos calcular la cantidad de CO2 en funci\u00f3n de diversas variables del aula. En el siguiente art\u00edculo tenemos una calculadora que permite hacer dicho c\u00e1lculo, (gracias Mercedes por el enlace):\nhttps://medium.com/@jjose_19945/how-to-quantify-the-ventilation-rate-of-an-indoor-space-using-a-cheap-co2-monitor-4d8b6d4dab44\nEste enlace https://schools.forhealth.org/ventilation-guide/ nos dice tambi\u00e9n c\u00f3mo y cu\u00e1nto debemos ventilar...\nEn este reciente informe del 03/11/2020 nos hablan con datos de la importancia de la ventilaci\u00f3n y de la necesidad de ventilar en las aulas m\u00e1s all\u00e1 de lo que indican muchos de los protocolos vigentes en muchas comunidades aut\u00f3nomas: El muestreo de mediciones realizado en centros educativos por el Comit\u00e9 de Expertos en Ventilaci\u00f3n del COGITI, confirma la necesidad de contar con medidores de CO2: https://cogiti.es/el-muestreo-de-mediciones-realizado-en-centros-educativos-por-el-comite-de-expertos-en-ventilacion-del-cogiti-confirman-la-necesidad-de-contar-con-medidores-de-co2-como-referencia-objetiva-que-indiqu\n\u00bfQu\u00e9 es \ud83d\udcaaCODOS\ud83d\udcaa?\n\ud83d\udcaaCODOS\ud83d\udcaa es un peque\u00f1o circuito electr\u00f3nico construido sobre un microcontrolador ESP32, un microcontrolador similar a un Arduino pero que ofrece conectividad WiFi y Bluetooth, aunque tambi\u00e9n hay otros Arduinos como el MKR1000 WiFi que te podr\u00edan servir.\nEsto significa que podemos usar dispositivos de Internet de las Cosas, (IoT) que nos permiten monitorizar los datos de los sensores conectados a los mismos a trav\u00e9s de Internet.\nCODOS est\u00e1 pensado para medir la cantidad de CO2 y otros par\u00e1metros ambientales para recomendarnos cuando deber\u00edamos renovar el aire de un aula u otro espacio de trabajo, sobre todo cuando no se disponga de un sistema de ventilaci\u00f3n forzada, o bien no sea posible mantener las ventanas abiertas todo el tiempo.\nPupils at Henrietta Barnett School in Hampstead Garden Suburb raise their arms during a Key Stage Three maths lesson, the school received high scores during their Key Stage Three results, Wednesday 27 February, 2008. Photo: Jane Mingay\nCODOS (aka CO2) es un gui\u00f1o a hincar los \"CO2\" en el aula... ;)\nCon un simple Arduino, un sensor de CO2 y unos led podemos construir un sistema simplificado que permita indicar cuando los niveles de CO2 est\u00e1n dentro de unos determinado umbrales, esa fue mi primera idea y publicar\u00e9 tambi\u00e9n esta versi\u00f3n; pero cambiando el Arduino por un ESP8266 o un ESP32 podemos adem\u00e1s enviar los datos a un servidor y monitorizar por ejemplo los datos de distintas aulas de forma centralizada, almacenar datos estad\u00edsticos en una base de datos o realizar otras muchas tareas que podr\u00edan sernos \u00fatiles sin incrementar pr\u00e1cticamente el coste del dispositivo.\nBOM (Bill of materials) / Lista de materiales\nEn su versi\u00f3n IoT, para construir CODOS se necesitan los siguientes elementos:\nUn ESP32 por ejemplo el ESP32-DOIT-DEVKIT (tambi\u00e9n puedes utilizar un ESP8266)\nUn sensor de CO2, como el MH-Z19b. Su gran ventaja es que se trata de un sensor NDIR por lo que mide directamente CO2. (he probado tambi\u00e9n con otros sensores como el Sensirion SDC30 pero su coste es mucho m\u00e1s elevado).\nOtra alternativa m\u00e1s barata es el sensor de eCO2 CCS811. Este sensor no mide directamente CO2, sino una estimaci\u00f3n a partir de la presencia de otros gases. Aunque es \u00fatil para medir calidad del aire, no es el sensor m\u00e1s adecuado para este proyecto ya que puede dar niveles muy altos por otros motivos, y no solamente por acumulaci\u00f3n de CO2.\nOpcionalmente un sensor de humedad, presi\u00f3n y temperatura BME280\nOpcionalmente leds de varios colores por ejemplo rojo, naranja y verde para construir un \"sem\u00e1foro\" que indique los niveles de CO2 o directamente utilizar un m\u00f3dulo de sem\u00e1fot\nOpcionalmente una pantalla OLED SSD1306 u otra (o un ESP32 que la incluya)\nNecesitar\u00e1s adem\u00e1s cables dupont para conectar entre s\u00ed los distintos elementos.\nPara alimentar el dispositivo podr\u00e1s utilizar el puerto USB de un ordenador o mejor un cargador de m\u00f3vil con conexi\u00f3n microUSB para los ESP o el que corresponga para el Arduino\nMontaje\nVersi\u00f3n Arduino\nVamos a exponer primero de forma sencilla c\u00f3mo se conecta el sensor de CO2 CCS811 a un Arduino Nano o UNO, esta versi\u00f3n es la m\u00e1s econ\u00f3mica y sencilla del dispositivo. Simplemente hemos de utilizar 5 cables Dupont hembra-hembra o macho-hembra respectivamente y unir los siguientes pines del sensor a otros tantos pines del Arduino:\nVcc con un cable rojo lo uniremos al pin de 3.3V del Arduino\nGND con un cable negro lo uniremos a uno de los pines GND del Arduino\nSDA se conecta al pin A4 del Arduino\nSCL se conecta al pin A5 del Arduino\nWake o AWake se conecta al otro pin GND del Arduino, aunque tambi\u00e9n podr\u00eda controlarse con pin de salida.\nConexi\u00f3n del sensor CCS811 a un Arduino UNO\nLuego simplemente hemos de conectar un cable USB y podremos programar el Arduino con el c\u00f3digo necesario para poder leer los datos del sensor.\nPuedes utilizar el c\u00f3digo de la carpeta dev/plotter para monitorizar los valores del CO2 y la TVOC gr\u00e1ficamente. Puedes acceder al mismo en el siguiente enlace: https://github.com/miguelangelcasanova/codos/blob/master/dev/arduino/plotter/plotter.ino\nEl c\u00f3digo est\u00e1 completamente comentado por lo que si lo deseas no deber\u00eda resultarte muy dificil poder adaptarlo a tus necesidades.\nEn esta versi\u00f3n del dispositivo los datos s\u00f3lo pueden monitorizarse a trav\u00e9s de un ordenador conectado mediante dicho cable USB, por eso en la versi\u00f3n definitiva utilizaremos un ESP8266 o un ESP32 que funcionan de forma similar pero permiten adem\u00e1s enviar los datos v\u00eda WiFi y en el caso del ESP32 tambi\u00e9n v\u00eda Bluetooth.\nDescarga el archivo, env\u00eda el firmware al Arduino y abre el monitor serie o mejor el plotter serie y podr\u00e1s visualizar los valores del sensor:\nMonitor serie del IDE de Arduino\nSerial Plotter del IDE de Arduino\nVersion ESP8266 / ESP32\nLa conexi\u00f3n de los sensores es muy similar a la que hemos descrito para el arduino y es tambi\u00e9n muy sencilla, tanto el sensor de CO2 como el sensor ambiental utilizados utilizan conexiones i2c, es decir basta con alimentarlos a 3.3V y masa. Luego hay que conectar a los GPIO22 y GPIO21 que en el ESP32 corresponden a las conexiones SCL y SDA del mencionado protocolo respectivamente o a los pines D2 y D1 que corresponden igualmente a SDA y SCL para el ESP8266.\nSi deseas conectar la pantalla OLED o el sensor ambiental BME280, se conectan tambi\u00e9n en estos mismos pines en ambos casos.\nPinout del ESP8266\nPinout del ESP32\nDado que podemos utilizar dos pines para conectar varios sensores o la pantalla necesitaremos utilizar una placa de prototipos o dise\u00f1ar una placa de circuito impreso para conectarlos todos en el mismo punto.\nConexi\u00f3n del sensor CCS811 a un ESP con una placa protoboard\nPara la conexi\u00f3n de los diodos led al tratarse de salidas de 3.3V deber\u00edamos utilizar resistencias limitadoras de corriente y conectarlos a trav\u00e9s de estas a cualquiera de los GPIO, yo he escogido los GPIO9, 10 y 11. Al conectar los diodos led hemos de tener en cuenta su polaridad.\nOtras versiones\nGracias a otros miembros de la comunidad el proyecto ha ido creciendo y enriqueci\u00e9ndose con las contribuciones de makers, makerspaces y fablabs.\nEn la carpeta esp32 hay a tu disposici\u00f3n una versi\u00f3n avanzada que incluye el uso de bases de datos como InfluxDB para almacenar y visualizar en el futuro los datos de muchos sensores creada por Andreas del Makespace Mallorca.\nEl programa\nTambi\u00e9n he dise\u00f1ado varias versiones del programa seg\u00fan la plataforma utilizada. El programa debe cargarse desde el entorno IDE de Arduino o desde VS Studio Code (Platformio) en la placa correspondiente.\nEl dispositivo\nHe dise\u00f1ado una caja imprimible en 3D para poder albergar el dispositivo aunque este puede montarse directamente sobre una placa de prototipos si no se tiene la habilidad para soldar unos cuantos componentes aunque su montaje deber\u00eda resultar especialmente sencillo.\nEn la carpeta STL hay dise\u00f1os de cajas imprimibles en 3D y en Thingiverse puedes encontrar tambi\u00e9n otros modelos.\nUsando el dispositivo\nEl dispositivo se conecta autom\u00e1ticamente a la red del aula para permitir que los datos de los sensores pueden visualizarse en una p\u00e1gina web que genera el dispositivo desde cualquier otro dispositivo conectado a la misma red. Para ello debes averiguar la direcci\u00f3n IP del dispositivo y abrir en tu navegador una URL del tipo siguiente: http://192.168.1.105 d\u00f3nde los n\u00fameros indican la direcci\u00f3n IP local del dispositivo en la red local.\nPantalla de datos de las primeras versiones de CODOS\nInformaci\u00f3n para el calibrado de los sensores\nDocumentaci\u00f3n para estudiar el comportamiento de los sensores en aire bajo condiciones controladas mediante materiales caseros. PROCEDIMIENTO\nTo do\nEn un proyecto como este hay muchas cosas que siempre quedan por hacer. Por ejemplo, la calibraci\u00f3n de los sensores es fundamental y no est\u00e1 bien probada, tambi\u00e9n es necesario hacer pruebas de campo montando sensores en las aulas y tomando medidas para comprobar su fiabilidad. Si quieres colaborar no tienes m\u00e1s que ponerte en contacto con el grupo de trabajo por Telegram: https://t.me/codos_ventilacion (a 31 de octubre en el grupo hay 150 personas).\nPreguntas frecuentes\n\u00bfCu\u00e1l es el objetivo del proyecto?\nDotar a las aulas y otros espacios de trabajo de una forma sencilla y econ\u00f3mica de medir la calidad del aire, en concreto de la concentraci\u00f3n de CO2\n\u00bfD\u00f3nde comprar los componentes?\nEl ESP32 y los leds se pueden comprar en muchas tiendas f\u00edsicas de electr\u00f3nica en Espa\u00f1a o a trav\u00e9s de Internet. En China por supuesto resultan mucho m\u00e1s econ\u00f3mico; pero tardar\u00e1s en tenerlo varias semanas en tener los componentes en tus manos. Los sensores son un poco m\u00e1s dif\u00edciles de localizar en tiendas f\u00edsicas pero puedes adquirirlos igualmente en China o un poco m\u00e1s caros encontrarlos a trav\u00e9s de ebay o Amazon.\nEl ESP32 lo puedes comprar en Espa\u00f1a por unos 10\u20ac por ejemplo en:\nhttps://www.ebay.es/itm/EL0116-ESP-WROOM-32-ESPRESSIF-Placa-Desarrollo-Arduino-WiFi-Bluetooth-Dual-Core/233565682462\nEn la misma tienda puedes comprar los LEDs y unos cables Dupont hembra-hembra.\nEn ebay y en Amazon hay muchas tiendas que te ofrecen el sensor de CO2 o el de humedad y temperatura pero su coste es mucho m\u00e1s elevado que pidi\u00e9ndolo a China:\nhttps://www.ebay.es/itm/CCS811-Carbon-Monoxide-CO-VOCs-Air-Quality-Numerical-Gas-Sensors-CJMCU-811/323688562130\nhttps://www.amazon.es/TECNOIOT-Monoxide-Quality-Numerical-CJMCU-811/dp/B07RGLMS1J\nEste es otro modelo que resulta tambi\u00e9n muy econ\u00f3mico:\nhttps://www.amazon.es/KEYESTUDIO-Quality-Arduino-Monoxide-Numeric/dp/B086HCSM6N/ref=sr_1_1?__mk_es_ES=%C3%85M%C3%85%C5%BD%C3%95%C3%91&dchild=1&keywords=ccs811&qid=1598700075&refinements=p_85%3A831314031&rnid=831276031&rps=1&sr=8-1\nComprando 5 unidades del ESP32 te salen a 6\u20ac en el siguiente enlace:\nhttps://www.amazon.es/gp/product/B074RG86SR\nEn Aliexpress \u00faltimamente est\u00e1n entregando en 10 d\u00edas (Hoy es 29/08/2020)\nhttps://es.aliexpress.com/item/32903358923.html?spm=a2g0o.productlist.0.0.26bc4071sE7mf2&algo_pvid=159e700e-7ec4-41f6-a8b4-ef1eb37b29d2&algo_expid=159e700e-7ec4-41f6-a8b4-ef1eb37b29d2-0&btsid=0b0a0ad815986989110232476e8172&ws_ab_test=searchweb0_0,searchweb201602_,searchweb201603_\nEl MH-Z19b lo puedes adquirir tambi\u00e9n en Amazon o Aliexpress por unos 16-25\u20ac: https://es.aliexpress.com/item/32946106807.html?srcSns=org.telegram.messenger&spreadType=socialShare&bizType=ProductDetail&tt=MG&image=U6c2b63d49cee4cc1935c5c06de0e2df9L.jpg&aff_platform=default&sk=_BSWtFw&description=%E2%82%AC+14%2C50++13%25OFF+%7C+Sensor+de+co2+infrarrojo+MH-Z19+para+co2%2C+monitor+MH-Z19B%2C+Sensor+de+gas+co2+de+di%C3%B3xido+de+carbono%2C+0-5000ppm&aff_trace_key=1c43dcc98a834a8fa43b79f907dd3d5b-1604748762672-07455-_BSWtFw&businessType=ProductDetail&title=%E2%82%AC+14%2C50++13%25OFF+%7C+Sensor+de+co2+infrarrojo+MH-Z19+para+co2%2C+monitor+MH-Z19B%2C+Sensor+de+gas+co2+de+di%C3%B3xido+de+carbono%2C+0-5000ppm&platform=AE&terminal_id=a42b9e0f7a294b098d58d5efd3cad8cf\nOtros proyectos parecidos\nAir quality sensor: This simple, fancy looking, ESP8266 based sensor measures values of CO2 and TVOC air pollutants. As output there is addressable RGB led strip, and/or optional OLED display which can show real time levels. https://github.com/Luc3as/Air-quality-Sensor/ (en ingl\u00e9s)\nCO2 Cuckoo Clock for schools and businesses (Why not eCO2?) del maker y youtuber suizo Andreas Spiess: https://www.youtube.com/watch?v=hcPdZlpaRTo (en ingl\u00e9s)\nAir quality meter: http://www.futurashop.it/breakout-CCS811-air-quality-ft1331m-qualit%C3%A0%20aria?search=ccs811 (en italiano) La caja puedes descargarla dAir quality meter (de David Daghetta, en Thingiverse): https://www.thingiverse.com/thing:2569792 (en Ingl\u00e9s)\n(Este documento est\u00e1 en constante redacci\u00f3n)", "link": "https://github.com/miguelangelcasanova/codos", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "garden", "selectorShort": "garden", "MarkedSent": "\ud83d\udcaacodos\ud83d\udcaa\nun sistema de bajo coste basado en esp8266/esp32 para la detecci\u00f3n del co2 y otras variables ambientales para monitorizar la calidad del aire en el aula (o en otros lugares de trabajo)\n(se trata de un proyecto en constante actualizaci\u00f3n y este documento est\u00e1 en constante redacci\u00f3n)\n\"algunos cient\u00edficos comentan que mejorar la ventilaci\u00f3n y la calidad del aire es un m\u00e9todo que las escuelas pueden usar para reducir el riesgo de transmisi\u00f3n del coronavirus. sin embargo, en una encuesta entre distritos escolares grandes del norte de texas, the dallas morning news encontr\u00f3 que las escuelas est\u00e1n lejos de alcanzar los par\u00e1metros de calidad del aire propuestos en junio por expertos en construcci\u00f3n. investigadores de la universidad de harvard recomendaron instalar filtros de aire de alta graduaci\u00f3n, limpiadores de aire port\u00e1tiles y fuentes de luz ultravioleta dentro de los conductos de aire para eliminar al virus. al revisar el nivel de di\u00f3xido de carbono en las aulas se puede comprobar si est\u00e1 entrando suficiente aire fresco...\"\nfuente: https://noticiasenlafrontera.net/escuelas-no-siguen-recomendaciones-de-calidad-del-aire-parar-reducir-exposicion-a-covid-19/\notro art\u00edculo con informaci\u00f3n al respecto, (gracias lina por el enlace):\nhttps://www.caloryfrio.com/construccion-sostenible/ventilacion-y-calidad-aire-interior/colegios-coronavirus-calidad-aire-interior-ventilacion-adecuada-covid-19.html\nexisten adem\u00e1s evidencias de que los altos niveles de co2 influyen sobre el rendimiento de los alumnos en el aula. https://pubmed.ncbi.nlm.nih.gov/25117890/\nart\u00edculos c\u00f3mo estos y otros me han llevado a elaborar un peque\u00f1o dispositivo de bajo coste que permita monitorizar los niveles de co2 en las aulas con el objeto de poder medir la concentraci\u00f3n de dicho gas y de esta forma saber cu\u00e1ndo tenemos que renovar el aire de un aula para poder seguir de la mejor forma posible las propias indicaciones al respecto de las administraciones p\u00fablicas espa\u00f1olas:\nhttps://www.miteco.gob.es/es/ministerio/medidas-covid19/sistemas-climatizacion-ventilacion/default.aspx\nsi quieres saber m\u00e1s no dejes de leer este interesant\u00edsimo hilo en twitter: https://twitter.com/pablofuente/status/1297457593368088576\nutilizando una hoja de c\u00e1lculo podemos calcular la cantidad de co2 en funci\u00f3n de diversas variables del aula. en el siguiente art\u00edculo tenemos una calculadora que permite hacer dicho c\u00e1lculo, (gracias mercedes por el enlace):\nhttps://medium.com/@jjose_19945/how-to-quantify-the-ventilation-rate-of-an-indoor-space-using-a-cheap-co2-monitor-4d8b6d4dab44\neste enlace https://schools.forhealth.org/ventilation-guide/ nos dice tambi\u00e9n c\u00f3mo y cu\u00e1nto debemos ventilar...\nen este reciente informe del 03/11/2020 nos hablan con datos de la importancia de la ventilaci\u00f3n y de la necesidad de ventilar en las aulas m\u00e1s all\u00e1 de lo que indican muchos de los protocolos vigentes en muchas comunidades aut\u00f3nomas: el muestreo de mediciones realizado en centros educativos por el comit\u00e9 de expertos en ventilaci\u00f3n del cogiti, confirma la necesidad de contar con medidores de co2: https://cogiti.es/el-muestreo-de-mediciones-realizado-en-centros-educativos-por-el-comite-de-expertos-en-ventilacion-del-cogiti-confirman-la-necesidad-de-contar-con-medidores-de-co2-como-referencia-objetiva-que-indiqu\n\u00bfqu\u00e9 es \ud83d\udcaacodos\ud83d\udcaa?\n\ud83d\udcaacodos\ud83d\udcaa es un peque\u00f1o circuito electr\u00f3nico construido sobre un microcontrolador esp32, un microcontrolador similar a un arduino pero que ofrece conectividad wifi y bluetooth, aunque tambi\u00e9n hay otros arduinos como el mkr1000 wifi que te podr\u00edan servir.\nesto significa que podemos usar dispositivos de internet de las cosas, (iot) que nos permiten monitorizar los datos de los sensores conectados a los mismos a trav\u00e9s de internet.\ncodos est\u00e1 pensado para medir la cantidad de co2 y otros par\u00e1metros ambientales para recomendarnos cuando deber\u00edamos renovar el aire de un aula u otro espacio de trabajo, sobre todo cuando no se disponga de un sistema de ventilaci\u00f3n forzada, o bien no sea posible mantener las ventanas abiertas todo el tiempo.\npupils at henrietta barnett school in hampstead -----> garden !!!  suburb raise their arms during a key stage three maths lesson, the school received high scores during their key stage three results, wednesday 27 february, 2008. photo: jane mingay\ncodos (aka co2) es un gui\u00f1o a hincar los \"co2\" en el aula... ;)\ncon un simple arduino, un sensor de co2 y unos led podemos construir un sistema simplificado que permita indicar cuando los niveles de co2 est\u00e1n dentro de unos determinado umbrales, esa fue mi primera idea y publicar\u00e9 tambi\u00e9n esta versi\u00f3n; pero cambiando el arduino por un esp8266 o un esp32 podemos adem\u00e1s enviar los datos a un servidor y monitorizar por ejemplo los datos de distintas aulas de forma centralizada, almacenar datos estad\u00edsticos en una base de datos o realizar otras muchas tareas que podr\u00edan sernos \u00fatiles sin incrementar pr\u00e1cticamente el coste del dispositivo.\nbom (bill of materials) / lista de materiales\nen su versi\u00f3n iot, para construir codos se necesitan los siguientes elementos:\nun esp32 por ejemplo el esp32-doit-devkit (tambi\u00e9n puedes utilizar un esp8266)\nun sensor de co2, como el mh-z19b. su gran ventaja es que se trata de un sensor ndir por lo que mide directamente co2. (he probado tambi\u00e9n con otros sensores como el sensirion sdc30 pero su coste es mucho m\u00e1s elevado).\notra alternativa m\u00e1s barata es el sensor de eco2 ccs811. este sensor no mide directamente co2, sino una estimaci\u00f3n a partir de la presencia de otros gases. aunque es \u00fatil para medir calidad del aire, no es el sensor m\u00e1s adecuado para este proyecto ya que puede dar niveles muy altos por otros motivos, y no solamente por acumulaci\u00f3n de co2.\nopcionalmente un sensor de humedad, presi\u00f3n y temperatura bme280\nopcionalmente leds de varios colores por ejemplo rojo, naranja y verde para construir un \"sem\u00e1foro\" que indique los niveles de co2 o directamente utilizar un m\u00f3dulo de sem\u00e1fot\nopcionalmente una pantalla oled ssd1306 u otra (o un esp32 que la incluya)\nnecesitar\u00e1s adem\u00e1s cables dupont para conectar entre s\u00ed los distintos elementos.\npara alimentar el dispositivo podr\u00e1s utilizar el puerto usb de un ordenador o mejor un cargador de m\u00f3vil con conexi\u00f3n microusb para los esp o el que corresponga para el arduino\nmontaje\nversi\u00f3n arduino\nvamos a exponer primero de forma sencilla c\u00f3mo se conecta el sensor de co2 ccs811 a un arduino nano o uno, esta versi\u00f3n es la m\u00e1s econ\u00f3mica y sencilla del dispositivo. simplemente hemos de utilizar 5 cables dupont hembra-hembra o macho-hembra respectivamente y unir los siguientes pines del sensor a otros tantos pines del arduino:\nvcc con un cable rojo lo uniremos al pin de 3.3v del arduino\ngnd con un cable negro lo uniremos a uno de los pines gnd del arduino\nsda se conecta al pin a4 del arduino\nscl se conecta al pin a5 del arduino\nwake o awake se conecta al otro pin gnd del arduino, aunque tambi\u00e9n podr\u00eda controlarse con pin de salida.\nconexi\u00f3n del sensor ccs811 a un arduino uno\nluego simplemente hemos de conectar un cable usb y podremos programar el arduino con el c\u00f3digo necesario para poder leer los datos del sensor.\npuedes utilizar el c\u00f3digo de la carpeta dev/plotter para monitorizar los valores del co2 y la tvoc gr\u00e1ficamente. puedes acceder al mismo en el siguiente enlace: https://github.com/miguelangelcasanova/codos/blob/master/dev/arduino/plotter/plotter.ino\nel c\u00f3digo est\u00e1 completamente comentado por lo que si lo deseas no deber\u00eda resultarte muy dificil poder adaptarlo a tus necesidades.\nen esta versi\u00f3n del dispositivo los datos s\u00f3lo pueden monitorizarse a trav\u00e9s de un ordenador conectado mediante dicho cable usb, por eso en la versi\u00f3n definitiva utilizaremos un esp8266 o un esp32 que funcionan de forma similar pero permiten adem\u00e1s enviar los datos v\u00eda wifi y en el caso del esp32 tambi\u00e9n v\u00eda bluetooth.\ndescarga el archivo, env\u00eda el firmware al arduino y abre el monitor serie o mejor el plotter serie y podr\u00e1s visualizar los valores del sensor:\nmonitor serie del ide de arduino\nserial plotter del ide de arduino\nversion esp8266 / esp32\nla conexi\u00f3n de los sensores es muy similar a la que hemos descrito para el arduino y es tambi\u00e9n muy sencilla, tanto el sensor de co2 como el sensor ambiental utilizados utilizan conexiones i2c, es decir basta con alimentarlos a 3.3v y masa. luego hay que conectar a los gpio22 y gpio21 que en el esp32 corresponden a las conexiones scl y sda del mencionado protocolo respectivamente o a los pines d2 y d1 que corresponden igualmente a sda y scl para el esp8266.\nsi deseas conectar la pantalla oled o el sensor ambiental bme280, se conectan tambi\u00e9n en estos mismos pines en ambos casos.\npinout del esp8266\npinout del esp32\ndado que podemos utilizar dos pines para conectar varios sensores o la pantalla necesitaremos utilizar una placa de prototipos o dise\u00f1ar una placa de circuito impreso para conectarlos todos en el mismo punto.\nconexi\u00f3n del sensor ccs811 a un esp con una placa protoboard\npara la conexi\u00f3n de los diodos led al tratarse de salidas de 3.3v deber\u00edamos utilizar resistencias limitadoras de corriente y conectarlos a trav\u00e9s de estas a cualquiera de los gpio, yo he escogido los gpio9, 10 y 11. al conectar los diodos led hemos de tener en cuenta su polaridad.\notras versiones\ngracias a otros miembros de la comunidad el proyecto ha ido creciendo y enriqueci\u00e9ndose con las contribuciones de makers, makerspaces y fablabs.\nen la carpeta esp32 hay a tu disposici\u00f3n una versi\u00f3n avanzada que incluye el uso de bases de datos como influxdb para almacenar y visualizar en el futuro los datos de muchos sensores creada por andreas del makespace mallorca.\nel programa\ntambi\u00e9n he dise\u00f1ado varias versiones del programa seg\u00fan la plataforma utilizada. el programa debe cargarse desde el entorno ide de arduino o desde vs studio code (platformio) en la placa correspondiente.\nel dispositivo\nhe dise\u00f1ado una caja imprimible en 3d para poder albergar el dispositivo aunque este puede montarse directamente sobre una placa de prototipos si no se tiene la habilidad para soldar unos cuantos componentes aunque su montaje deber\u00eda resultar especialmente sencillo.\nen la carpeta stl hay dise\u00f1os de cajas imprimibles en 3d y en thingiverse puedes encontrar tambi\u00e9n otros modelos.\nusando el dispositivo\nel dispositivo se conecta autom\u00e1ticamente a la red del aula para permitir que los datos de los sensores pueden visualizarse en una p\u00e1gina web que genera el dispositivo desde cualquier otro dispositivo conectado a la misma red. para ello debes averiguar la direcci\u00f3n ip del dispositivo y abrir en tu navegador una url del tipo siguiente: http://192.168.1.105 d\u00f3nde los n\u00fameros indican la direcci\u00f3n ip local del dispositivo en la red local.\npantalla de datos de las primeras versiones de codos\ninformaci\u00f3n para el calibrado de los sensores\ndocumentaci\u00f3n para estudiar el comportamiento de los sensores en aire bajo condiciones controladas mediante materiales caseros. procedimiento\nto do\nen un proyecto como este hay muchas cosas que siempre quedan por hacer. por ejemplo, la calibraci\u00f3n de los sensores es fundamental y no est\u00e1 bien probada, tambi\u00e9n es necesario hacer pruebas de campo montando sensores en las aulas y tomando medidas para comprobar su fiabilidad. si quieres colaborar no tienes m\u00e1s que ponerte en contacto con el grupo de trabajo por telegram: https://t.me/codos_ventilacion (a 31 de octubre en el grupo hay 150 personas).\npreguntas frecuentes\n\u00bfcu\u00e1l es el objetivo del proyecto?\ndotar a las aulas y otros espacios de trabajo de una forma sencilla y econ\u00f3mica de medir la calidad del aire, en concreto de la concentraci\u00f3n de co2\n\u00bfd\u00f3nde comprar los componentes?\nel esp32 y los leds se pueden comprar en muchas tiendas f\u00edsicas de electr\u00f3nica en espa\u00f1a o a trav\u00e9s de internet. en china por supuesto resultan mucho m\u00e1s econ\u00f3mico; pero tardar\u00e1s en tenerlo varias semanas en tener los componentes en tus manos. los sensores son un poco m\u00e1s dif\u00edciles de localizar en tiendas f\u00edsicas pero puedes adquirirlos igualmente en china o un poco m\u00e1s caros encontrarlos a trav\u00e9s de ebay o amazon.\nel esp32 lo puedes comprar en espa\u00f1a por unos 10\u20ac por ejemplo en:\nhttps://www.ebay.es/itm/el0116-esp-wroom-32-espressif-placa-desarrollo-arduino-wifi-bluetooth-dual-core/233565682462\nen la misma tienda puedes comprar los leds y unos cables dupont hembra-hembra.\nen ebay y en amazon hay muchas tiendas que te ofrecen el sensor de co2 o el de humedad y temperatura pero su coste es mucho m\u00e1s elevado que pidi\u00e9ndolo a china:\nhttps://www.ebay.es/itm/ccs811-carbon-monoxide-co-vocs-air-quality-numerical-gas-sensors-cjmcu-811/323688562130\nhttps://www.amazon.es/tecnoiot-monoxide-quality-numerical-cjmcu-811/dp/b07rglms1j\neste es otro modelo que resulta tambi\u00e9n muy econ\u00f3mico:\nhttps://www.amazon.es/keyestudio-quality-arduino-monoxide-numeric/dp/b086hcsm6n/ref=sr_1_1?__mk_es_es=%c3%85m%c3%85%c5%bd%c3%95%c3%91&dchild=1&keywords=ccs811&qid=1598700075&refinements=p_85%3a831314031&rnid=831276031&rps=1&sr=8-1\ncomprando 5 unidades del esp32 te salen a 6\u20ac en el siguiente enlace:\nhttps://www.amazon.es/gp/product/b074rg86sr\nen aliexpress \u00faltimamente est\u00e1n entregando en 10 d\u00edas (hoy es 29/08/2020)\nhttps://es.aliexpress.com/item/32903358923.html?spm=a2g0o.productlist.0.0.26bc4071se7mf2&algo_pvid=159e700e-7ec4-41f6-a8b4-ef1eb37b29d2&algo_expid=159e700e-7ec4-41f6-a8b4-ef1eb37b29d2-0&btsid=0b0a0ad815986989110232476e8172&ws_ab_test=searchweb0_0,searchweb201602_,searchweb201603_\nel mh-z19b lo puedes adquirir tambi\u00e9n en amazon o aliexpress por unos 16-25\u20ac: https://es.aliexpress.com/item/32946106807.html?srcsns=org.telegram.messenger&spreadtype=socialshare&biztype=productdetail&tt=mg&image=u6c2b63d49cee4cc1935c5c06de0e2df9l.jpg&aff_platform=default&sk=_bswtfw&description=%e2%82%ac+14%2c50++13%25off+%7c+sensor+de+co2+infrarrojo+mh-z19+para+co2%2c+monitor+mh-z19b%2c+sensor+de+gas+co2+de+di%c3%b3xido+de+carbono%2c+0-5000ppm&aff_trace_key=1c43dcc98a834a8fa43b79f907dd3d5b-1604748762672-07455-_bswtfw&businesstype=productdetail&title=%e2%82%ac+14%2c50++13%25off+%7c+sensor+de+co2+infrarrojo+mh-z19+para+co2%2c+monitor+mh-z19b%2c+sensor+de+gas+co2+de+di%c3%b3xido+de+carbono%2c+0-5000ppm&platform=ae&terminal_id=a42b9e0f7a294b098d58d5efd3cad8cf\notros proyectos parecidos\nair quality sensor: this simple, fancy looking, esp8266 based sensor measures values of co2 and tvoc air pollutants. as output there is addressable rgb led strip, and/or optional oled display which can show real time levels. https://github.com/luc3as/air-quality-sensor/ (en ingl\u00e9s)\nco2 cuckoo clock for schools and businesses (why not eco2?) del maker y youtuber suizo andreas spiess: https://www.youtube.com/watch?v=hcpdzlparto (en ingl\u00e9s)\nair quality meter: http://www.futurashop.it/breakout-ccs811-air-quality-ft1331m-qualit%c3%a0%20aria?search=ccs811 (en italiano) la caja puedes descargarla dair quality meter (de david daghetta, en thingiverse): https://www.thingiverse.com/thing:2569792 (en ingl\u00e9s)\n(este documento est\u00e1 en constante redacci\u00f3n)", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000841, "year": null}, {"Unnamed: 0": 3017, "autor": 977, "date": null, "content": "oasis-grow\nIntroduction\noasis-grow, developed by Oasis-X, is an open-source toolkit for controlled environment cultivation, remote monitoring, and data collection. It is maintained with the goal of making the capabilities of automated gardening, precision agriculture, and cell culturing available to everyone. Users are encouraged to contribute data, projects, and technical expertise. See Contributing for details.\nThis repository contains:\nPython scripts for monitoring the grow environment and interfacing with peripherals sensors and devices,\nConfiguration files for peripheral hardware,\nAn Arduino source file for use with sensors and LEDs,\nShell scripts for installing and configuring necessary packages.\nAll functions can be deployed with a RaspberryPi (for networking, scheduling, task management, & control) + an Arduino (for precision sensors, LED management, and other real-time applications). The resulting system is controllable via shell or web interface (currently in Beta).\nTable of Contents\nIntroduction\nRaspberry Pi Setup\nUsing pre-built image\nUsing setup scripts\nHardware Setup\nArduino Setup\nDIY Wiring\nUsage\nButton Interface\nConfiguration\nSample Projects\nContributing\nRaspberry Pi Setup\nUsers have two options for install: using a pre-built image to flash oasis-grow and its requisite packages directly to an SD card, or using the setup scripts to build the repository and its requirements onto a fresh install of Raspbian Lite.\nUsing pre-built image\nInstall the image onto your Raspberry Pi:\nDownload the oasis-grow image here: [NOT YET AVAILABLE].\nDownload Balena Etcher.\nConnect a microSD card to your personal computer.\nFormat the microSD card in the MS-DOS (FAT) style using your operating system's disk formatting utility.\nOpen Balena Etcher and follow the on-screen instructions to flash the image to your microSD.\nPlace the SD card into the front slot of the Raspberry Pi.\nConnect a keyboard, monitor, and sufficient power supply to the Pi.\nUsing setup scripts\nInstall Raspbian Lite onto your Raspberry Pi:\nDownload the latest Raspbian Lite image from the official download site.\nDownload Balena Etcher.\nConnect a microSD card to your personal computer.\nFormat the microSD card in the MS-DOS (FAT) style using your operating system's disk formatting utility.\nOpen Balena Etcher and follow the on-screen instructions to flash the image to your microSD.\nPlace the SD card into the front slot of the Raspberry Pi.\nConnect a keyboard, monitor, and sufficient power supply to the Pi.\nWait for the Pi to boot, then enter the following when prompted for a username and password:\nraspberrypi login: pi\nPassword: raspberry\nWhen the prompt appears, enter sudo raspi-config. Using the arrow keys to navigate, set Localisation Options > WLAN Country according to your locale. Next, select Interface Options > Camera and turn the camera on. Finally, select System Options > Wireless LAN and enter the name and password for your home WiFi network.\nOnce you are connected to the internet, update package lists with\nsudo apt-get update\nNext, install git:\nsudo apt-get install -y git\nUse git to clone the oasis-grow repository into /home/pi:\ncd ~\nsudo git clone https://github.com/oasis-gardens/oasis-grow\nChange permissions and run the master_setup.sh script found in the repository's root directory. If you wish to run controller.py automatically at startup, at the -b flag.\ncd oasis-grow\nchmod +x install.sh\nsource ./install.sh -b #-b flag starts the bootloader, causing the interface to launch on startup in the background.\nWhen the system reboots automatically, the button interface]() and peripheral devices should be fully functional.\nSet your local time EST\ntimedatectl list-timezones\ntimedatectl set-timezone <timezone>\nHardware Setup\nArduino Setup\nFollow these instructions if you are using peripheral sensors or an LED indicator light.\nDownload the Arduino IDE (on your personal computer) from the official download site.\nPlug the Arduino into your computer via USB.\nDownload the .ino sketch found in this repository and install the libraries using the Arduino IDE.\nVerify and load the sketch onto the board.\nFind the serial port on the Raspberry Pi.\nPlug the Arduino into the Pi via USB.\nDIY Wiring\nDIYers can purchase a complete PCB (currently in Beta) to get a jump on wiring or instead follow the prototype wiring diagram.\nNote: We are not dedicated electrical engineers, as some of you may be able to tell from the wiring guide. If you know how to make good circuit diagrams, we could use your help, so shoot us an email!\nUsage\nButton Interface\nIf you have followed the DIY wiring guide, the three buttons on the control interface will function as follows provided controller.py is running (see below).\nStart/Stop Button: starts or stops the main grow-ctrl process which modulates temperature, humidity, and airflow, cycles lighting + watering aparatuses, and takes pictures at set intervals.\nConnect Button: launches an ad-hoc network and TCP server that is used to connect your system to the internet using the Oasis Mobile App (coming soon!). When ready to link your device, press this button, wait 15 seconds and then join the \"Oasis\" wifi network in your phone settings. Once this is done, return to the app, press \"add device\", and follow the on-screen prompt.\nWater Button: this runs the watering pump for 60 seconds, if there is one connected. It is most useful for draining setups with bulky reservoirs and tanks via hose.\nUsing the Button Interface\nTo use the platform with the button interface and OASIS app, follow the instructions immediately below. If you wish to run oasis-grow from the command line, skip to the Using the Command Line header. Begin by opening a terminal on the Raspberry Pi and opening /etc/rc.local:\nsudo nano /etc/rc.local\nCheck the following line is present & uncommented ie. if there is a leading hashtag, remove it. If you ran the setup script with the \"-b\" flag or are using a pre-flashed image, this should already be done for you:\npython3 /home/pi/grow-ctrl/controller.py\nIf you do not see this line, add the command to /etc/rc.local before the exit 0 command.\nThis line launches our interface script on startup which accepts button inputs, controls the growing environment, collects harvest data, and manages the optional connection process with the Oasis cloud and mobile app. This all happens on reboot, so we'll run the following command to get it up and running:\nsudo systemctl reboot\nOnce controller.py is running, and if wiring has been set up correctly, the buttons can be used to control the grow environment according to the functions described here.\nUsing the Command Line\noasis-grow can be run directly from the command line. This is the ideal option for those who would like to use custom interfaces and integrate their own scripts + programming (we are accepting collaborators, contributions, & pull requests! Hit us up mike@oasisregenerative.com, or see Contributing). In order to do this, please obtain the required hardware running grow-ctrl as a pre-flashed image (contact us) or built from source (see below).\nStart by opening a terminal and run the following command to enter the project directory:\ncd ~/grow-ctrl\nRunning the following command to start a grow cycle with default settings. This begins the process of sensing temperature, humidity, & water level, regulating heat, humidity, airflow, light, & water, and capturing images at regular intervals.\npython3 grow_ctrl.py main\nTo make use of the button interface for controlling the grow cycles, use this instead:\npython3 controller.py\nIf you want to run controller.py automatically at startup, open rc.local with\nsudo nano /etc/rc.local\nand make sure the following line is present and uncommented:\npython3 /home/pi/grow-ctrl/controller.py\nRemove the leading hashtag if there is one. If you do not see this line, add the command to /etc/rc.local before the exit 0 command.\nTwo configuration files, grow_params.json and feature_toggles.json, can be edited directly from the command line using a text editor like nano. More details can be found under Configuration.\nConfiguration\noasis-grow contains two important configuration files, both located in the repository's root directory.\nfeature_toggles.json toggles certain features on and off:\nField Value Function\ntemp_hum_sensor 0 or 1 determines whether the program is reading temperature and humidity data\nwater_low_sensor 0 or 1 determines whether the program is reading water level data\nheater 0 or 1 determines whether the heater is on or off\nhumidifier 0 or 1 determines whether the watering apparatus is on or off\nfan 0 or 1 determines whether the fan is on or off\nlight 0 or 1 determines whether the lights cycle is on or off\ncamera 0 or 1 determines whether the camera is on or off\nwater 0 or 1 determines whether the watering apparatus is on or off\nsave_images 0 or 1 determines whether the camera is saving images to a continuous feed that can be used to generate timelapses\nsave_data 0 or 1 determines whether the grow control process is logging sensor data to a .csv file\ngrow_params.json modifies grow parameters:\nField Value Function\ntargetT int 0 to 100 sets target temperature\ntargetH int 0 to 100 sets target humidity\ntargetL \"on\" or \"off\" turns light on or off\nLtimeOn int 0 to 23 hour that light turns on\nLtimeOff int 0 to 23 hour that light turns off\nlightInterval int 0 to inf time (s) between light mode refresh\ncameraInterval int 0 to inf time (s) between camera snapshots\nwaterMode \"on\" or \"off\" turns watering apparatus on or off\nwaterDuration int 0 to inf duration (s) for grow to be watered\nwaterInterval int 0 to inf time (s) between each watering\nP_temp int proportional feedback response for temperature (advanced)\nD_temp int dampening feedback response for temperature (advanced)\nP_hum int proportional feedback response for humidity (advanced)\nD_hum int dampening feedback response for humidity (advanced)\nPt_fan int proportional feedback response for fan with respect to temperature (advanced)\nDt_fan int dampening feedback response for fan with respect to temperature (advanced)\nPh_fan int proportional feedback response for fan with respect to humidity (advanced)\nDh_fan int dampening feedback response for fan with respect to humidity (advanced)\nSample Projects\noasis-grow provides a highly modular interface with countless possible applications. A forthcoming wiki will provide detailed instructions for common projects as well as a gallery of existing OASIS applications:\ntime lapse cameras\nincubators\nmushroom growing chambers\nhydroponic gardens\noutdoor environmental monitoring\npetri desh habitats\nautomated irrigation\nmuch more!\nContributing\noasis-grow welcomes open-source contributors and is currently accepting pull requests. Contact mike@oasisregenerative.com with questions or proposals.\nA wiki with additional information on building from source and the makeup of the core python scripts is in the works.", "link": "https://github.com/oasis-main/oasis-grow", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "gardens", "selectorShort": "garden", "MarkedSent": "oasis-grow\nintroduction\noasis-grow, developed by oasis-x, is an open-source toolkit for controlled environment cultivation, remote monitoring, and data collection. it is maintained with the goal of making the capabilities of automated gardening, precision agriculture, and cell culturing available to everyone. users are encouraged to contribute data, projects, and technical expertise. see contributing for details.\nthis repository contains:\npython scripts for monitoring the grow environment and interfacing with peripherals sensors and devices,\nconfiguration files for peripheral hardware,\nan arduino source file for use with sensors and leds,\nshell scripts for installing and configuring necessary packages.\nall functions can be deployed with a raspberrypi (for networking, scheduling, task management, & control) + an arduino (for precision sensors, led management, and other real-time applications). the resulting system is controllable via shell or web interface (currently in beta).\ntable of contents\nintroduction\nraspberry pi setup\nusing pre-built image\nusing setup scripts\nhardware setup\narduino setup\ndiy wiring\nusage\nbutton interface\nconfiguration\nsample projects\ncontributing\nraspberry pi setup\nusers have two options for install: using a pre-built image to flash oasis-grow and its requisite packages directly to an sd card, or using the setup scripts to build the repository and its requirements onto a fresh install of raspbian lite.\nusing pre-built image\ninstall the image onto your raspberry pi:\ndownload the oasis-grow image here: [not yet available].\ndownload balena etcher.\nconnect a microsd card to your personal computer.\nformat the microsd card in the ms-dos (fat) style using your operating system's disk formatting utility.\nopen balena etcher and follow the on-screen instructions to flash the image to your microsd.\nplace the sd card into the front slot of the raspberry pi.\nconnect a keyboard, monitor, and sufficient power supply to the pi.\nusing setup scripts\ninstall raspbian lite onto your raspberry pi:\ndownload the latest raspbian lite image from the official download site.\ndownload balena etcher.\nconnect a microsd card to your personal computer.\nformat the microsd card in the ms-dos (fat) style using your operating system's disk formatting utility.\nopen balena etcher and follow the on-screen instructions to flash the image to your microsd.\nplace the sd card into the front slot of the raspberry pi.\nconnect a keyboard, monitor, and sufficient power supply to the pi.\nwait for the pi to boot, then enter the following when prompted for a username and password:\nraspberrypi login: pi\npassword: raspberry\nwhen the prompt appears, enter sudo raspi-config. using the arrow keys to navigate, set localisation options > wlan country according to your locale. next, select interface options > camera and turn the camera on. finally, select system options > wireless lan and enter the name and password for your home wifi network.\nonce you are connected to the internet, update package lists with\nsudo apt-get update\nnext, install git:\nsudo apt-get install -y git\nuse git to clone the oasis-grow repository into /home/pi:\ncd ~\nsudo git clone https://github.com/oasis-gardens/oasis-grow\nchange permissions and run the master_setup.sh script found in the repository's root directory. if you wish to run controller.py automatically at startup, at the -b flag.\ncd oasis-grow\nchmod +x install.sh\nsource ./install.sh -b #-b flag starts the bootloader, causing the interface to launch on startup in the background.\nwhen the system reboots automatically, the button interface]() and peripheral devices should be fully functional.\nset your local time est\ntimedatectl list-timezones\ntimedatectl set-timezone <timezone>\nhardware setup\narduino setup\nfollow these instructions if you are using peripheral sensors or an led indicator light.\ndownload the arduino ide (on your personal computer) from the official download site.\nplug the arduino into your computer via usb.\ndownload the .ino sketch found in this repository and install the libraries using the arduino ide.\nverify and load the sketch onto the board.\nfind the serial port on the raspberry pi.\nplug the arduino into the pi via usb.\ndiy wiring\ndiyers can purchase a complete pcb (currently in beta) to get a jump on wiring or instead follow the prototype wiring diagram.\nnote: we are not dedicated electrical engineers, as some of you may be able to tell from the wiring guide. if you know how to make good circuit diagrams, we could use your help, so shoot us an email!\nusage\nbutton interface\nif you have followed the diy wiring guide, the three buttons on the control interface will function as follows provided controller.py is running (see below).\nstart/stop button: starts or stops the main grow-ctrl process which modulates temperature, humidity, and airflow, cycles lighting + watering aparatuses, and takes pictures at set intervals.\nconnect button: launches an ad-hoc network and tcp server that is used to connect your system to the internet using the oasis mobile app (coming soon!). when ready to link your device, press this button, wait 15 seconds and then join the \"oasis\" wifi network in your phone settings. once this is done, return to the app, press \"add device\", and follow the on-screen prompt.\nwater button: this runs the watering pump for 60 seconds, if there is one connected. it is most useful for draining setups with bulky reservoirs and tanks via hose.\nusing the button interface\nto use the platform with the button interface and oasis app, follow the instructions immediately below. if you wish to run oasis-grow from the command line, skip to the using the command line header. begin by opening a terminal on the raspberry pi and opening /etc/rc.local:\nsudo nano /etc/rc.local\ncheck the following line is present & uncommented ie. if there is a leading hashtag, remove it. if you ran the setup script with the \"-b\" flag or are using a pre-flashed image, this should already be done for you:\npython3 /home/pi/grow-ctrl/controller.py\nif you do not see this line, add the command to /etc/rc.local before the exit 0 command.\nthis line launches our interface script on startup which accepts button inputs, controls the growing environment, collects harvest data, and manages the optional connection process with the oasis cloud and mobile app. this all happens on reboot, so we'll run the following command to get it up and running:\nsudo systemctl reboot\nonce controller.py is running, and if wiring has been set up correctly, the buttons can be used to control the grow environment according to the functions described here.\nusing the command line\noasis-grow can be run directly from the command line. this is the ideal option for those who would like to use custom interfaces and integrate their own scripts + programming (we are accepting collaborators, contributions, & pull requests! hit us up mike@oasisregenerative.com, or see contributing). in order to do this, please obtain the required hardware running grow-ctrl as a pre-flashed image (contact us) or built from source (see below).\nstart by opening a terminal and run the following command to enter the project directory:\ncd ~/grow-ctrl\nrunning the following command to start a grow cycle with default settings. this begins the process of sensing temperature, humidity, & water level, regulating heat, humidity, airflow, light, & water, and capturing images at regular intervals.\npython3 grow_ctrl.py main\nto make use of the button interface for controlling the grow cycles, use this instead:\npython3 controller.py\nif you want to run controller.py automatically at startup, open rc.local with\nsudo nano /etc/rc.local\nand make sure the following line is present and uncommented:\npython3 /home/pi/grow-ctrl/controller.py\nremove the leading hashtag if there is one. if you do not see this line, add the command to /etc/rc.local before the exit 0 command.\ntwo configuration files, grow_params.json and feature_toggles.json, can be edited directly from the command line using a text editor like nano. more details can be found under configuration.\nconfiguration\noasis-grow contains two important configuration files, both located in the repository's root directory.\nfeature_toggles.json toggles certain features on and off:\nfield value function\ntemp_hum_sensor 0 or 1 determines whether the program is reading temperature and humidity data\nwater_low_sensor 0 or 1 determines whether the program is reading water level data\nheater 0 or 1 determines whether the heater is on or off\nhumidifier 0 or 1 determines whether the watering apparatus is on or off\nfan 0 or 1 determines whether the fan is on or off\nlight 0 or 1 determines whether the lights cycle is on or off\ncamera 0 or 1 determines whether the camera is on or off\nwater 0 or 1 determines whether the watering apparatus is on or off\nsave_images 0 or 1 determines whether the camera is saving images to a continuous feed that can be used to generate timelapses\nsave_data 0 or 1 determines whether the grow control process is logging sensor data to a .csv file\ngrow_params.json modifies grow parameters:\nfield value function\ntargett int 0 to 100 sets target temperature\ntargeth int 0 to 100 sets target humidity\ntargetl \"on\" or \"off\" turns light on or off\nltimeon int 0 to 23 hour that light turns on\nltimeoff int 0 to 23 hour that light turns off\nlightinterval int 0 to inf time (s) between light mode refresh\ncamerainterval int 0 to inf time (s) between camera snapshots\nwatermode \"on\" or \"off\" turns watering apparatus on or off\nwaterduration int 0 to inf duration (s) for grow to be watered\nwaterinterval int 0 to inf time (s) between each watering\np_temp int proportional feedback response for temperature (advanced)\nd_temp int dampening feedback response for temperature (advanced)\np_hum int proportional feedback response for humidity (advanced)\nd_hum int dampening feedback response for humidity (advanced)\npt_fan int proportional feedback response for fan with respect to temperature (advanced)\ndt_fan int dampening feedback response for fan with respect to temperature (advanced)\nph_fan int proportional feedback response for fan with respect to humidity (advanced)\ndh_fan int dampening feedback response for fan with respect to humidity (advanced)\nsample projects\noasis-grow provides a highly modular interface with countless possible applications. a forthcoming wiki will provide detailed instructions for common projects as well as a gallery of existing oasis applications:\ntime lapse cameras\nincubators\nmushroom growing chambers\nhydroponic -----> gardens !!! \noutdoor environmental monitoring\npetri desh habitats\nautomated irrigation\nmuch more!\ncontributing\noasis-grow welcomes open-source contributors and is currently accepting pull requests. contact mike@oasisregenerative.com with questions or proposals.\na wiki with additional information on building from source and the makeup of the core python scripts is in the works.", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000977, "year": null}], "name": "gardenarduino"}