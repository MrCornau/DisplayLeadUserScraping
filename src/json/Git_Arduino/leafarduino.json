{"interestingcomments": [{"Unnamed: 0": 2104, "autor": 64, "date": null, "content": "Task Scheduler\nCooperative multitasking for Arduino, ESPx, STM32 and other microcontrollers\nVersion 3.4.0: 2021-07-14 Latest updates\nGet expedited support or integration consultation for TaskScheduler from xs:code\nOVERVIEW:\nA lightweight implementation of cooperative multitasking (task scheduling). An easier alternative to preemptive programming and frameworks like FreeRTOS.\nWhy cooperative?\nYou mostly do not need to worry about pitfalls of concurrent processing (races, deadlocks, livelocks, resource sharing, etc.). The fact of cooperative processing takes care of such issues by design.\n\u201cEverybody who learns concurrency and thinks they understand it, ends up finding mysterious races they thought weren\u2019t possible, and discovers that they didn\u2019t actually understand it yet after all.\u201d Herb Sutter, chair of the ISO C++ standards committee, Microsoft.\nMain features:\nPeriodic task execution, with dynamic execution period in milliseconds (default) or microseconds (if explicitly enabled) \u2013 frequency of execution\nNumber of iterations (limited or infinite number of iterations)\nExecution of tasks in predefined sequence\nDynamic change of task execution parameters (frequency, number of iterations, callback methods)\nPower saving via entering IDLE sleep mode when tasks are not scheduled to run\nSupport for event-driven task invocation via Status Request object\nSupport for task IDs and Control Points for error handling and watchdog timer\nSupport for Local Task Storage pointer (allowing use of same callback code for multiple tasks)\nSupport for layered task prioritization\nSupport for std::functions (tested on ESPx and STM32 only)\nOverall task timeout\nStatic and dynamic callback method binding\nCPU load / idle statistics for time critical applications\nScheduling options with priority for original schedule (with and without catchup) and interval\nAbility to pause/resume and enable/disable scheduling\nScheduling overhead: between 15 and 18 microseconds per scheduling pass (Arduino UNO rev 3 @ 16MHz clock, single scheduler w/o prioritization)\nTaskScheduler was tested on the following platforms:\nArduino Uno R3\nArduino Nano\nArduino Micro\nATtiny85\nESP8266 (Node MCU v2.0)\nESP32\nTeensy (tested on Teensy 3.5)\nnRF52 (tested on nRF52832)\nSTM32 (tested on Mini USB STM32F103RCBT6 ARM Cortex-M3 leaflabs Leaf maple mini module F)\nMSP430 and MSP432 boards\nRaspberry Pi (requires external Arduino.h and millis() implementation)\n\u200b Don't just take my word for it - try it for yourself on Wokwi\nChangelog is located here.\nFor detailed functionality overview please refer to TaskScheduler documentation in the 'extras' folder or in the Wiki page.\nUser Feedback:\n\"I've used https://github.com/arkhipenko/TaskScheduler with great success. Running LED patterns, monitoring button presses, reading data from an accelerometer, auto advancing to the next pattern, reading data from Serial. All at the same time.\" - here\n\"There are libraries that do this automatically on Arduino too, allowing you to schedule [cooperative] multitasking and sleep the uC between tasks. E.g. https://github.com/arkhipenko/TaskScheduler is really good, I've used it before. You basically queue up a list of task callbacks and a schedule in your setup() and then do a call to tasks.execute() in loop(), which pops off the next task that is due in a queue or sleeps otherwise. It's simple, but much more straightforward than manually using if millis() - last > delta1... else sleep() and not as rigid as using the timer ISRs (which really serve a different purpose).\" - here\n\"I took the controller with me on a business trip and spend the night getting the basic code framework out. It is going to run on top of Arkhipenko\u2019s TaskScheduler. (https://github.com/arkhipenko/TaskScheduler) This should help me isolate any issues between the different control systems while managing the different task\u2019s timing requirements.\" - here\n\"it's really cool and useful, for whenver you want your MCU to do more than 1 task\" - here\n\"I encourage you to use it in the Arduino environment, it allows you to save a lot of time (and code lines) wherever you need to schedule, i.e. run many tasks that should to perform at different frequencies and when we want to have the greatest control over the performance of these tasks and we want good diagnostic of errors.\" - here\n\"arkhipenko/TaskScheduler is still my choice for now, especially when I get my pull request in, so we can have that idle 1 ms sleep feature for free.\" - here\nCheck out what TaskScheduler can do:\nAround the world:\nNinja Timer: Giant 7-Segment Display at Adafruit.com https://learn.adafruit.com/ninja-timer-giant-7-segment-display/timer-code\nPlaying with NeoPixel to create a nice #smartBulb IoT https://www.zerozone.it/linux-e-open-source/giocare-con-i-neopixel-per-realizzare-un-simpatico-smartbulb-iot/16760\nAdding a timer to XK X6 Transmitter https://www.elvinplay.com/adding-a-timer-to-xk-x6-transmitter-en/\nArduino Bluetooth remote control + ultrasonic anti-collision car https://xie.infoq.cn/article/0f27dbbebcc2b99b35132b262\nWEMOS D1 Mini\ub85c Ad-hoc WIFI network https://m.blog.naver.com/sonyi/221330334326\n3 Devo - Quality 3D printing filament, now made accessible and affordable (http://3devo.eu/license-information/)\nHouston midi clock project - TaskScheduler with microseconds resolution\nby chaffneue:\nMy first arduino project. It's a multi-master midi controller with a shared clock and auto count in behaviour.\nyoutube: https://www.youtube.com/watch?v=QRof550TtXo\nHackabot Nano by Funnyvale - Compact Plug and Play Arduino compatible robotic kit https://www.kickstarter.com/projects/hackarobot/hackabot-nano-compact-plug-and-play-arduino-robot\nDiscrete Time Systems Wiki - https://sistemas-en-tiempo-discreto.fandom.com/es/wiki/Tiempo_Real\nMy projects:\nInteractive \"Do Not Disturb\" sign in a shape of Minecraft Sword (ESP32) (https://www.instructables.com/id/Interactive-Minecraft-Do-Not-Enter-SwordSign-ESP32/)\nInteractive Predator Costume with Real-Time Head Tracking Plasma Cannon (Teensy, Arduino Nano) (https://www.instructables.com/id/Interactive-Predator-Costume-With-Head-Tracking-Pl/)\nIoT APIS v2 - Autonomous IoT-enabled Automated Plant Irrigation System (ESP8266) (http://www.instructables.com/id/IoT-APIS-V2-Autonomous-IoT-enabled-Automated-Plant/)\nAPIS - Automated Plant Irrigation System (Arduino Uno) (http://www.instructables.com/id/APIS-Automated-Plant-Irrigation-System/)\nParty Lights LEDs music visualization (Leaf Maple Mini) (https://www.instructables.com/id/Portable-Party-Lights/)\nArduino Nano based Hexbug Scarab Robotic Spider (Arduino Nano) (http://www.instructables.com/id/Arduino-Nano-based-Hexbug-Scarab-Robotic-Spider/)\nWave your hand to control OWI Robotic Arm... no strings attached (Arduino Uno and Nano) (http://www.instructables.com/id/Wave-your-hand-to-control-OWI-Robotic-Arm-no-strin/)\nInteractive Halloween Pumpkin (Arduino Uno) (http://www.instructables.com/id/Interactive-Halloween-Pumpkin/)", "link": "https://github.com/arkhipenko/TaskScheduler", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "leaf", "selectorShort": "leaf", "MarkedSent": "task scheduler\ncooperative multitasking for arduino, espx, stm32 and other microcontrollers\nversion 3.4.0: 2021-07-14 latest updates\nget expedited support or integration consultation for taskscheduler from xs:code\noverview:\na lightweight implementation of cooperative multitasking (task scheduling). an easier alternative to preemptive programming and frameworks like freertos.\nwhy cooperative?\nyou mostly do not need to worry about pitfalls of concurrent processing (races, deadlocks, livelocks, resource sharing, etc.). the fact of cooperative processing takes care of such issues by design.\n\u201ceverybody who learns concurrency and thinks they understand it, ends up finding mysterious races they thought weren\u2019t possible, and discovers that they didn\u2019t actually understand it yet after all.\u201d herb sutter, chair of the iso c++ standards committee, microsoft.\nmain features:\nperiodic task execution, with dynamic execution period in milliseconds (default) or microseconds (if explicitly enabled) \u2013 frequency of execution\nnumber of iterations (limited or infinite number of iterations)\nexecution of tasks in predefined sequence\ndynamic change of task execution parameters (frequency, number of iterations, callback methods)\npower saving via entering idle sleep mode when tasks are not scheduled to run\nsupport for event-driven task invocation via status request object\nsupport for task ids and control points for error handling and watchdog timer\nsupport for local task storage pointer (allowing use of same callback code for multiple tasks)\nsupport for layered task prioritization\nsupport for std::functions (tested on espx and stm32 only)\noverall task timeout\nstatic and dynamic callback method binding\ncpu load / idle statistics for time critical applications\nscheduling options with priority for original schedule (with and without catchup) and interval\nability to pause/resume and enable/disable scheduling\nscheduling overhead: between 15 and 18 microseconds per scheduling pass (arduino uno rev 3 @ 16mhz clock, single scheduler w/o prioritization)\ntaskscheduler was tested on the following platforms:\narduino uno r3\narduino nano\narduino micro\nattiny85\nesp8266 (node mcu v2.0)\nesp32\nteensy (tested on teensy 3.5)\nnrf52 (tested on nrf52832)\nstm32 (tested on mini usb stm32f103rcbt6 arm cortex-m3 leaflabs -----> leaf !!!  maple mini module f)\nmsp430 and msp432 boards\nraspberry pi (requires external arduino.h and millis() implementation)\n\u200b don't just take my word for it - try it for yourself on wokwi\nchangelog is located here.\nfor detailed functionality overview please refer to taskscheduler documentation in the 'extras' folder or in the wiki page.\nuser feedback:\n\"i've used https://github.com/arkhipenko/taskscheduler with great success. running led patterns, monitoring button presses, reading data from an accelerometer, auto advancing to the next pattern, reading data from serial. all at the same time.\" - here\n\"there are libraries that do this automatically on arduino too, allowing you to schedule [cooperative] multitasking and sleep the uc between tasks. e.g. https://github.com/arkhipenko/taskscheduler is really good, i've used it before. you basically queue up a list of task callbacks and a schedule in your setup() and then do a call to tasks.execute() in loop(), which pops off the next task that is due in a queue or sleeps otherwise. it's simple, but much more straightforward than manually using if millis() - last > delta1... else sleep() and not as rigid as using the timer isrs (which really serve a different purpose).\" - here\n\"i took the controller with me on a business trip and spend the night getting the basic code framework out. it is going to run on top of arkhipenko\u2019s taskscheduler. (https://github.com/arkhipenko/taskscheduler) this should help me isolate any issues between the different control systems while managing the different task\u2019s timing requirements.\" - here\n\"it's really cool and useful, for whenver you want your mcu to do more than 1 task\" - here\n\"i encourage you to use it in the arduino environment, it allows you to save a lot of time (and code lines) wherever you need to schedule, i.e. run many tasks that should to perform at different frequencies and when we want to have the greatest control over the performance of these tasks and we want good diagnostic of errors.\" - here\n\"arkhipenko/taskscheduler is still my choice for now, especially when i get my pull request in, so we can have that idle 1 ms sleep feature for free.\" - here\ncheck out what taskscheduler can do:\naround the world:\nninja timer: giant 7-segment display at adafruit.com https://learn.adafruit.com/ninja-timer-giant-7-segment-display/timer-code\nplaying with neopixel to create a nice #smartbulb iot https://www.zerozone.it/linux-e-open-source/giocare-con-i-neopixel-per-realizzare-un-simpatico-smartbulb-iot/16760\nadding a timer to xk x6 transmitter https://www.elvinplay.com/adding-a-timer-to-xk-x6-transmitter-en/\narduino bluetooth remote control + ultrasonic anti-collision car https://xie.infoq.cn/article/0f27dbbebcc2b99b35132b262\nwemos d1 mini\ub85c ad-hoc wifi network https://m.blog.naver.com/sonyi/221330334326\n3 devo - quality 3d printing filament, now made accessible and affordable (http://3devo.eu/license-information/)\nhouston midi clock project - taskscheduler with microseconds resolution\nby chaffneue:\nmy first arduino project. it's a multi-master midi controller with a shared clock and auto count in behaviour.\nyoutube: https://www.youtube.com/watch?v=qrof550ttxo\nhackabot nano by funnyvale - compact plug and play arduino compatible robotic kit https://www.kickstarter.com/projects/hackarobot/hackabot-nano-compact-plug-and-play-arduino-robot\ndiscrete time systems wiki - https://sistemas-en-tiempo-discreto.fandom.com/es/wiki/tiempo_real\nmy projects:\ninteractive \"do not disturb\" sign in a shape of minecraft sword (esp32) (https://www.instructables.com/id/interactive-minecraft-do-not-enter-swordsign-esp32/)\ninteractive predator costume with real-time head tracking plasma cannon (teensy, arduino nano) (https://www.instructables.com/id/interactive-predator-costume-with-head-tracking-pl/)\niot apis v2 - autonomous iot-enabled automated plant irrigation system (esp8266) (http://www.instructables.com/id/iot-apis-v2-autonomous-iot-enabled-automated-plant/)\napis - automated plant irrigation system (arduino uno) (http://www.instructables.com/id/apis-automated-plant-irrigation-system/)\nparty lights leds music visualization (leaf maple mini) (https://www.instructables.com/id/portable-party-lights/)\narduino nano based hexbug scarab robotic spider (arduino nano) (http://www.instructables.com/id/arduino-nano-based-hexbug-scarab-robotic-spider/)\nwave your hand to control owi robotic arm... no strings attached (arduino uno and nano) (http://www.instructables.com/id/wave-your-hand-to-control-owi-robotic-arm-no-strin/)\ninteractive halloween pumpkin (arduino uno) (http://www.instructables.com/id/interactive-halloween-pumpkin/)", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000064, "year": null}], "name": "leafarduino"}