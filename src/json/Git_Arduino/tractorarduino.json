{"interestingcomments": [{"Unnamed: 0": 2440, "autor": 400, "date": null, "content": "This is an ATMEL Mega328P / NRF24L01+ based 2.4GHz radio receiver\nFeatures:\nCompatible with this transmitter: https://github.com/TheDIYGuy999/RC_Transmitter\nProgrammable with Arduino IDE\n4 RC servo connectors\nSBUS output\nOutputs for Headlights, indicators, taillights with brake lights\nAdditional switching output\nSupport for self balancing robot or car with stability control (using an MPU-6050 sensor)\nIntegrated TB6612FNG dual dc motor driver\nSerial header (with SBUS support)\nI2C header (for example for the supported MPU-6050)\nICSP header for programming with Arduino IDE (use \"TheDIYGuy999 328P\" board definition and set brownout voltage to 1.8V)\nNRF24L01+ SMD module integrated\nvery small size\nUp to 20 vehicle addresses selectable, allows to use the same remote controller for 10 vehicles\nEagle & Gerber files are also provided, if you want to build your own receiver!\nSee: https://www.youtube.com/playlist?list=PLGO5EJJClJBCjIvu8frS7LrEU3H2Yz_so\nNew in V 1.3:\nVehicle configuration is now stored in \"vehicleConfig.h\", so the main code always stays the same.\nCrude frequency hopping, if bad receiving quality is detected (needs to be improved).\nNew in V 1.4:\n10 vehicle addresses instead of 5\nMore vehicle configuration options\nThe \"BACK\" button on the transmitter can now be used (if the menu screen is not displayed on the OLED) as a momentary button, for example for a horn on the vehicle. It is sent as \"data.momentary1\"\nSimpleTimer library replaced with my own code, which uses significantly less memory\nNew in V 1.5:\nAdded steering mixer for semi caterpillar and caterpillar vehicles such as tanks, diggers etc.\nChannel 3 is throttle, channel 1 is steering\nMore vehicle configuration options in vehicleVonfig.h\nThe left caterpillar is motor 2, the right is motor 1\nSteering servo 1 can be used in parallel (for semi caterpillar vehicles or vehicles with electronic differential)\nNew in V 1.6:\nAdded indicator lights - wired to A4 (SDA) / A5 (SCL) ports\nenabled and disabled left / right by channel 4 left / right\ndisabled by turning back the steering wheel (channel 1) - just like a real car\nhazard lights (all indicators flashing), if no connection to the transmitter\nNew in V 1.61:\nBattery cutoff bug fixed\nNew in V 1.7 (Support for board revision 1.3):\n**** TB6612FNG library update to V1.1 is required! ****\nmotor driver pinout has changed in board V1.3. So we are now able to adjust the PWM frequency of motor2. This allows smooth motor operation without the typical PWM whining.\nvehicleConfig.h changed: \"boardVersion\" and \"HP\" variables added. They allow to stay compatible with older board versions. Just select the correct configuration.\nThe new \"HP\" (High Power) board version has only one motor driver channel, because both TB6612FNG channels are wired in parallel. It's able to supply 2.4A (average) / 6.4A (peak) so we can use bigger motors. This is useful for models, which use a steering servo and don't need a second motor channel.'\nautomatic radio re-initialisation after signal timeout\nNew in V 1.71\nBattery monitoring and cutoff triggering improved. Under load, 0.3V are now added to the battery voltage to compensate the voltage drop. This allows to set the cutoff voltage to 3.6V, even with bigger loads.\nVehicle #7 added.\nNew in V 1.8\nNew \"engineSound\" variable in \"vehicleconfig.h\". True means, that the servo 3 pulse signal can be switched on and off, using the channel 2 joystick. This switches the engine sound on my \"Rc Engine Sound\" unit on and off.\nNew in V 1.9\nNew vehicle specific configuration section in vehicleConfig.h. The configuration is now done entirely during compilation time.\nNew in V 2.0\nvehicle Config.h: New vehicleType 3 (forklift) added. Motor 2 is used as lifting motor in this case. A servo is required as steering motor.\nBeacon lights can be wired to servo channel 4. Select \"beacons = true\" in this case. The beacons are flashing during vehicle movement and are switching off, after the vehicle did not move for 10s.\nNew in V 2.1\nSounds for a STAR WARS R2-D2 robot can now be generated on servo channel 3\n\"toneOut\" variable added to vehicleConfig.h. True means, that servo 3 channel is generating sounds instead of a servo signal.\nDo not enable \"toneOut\" and \"engineSound\" at the same time.\nNote: the Arduino tone() function is blocking. So don't play sounds while driving ;-)\nNew in V 2.2\n**** TB6612FNG library update to V1.2 is required! **** https://github.com/TheDIYGuy999/TB6612FNG\n**** The PID library is required! **** https://github.com/br3ttb/Arduino-PID-Library/\nSupport for self balancing (inverted pendulum, segway) vehicles. See: https://www.youtube.com/watch?v=zse9-l2Yo3Y)\nA MPU-6050 accelerometer & gyro module is used for the balancing data communication via SDA & SCL\nNote, that the receiver will not work, if your vehicleType is 4 (balancing) and no MPU-6050 is connected!\nDo not enable \"balancing\" and \"indicators\" at the same time.\nNew in V 2.21\nGyro drift calibration bug fixed\nChanged the balancing controller refresh rate to 125Hz to reduce jitter on a 8MHz MCU. Reason: one program loop takes 4 - 7ms, so we can't use a time base of 4ms (=250Hz).\nNew in V 2.3\nMRSC (Micro RC Stability Control) added. This functionality is similar to the Traxxas TSM or ESC. See: https://www.youtube.com/watch?v=IPve7QpdLBc&t=5s\nThe steering servo angle is compensated in accordance with the speed, the requested steering angle and the measured yaw rate, which is coming from the MPU-6050\nBasically the mrsc() function was added. The required yaw rate is already calculated in the balancing.h, which is already existing for self balancing robots\nIf you want to use this functionality, you have to set the vehicleType to 5 in the vehicleConfig.h. Please note, that the receiver will not work, if no MPU-6050 is connected and the vehicleType is set to 4 or 5!\nNew in V 2.31\nMRSC gain factor now depending on the potentiometer 1 value on the transmitter\nAllows to fine adjust the MRSC during driving, depending on the requirements of the street surface\nNote, that you need to connect a potentiometer to the analog input A6 of your transmitter!\nNew in V 2.32\nFlickering headlights bug in vehicleType 5 fixed\nThe accelerometer vectors are not processed anymore in vehicleType 5. This is only required for the self balancing robot (vehicleType 4)\nNew in V 2.4\nThe I2C bus is scanned for an MPU-6050 sensor during the setup() sequence. The vehicleType is automatically changed to 0 (car without MRSC), if no sensor is detected.\nThis means, that a car with vehicleType 5 (MRSC Stability Control) can now also be used without an MPU-6050 plugged in.\nNote, that the self balancing mode (vehicleType 4) always requires an MPU-6050. Otherwise the receiver will not start.\nNew in V 2.41\nThe \"indicators\" variable is now locked and can't be enabled, if the SDA and SCL pins are in use for the MPU-6050 sensor. This is the case in vehicleMode 4 and 5.\nNew in V 2.5\nThe MRSC stability control is now also working for cars without a steering servo\nCode was added to control a DC steering motor (as found in cheap RC cars) in accordance with the MPU-6050 yaw rate\nThis is for example very useful for Coke Can Cars. See: https://www.youtube.com/watch?v=jr5yYBal3vk\nNew in V 2.6\nThe MRSC stability control can now be used with transmitters without gain adjustment potentiometer\nThe following optional parameters in the vehicleConfig.h allow to use a fixed gain: MRSC_FIXED, mrscGain\nAllows to add an MPU-6050 gyro to every vehicle. So we always have a closed loop steering control, even without a proper servo with potentiometer feedback\nOn the \"Non-High-Power\" receiver model, 0.3V battery voltage are not added anymore during driving. This is not useful, if there is not much current draw.\nNew in V 2.7\nThe MRSC stability control gain adjustment knob can now be linked to servo CH4, if \"potentiometer1\" is set to \"true\" in vehicleConfig.h\nThis is useful, if an external MRSC stability control unit for 3 pin servos is used. See: https://github.com/TheDIYGuy999/MRSC_Adapter_3Pin_Servo\nServo CH4 is wired to pin 5 in this case. This allows to adjust the MRSC gain on the transmitter, just as with the internal MRSC stability control\nNew in V 2.8\nAdded support for differential thrust controlled airplanes\nTested with a Piper J3 CUB from Banggood\nNew in V 2.9\nAdded TWO_SPEED_GEARBOX option for mechanical two speed gearboxes, shifted by a servo, connected to CH2, controlled by \"Mode 1\" button\nExample see vehicle CONFIG_WPL_B-36\nSee video: https://www.youtube.com/watch?v=EaOJE_GU5pk&t=1s\nNew in V 3.0\nAdded TRACTOR_TRAILER_UNLOCK option. Used to operate the tractor trailer unlocking servo\nPress the \"Back / Pulse\" button to unlock your trailer\nSee vehicle \"CONFIG_JJRC_Q60\" for example\nParts for 3D printing: https://www.thingiverse.com/thing:3399449\nNew in V 3.1\nAdded THRE_SPEED_GEARBOX option for mechanical three speed gearboxes, shifted by a servo, connected to CH2, controlled by a 3 position switch, connected to CH2 Joystick input of the transmitter. A 10k resistor is reqired between GND and the input pin as well as between the input pin and VCC\nThree individual servo positions can be programmed: lim2L, lim2C, lim2R\nExample see vehicle CONFIG_HG_P407\nNew in V 3.2\nAdded the \"TXO_toggle1\" variable: allows to toggle the TXO pin, using the \"Back / Impulse\" button on the transmitter\nUseful for example for additional lights\nDon't activate it in combination with \"TXO_momentary1\". Serial is not usable, if one of these booleans is set to true\nNew in V 3.3\nAdded experimental support for serial communication with my \"Arduino RC engine sound generator for ESP32\": https://github.com/TheDIYGuy999/Rc_Engine_Sound_ESP32\nUncomment \"#define SERIAL_COMMUNICATION\" in Adjustments.h of the sound generator\nConnect pin 36 \"VP\"of the sound generator to pin \"TXO\" of the receiver (disable \"TXO_momentary1\", \"TXO_toggle1\" & \"headLights\" in vehicleConfig.h)\nNew in V 3.31\n\"headlLights\" must be inactive as well in order to use serial communication!\nNew in V 3.32\n\"data.pot1\" properly initialized (cauesd an issue on the ESP32 engine sound generator)\nNew in V 3.4\nSBUS support added (variable \"SBUS_SERIAL\" in vehicleConfiguration.h\nChannel order and comments see sendSbusCommands()\nYou need to install my SBUS library: https://github.com/TheDIYGuy999/SBUS\nConnect your servos or what ever to pin \"TXO\" (disable \"TXO_momentary1\", \"TXO_toggle1\" & \"headLights\" in vehicleConfig.h)\nNew in V 3.5\nmode1, mode2 and momentary1 properly initialised before SBUS is enabled\nNew in V 3.6\n\"vehicleType\" 1 or 2 (tracked or half tracked mode steering mixer) is now working as well, if two ESC are connected to servo pins 2 and 3. In the past, it was only usable with the internal TB6612 dual DC motor driver.\nAlso works in combination with my ESP32 Engine Sound & Light Controller (SBUS & PWM Mode)\nNew in V 3.7\nSteering center position separately adjustable, using \"#define STEERING_3_POINT_CAL\" and \"lim1C\". This is useful for badly designed steering linkage geometries. Example see vehicle configuration \"CONFIG_WPL_B_36_MODE1\"\nNew in V 3.8:\n20 vehicle addresses instead of 10\nLess RAM usage\n2 speed transmission not shifting while standing still. This will protect the shifting servo.\nNew in V 3.81:\nLibraries comments added\nUsage\nSee pictures\nNewest version v1.5:\nFirst prototype:\nReceiver PCB\nMPU-6050 shield PCB\n(c) 2016 - 2020 TheDIYGuy999", "link": "https://github.com/TheDIYGuy999/Micro_RC_Receiver", "origin": "Github", "suborigin": "arduino", "result": true, "Selector": "tractor", "selectorShort": "tractor", "MarkedSent": "this is an atmel mega328p / nrf24l01+ based 2.4ghz radio receiver\nfeatures:\ncompatible with this transmitter: https://github.com/thediyguy999/rc_transmitter\nprogrammable with arduino ide\n4 rc servo connectors\nsbus output\noutputs for headlights, indicators, taillights with brake lights\nadditional switching output\nsupport for self balancing robot or car with stability control (using an mpu-6050 sensor)\nintegrated tb6612fng dual dc motor driver\nserial header (with sbus support)\ni2c header (for example for the supported mpu-6050)\nicsp header for programming with arduino ide (use \"thediyguy999 328p\" board definition and set brownout voltage to 1.8v)\nnrf24l01+ smd module integrated\nvery small size\nup to 20 vehicle addresses selectable, allows to use the same remote controller for 10 vehicles\neagle & gerber files are also provided, if you want to build your own receiver!\nsee: https://www.youtube.com/playlist?list=plgo5ejjcljbcjivu8frs7lreu3h2yz_so\nnew in v 1.3:\nvehicle configuration is now stored in \"vehicleconfig.h\", so the main code always stays the same.\ncrude frequency hopping, if bad receiving quality is detected (needs to be improved).\nnew in v 1.4:\n10 vehicle addresses instead of 5\nmore vehicle configuration options\nthe \"back\" button on the transmitter can now be used (if the menu screen is not displayed on the oled) as a momentary button, for example for a horn on the vehicle. it is sent as \"data.momentary1\"\nsimpletimer library replaced with my own code, which uses significantly less memory\nnew in v 1.5:\nadded steering mixer for semi caterpillar and caterpillar vehicles such as tanks, diggers etc.\nchannel 3 is throttle, channel 1 is steering\nmore vehicle configuration options in vehiclevonfig.h\nthe left caterpillar is motor 2, the right is motor 1\nsteering servo 1 can be used in parallel (for semi caterpillar vehicles or vehicles with electronic differential)\nnew in v 1.6:\nadded indicator lights - wired to a4 (sda) / a5 (scl) ports\nenabled and disabled left / right by channel 4 left / right\ndisabled by turning back the steering wheel (channel 1) - just like a real car\nhazard lights (all indicators flashing), if no connection to the transmitter\nnew in v 1.61:\nbattery cutoff bug fixed\nnew in v 1.7 (support for board revision 1.3):\n**** tb6612fng library update to v1.1 is required! ****\nmotor driver pinout has changed in board v1.3. so we are now able to adjust the pwm frequency of motor2. this allows smooth motor operation without the typical pwm whining.\nvehicleconfig.h changed: \"boardversion\" and \"hp\" variables added. they allow to stay compatible with older board versions. just select the correct configuration.\nthe new \"hp\" (high power) board version has only one motor driver channel, because both tb6612fng channels are wired in parallel. it's able to supply 2.4a (average) / 6.4a (peak) so we can use bigger motors. this is useful for models, which use a steering servo and don't need a second motor channel.'\nautomatic radio re-initialisation after signal timeout\nnew in v 1.71\nbattery monitoring and cutoff triggering improved. under load, 0.3v are now added to the battery voltage to compensate the voltage drop. this allows to set the cutoff voltage to 3.6v, even with bigger loads.\nvehicle #7 added.\nnew in v 1.8\nnew \"enginesound\" variable in \"vehicleconfig.h\". true means, that the servo 3 pulse signal can be switched on and off, using the channel 2 joystick. this switches the engine sound on my \"rc engine sound\" unit on and off.\nnew in v 1.9\nnew vehicle specific configuration section in vehicleconfig.h. the configuration is now done entirely during compilation time.\nnew in v 2.0\nvehicle config.h: new vehicletype 3 (forklift) added. motor 2 is used as lifting motor in this case. a servo is required as steering motor.\nbeacon lights can be wired to servo channel 4. select \"beacons = true\" in this case. the beacons are flashing during vehicle movement and are switching off, after the vehicle did not move for 10s.\nnew in v 2.1\nsounds for a star wars r2-d2 robot can now be generated on servo channel 3\n\"toneout\" variable added to vehicleconfig.h. true means, that servo 3 channel is generating sounds instead of a servo signal.\ndo not enable \"toneout\" and \"enginesound\" at the same time.\nnote: the arduino tone() function is blocking. so don't play sounds while driving ;-)\nnew in v 2.2\n**** tb6612fng library update to v1.2 is required! **** https://github.com/thediyguy999/tb6612fng\n**** the pid library is required! **** https://github.com/br3ttb/arduino-pid-library/\nsupport for self balancing (inverted pendulum, segway) vehicles. see: https://www.youtube.com/watch?v=zse9-l2yo3y)\na mpu-6050 accelerometer & gyro module is used for the balancing data communication via sda & scl\nnote, that the receiver will not work, if your vehicletype is 4 (balancing) and no mpu-6050 is connected!\ndo not enable \"balancing\" and \"indicators\" at the same time.\nnew in v 2.21\ngyro drift calibration bug fixed\nchanged the balancing controller refresh rate to 125hz to reduce jitter on a 8mhz mcu. reason: one program loop takes 4 - 7ms, so we can't use a time base of 4ms (=250hz).\nnew in v 2.3\nmrsc (micro rc stability control) added. this functionality is similar to the traxxas tsm or esc. see: https://www.youtube.com/watch?v=ipve7qpdlbc&t=5s\nthe steering servo angle is compensated in accordance with the speed, the requested steering angle and the measured yaw rate, which is coming from the mpu-6050\nbasically the mrsc() function was added. the required yaw rate is already calculated in the balancing.h, which is already existing for self balancing robots\nif you want to use this functionality, you have to set the vehicletype to 5 in the vehicleconfig.h. please note, that the receiver will not work, if no mpu-6050 is connected and the vehicletype is set to 4 or 5!\nnew in v 2.31\nmrsc gain factor now depending on the potentiometer 1 value on the transmitter\nallows to fine adjust the mrsc during driving, depending on the requirements of the street surface\nnote, that you need to connect a potentiometer to the analog input a6 of your transmitter!\nnew in v 2.32\nflickering headlights bug in vehicletype 5 fixed\nthe accelerometer vectors are not processed anymore in vehicletype 5. this is only required for the self balancing robot (vehicletype 4)\nnew in v 2.4\nthe i2c bus is scanned for an mpu-6050 sensor during the setup() sequence. the vehicletype is automatically changed to 0 (car without mrsc), if no sensor is detected.\nthis means, that a car with vehicletype 5 (mrsc stability control) can now also be used without an mpu-6050 plugged in.\nnote, that the self balancing mode (vehicletype 4) always requires an mpu-6050. otherwise the receiver will not start.\nnew in v 2.41\nthe \"indicators\" variable is now locked and can't be enabled, if the sda and scl pins are in use for the mpu-6050 sensor. this is the case in vehiclemode 4 and 5.\nnew in v 2.5\nthe mrsc stability control is now also working for cars without a steering servo\ncode was added to control a dc steering motor (as found in cheap rc cars) in accordance with the mpu-6050 yaw rate\nthis is for example very useful for coke can cars. see: https://www.youtube.com/watch?v=jr5yybal3vk\nnew in v 2.6\nthe mrsc stability control can now be used with transmitters without gain adjustment potentiometer\nthe following optional parameters in the vehicleconfig.h allow to use a fixed gain: mrsc_fixed, mrscgain\nallows to add an mpu-6050 gyro to every vehicle. so we always have a closed loop steering control, even without a proper servo with potentiometer feedback\non the \"non-high-power\" receiver model, 0.3v battery voltage are not added anymore during driving. this is not useful, if there is not much current draw.\nnew in v 2.7\nthe mrsc stability control gain adjustment knob can now be linked to servo ch4, if \"potentiometer1\" is set to \"true\" in vehicleconfig.h\nthis is useful, if an external mrsc stability control unit for 3 pin servos is used. see: https://github.com/thediyguy999/mrsc_adapter_3pin_servo\nservo ch4 is wired to pin 5 in this case. this allows to adjust the mrsc gain on the transmitter, just as with the internal mrsc stability control\nnew in v 2.8\nadded support for differential thrust controlled airplanes\ntested with a piper j3 cub from banggood\nnew in v 2.9\nadded two_speed_gearbox option for mechanical two speed gearboxes, shifted by a servo, connected to ch2, controlled by \"mode 1\" button\nexample see vehicle config_wpl_b-36\nsee video: https://www.youtube.com/watch?v=eaoje_gu5pk&t=1s\nnew in v 3.0\nadded tractor_trailer_unlock option. used to operate the -----> tractor !!!  trailer unlocking servo\npress the \"back / pulse\" button to unlock your trailer\nsee vehicle \"config_jjrc_q60\" for example\nparts for 3d printing: https://www.thingiverse.com/thing:3399449\nnew in v 3.1\nadded thre_speed_gearbox option for mechanical three speed gearboxes, shifted by a servo, connected to ch2, controlled by a 3 position switch, connected to ch2 joystick input of the transmitter. a 10k resistor is reqired between gnd and the input pin as well as between the input pin and vcc\nthree individual servo positions can be programmed: lim2l, lim2c, lim2r\nexample see vehicle config_hg_p407\nnew in v 3.2\nadded the \"txo_toggle1\" variable: allows to toggle the txo pin, using the \"back / impulse\" button on the transmitter\nuseful for example for additional lights\ndon't activate it in combination with \"txo_momentary1\". serial is not usable, if one of these booleans is set to true\nnew in v 3.3\nadded experimental support for serial communication with my \"arduino rc engine sound generator for esp32\": https://github.com/thediyguy999/rc_engine_sound_esp32\nuncomment \"#define serial_communication\" in adjustments.h of the sound generator\nconnect pin 36 \"vp\"of the sound generator to pin \"txo\" of the receiver (disable \"txo_momentary1\", \"txo_toggle1\" & \"headlights\" in vehicleconfig.h)\nnew in v 3.31\n\"headllights\" must be inactive as well in order to use serial communication!\nnew in v 3.32\n\"data.pot1\" properly initialized (cauesd an issue on the esp32 engine sound generator)\nnew in v 3.4\nsbus support added (variable \"sbus_serial\" in vehicleconfiguration.h\nchannel order and comments see sendsbuscommands()\nyou need to install my sbus library: https://github.com/thediyguy999/sbus\nconnect your servos or what ever to pin \"txo\" (disable \"txo_momentary1\", \"txo_toggle1\" & \"headlights\" in vehicleconfig.h)\nnew in v 3.5\nmode1, mode2 and momentary1 properly initialised before sbus is enabled\nnew in v 3.6\n\"vehicletype\" 1 or 2 (tracked or half tracked mode steering mixer) is now working as well, if two esc are connected to servo pins 2 and 3. in the past, it was only usable with the internal tb6612 dual dc motor driver.\nalso works in combination with my esp32 engine sound & light controller (sbus & pwm mode)\nnew in v 3.7\nsteering center position separately adjustable, using \"#define steering_3_point_cal\" and \"lim1c\". this is useful for badly designed steering linkage geometries. example see vehicle configuration \"config_wpl_b_36_mode1\"\nnew in v 3.8:\n20 vehicle addresses instead of 10\nless ram usage\n2 speed transmission not shifting while standing still. this will protect the shifting servo.\nnew in v 3.81:\nlibraries comments added\nusage\nsee pictures\nnewest version v1.5:\nfirst prototype:\nreceiver pcb\nmpu-6050 shield pcb\n(c) 2016 - 2020 thediyguy999", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000400, "year": null}], "name": "tractorarduino"}