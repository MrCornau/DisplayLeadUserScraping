{"interestingcomments": [{"autor": "jeffxu999", "date": 1541459095000, "content": "Decision Tree Classifier Part 1 - Machine Learning Tutorial", "link": "https://www.reddit.com/r/ArtificialInteligence/comments/9uio0a/decision_tree_classifier_part_1_machine_learning/", "origin": "Reddit", "suborigin": "ArtificialInteligence", "result": true, "Selector": "tree", "selectorShort": "tree", "MarkedSent": "decision -----> tree !!!  classifier part 1 - machine learning tutorial", "sortedWord": "None", "removed": "Nan", "score": 1, "comments": 0, "media": "('rich:video',)", "medialink": "('https://www.youtube.com/watch?v=nSKOeH9vKHo',)", "identifyer": 5614868, "year": "2018"}, {"autor": "dev_matan_tsuberi", "date": 1524492942000, "content": "Neural network based compiler optimizations? /!/ Program optimizations are a matter of applying semantic\\-preserving conversion rules to an AST. An example of this is applying an eta\\-reduction in lambda calculus or changing the order of parens of an associative operation to exploit parallelism \\`\\(1\\+ \\(2 \\+ \\(3 \\+ 4\\)\\)\\) == \\(1 \\+ 2\\) \\+ \\(3 \\+ 4\\)\\`. \n\nThe problem of optimization is to perform those conversions to improve a certain metric over the program \\(running time, memory allocation, etc...\\). We can envision this problem as a search tree starting from the original program and applying different conversion rules to different parts of the program at each step. \n\nThis sounds a lot like playing Go to me and I wonder if the approach taken by AlphaGo could be applied here to achieve a system that can optimize better than human\\-made algorithms.\n\nI think there are two main differences between Go and this problem:\n\n1. The branching factor may grow exponentially and not decrease linearly as in Go. But we can take the program size into account in the reward function and make the algorithm prefer small programs.\n\n2. The data type is variable sized syntax tree instead of a fixed size Boolean array. So it seems like a job for tree RNNs.\n\n\\(This problem closely relates to program synthesis, where the goal is to invent a program from scratch rather then to optimize it\\)\n\nWhat do you guys think about this? Does anything like that exist in the literature?", "link": "https://www.reddit.com/r/ArtificialInteligence/comments/8ebrp3/neural_network_based_compiler_optimizations/", "origin": "Reddit", "suborigin": "ArtificialInteligence", "result": true, "Selector": "tree", "selectorShort": "tree", "MarkedSent": "neural network based compiler optimizations? /!/ program optimizations are a matter of applying semantic\\-preserving conversion rules to an ast. an example of this is applying an eta\\-reduction in lambda calculus or changing the order of parens of an associative operation to exploit parallelism \\`\\(1\\+ \\(2 \\+ \\(3 \\+ 4\\)\\)\\) == \\(1 \\+ 2\\) \\+ \\(3 \\+ 4\\)\\`. \n\nthe problem of optimization is to perform those conversions to improve a certain metric over the program \\(running time, memory allocation, etc...\\). we can envision this problem as a search -----> tree !!!  starting from the original program and applying different conversion rules to different parts of the program at each step. \n\nthis sounds a lot like playing go to me and i wonder if the approach taken by alphago could be applied here to achieve a system that can optimize better than human\\-made algorithms.\n\ni think there are two main differences between go and this problem:\n\n1. the branching factor may grow exponentially and not decrease linearly as in go. but we can take the program size into account in the reward function and make the algorithm prefer small programs.\n\n2. the data type is variable sized syntax tree instead of a fixed size boolean array. so it seems like a job for tree rnns.\n\n\\(this problem closely relates to program synthesis, where the goal is to invent a program from scratch rather then to optimize it\\)\n\nwhat do you guys think about this? does anything like that exist in the literature?", "sortedWord": "None", "removed": "Nan", "score": 1, "comments": 0, "media": "('nan',)", "medialink": "('https://www.reddit.com/r/ArtificialInteligence/comments/8ebrp3/neural_network_based_compiler_optimizations/',)", "identifyer": 5615183, "year": "2018"}], "name": "treeArtificialInteligence2018"}