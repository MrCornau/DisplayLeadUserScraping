{"interestingcomments": [{"Unnamed: 0": 897, "autor": "Belalibrahim", "date": 1610205207000, "content": "Gazebo hangs on black screen when launching URDF of complicated model /!/ I am trying to launch a complicated robot in Gazebo sim but the gazebo doesn't open for this type of robot and give me black screen as following:\n\n[Gazebo starting black](https://preview.redd.it/l9qhwni4kba61.png?width=1461&amp;format=png&amp;auto=webp&amp;s=46f61f62b4be2b63f3ed5528f52a3bbf7c71b475)\n\nI will list down my description &amp; launch files as well as  my attempts to solve the robot:  \n\n\n**robot description files:**\n\n**1- abb\\_robot.urdf.xacro:**\n\n    ?xml version=\"1.0\"?&gt;\n&lt;robot name=\"abb_robot\" xmlns:xacro=\"http://www.ros.org/wiki/xacro\"&gt;\n\n &lt;!-- Import Rviz colors --&gt;\n &lt;xacro:include filename=\"$(find abb_robot_model)/urdf/materials.xacro\" /&gt;\n\n &lt;!--Import the abb_robot macro --&gt;\n &lt;xacro:include filename=\"$(find abb_robot_model)/urdf/abb_robot.xacro\"/&gt;\n\n &lt;!--Parameters --&gt;\n &lt;xacro:arg name=\"hardware_interface\" default=\"hardware_interface/EffortJointInterface\"/&gt;\n &lt;xacro:arg name=\"robot_name\" default=\"abb_robot\"/&gt;\n &lt;xacro:arg name=\"origin_xyz\" default=\"0 0 0\"/&gt;\n &lt;xacro:arg name=\"origin_rpy\" default=\"0 0 0\"/&gt;\n\n &lt;!-- Fix to world, change if mounted to something --&gt;\n &lt;link name=\"world\"/&gt;\n\n &lt;!--abb_robot robot--&gt;\n &lt;xacro:abb_robot hardware_interface=\"$(arg hardware_interface)\" robot_name=\"$(arg robot_name)\" parent=\"world\"&gt;\n &lt;origin xyz=\"$(arg origin_xyz)\" rpy=\"$(arg origin_rpy)\" /&gt;\n &lt;/xacro:abb_robot&gt;\n\n&lt;/robot&gt;\n\n\n  \n**2. abb\\_robot.xacro:**\n\n    \n&lt;?xml version=\"1.0\"?&gt;\n&lt;robot xmlns:xacro=\"http://www.ros.org/wiki/xacro\"&gt;\n\n &lt;!-- Import all Gazebo-customization elements, including Gazebo colors --&gt;\n &lt;xacro:include filename=\"$(find abb_robot_model)/urdf/abb_robot.gazebo.xacro\"/&gt;\n &lt;xacro:include filename=\"$(find abb_robot_model)/urdf/_d435i.gazebo.xacro\"/&gt;\n &lt;xacro:include filename=\"$(find abb_robot_model)/urdf/_d435i.urdf.xacro\"/&gt;\n &lt;!--xacro:include filename=\"$(find abb_robot_model)/urdf/depthcam.xacro\"/--&gt;\n &lt;xacro:include filename=\"$(find abb_robot_model)/urdf/tracker.xacro\" /&gt;\n &lt;!-- Import Transmissions --&gt;\n &lt;xacro:include filename=\"$(find abb_robot_model)/urdf/abb_robot.transmission.xacro\"/&gt;\n\n &lt;!-- Include Utilities --&gt;\n &lt;xacro:include filename=\"$(find abb_robot_model)/urdf/utilities.xacro\" /&gt;\n\n &lt;!-- some constants --&gt;\n &lt;xacro:property name=\"safety_controller_k_pos\" value=\"100\" /&gt;\n &lt;xacro:property name=\"safety_controller_k_vel\" value=\"2\" /&gt;\n &lt;xacro:property name=\"joint_damping\" value=\"0.5\" /&gt;\n &lt;xacro:property name=\"max_effort\" value=\"300\"/&gt;\n &lt;xacro:property name=\"max_velocity\" value=\"10\"/&gt;\n &lt;xacro:arg name=\"use_nominal_extrinsics\" default=\"true\" /&gt;\n &lt;xacro:macro name=\"abb_robot\" params=\"parent hardware_interface robot_name *origin\"&gt;\n \n \n &lt;!--joint between {parent} and mobilePlatform--&gt;\n &lt;joint name=\"${parent}_${robot_name}_joint\" type=\"fixed\"&gt;\n &lt;xacro:insert_block name=\"origin\"/&gt;\n &lt;parent link=\"${parent}\"/&gt;\n &lt;child link=\"${robot_name}_mobilePlatform\"/&gt;\n &lt;/joint&gt;\n\n &lt;link name=\"${robot_name}_mobilePlatform\"&gt;\n &lt;inertial&gt;\n &lt;origin xyz=\"-2.4 0.92 -2.5\" rpy=\"1.57 0 0\"/&gt;\n &lt;mass value=\"2\"/&gt;\n &lt;inertia ixx=\"0.001\" ixy=\"0\" ixz=\"0\" iyy=\"0.001\" iyz=\"0\" izz=\"0.001\" /&gt;\n &lt;/inertial&gt;\n\n &lt;visual&gt;\n &lt;origin xyz=\"-2.4 0.92 -2.5\" rpy=\"1.57 0 0\"/&gt;\n &lt;geometry&gt;\n &lt;mesh filename=\"package://abb_robot_model/urdf/meshes/visual/tools/mobilePlatform.stl\" scale=\"0.001 0.001 0.001\"/&gt;\n &lt;/geometry&gt;\n &lt;material name=\"Grey\"/&gt;\n &lt;/visual&gt;\n\n &lt;/link&gt;\n\n &lt;!--joint between {parent} and link_0--&gt;\n &lt;joint name=\"${robot_name}_mobilePlatform\" type=\"fixed\"&gt;\n &lt;xacro:insert_block name=\"origin\"/&gt;\n &lt;parent link=\"${robot_name}_mobilePlatform\"/&gt;\n &lt;child link=\"${robot_name}_link_0\"/&gt;\n &lt;/joint&gt;\n\n &lt;link name=\"${robot_name}_link_0\"&gt;\n &lt;inertial&gt;\n &lt;origin xyz=\"0 0 0\" rpy=\"0 0 0\"/&gt;\n &lt;mass value=\"0.050\"/&gt;\n &lt;inertia ixx=\"0.001\" ixy=\"0\" ixz=\"0\" iyy=\"0.001\" iyz=\"0\" izz=\"0.001\" /&gt;\n &lt;/inertial&gt;\n\n &lt;visual&gt;\n &lt;origin xyz=\"-0.72643375 -0.395 0\" rpy=\"0 0 0\"/&gt;\n &lt;geometry&gt;\n &lt;mesh filename=\"package://abb_robot_model/urdf/meshes/visual/link_0.stl\" scale=\"0.001 0.001 0.001\"/&gt;\n &lt;/geometry&gt;\n &lt;material name=\"Grey\"/&gt;\n &lt;/visual&gt;\n\n &lt;collision&gt;\n &lt;origin xyz=\"-0.72643375 -0.395 0\" rpy=\"0 0 0\"/&gt;\n &lt;geometry&gt;\n &lt;mesh filename=\"package://abb_robot_model/urdf/meshes/collision/link_0_hull.stl\" scale=\"0.001 0.001 0.001\"/&gt;\n &lt;/geometry&gt;\n &lt;material name=\"Grey\"/&gt;\n &lt;/collision&gt;\n\n &lt;self_collision_checking&gt;\n &lt;origin xyz=\"0 0 0\" rpy=\"0 0 0\"/&gt;\n &lt;geometry&gt;\n &lt;capsule radius=\"0.15\" length=\"0.25\"/&gt;\n &lt;/geometry&gt;\n &lt;/self_collision_checking&gt;\n\n &lt;/link&gt;\n\n &lt;!-- joint between link_0 and link_1 --&gt;\n &lt;joint name=\"${robot_name}_joint_1\" type=\"revolute\"&gt;\n &lt;parent link=\"${robot_name}_link_0\"/&gt;\n &lt;child link=\"${robot_name}_link_1\"/&gt;\n &lt;origin xyz=\"0 0 0.630\" rpy=\"0 0 0\"/&gt;\n &lt;axis xyz=\"0 0 1\"/&gt;\n &lt;limit lower=\"${-180.0 * PI / 180}\" upper=\"${180.0 * PI / 180}\"\n effort=\"${max_effort}\" velocity=\"${max_velocity}\" /&gt;\n &lt;safety_controller soft_lower_limit=\"${-179.5 * PI / 180}\"\n soft_upper_limit=\"${179.5 * PI / 180}\"\n k_position=\"${safety_controller_k_pos}\"\n k_velocity=\"${safety_controller_k_vel}\"/&gt;\n &lt;dynamics damping=\"${joint_damping}\"/&gt;\n &lt;/joint&gt;\n\n &lt;link name=\"${robot_name}_link_1\"&gt;\n &lt;inertial&gt;\n &lt;origin xyz=\"0.0 0.0 0.0\" rpy=\"0 0 0\"/&gt;\n &lt;mass value=\"0.050\"/&gt;\n &lt;inertia ixx=\"0.005\" ixy=\"0\" ixz=\"0\" iyy=\"0.005\" iyz=\"0\" izz=\"0.005\" /&gt;\n &lt;/inertial&gt;\n\n &lt;visual&gt;\n &lt;origin xyz=\"-0.331 -0.4645 -0.630\" rpy=\"0 0 0\"/&gt;\n &lt;geometry&gt;\n &lt;mesh filename=\"package://abb_robot_model/urdf/meshes/visual/link_1.stl\" scale=\"0.001 0.001 0.001\"/&gt;\n &lt;/geometry&gt;\n &lt;material name=\"Grey\"/&gt;\n &lt;/visual&gt;\n\n &lt;collision&gt;\n &lt;origin xyz=\"-0.331 -0.4645 -0.630\" rpy=\"0 0 0\"/&gt;\n &lt;geometry&gt;\n &lt;mesh filename=\"package://abb_robot_model/urdf/meshes/collision/link_1_hull.stl\" scale=\"0.001 0.001 0.001\"/&gt;\n &lt;/geometry&gt;\n &lt;material name=\"Grey\"/&gt;\n &lt;/collision&gt;\n &lt;/link&gt;\n\n &lt;!-- joint between link_1 and link_2 --&gt;\n &lt;joint name=\"${robot_name}_joint_2\" type=\"revolute\"&gt;\n &lt;parent link=\"${robot_name}_link_1\"/&gt;\n &lt;child link=\"${robot_name}_link_2\"/&gt;\n &lt;origin xyz=\"0.60 0.0 0.0\" rpy=\"0 0 0\"/&gt;\n &lt;axis xyz=\"0 1 0\"/&gt;\n &lt;limit lower=\"${-40.0 * PI / 180}\" upper=\"${160.0 * PI / 180}\"\n effort=\"${max_effort}\" velocity=\"${max_velocity}\" /&gt;\n &lt;safety_controller soft_lower_limit=\"${-39.5 * PI / 180}\"\n soft_upper_limit=\"${159.5 * PI / 180}\"\n k_position=\"${safety_controller_k_pos}\"\n k_velocity=\"${safety_controller_k_vel}\"/&gt;\n &lt;dynamics damping=\"${joint_damping}\"/&gt;\n &lt;/joint&gt;\n\n &lt;link name=\"${robot_name}_link_2\"&gt;\n &lt;inertial&gt;\n &lt;origin xyz=\"0.0 0.060 0.0\" rpy=\"0 0 0\"/&gt;\n &lt;mass value=\"0.050\"/&gt;\n &lt;inertia ixx=\"0.005\" ixy=\"0\" ixz=\"0\" iyy=\"0.005\" iyz=\"0\" izz=\"0.005\" /&gt;\n &lt;/inertial&gt;\n\n &lt;visual&gt;\n &lt;origin xyz=\"-.60 -.45 -.630\" rpy=\"0 0 0\"/&gt;\n &lt;geometry&gt;\n &lt;mesh filename=\"package://abb_robot_model/urdf/meshes/visual/link_2.stl\" scale=\"0.001 0.001 0.001\"/&gt;\n &lt;/geometry&gt;\n &lt;material name=\"Grey\"/&gt;\n &lt;/visual&gt;\n\n &lt;collision&gt;\n &lt;origin xyz=\"-.60 -.45 -.630\" rpy=\"0 0 0\"/&gt;\n &lt;geometry&gt;\n &lt;mesh filename=\"package://abb_robot_model/urdf/meshes/collision/link_2_hull.stl\" scale=\"0.001 0.001 0.001\"/&gt;\n &lt;/geometry&gt;\n &lt;material name=\"Grey\"/&gt;\n &lt;/collision&gt;\n &lt;/link&gt;\n\n &lt;!-- joint between link_2 and link_3 --&gt;\n &lt;joint name=\"${robot_name}_joint_3\" type=\"revolute\"&gt;\n &lt;parent link=\"${robot_name}_link_2\"/&gt;\n &lt;child link=\"${robot_name}_link_3\"/&gt;\n &lt;origin xyz=\"0 0 1.280\" rpy=\"0 0 0\"/&gt;\n &lt;axis xyz=\"0 1 0\"/&gt;\n &lt;limit lower=\"${-180.0 * PI / 180}\" upper=\"${70.0 * PI / 180}\"\n effort=\"${max_effort}\" velocity=\"${max_velocity}\" /&gt;\n &lt;safety_controller soft_lower_limit=\"${-179.5 * PI / 180}\"\n soft_upper_limit=\"${69.5 * PI / 180}\"\n k_position=\"${safety_controller_k_pos}\"\n k_velocity=\"${safety_controller_k_vel}\"/&gt;\n &lt;dynamics damping=\"${joint_damping}\"/&gt;\n &lt;/joint&gt;\n\n &lt;link name=\"${robot_name}_link_3\"&gt;\n &lt;inertial&gt;\n &lt;origin xyz=\"0.030 0.020 0.0\" rpy=\"0 0 0\"/&gt;\n &lt;mass value=\"0.050\"/&gt;\n &lt;inertia ixx=\"0.005\" ixy=\"0\" ixz=\"0\" iyy=\"0.005\" iyz=\"0\" izz=\"0.005\" /&gt;\n &lt;/inertial&gt;\n\n &lt;visual&gt;\n &lt;origin xyz=\"-.6 -.28 ${-.63-1.28}\" rpy=\"0 0 0\"/&gt;\n &lt;geometry&gt;\n &lt;mesh filename=\"package://abb_robot_model/urdf/meshes/visual/link_3.stl\" scale=\"0.001 0.001 0.001\"/&gt;\n &lt;/geometry&gt;\n &lt;material name=\"Grey\"/&gt;\n &lt;/visual&gt;\n\n &lt;collision&gt;\n &lt;origin xyz=\"-.6 -.28 ${-.63-1.28}\" rpy=\"0 0 0\"/&gt;\n &lt;geometry&gt;\n &lt;mesh filename=\"package://abb_robot_model/urdf/meshes/collision/link_3_hull.stl\" scale=\"0.001 0.001 0.001\"/&gt;\n &lt;/geometry&gt;\n &lt;material name=\"Grey\"/&gt;\n &lt;/collision&gt;\n &lt;/link&gt;\n\n &lt;!-- joint between link_3 and link_4 --&gt;\n &lt;joint name=\"${robot_name}_joint_4\" type=\"revolute\"&gt;\n &lt;parent link=\"${robot_name}_link_3\"/&gt;\n &lt;child link=\"${robot_name}_link_4\"/&gt;\n &lt;origin xyz=\"0.0 0.0 0.20\" rpy=\"0 0 0\"/&gt;\n &lt;axis xyz=\"1 0 0\"/&gt;\n &lt;limit lower=\"${-300.0 * PI / 180}\" upper=\"${300.0 * PI / 180}\"\n effort=\"${max_effort}\" velocity=\"${max_velocity}\" /&gt;\n &lt;safety_controller soft_lower_limit=\"${-299.5 * PI / 180}\"\n soft_upper_limit=\"${299.5 * PI / 180}\"\n k_position=\"${safety_controller_k_pos}\"\n k_velocity=\"${safety_controller_k_vel}\"/&gt;\n &lt;dynamics damping=\"${joint_damping}\"/&gt;\n &lt;/joint&gt;\n\n &lt;link name=\"${robot_name}_link_4\"&gt;\n &lt;inertial&gt;\n &lt;origin xyz=\"0 0.067 0.034\" rpy=\"0 0 0\"/&gt;\n &lt;mass value=\"2.7\"/&gt;\n &lt;inertia ixx=\"0.03\" ixy=\"0\" ixz=\"0\" iyy=\"0.01\" iyz=\"0\" izz=\"0.029\" /&gt;\n &lt;/inertial&gt;\n\n &lt;visual&gt;\n &lt;origin xyz=\"-.6 -0.187 ${-.63-1.28-.2}\" rpy=\"0 0 0\"/&gt;\n &lt;geometry&gt;\n &lt;mesh filename=\"package://abb_robot_model/urdf/meshes/visual/link_4.stl\" scale=\"0.001 0.001 0.001\"/&gt;\n &lt;/geometry&gt;\n &lt;material name=\"Grey\"/&gt;\n &lt;/visual&gt;\n\n &lt;collision&gt;\n &lt;origin xyz=\"-.6 -0.187 ${-.63-1.28-.2}\" rpy=\"0 0 0\"/&gt;\n &lt;geometry&gt;\n &lt;mesh filename=\"package://abb_robot_model/urdf/meshes/collision/link_4_hull.stl\" scale=\"0.001 0.001 0.001\"/&gt;\n &lt;/geometry&gt;\n &lt;material name=\"Grey\"/&gt;\n &lt;/collision&gt;\n &lt;/link&gt;\n\n &lt;!-- joint between link_4 and link_5 --&gt;\n &lt;joint name=\"${robot_name}_joint_5\" type=\"revolute\"&gt;\n &lt;parent link=\"${robot_name}_link_4\"/&gt;\n &lt;child link=\"${robot_name}_link_5\"/&gt;\n &lt;origin xyz=\"1.142 0 0\" rpy=\"0 0 0\"/&gt;\n &lt;axis xyz=\"0 1 0\"/&gt;\n &lt;limit lower=\"${-120.0 * PI / 180}\" upper=\"${120.0 * PI / 180}\"\n effort=\"${max_effort}\" velocity=\"${max_velocity}\" /&gt;\n &lt;safety_controller soft_lower_limit=\"${-119.5 * PI / 180}\"\n soft_upper_limit=\"${119.5 * PI / 180}\"\n k_position=\"${safety_controller_k_pos}\"\n k_velocity=\"${safety_controller_k_vel}\"/&gt;\n &lt;dynamics damping=\"${joint_damping}\"/&gt;\n &lt;/joint&gt;\n\n &lt;link name=\"${robot_name}_link_5\"&gt;\n &lt;inertial&gt;\n &lt;origin xyz=\"0.0 0.0 0.055\" rpy=\"0 0 0\"/&gt;\n &lt;mass value=\"0.025\"/&gt;\n &lt;inertia ixx=\"0.001\" ixy=\"0\" ixz=\"0\" iyy=\"0.001\" iyz=\"0\" izz=\"0.001\" /&gt;\n &lt;/inertial&gt;\n\n &lt;visual&gt;\n &lt;origin xyz=\"${-.6-1.142} -0.093 ${-.63-1.28-.2}\" rpy=\"0 0 0\"/&gt;\n &lt;geometry&gt;\n &lt;mesh filename=\"package://abb_robot_model/urdf/meshes/visual/link_5.stl\" scale=\"0.001 0.001 0.001\"/&gt;\n &lt;/geometry&gt;\n &lt;material name=\"Grey\"/&gt;\n &lt;/visual&gt;\n\n &lt;collision&gt;\n &lt;origin xyz=\"${-.6-1.142} -0.093 ${-.63-1.28-.2}\" rpy=\"0 0 0\"/&gt;\n &lt;geometry&gt;\n &lt;mesh filename=\"package://abb_robot_model/urdf/meshes/collision/link_5_hull.stl\" scale=\"0.001 0.001 0.001\"/&gt;\n &lt;/geometry&gt;\n &lt;material name=\"Grey\"/&gt;\n &lt;/collision&gt;\n &lt;/link&gt;\n\n &lt;!-- joint between link_5 and link_6 --&gt;\n &lt;joint name=\"${robot_name}_joint_6\" type=\"revolute\"&gt;\n &lt;parent link=\"${robot_name}_link_5\"/&gt;\n &lt;child link=\"${robot_name}_link_6\"/&gt;\n &lt;origin xyz=\"0.20 0 0\" rpy=\"0 0 0\"/&gt;\n &lt;axis xyz=\"1 0 0\"/&gt;\n &lt;limit lower=\"${-360.0 * PI / 180}\" upper=\"${360.0 * PI / 180}\"\n effort=\"${max_effort}\" velocity=\"${max_velocity}\" /&gt;\n &lt;safety_controller soft_lower_limit=\"${-359.5 * PI / 180}\"\n soft_upper_limit=\"${359.5 * PI / 180}\"\n k_position=\"${safety_controller_k_pos}\"\n k_velocity=\"${safety_controller_k_vel}\"/&gt;\n &lt;dynamics damping=\"${joint_damping}\"/&gt;\n &lt;/joint&gt;\n\n &lt;link name=\"${robot_name}_link_6\"&gt;\n &lt;inertial&gt;\n &lt;origin xyz=\"0.0125 0.0 0.0\" rpy=\"0 0 0\"/&gt;\n &lt;mass value=\"0.010\"/&gt;\n &lt;inertia ixx=\"0.001\" ixy=\"0\" ixz=\"0\" iyy=\"0.001\" iyz=\"0\" izz=\"0.001\" /&gt;\n &lt;/inertial&gt;\n\n &lt;visual&gt;\n &lt;origin xyz=\"${-.6-1.142-.2} -0.10 ${-.63-1.28-.2}\" rpy=\"0 0 0\"/&gt;\n &lt;geometry&gt;\n &lt;mesh filename=\"package://abb_robot_model/urdf/meshes/visual/link_6.stl\" scale=\"0.001 0.001 0.001\"/&gt;\n &lt;/geometry&gt;\n &lt;material name=\"Grey\"/&gt;\n &lt;/visual&gt;\n\n &lt;collision&gt;\n &lt;origin xyz=\"${-.6-1.142-.2} -0.10 ${-.63-1.28-.2}\" rpy=\"0 0 0\"/&gt;\n &lt;geometry&gt;\n &lt;mesh filename=\"package://abb_robot_model/urdf/meshes/collision/link_6_hull.stl\" scale=\"0.001 0.001 0.001\"/&gt;\n &lt;/geometry&gt;\n &lt;material name=\"Grey\"/&gt;\n &lt;/collision&gt;\n &lt;/link&gt;\n\n &lt;joint name=\"${robot_name}_joint_endeffector\" type=\"fixed\"&gt;\n &lt;parent link=\"${robot_name}_link_6\"/&gt;\n &lt;child link=\"${robot_name}_link_endEffector\"/&gt;\n &lt;origin xyz=\"0 0 0\" rpy=\"0 0 0\"/&gt;\n &lt;/joint&gt;\n\n &lt;link name=\"${robot_name}_link_endEffector\"&gt;\n &lt;inertial&gt;\n &lt;origin xyz=\"0.0 0.0 0.0150\" rpy=\"0 0 0\"/&gt;\n &lt;mass value=\"0.010\"/&gt;\n &lt;inertia ixx=\"0.001\" ixy=\"0.001\" ixz=\"0.001\" iyy=\"00.01\" iyz=\"0.001\" izz=\"0.001\" /&gt;\n &lt;/inertial&gt;\n \n &lt;visual&gt;\n &lt;origin xyz=\"0 -0.003 0\" rpy=\"0 0 0\"/&gt; &lt;!-- x=front y=right z=up--&gt;\n &lt;geometry&gt;\n &lt;mesh filename=\"package://abb_robot_model/urdf/meshes/visual/tools/gripper.stl\" /&gt;\n &lt;/geometry&gt;\n &lt;material name=\"Grey\"/&gt;\n &lt;/visual&gt;\n &lt;/link&gt;\n \n &lt;xacro:sensor_d435i parent=\"${robot_name}_link_endEffector\" use_nominal_extrinsics=\"$(arg use_nominal_extrinsics)\"&gt;\n &lt;origin xyz=\"0.09 -0.003 0.1\" rpy=\"0 0 0\"/&gt; \n &lt;/xacro:sensor_d435i&gt;\n \n &lt;xacro:realsense_T265 sensor_name=\"camerat265\" parent_link=\"${robot_name}_link_endEffector\" rate=\"30\"&gt;\n &lt;origin rpy=\"0 0 0\" xyz=\"0.09 -0.005 0.05\"/&gt;\n &lt;/xacro:realsense_T265&gt; \n &lt;!-- for testing purposes with different nominal extrinsics&gt;\n       &lt;xacro:macro name=\"sensor_d435i\" params=\"parent *origin name:=camera use_nominal_extrinsics:=false\"&gt;\n      &lt;xacro:sensor_d435 parent=\"${robot_name}_link_endEffector\" name=\"${name}\" use_nominal_extrinsics=\"${use_nominal_extrinsics}\"&gt;\n      &lt;xacro:insert_block name=\"origin\" /&gt;\n      &lt;/xacro:sensor_d435&gt;\n      &lt;xacro:d435i_imu_modules name=\"${robot_name}_link_endEffector\" use_nominal_extrinsics=\"${use_nominal_extrinsics}\"/&gt;\n    &lt;/xacro:macro--&gt; \n &lt;!--xacro:realsense_d435 sensor_name=\"d435\" parent_link=\"${robot_name}_link_endEffector\" rate=\"10\"&gt;\n        &lt;origin rpy=\"0 0 0 \" xyz=\"0.09 -0.003 0.1\"/&gt;\n      &lt;/xacro:realsense_d435--&gt; \n &lt;!--Extensions --&gt;\n &lt;xacro:abb_robot_gazebo robot_name=\"${robot_name}\" /&gt;\n &lt;xacro:abb_robot_transmission hardware_interface=\"${hardware_interface}\"/&gt;\n\n &lt;/xacro:macro&gt;\n\n&lt;/robot&gt;\n\n\n\n**abb.launch:**\n\n    &lt;launch&gt;\n\n &lt;!-- these are the arguments you can pass this launch file, for example paused:=true --&gt;\n &lt;arg name=\"paused\" default=\"false\"/&gt;\n &lt;arg name=\"use_sim_time\" default=\"true\"/&gt;\n &lt;arg name=\"gui\" default=\"true\"/&gt;\n &lt;arg name=\"headless\" default=\"false\"/&gt;\n &lt;arg name=\"debug\" default=\"false\"/&gt;\n\n &lt;!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched --&gt;\n &lt;include file=\"$(find gazebo_ros)/launch/empty_world.launch\"&gt;\n &lt;arg name=\"world_name\" value=\"default\"/&gt;\n &lt;arg name=\"debug\" value=\"$(arg debug)\" /&gt;\n &lt;arg name=\"gui\" value=\"$(arg gui)\" /&gt;\n &lt;arg name=\"paused\" value=\"$(arg paused)\"/&gt;\n &lt;arg name=\"use_sim_time\" value=\"$(arg use_sim_time)\"/&gt;\n &lt;arg name=\"headless\" value=\"$(arg headless)\"/&gt;\n &lt;/include&gt;\n\n &lt;!-- Load the URDF into the ROS Parameter Server --&gt;\n &lt;param name=\"robot_description\"\n command=\"$(find xacro)/xacro  '$(find abb_robot_model)/urdf/abb_robot.urdf.xacro'\" /&gt;\n\n &lt;!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot --&gt;\n &lt;node name=\"urdf_spawner\" pkg=\"gazebo_ros\" type=\"spawn_model\" respawn=\"false\" output=\"screen\"\n args=\"-urdf -model rrbot -param robot_description\"/&gt;\n\n &lt;!-- ros_control rrbot launch file --&gt;\n &lt;!--include file=\"$(find rrbot_control)/launch/rrbot_control.launch\" /--&gt;\n\n&lt;/launch&gt;\n\n\n**After launching the file** using **Verbose,**  I got this **terminal output:**\n\n    ... logging to /home/beraru/.ros/log/1d523880-5289-11eb-a1e2-9c305b2b6a57/roslaunch-beraru-25199.log\n    Checking log directory for disk usage. This may take a while.\n    Press Ctrl-C to interrupt\n    Done checking log file disk usage. Usage is &lt;1GB.\n    \n    started roslaunch server http://beraru:46501/\n    \n    SUMMARY\n    ========\n    \n    PARAMETERS\n     * /gazebo/enable_ros_network: True\n     * /robot_description: &lt;?xml version=\"1....\n     * /rosdistro: melodic\n     * /rosversion: 1.14.10\n     * /use_sim_time: True\n    \n    NODES\n      /\n        gazebo (gazebo_ros/gzserver)\n        gazebo_gui (gazebo_ros/gzclient)\n        urdf_spawner (gazebo_ros/spawn_model)\n    \n    auto-starting new master\n    process[master]: started with pid [25212]\n    ROS_MASTER_URI=http://localhost:11311\n    \n    setting /run_id to 1d523880-5289-11eb-a1e2-9c305b2b6a57\n    process[rosout-1]: started with pid [25223]\n    started core service [/rosout]\n    process[gazebo-2]: started with pid [25229]\n    process[gazebo_gui-3]: started with pid [25234]\n    process[urdf_spawner-4]: started with pid [25238]\n    [ INFO] [1610203443.743808909]: Finished loading Gazebo ROS API Plugin.\n    [ INFO] [1610203443.746368332]: waitForService: Service [/gazebo_gui/set_physics_properties] has not been advertised, waiting...\n    [ INFO] [1610203443.747101831]: Finished loading Gazebo ROS API Plugin.\n    [ INFO] [1610203443.748026935]: waitForService: Service [/gazebo/set_physics_properties] has not been advertised, waiting...\n    [INFO] [1610203444.156813, 0.000000]: Loading model XML from ros parameter robot_description\n    [INFO] [1610203444.166464, 0.000000]: Waiting for service /gazebo/spawn_urdf_model\n    [ INFO] [1610203444.290954445]: waitForService: Service [/gazebo/set_physics_properties] is now available.\n    [ INFO] [1610203444.412460152, 0.042000000]: Physics dynamic reconfigure ready.\n    [INFO] [1610203444.469900, 0.097000]: Calling service /gazebo/spawn_urdf_model\n    Warning [parser.cc:950] XML Element[always_on], child of element[camera] not defined in SDF. Ignoring[always_on]. You may have an incorrect SDF file, or an sdformat version that doesn't support this element.\n    Warning [parser.cc:950] XML Element[update_rate], child of element[camera] not defined in SDF. Ignoring[update_rate]. You may have an incorrect SDF file, or an sdformat version that doesn't support this element.\n    Warning [parser.cc:950] XML Element[always_on], child of element[camera] not defined in SDF. Ignoring[always_on]. You may have an incorrect SDF file, or an sdformat version that doesn't support this element.\n    Warning [parser.cc:950] XML Element[update_rate], child of element[camera] not defined in SDF. Ignoring[update_rate]. You may have an incorrect SDF file, or an sdformat version that doesn't support this element.\n    [ INFO] [1610203444.883101756, 0.195000000]: Camera Plugin: Using the 'robotNamespace' param: '/'\n    [ INFO] [1610203444.885656393, 0.195000000]: Camera Plugin (ns = /)  &lt;tf_prefix_&gt;, set to \"\"\n    [ INFO] [1610203444.927635316, 0.195000000]: Camera Plugin: Using the 'robotNamespace' param: '/'\n    [ INFO] [1610203444.930403849, 0.195000000]: Camera Plugin (ns = /)  &lt;tf_prefix_&gt;, set to \"\"\n    [INFO] [1610203444.934492, 0.195000]: Spawn status: SpawnModel: Successfully spawned entity\n    [ INFO] [1610203444.937863087, 0.195000000]: &lt;robotNamespace&gt; set to: //\n    [ INFO] [1610203444.938380472, 0.195000000]: &lt;topicName&gt; set to: //camerat265/gyro/sample\n    [ INFO] [1610203444.938940197, 0.195000000]: &lt;frameName&gt; set to: camerat265_link\n    [ INFO] [1610203444.940385830, 0.195000000]: &lt;updateRateHZ&gt; set to: 30\n    [ INFO] [1610203444.941494349, 0.195000000]: &lt;gaussianNoise&gt; set to: 1e-06\n    [ INFO] [1610203444.941663472, 0.195000000]: &lt;xyzOffset&gt; set to: 0 0 0\n    [ INFO] [1610203444.941772183, 0.195000000]: &lt;rpyOffset&gt; set to: 0 -0 0\n    [ INFO] [1610203444.982566675, 0.195000000]: Loading gazebo_ros_control plugin\n    [ INFO] [1610203444.982761763, 0.195000000]: Starting gazebo_ros_control plugin in namespace: /abb_robot\n    [ INFO] [1610203444.983554810, 0.195000000]: gazebo_ros_control plugin is waiting for model URDF in parameter [/robot_description] on the ROS param server.\n    [ INFO] [1610203445.121928941, 0.195000000]: Loaded gazebo_ros_control.\n    [urdf_spawner-4] process has finished cleanly\n    log file: /home/beraru/.ros/log/1d523880-5289-11eb-a1e2-9c305b2b6a57/urdf_spawner-4*.log\n\nas you notice there is no explicit error generated!\n\n*what i have tried to figure out the issue sofar:*\n\n1- **launch rviz:**  \nit works correctly with work tree been advertised as shown:\n\nhttps://preview.redd.it/r34cgrzxnba61.png?width=885&amp;format=png&amp;auto=webp&amp;s=d8a55c1ae8b38a6b4ae28f70d316e2665c7e9097\n\n2- **tf-tree** not shown while launching the gazebo however the topics is shown when i makes use rostopic list:  \n\n\n[tf\\_tree](https://preview.redd.it/gk1hqkhnoba61.png?width=1871&amp;format=png&amp;auto=webp&amp;s=58fdc4097675cf591bc1e423547936dfb76cb6c4)\n\n3- **rosdep check:**\n\n     rosdep check abb_robot_model\n    All system dependencies have been satisfied\n\n **I am using Gazebo 9.0 along with melodic!**", "link": "https://www.reddit.com/r/robotics/comments/ktskwy/gazebo_hangs_on_black_screen_when_launching_urdf/", "origin": "Reddit", "suborigin": "robotics", "result": true, "Selector": "tree", "selectorShort": "tree", "MarkedSent": "gazebo hangs on black screen when launching urdf of complicated model /!/ i am trying to launch a complicated robot in gazebo sim but the gazebo doesn't open for this type of robot and give me black screen as following:\n\n[gazebo starting black](https://preview.redd.it/l9qhwni4kba61.png?width=1461&amp;format=png&amp;auto=webp&amp;s=46f61f62b4be2b63f3ed5528f52a3bbf7c71b475)\n\ni will list down my description &amp; launch files as well as  my attempts to solve the robot:  \n\n\n**robot description files:**\n\n**1- abb\\_robot.urdf.xacro:**\n\n    ?xml version=\"1.0\"?&gt;\n&lt;robot name=\"abb_robot\" xmlns:xacro=\"http://www.ros.org/wiki/xacro\"&gt;\n\n &lt;!-- import rviz colors --&gt;\n &lt;xacro:include filename=\"$(find abb_robot_model)/urdf/materials.xacro\" /&gt;\n\n &lt;!--import the abb_robot macro --&gt;\n &lt;xacro:include filename=\"$(find abb_robot_model)/urdf/abb_robot.xacro\"/&gt;\n\n &lt;!--parameters --&gt;\n &lt;xacro:arg name=\"hardware_interface\" default=\"hardware_interface/effortjointinterface\"/&gt;\n &lt;xacro:arg name=\"robot_name\" default=\"abb_robot\"/&gt;\n &lt;xacro:arg name=\"origin_xyz\" default=\"0 0 0\"/&gt;\n &lt;xacro:arg name=\"origin_rpy\" default=\"0 0 0\"/&gt;\n\n &lt;!-- fix to world, change if mounted to something --&gt;\n &lt;link name=\"world\"/&gt;\n\n &lt;!--abb_robot robot--&gt;\n &lt;xacro:abb_robot hardware_interface=\"$(arg hardware_interface)\" robot_name=\"$(arg robot_name)\" parent=\"world\"&gt;\n &lt;origin xyz=\"$(arg origin_xyz)\" rpy=\"$(arg origin_rpy)\" /&gt;\n &lt;/xacro:abb_robot&gt;\n\n&lt;/robot&gt;\n\n\n  \n**2. abb\\_robot.xacro:**\n\n    \n&lt;?xml version=\"1.0\"?&gt;\n&lt;robot xmlns:xacro=\"http://www.ros.org/wiki/xacro\"&gt;\n\n &lt;!-- import all gazebo-customization elements, including gazebo colors --&gt;\n &lt;xacro:include filename=\"$(find abb_robot_model)/urdf/abb_robot.gazebo.xacro\"/&gt;\n &lt;xacro:include filename=\"$(find abb_robot_model)/urdf/_d435i.gazebo.xacro\"/&gt;\n &lt;xacro:include filename=\"$(find abb_robot_model)/urdf/_d435i.urdf.xacro\"/&gt;\n &lt;!--xacro:include filename=\"$(find abb_robot_model)/urdf/depthcam.xacro\"/--&gt;\n &lt;xacro:include filename=\"$(find abb_robot_model)/urdf/tracker.xacro\" /&gt;\n &lt;!-- import transmissions --&gt;\n &lt;xacro:include filename=\"$(find abb_robot_model)/urdf/abb_robot.transmission.xacro\"/&gt;\n\n &lt;!-- include utilities --&gt;\n &lt;xacro:include filename=\"$(find abb_robot_model)/urdf/utilities.xacro\" /&gt;\n\n &lt;!-- some constants --&gt;\n &lt;xacro:property name=\"safety_controller_k_pos\" value=\"100\" /&gt;\n &lt;xacro:property name=\"safety_controller_k_vel\" value=\"2\" /&gt;\n &lt;xacro:property name=\"joint_damping\" value=\"0.5\" /&gt;\n &lt;xacro:property name=\"max_effort\" value=\"300\"/&gt;\n &lt;xacro:property name=\"max_velocity\" value=\"10\"/&gt;\n &lt;xacro:arg name=\"use_nominal_extrinsics\" default=\"true\" /&gt;\n &lt;xacro:macro name=\"abb_robot\" params=\"parent hardware_interface robot_name *origin\"&gt;\n \n \n &lt;!--joint between {parent} and mobileplatform--&gt;\n &lt;joint name=\"${parent}_${robot_name}_joint\" type=\"fixed\"&gt;\n &lt;xacro:insert_block name=\"origin\"/&gt;\n &lt;parent link=\"${parent}\"/&gt;\n &lt;child link=\"${robot_name}_mobileplatform\"/&gt;\n &lt;/joint&gt;\n\n &lt;link name=\"${robot_name}_mobileplatform\"&gt;\n &lt;inertial&gt;\n &lt;origin xyz=\"-2.4 0.92 -2.5\" rpy=\"1.57 0 0\"/&gt;\n &lt;mass value=\"2\"/&gt;\n &lt;inertia ixx=\"0.001\" ixy=\"0\" ixz=\"0\" iyy=\"0.001\" iyz=\"0\" izz=\"0.001\" /&gt;\n &lt;/inertial&gt;\n\n &lt;visual&gt;\n &lt;origin xyz=\"-2.4 0.92 -2.5\" rpy=\"1.57 0 0\"/&gt;\n &lt;geometry&gt;\n &lt;mesh filename=\"package://abb_robot_model/urdf/meshes/visual/tools/mobileplatform.stl\" scale=\"0.001 0.001 0.001\"/&gt;\n &lt;/geometry&gt;\n &lt;material name=\"grey\"/&gt;\n &lt;/visual&gt;\n\n &lt;/link&gt;\n\n &lt;!--joint between {parent} and link_0--&gt;\n &lt;joint name=\"${robot_name}_mobileplatform\" type=\"fixed\"&gt;\n &lt;xacro:insert_block name=\"origin\"/&gt;\n &lt;parent link=\"${robot_name}_mobileplatform\"/&gt;\n &lt;child link=\"${robot_name}_link_0\"/&gt;\n &lt;/joint&gt;\n\n &lt;link name=\"${robot_name}_link_0\"&gt;\n &lt;inertial&gt;\n &lt;origin xyz=\"0 0 0\" rpy=\"0 0 0\"/&gt;\n &lt;mass value=\"0.050\"/&gt;\n &lt;inertia ixx=\"0.001\" ixy=\"0\" ixz=\"0\" iyy=\"0.001\" iyz=\"0\" izz=\"0.001\" /&gt;\n &lt;/inertial&gt;\n\n &lt;visual&gt;\n &lt;origin xyz=\"-0.72643375 -0.395 0\" rpy=\"0 0 0\"/&gt;\n &lt;geometry&gt;\n &lt;mesh filename=\"package://abb_robot_model/urdf/meshes/visual/link_0.stl\" scale=\"0.001 0.001 0.001\"/&gt;\n &lt;/geometry&gt;\n &lt;material name=\"grey\"/&gt;\n &lt;/visual&gt;\n\n &lt;collision&gt;\n &lt;origin xyz=\"-0.72643375 -0.395 0\" rpy=\"0 0 0\"/&gt;\n &lt;geometry&gt;\n &lt;mesh filename=\"package://abb_robot_model/urdf/meshes/collision/link_0_hull.stl\" scale=\"0.001 0.001 0.001\"/&gt;\n &lt;/geometry&gt;\n &lt;material name=\"grey\"/&gt;\n &lt;/collision&gt;\n\n &lt;self_collision_checking&gt;\n &lt;origin xyz=\"0 0 0\" rpy=\"0 0 0\"/&gt;\n &lt;geometry&gt;\n &lt;capsule radius=\"0.15\" length=\"0.25\"/&gt;\n &lt;/geometry&gt;\n &lt;/self_collision_checking&gt;\n\n &lt;/link&gt;\n\n &lt;!-- joint between link_0 and link_1 --&gt;\n &lt;joint name=\"${robot_name}_joint_1\" type=\"revolute\"&gt;\n &lt;parent link=\"${robot_name}_link_0\"/&gt;\n &lt;child link=\"${robot_name}_link_1\"/&gt;\n &lt;origin xyz=\"0 0 0.630\" rpy=\"0 0 0\"/&gt;\n &lt;axis xyz=\"0 0 1\"/&gt;\n &lt;limit lower=\"${-180.0 * pi / 180}\" upper=\"${180.0 * pi / 180}\"\n effort=\"${max_effort}\" velocity=\"${max_velocity}\" /&gt;\n &lt;safety_controller soft_lower_limit=\"${-179.5 * pi / 180}\"\n soft_upper_limit=\"${179.5 * pi / 180}\"\n k_position=\"${safety_controller_k_pos}\"\n k_velocity=\"${safety_controller_k_vel}\"/&gt;\n &lt;dynamics damping=\"${joint_damping}\"/&gt;\n &lt;/joint&gt;\n\n &lt;link name=\"${robot_name}_link_1\"&gt;\n &lt;inertial&gt;\n &lt;origin xyz=\"0.0 0.0 0.0\" rpy=\"0 0 0\"/&gt;\n &lt;mass value=\"0.050\"/&gt;\n &lt;inertia ixx=\"0.005\" ixy=\"0\" ixz=\"0\" iyy=\"0.005\" iyz=\"0\" izz=\"0.005\" /&gt;\n &lt;/inertial&gt;\n\n &lt;visual&gt;\n &lt;origin xyz=\"-0.331 -0.4645 -0.630\" rpy=\"0 0 0\"/&gt;\n &lt;geometry&gt;\n &lt;mesh filename=\"package://abb_robot_model/urdf/meshes/visual/link_1.stl\" scale=\"0.001 0.001 0.001\"/&gt;\n &lt;/geometry&gt;\n &lt;material name=\"grey\"/&gt;\n &lt;/visual&gt;\n\n &lt;collision&gt;\n &lt;origin xyz=\"-0.331 -0.4645 -0.630\" rpy=\"0 0 0\"/&gt;\n &lt;geometry&gt;\n &lt;mesh filename=\"package://abb_robot_model/urdf/meshes/collision/link_1_hull.stl\" scale=\"0.001 0.001 0.001\"/&gt;\n &lt;/geometry&gt;\n &lt;material name=\"grey\"/&gt;\n &lt;/collision&gt;\n &lt;/link&gt;\n\n &lt;!-- joint between link_1 and link_2 --&gt;\n &lt;joint name=\"${robot_name}_joint_2\" type=\"revolute\"&gt;\n &lt;parent link=\"${robot_name}_link_1\"/&gt;\n &lt;child link=\"${robot_name}_link_2\"/&gt;\n &lt;origin xyz=\"0.60 0.0 0.0\" rpy=\"0 0 0\"/&gt;\n &lt;axis xyz=\"0 1 0\"/&gt;\n &lt;limit lower=\"${-40.0 * pi / 180}\" upper=\"${160.0 * pi / 180}\"\n effort=\"${max_effort}\" velocity=\"${max_velocity}\" /&gt;\n &lt;safety_controller soft_lower_limit=\"${-39.5 * pi / 180}\"\n soft_upper_limit=\"${159.5 * pi / 180}\"\n k_position=\"${safety_controller_k_pos}\"\n k_velocity=\"${safety_controller_k_vel}\"/&gt;\n &lt;dynamics damping=\"${joint_damping}\"/&gt;\n &lt;/joint&gt;\n\n &lt;link name=\"${robot_name}_link_2\"&gt;\n &lt;inertial&gt;\n &lt;origin xyz=\"0.0 0.060 0.0\" rpy=\"0 0 0\"/&gt;\n &lt;mass value=\"0.050\"/&gt;\n &lt;inertia ixx=\"0.005\" ixy=\"0\" ixz=\"0\" iyy=\"0.005\" iyz=\"0\" izz=\"0.005\" /&gt;\n &lt;/inertial&gt;\n\n &lt;visual&gt;\n &lt;origin xyz=\"-.60 -.45 -.630\" rpy=\"0 0 0\"/&gt;\n &lt;geometry&gt;\n &lt;mesh filename=\"package://abb_robot_model/urdf/meshes/visual/link_2.stl\" scale=\"0.001 0.001 0.001\"/&gt;\n &lt;/geometry&gt;\n &lt;material name=\"grey\"/&gt;\n &lt;/visual&gt;\n\n &lt;collision&gt;\n &lt;origin xyz=\"-.60 -.45 -.630\" rpy=\"0 0 0\"/&gt;\n &lt;geometry&gt;\n &lt;mesh filename=\"package://abb_robot_model/urdf/meshes/collision/link_2_hull.stl\" scale=\"0.001 0.001 0.001\"/&gt;\n &lt;/geometry&gt;\n &lt;material name=\"grey\"/&gt;\n &lt;/collision&gt;\n &lt;/link&gt;\n\n &lt;!-- joint between link_2 and link_3 --&gt;\n &lt;joint name=\"${robot_name}_joint_3\" type=\"revolute\"&gt;\n &lt;parent link=\"${robot_name}_link_2\"/&gt;\n &lt;child link=\"${robot_name}_link_3\"/&gt;\n &lt;origin xyz=\"0 0 1.280\" rpy=\"0 0 0\"/&gt;\n &lt;axis xyz=\"0 1 0\"/&gt;\n &lt;limit lower=\"${-180.0 * pi / 180}\" upper=\"${70.0 * pi / 180}\"\n effort=\"${max_effort}\" velocity=\"${max_velocity}\" /&gt;\n &lt;safety_controller soft_lower_limit=\"${-179.5 * pi / 180}\"\n soft_upper_limit=\"${69.5 * pi / 180}\"\n k_position=\"${safety_controller_k_pos}\"\n k_velocity=\"${safety_controller_k_vel}\"/&gt;\n &lt;dynamics damping=\"${joint_damping}\"/&gt;\n &lt;/joint&gt;\n\n &lt;link name=\"${robot_name}_link_3\"&gt;\n &lt;inertial&gt;\n &lt;origin xyz=\"0.030 0.020 0.0\" rpy=\"0 0 0\"/&gt;\n &lt;mass value=\"0.050\"/&gt;\n &lt;inertia ixx=\"0.005\" ixy=\"0\" ixz=\"0\" iyy=\"0.005\" iyz=\"0\" izz=\"0.005\" /&gt;\n &lt;/inertial&gt;\n\n &lt;visual&gt;\n &lt;origin xyz=\"-.6 -.28 ${-.63-1.28}\" rpy=\"0 0 0\"/&gt;\n &lt;geometry&gt;\n &lt;mesh filename=\"package://abb_robot_model/urdf/meshes/visual/link_3.stl\" scale=\"0.001 0.001 0.001\"/&gt;\n &lt;/geometry&gt;\n &lt;material name=\"grey\"/&gt;\n &lt;/visual&gt;\n\n &lt;collision&gt;\n &lt;origin xyz=\"-.6 -.28 ${-.63-1.28}\" rpy=\"0 0 0\"/&gt;\n &lt;geometry&gt;\n &lt;mesh filename=\"package://abb_robot_model/urdf/meshes/collision/link_3_hull.stl\" scale=\"0.001 0.001 0.001\"/&gt;\n &lt;/geometry&gt;\n &lt;material name=\"grey\"/&gt;\n &lt;/collision&gt;\n &lt;/link&gt;\n\n &lt;!-- joint between link_3 and link_4 --&gt;\n &lt;joint name=\"${robot_name}_joint_4\" type=\"revolute\"&gt;\n &lt;parent link=\"${robot_name}_link_3\"/&gt;\n &lt;child link=\"${robot_name}_link_4\"/&gt;\n &lt;origin xyz=\"0.0 0.0 0.20\" rpy=\"0 0 0\"/&gt;\n &lt;axis xyz=\"1 0 0\"/&gt;\n &lt;limit lower=\"${-300.0 * pi / 180}\" upper=\"${300.0 * pi / 180}\"\n effort=\"${max_effort}\" velocity=\"${max_velocity}\" /&gt;\n &lt;safety_controller soft_lower_limit=\"${-299.5 * pi / 180}\"\n soft_upper_limit=\"${299.5 * pi / 180}\"\n k_position=\"${safety_controller_k_pos}\"\n k_velocity=\"${safety_controller_k_vel}\"/&gt;\n &lt;dynamics damping=\"${joint_damping}\"/&gt;\n &lt;/joint&gt;\n\n &lt;link name=\"${robot_name}_link_4\"&gt;\n &lt;inertial&gt;\n &lt;origin xyz=\"0 0.067 0.034\" rpy=\"0 0 0\"/&gt;\n &lt;mass value=\"2.7\"/&gt;\n &lt;inertia ixx=\"0.03\" ixy=\"0\" ixz=\"0\" iyy=\"0.01\" iyz=\"0\" izz=\"0.029\" /&gt;\n &lt;/inertial&gt;\n\n &lt;visual&gt;\n &lt;origin xyz=\"-.6 -0.187 ${-.63-1.28-.2}\" rpy=\"0 0 0\"/&gt;\n &lt;geometry&gt;\n &lt;mesh filename=\"package://abb_robot_model/urdf/meshes/visual/link_4.stl\" scale=\"0.001 0.001 0.001\"/&gt;\n &lt;/geometry&gt;\n &lt;material name=\"grey\"/&gt;\n &lt;/visual&gt;\n\n &lt;collision&gt;\n &lt;origin xyz=\"-.6 -0.187 ${-.63-1.28-.2}\" rpy=\"0 0 0\"/&gt;\n &lt;geometry&gt;\n &lt;mesh filename=\"package://abb_robot_model/urdf/meshes/collision/link_4_hull.stl\" scale=\"0.001 0.001 0.001\"/&gt;\n &lt;/geometry&gt;\n &lt;material name=\"grey\"/&gt;\n &lt;/collision&gt;\n &lt;/link&gt;\n\n &lt;!-- joint between link_4 and link_5 --&gt;\n &lt;joint name=\"${robot_name}_joint_5\" type=\"revolute\"&gt;\n &lt;parent link=\"${robot_name}_link_4\"/&gt;\n &lt;child link=\"${robot_name}_link_5\"/&gt;\n &lt;origin xyz=\"1.142 0 0\" rpy=\"0 0 0\"/&gt;\n &lt;axis xyz=\"0 1 0\"/&gt;\n &lt;limit lower=\"${-120.0 * pi / 180}\" upper=\"${120.0 * pi / 180}\"\n effort=\"${max_effort}\" velocity=\"${max_velocity}\" /&gt;\n &lt;safety_controller soft_lower_limit=\"${-119.5 * pi / 180}\"\n soft_upper_limit=\"${119.5 * pi / 180}\"\n k_position=\"${safety_controller_k_pos}\"\n k_velocity=\"${safety_controller_k_vel}\"/&gt;\n &lt;dynamics damping=\"${joint_damping}\"/&gt;\n &lt;/joint&gt;\n\n &lt;link name=\"${robot_name}_link_5\"&gt;\n &lt;inertial&gt;\n &lt;origin xyz=\"0.0 0.0 0.055\" rpy=\"0 0 0\"/&gt;\n &lt;mass value=\"0.025\"/&gt;\n &lt;inertia ixx=\"0.001\" ixy=\"0\" ixz=\"0\" iyy=\"0.001\" iyz=\"0\" izz=\"0.001\" /&gt;\n &lt;/inertial&gt;\n\n &lt;visual&gt;\n &lt;origin xyz=\"${-.6-1.142} -0.093 ${-.63-1.28-.2}\" rpy=\"0 0 0\"/&gt;\n &lt;geometry&gt;\n &lt;mesh filename=\"package://abb_robot_model/urdf/meshes/visual/link_5.stl\" scale=\"0.001 0.001 0.001\"/&gt;\n &lt;/geometry&gt;\n &lt;material name=\"grey\"/&gt;\n &lt;/visual&gt;\n\n &lt;collision&gt;\n &lt;origin xyz=\"${-.6-1.142} -0.093 ${-.63-1.28-.2}\" rpy=\"0 0 0\"/&gt;\n &lt;geometry&gt;\n &lt;mesh filename=\"package://abb_robot_model/urdf/meshes/collision/link_5_hull.stl\" scale=\"0.001 0.001 0.001\"/&gt;\n &lt;/geometry&gt;\n &lt;material name=\"grey\"/&gt;\n &lt;/collision&gt;\n &lt;/link&gt;\n\n &lt;!-- joint between link_5 and link_6 --&gt;\n &lt;joint name=\"${robot_name}_joint_6\" type=\"revolute\"&gt;\n &lt;parent link=\"${robot_name}_link_5\"/&gt;\n &lt;child link=\"${robot_name}_link_6\"/&gt;\n &lt;origin xyz=\"0.20 0 0\" rpy=\"0 0 0\"/&gt;\n &lt;axis xyz=\"1 0 0\"/&gt;\n &lt;limit lower=\"${-360.0 * pi / 180}\" upper=\"${360.0 * pi / 180}\"\n effort=\"${max_effort}\" velocity=\"${max_velocity}\" /&gt;\n &lt;safety_controller soft_lower_limit=\"${-359.5 * pi / 180}\"\n soft_upper_limit=\"${359.5 * pi / 180}\"\n k_position=\"${safety_controller_k_pos}\"\n k_velocity=\"${safety_controller_k_vel}\"/&gt;\n &lt;dynamics damping=\"${joint_damping}\"/&gt;\n &lt;/joint&gt;\n\n &lt;link name=\"${robot_name}_link_6\"&gt;\n &lt;inertial&gt;\n &lt;origin xyz=\"0.0125 0.0 0.0\" rpy=\"0 0 0\"/&gt;\n &lt;mass value=\"0.010\"/&gt;\n &lt;inertia ixx=\"0.001\" ixy=\"0\" ixz=\"0\" iyy=\"0.001\" iyz=\"0\" izz=\"0.001\" /&gt;\n &lt;/inertial&gt;\n\n &lt;visual&gt;\n &lt;origin xyz=\"${-.6-1.142-.2} -0.10 ${-.63-1.28-.2}\" rpy=\"0 0 0\"/&gt;\n &lt;geometry&gt;\n &lt;mesh filename=\"package://abb_robot_model/urdf/meshes/visual/link_6.stl\" scale=\"0.001 0.001 0.001\"/&gt;\n &lt;/geometry&gt;\n &lt;material name=\"grey\"/&gt;\n &lt;/visual&gt;\n\n &lt;collision&gt;\n &lt;origin xyz=\"${-.6-1.142-.2} -0.10 ${-.63-1.28-.2}\" rpy=\"0 0 0\"/&gt;\n &lt;geometry&gt;\n &lt;mesh filename=\"package://abb_robot_model/urdf/meshes/collision/link_6_hull.stl\" scale=\"0.001 0.001 0.001\"/&gt;\n &lt;/geometry&gt;\n &lt;material name=\"grey\"/&gt;\n &lt;/collision&gt;\n &lt;/link&gt;\n\n &lt;joint name=\"${robot_name}_joint_endeffector\" type=\"fixed\"&gt;\n &lt;parent link=\"${robot_name}_link_6\"/&gt;\n &lt;child link=\"${robot_name}_link_endeffector\"/&gt;\n &lt;origin xyz=\"0 0 0\" rpy=\"0 0 0\"/&gt;\n &lt;/joint&gt;\n\n &lt;link name=\"${robot_name}_link_endeffector\"&gt;\n &lt;inertial&gt;\n &lt;origin xyz=\"0.0 0.0 0.0150\" rpy=\"0 0 0\"/&gt;\n &lt;mass value=\"0.010\"/&gt;\n &lt;inertia ixx=\"0.001\" ixy=\"0.001\" ixz=\"0.001\" iyy=\"00.01\" iyz=\"0.001\" izz=\"0.001\" /&gt;\n &lt;/inertial&gt;\n \n &lt;visual&gt;\n &lt;origin xyz=\"0 -0.003 0\" rpy=\"0 0 0\"/&gt; &lt;!-- x=front y=right z=up--&gt;\n &lt;geometry&gt;\n &lt;mesh filename=\"package://abb_robot_model/urdf/meshes/visual/tools/gripper.stl\" /&gt;\n &lt;/geometry&gt;\n &lt;material name=\"grey\"/&gt;\n &lt;/visual&gt;\n &lt;/link&gt;\n \n &lt;xacro:sensor_d435i parent=\"${robot_name}_link_endeffector\" use_nominal_extrinsics=\"$(arg use_nominal_extrinsics)\"&gt;\n &lt;origin xyz=\"0.09 -0.003 0.1\" rpy=\"0 0 0\"/&gt; \n &lt;/xacro:sensor_d435i&gt;\n \n &lt;xacro:realsense_t265 sensor_name=\"camerat265\" parent_link=\"${robot_name}_link_endeffector\" rate=\"30\"&gt;\n &lt;origin rpy=\"0 0 0\" xyz=\"0.09 -0.005 0.05\"/&gt;\n &lt;/xacro:realsense_t265&gt; \n &lt;!-- for testing purposes with different nominal extrinsics&gt;\n       &lt;xacro:macro name=\"sensor_d435i\" params=\"parent *origin name:=camera use_nominal_extrinsics:=false\"&gt;\n      &lt;xacro:sensor_d435 parent=\"${robot_name}_link_endeffector\" name=\"${name}\" use_nominal_extrinsics=\"${use_nominal_extrinsics}\"&gt;\n      &lt;xacro:insert_block name=\"origin\" /&gt;\n      &lt;/xacro:sensor_d435&gt;\n      &lt;xacro:d435i_imu_modules name=\"${robot_name}_link_endeffector\" use_nominal_extrinsics=\"${use_nominal_extrinsics}\"/&gt;\n    &lt;/xacro:macro--&gt; \n &lt;!--xacro:realsense_d435 sensor_name=\"d435\" parent_link=\"${robot_name}_link_endeffector\" rate=\"10\"&gt;\n        &lt;origin rpy=\"0 0 0 \" xyz=\"0.09 -0.003 0.1\"/&gt;\n      &lt;/xacro:realsense_d435--&gt; \n &lt;!--extensions --&gt;\n &lt;xacro:abb_robot_gazebo robot_name=\"${robot_name}\" /&gt;\n &lt;xacro:abb_robot_transmission hardware_interface=\"${hardware_interface}\"/&gt;\n\n &lt;/xacro:macro&gt;\n\n&lt;/robot&gt;\n\n\n\n**abb.launch:**\n\n    &lt;launch&gt;\n\n &lt;!-- these are the arguments you can pass this launch file, for example paused:=true --&gt;\n &lt;arg name=\"paused\" default=\"false\"/&gt;\n &lt;arg name=\"use_sim_time\" default=\"true\"/&gt;\n &lt;arg name=\"gui\" default=\"true\"/&gt;\n &lt;arg name=\"headless\" default=\"false\"/&gt;\n &lt;arg name=\"debug\" default=\"false\"/&gt;\n\n &lt;!-- we resume the logic in empty_world.launch, changing only the name of the world to be launched --&gt;\n &lt;include file=\"$(find gazebo_ros)/launch/empty_world.launch\"&gt;\n &lt;arg name=\"world_name\" value=\"default\"/&gt;\n &lt;arg name=\"debug\" value=\"$(arg debug)\" /&gt;\n &lt;arg name=\"gui\" value=\"$(arg gui)\" /&gt;\n &lt;arg name=\"paused\" value=\"$(arg paused)\"/&gt;\n &lt;arg name=\"use_sim_time\" value=\"$(arg use_sim_time)\"/&gt;\n &lt;arg name=\"headless\" value=\"$(arg headless)\"/&gt;\n &lt;/include&gt;\n\n &lt;!-- load the urdf into the ros parameter server --&gt;\n &lt;param name=\"robot_description\"\n command=\"$(find xacro)/xacro  '$(find abb_robot_model)/urdf/abb_robot.urdf.xacro'\" /&gt;\n\n &lt;!-- run a python script to the send a service call to gazebo_ros to spawn a urdf robot --&gt;\n &lt;node name=\"urdf_spawner\" pkg=\"gazebo_ros\" type=\"spawn_model\" respawn=\"false\" output=\"screen\"\n args=\"-urdf -model rrbot -param robot_description\"/&gt;\n\n &lt;!-- ros_control rrbot launch file --&gt;\n &lt;!--include file=\"$(find rrbot_control)/launch/rrbot_control.launch\" /--&gt;\n\n&lt;/launch&gt;\n\n\n**after launching the file** using **verbose,**  i got this **terminal output:**\n\n    ... logging to /home/beraru/.ros/log/1d523880-5289-11eb-a1e2-9c305b2b6a57/roslaunch-beraru-25199.log\n    checking log directory for disk usage. this may take a while.\n    press ctrl-c to interrupt\n    done checking log file disk usage. usage is &lt;1gb.\n    \n    started roslaunch server http://beraru:46501/\n    \n    summary\n    ========\n    \n    parameters\n     * /gazebo/enable_ros_network: true\n     * /robot_description: &lt;?xml version=\"1....\n     * /rosdistro: melodic\n     * /rosversion: 1.14.10\n     * /use_sim_time: true\n    \n    nodes\n      /\n        gazebo (gazebo_ros/gzserver)\n        gazebo_gui (gazebo_ros/gzclient)\n        urdf_spawner (gazebo_ros/spawn_model)\n    \n    auto-starting new master\n    process[master]: started with pid [25212]\n    ros_master_uri=http://localhost:11311\n    \n    setting /run_id to 1d523880-5289-11eb-a1e2-9c305b2b6a57\n    process[rosout-1]: started with pid [25223]\n    started core service [/rosout]\n    process[gazebo-2]: started with pid [25229]\n    process[gazebo_gui-3]: started with pid [25234]\n    process[urdf_spawner-4]: started with pid [25238]\n    [ info] [1610203443.743808909]: finished loading gazebo ros api plugin.\n    [ info] [1610203443.746368332]: waitforservice: service [/gazebo_gui/set_physics_properties] has not been advertised, waiting...\n    [ info] [1610203443.747101831]: finished loading gazebo ros api plugin.\n    [ info] [1610203443.748026935]: waitforservice: service [/gazebo/set_physics_properties] has not been advertised, waiting...\n    [info] [1610203444.156813, 0.000000]: loading model xml from ros parameter robot_description\n    [info] [1610203444.166464, 0.000000]: waiting for service /gazebo/spawn_urdf_model\n    [ info] [1610203444.290954445]: waitforservice: service [/gazebo/set_physics_properties] is now available.\n    [ info] [1610203444.412460152, 0.042000000]: physics dynamic reconfigure ready.\n    [info] [1610203444.469900, 0.097000]: calling service /gazebo/spawn_urdf_model\n    warning [parser.cc:950] xml element[always_on], child of element[camera] not defined in sdf. ignoring[always_on]. you may have an incorrect sdf file, or an sdformat version that doesn't support this element.\n    warning [parser.cc:950] xml element[update_rate], child of element[camera] not defined in sdf. ignoring[update_rate]. you may have an incorrect sdf file, or an sdformat version that doesn't support this element.\n    warning [parser.cc:950] xml element[always_on], child of element[camera] not defined in sdf. ignoring[always_on]. you may have an incorrect sdf file, or an sdformat version that doesn't support this element.\n    warning [parser.cc:950] xml element[update_rate], child of element[camera] not defined in sdf. ignoring[update_rate]. you may have an incorrect sdf file, or an sdformat version that doesn't support this element.\n    [ info] [1610203444.883101756, 0.195000000]: camera plugin: using the 'robotnamespace' param: '/'\n    [ info] [1610203444.885656393, 0.195000000]: camera plugin (ns = /)  &lt;tf_prefix_&gt;, set to \"\"\n    [ info] [1610203444.927635316, 0.195000000]: camera plugin: using the 'robotnamespace' param: '/'\n    [ info] [1610203444.930403849, 0.195000000]: camera plugin (ns = /)  &lt;tf_prefix_&gt;, set to \"\"\n    [info] [1610203444.934492, 0.195000]: spawn status: spawnmodel: successfully spawned entity\n    [ info] [1610203444.937863087, 0.195000000]: &lt;robotnamespace&gt; set to: //\n    [ info] [1610203444.938380472, 0.195000000]: &lt;topicname&gt; set to: //camerat265/gyro/sample\n    [ info] [1610203444.938940197, 0.195000000]: &lt;framename&gt; set to: camerat265_link\n    [ info] [1610203444.940385830, 0.195000000]: &lt;updateratehz&gt; set to: 30\n    [ info] [1610203444.941494349, 0.195000000]: &lt;gaussiannoise&gt; set to: 1e-06\n    [ info] [1610203444.941663472, 0.195000000]: &lt;xyzoffset&gt; set to: 0 0 0\n    [ info] [1610203444.941772183, 0.195000000]: &lt;rpyoffset&gt; set to: 0 -0 0\n    [ info] [1610203444.982566675, 0.195000000]: loading gazebo_ros_control plugin\n    [ info] [1610203444.982761763, 0.195000000]: starting gazebo_ros_control plugin in namespace: /abb_robot\n    [ info] [1610203444.983554810, 0.195000000]: gazebo_ros_control plugin is waiting for model urdf in parameter [/robot_description] on the ros param server.\n    [ info] [1610203445.121928941, 0.195000000]: loaded gazebo_ros_control.\n    [urdf_spawner-4] process has finished cleanly\n    log file: /home/beraru/.ros/log/1d523880-5289-11eb-a1e2-9c305b2b6a57/urdf_spawner-4*.log\n\nas you notice there is no explicit error generated!\n\n*what i have tried to figure out the issue sofar:*\n\n1- **launch rviz:**  \nit works correctly with work -----> tree !!!  been advertised as shown:\n\nhttps://preview.redd.it/r34cgrzxnba61.png?width=885&amp;format=png&amp;auto=webp&amp;s=d8a55c1ae8b38a6b4ae28f70d316e2665c7e9097\n\n2- **tf-tree** not shown while launching the gazebo however the topics is shown when i makes use rostopic list:  \n\n\n[tf\\_tree](https://preview.redd.it/gk1hqkhnoba61.png?width=1871&amp;format=png&amp;auto=webp&amp;s=58fdc4097675cf591bc1e423547936dfb76cb6c4)\n\n3- **rosdep check:**\n\n     rosdep check abb_robot_model\n    all system dependencies have been satisfied\n\n **i am using gazebo 9.0 along with melodic!**", "sortedWord": "None", "removed": null, "score": 1, "comments": 11, "media": null, "medialink": "https://www.reddit.com/r/robotics/comments/ktskwy/gazebo_hangs_on_black_screen_when_launching_urdf/", "identifyer": 3505973, "year": "2021"}, {"Unnamed: 0": 1374, "autor": "miadeals", "date": 1628587162000, "content": "Motor (stepper?) torque calculations and selection for industrial type application /!/ I have been tasked with designing a SCARA type robot with minimal guidance/input so its really been quite the crash course.\n\nI've been trying to determine what size/type of motors I will use at the various joints. Imagine the end effector simply applies 100N of force to a button, that's all the robot does. Line up the arm to the button, hold still, end effector pushes the (very tough) button. The joint furthest from the end effector is \\~1.74m in the worst case. So without limiting the angle the arm, assuming the worst case again, we have 174Nm of torque on the first joint/motor when the button is being pressed, plus the factor of safety that we were not given. Let's say that's in the 1.2 to 1.7 range. My simple calculation puts me at a motor that has to resist almost 300Nm of torque. When I am looking at stepper motors, I am not seeing any that have a holding torque value near that. Am I barking up the wrong tree here and should be looking at other motor types? Steppers seem like the easiest solution, I'm not even sure how a servo motor would hold its position. Or should I be looking at a motor that has an electric brake and specify the brake will be engaged prior to pushing the button? Part of the task is to keep the robot as simple and reliable as possible, which is why stepper motors seemed the way to go, but again, this is the first robot I've ever had to design.", "link": "https://www.reddit.com/r/robotics/comments/p1lobc/motor_stepper_torque_calculations_and_selection/", "origin": "Reddit", "suborigin": "robotics", "result": true, "Selector": "tree", "selectorShort": "tree", "MarkedSent": "motor (stepper?) torque calculations and selection for industrial type application /!/ i have been tasked with designing a scara type robot with minimal guidance/input so its really been quite the crash course.\n\ni've been trying to determine what size/type of motors i will use at the various joints. imagine the end effector simply applies 100n of force to a button, that's all the robot does. line up the arm to the button, hold still, end effector pushes the (very tough) button. the joint furthest from the end effector is \\~1.74m in the worst case. so without limiting the angle the arm, assuming the worst case again, we have 174nm of torque on the first joint/motor when the button is being pressed, plus the factor of safety that we were not given. let's say that's in the 1.2 to 1.7 range. my simple calculation puts me at a motor that has to resist almost 300nm of torque. when i am looking at stepper motors, i am not seeing any that have a holding torque value near that. am i barking up the wrong -----> tree !!!  here and should be looking at other motor types? steppers seem like the easiest solution, i'm not even sure how a servo motor would hold its position. or should i be looking at a motor that has an electric brake and specify the brake will be engaged prior to pushing the button? part of the task is to keep the robot as simple and reliable as possible, which is why stepper motors seemed the way to go, but again, this is the first robot i've ever had to design.", "sortedWord": "None", "removed": null, "score": 1, "comments": 4, "media": null, "medialink": "https://www.reddit.com/r/robotics/comments/p1lobc/motor_stepper_torque_calculations_and_selection/", "identifyer": 3506466, "year": "2021"}, {"Unnamed: 0": 1737, "autor": "techlover258", "date": 1619721615000, "content": "Winding Tree Announces ORGiD Bot for Blockchain-powered ID Verification - Identity Review - Identity Review", "link": "https://www.reddit.com/r/robotics/comments/n1b1rg/winding_tree_announces_orgid_bot_for/", "origin": "Reddit", "suborigin": "robotics", "result": true, "Selector": "tree", "selectorShort": "tree", "MarkedSent": "winding -----> tree !!!  announces orgid bot for blockchain-powered id verification - identity review - identity review", "sortedWord": "None", "removed": null, "score": 1, "comments": 0, "media": "link", "medialink": "https://identityreview.com/winding-tree-announces-orgid-bot-for-blockchain-powered-id-verification/", "identifyer": 3506838, "year": "2021"}, {"Unnamed: 0": 1979, "autor": "Bunny-Of-Steel", "date": 1621439431000, "content": "UR vs. xArm - Unity integration /!/ Greetings, lovely community!\n\nI am a bit new to the robotics field and I am doing some academic research involving simulation of use cases for a collaborative robotic arm/cobot in a VR environment. I believe what I am after would require inverse kinematics for actions that would be too complex to just animate, and so I believe I would require ROS support for control and trajectory planning. I have done some basic ground work, such as going over the basic [tutorial for integrating ROS in a Unity scene](https://github.com/Unity-Technologies/Unity-Robotics-Hub/tree/main/tutorials/pick_and_place), and I managed to make some necessary modifications to sort of adapt the scene to what I have in mind. \n\nGoing further, I would want to get a robotic arm for our university lab that I can use for future projects, which will involve running simulated scenarios in a virtual setting, and then migrating to a real-world or mixed-reality implementations. For consistency I would prefer to be working with the same robotic arm in simulations and in reality. According to some basic research, the standard for industry and research seems to be the UR line of cobots (please correct me if I'm wrong). A less expensive alternative would be the UFACTORY xArm line. A less expensive arm is of course more preferred since our lab has a fixed budget for equipment.\n\nCurrently I am trying to figure out two things, the first of which is knowing which arm would be safer to invest in and buy for our lab. I have seen some academic and non-academic work running simulations in a virtual environment using the UR arms, but none at all using xArms which are more budget-friendly. My worry is not whether simulating an xArm would be possible. I figure it's most likely doable. I'm rather not sure if this would require a more substantial amount of work, which could be beyond my current skill level as a novice. The second thing I am trying to figure out is how to approach simulating a different arm than the one in the Unity+ROS tutorial. I started learning the basics of ROS, but I am starting to wonder if this is a relevant and efficient path for getting my study scenario built and done as soon as possible, i.e. if I am learning how to build pencils when what I'm after is sketching with a pencil. I know the necessary steps involve first importing the relevant URDF and using it the Unity scene. After that, I want to tell the arm where to point/grab/release. That's all I'm after for now.\n\nI hope I have expressed myself well. I would appreciate any help. \n\nThanks in advance!", "link": "https://www.reddit.com/r/robotics/comments/ng9eif/ur_vs_xarm_unity_integration/", "origin": "Reddit", "suborigin": "robotics", "result": true, "Selector": "tree", "selectorShort": "tree", "MarkedSent": "ur vs. xarm - unity integration /!/ greetings, lovely community!\n\ni am a bit new to the robotics field and i am doing some academic research involving simulation of use cases for a collaborative robotic arm/cobot in a vr environment. i believe what i am after would require inverse kinematics for actions that would be too complex to just animate, and so i believe i would require ros support for control and trajectory planning. i have done some basic ground work, such as going over the basic [tutorial for integrating ros in a unity scene](https://github.com/unity-technologies/unity-robotics-hub/-----> tree !!! /main/tutorials/pick_and_place), and i managed to make some necessary modifications to sort of adapt the scene to what i have in mind. \n\ngoing further, i would want to get a robotic arm for our university lab that i can use for future projects, which will involve running simulated scenarios in a virtual setting, and then migrating to a real-world or mixed-reality implementations. for consistency i would prefer to be working with the same robotic arm in simulations and in reality. according to some basic research, the standard for industry and research seems to be the ur line of cobots (please correct me if i'm wrong). a less expensive alternative would be the ufactory xarm line. a less expensive arm is of course more preferred since our lab has a fixed budget for equipment.\n\ncurrently i am trying to figure out two things, the first of which is knowing which arm would be safer to invest in and buy for our lab. i have seen some academic and non-academic work running simulations in a virtual environment using the ur arms, but none at all using xarms which are more budget-friendly. my worry is not whether simulating an xarm would be possible. i figure it's most likely doable. i'm rather not sure if this would require a more substantial amount of work, which could be beyond my current skill level as a novice. the second thing i am trying to figure out is how to approach simulating a different arm than the one in the unity+ros tutorial. i started learning the basics of ros, but i am starting to wonder if this is a relevant and efficient path for getting my study scenario built and done as soon as possible, i.e. if i am learning how to build pencils when what i'm after is sketching with a pencil. i know the necessary steps involve first importing the relevant urdf and using it the unity scene. after that, i want to tell the arm where to point/grab/release. that's all i'm after for now.\n\ni hope i have expressed myself well. i would appreciate any help. \n\nthanks in advance!", "sortedWord": "None", "removed": null, "score": 1, "comments": 2, "media": "self", "medialink": "https://www.reddit.com/r/robotics/comments/ng9eif/ur_vs_xarm_unity_integration/", "identifyer": 3507085, "year": "2021"}, {"Unnamed: 0": 2179, "autor": "-Tom-", "date": 1631281269000, "content": "No CAN communication from an RMD-X8 Pro motor. /!/ Hello all,\n\nI'm trying to get a MyActuator RMD-X8 Pro to work and I think I'm about at my wits end. \n\nMy current setup is as follows:\n\nArduino Uno\n\nSparkfun CAN-BUS shield\n\nMyActuator RMD-X8 Pro\n\n48V power supply direct to motor\n\n12V power supply to Arduino\n\nCore code copied from [Skyentific](https://www.youtube.com/watch?v=gsOPZltbvgM)\n\n[RMD Config 2.0 software](https://www.myactuator.com/dowload)\n\n[Seeed CAN-BUS library - Old](https://github.com/Seeed-Studio/Seeed_Arduino_CAN/tree/old) as the newest one has errors and won't compile. \n\n\nSo for those not familiar, the motor is the same/comparable to an MIT Mini Cheetah, GYEMS RMD-X8, and a few others kicking around. \n\nTo bring you up to speed I've gotten the Arduino working with the shield, I couldnt get my Arduino Mega 2560 working with the shield because the SPI pins change between the Uno and the Mega and I didnt want to modify the header pins on the shield....YET. So I borrowed an Uno. Now that all works and I get communication between the shield and the Arduino, I'm stuck not getting communication between the shield and the motor. \n\nI have tested the CAN-HI and CAN-LO pinouts on the shield and verified when at rest they're both around 2.5V and when trying to send to the motor I get a voltage differential between as CAN-HI rises and CAN-LO drops. I have tried with and without 120ohm terminations in the wiring and that yielded nothing. \n\nNext, I figured lets use the USB to UART chip supplied to make sure the baud between the CAN shield and the motor are the same. Well, wouldnt you know it, I cant connect to the motor directly. All I get is a communication error on the RMD Config software. If I cant communicate using that, I have no hope of getting the CAN shield to communicate.\n\nAt this point I'm reaching out for some help on where I might go from here for troubleshooting before declaring the module in the motor is defective or something else. I'm pretty positive it has to be something I'm doing wrong, I just don't know what at this point. \n\nThank you so much in advance!", "link": "https://www.reddit.com/r/robotics/comments/pll9ui/no_can_communication_from_an_rmdx8_pro_motor/", "origin": "Reddit", "suborigin": "robotics", "result": true, "Selector": "tree", "selectorShort": "tree", "MarkedSent": "no can communication from an rmd-x8 pro motor. /!/ hello all,\n\ni'm trying to get a myactuator rmd-x8 pro to work and i think i'm about at my wits end. \n\nmy current setup is as follows:\n\narduino uno\n\nsparkfun can-bus shield\n\nmyactuator rmd-x8 pro\n\n48v power supply direct to motor\n\n12v power supply to arduino\n\ncore code copied from [skyentific](https://www.youtube.com/watch?v=gsopzltbvgm)\n\n[rmd config 2.0 software](https://www.myactuator.com/dowload)\n\n[seeed can-bus library - old](https://github.com/seeed-studio/seeed_arduino_can/-----> tree !!! /old) as the newest one has errors and won't compile. \n\n\nso for those not familiar, the motor is the same/comparable to an mit mini cheetah, gyems rmd-x8, and a few others kicking around. \n\nto bring you up to speed i've gotten the arduino working with the shield, i couldnt get my arduino mega 2560 working with the shield because the spi pins change between the uno and the mega and i didnt want to modify the header pins on the shield....yet. so i borrowed an uno. now that all works and i get communication between the shield and the arduino, i'm stuck not getting communication between the shield and the motor. \n\ni have tested the can-hi and can-lo pinouts on the shield and verified when at rest they're both around 2.5v and when trying to send to the motor i get a voltage differential between as can-hi rises and can-lo drops. i have tried with and without 120ohm terminations in the wiring and that yielded nothing. \n\nnext, i figured lets use the usb to uart chip supplied to make sure the baud between the can shield and the motor are the same. well, wouldnt you know it, i cant connect to the motor directly. all i get is a communication error on the rmd config software. if i cant communicate using that, i have no hope of getting the can shield to communicate.\n\nat this point i'm reaching out for some help on where i might go from here for troubleshooting before declaring the module in the motor is defective or something else. i'm pretty positive it has to be something i'm doing wrong, i just don't know what at this point. \n\nthank you so much in advance!", "sortedWord": "None", "removed": null, "score": 1, "comments": 5, "media": "self", "medialink": "https://www.reddit.com/r/robotics/comments/pll9ui/no_can_communication_from_an_rmdx8_pro_motor/", "identifyer": 3507291, "year": "2021"}, {"Unnamed: 0": 4187, "autor": "hirushi_wijesinghe", "date": 1619433550000, "content": "STL part Invicible after importing to webots. (Visible in scene tree) /!/ I am trying to import a STL part to my webots2021 but after importing, my part is Invicible. It shows as a solid in the scene tree and when I click on it, the coordinates are also shown in the world. But the part is not visible. I also tried changing the color. But no luck. Please help.", "link": "https://www.reddit.com/r/robotics/comments/myur3b/stl_part_invicible_after_importing_to_webots/", "origin": "Reddit", "suborigin": "robotics", "result": true, "Selector": "tree", "selectorShort": "tree", "MarkedSent": "stl part invicible after importing to webots. (visible in scene -----> tree !!! ) /!/ i am trying to import a stl part to my webots2021 but after importing, my part is invicible. it shows as a solid in the scene tree and when i click on it, the coordinates are also shown in the world. but the part is not visible. i also tried changing the color. but no luck. please help.", "sortedWord": "None", "removed": null, "score": 1, "comments": 0, "media": null, "medialink": "https://www.reddit.com/r/robotics/comments/myur3b/stl_part_invicible_after_importing_to_webots/", "identifyer": 3509359, "year": "2021"}], "name": "treerobotics2021"}