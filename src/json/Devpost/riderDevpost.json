{"interestingcomments": [{"Unnamed: 0": 11, "autor": "Kbc lucky draw 2022", "date": null, "content": "Built With\na\nhelmet\nkbc\nreview\nrider's", "link": "https://devpost.com/software/kbc-lucky-draw-2022", "origin": "Devpost", "suborigin": "Devpost", "result": true, "Selector": "rider", "selectorShort": "rider", "MarkedSent": "built with\na\nhelmet\nkbc\nreview\n-----> rider !!! 's", "sortedWord": "None", "removed": "Nan", "score": 0, "comments": 0, "media": null, "medialink": null, "identifyer": 59500011}, {"Unnamed: 0": 1190, "autor": "GE Rider App", "date": null, "content": "This is Gallp-eat's rider side app, where people who want to work as a rider will register themselves through this app. After registration, on the home screen, their status will be shown, which they can switch on and off themselves according to their feasibility. Further, two more things will be shown to them on the home screen:\nTheir performance rates\nTheir shift times (which they can switch).\nWhen the riders switch their availability ON, they will start receiving orders from customers through the Customer App. The orders will appear in the delivery list of riders, which either they accept after seeing pick-up and drop-off locations. If they accept the order, the map pointing towards the restaurant will appear to them and after picking the order from the restaurant, the same map will be shown but this time points the location towards the customer's location. When they hand over the orders to the customers, they will click on the dropped-off button and the data will update in the rider\u2019s app on the instance.\nThese order records will be added to the order history of the rider's account and their performance will be measured according to it.\nNOTE: This is my private client project, thus I cannot show further details and the app is still in testing phases and is yet to be made available for public.", "link": "https://devpost.com/software/gallopeat-rider-app", "origin": "Devpost", "suborigin": "Devpost", "result": true, "Selector": "rider", "selectorShort": "rider", "MarkedSent": "this is gallp-eat's -----> rider !!!  side app, where people who want to work as a -----> rider !!!  will register themselves through this app. after registration, on the home screen, their status will be shown, which they can switch on and off themselves according to their feasibility. further, two more things will be shown to them on the home screen:\ntheir performance rates\ntheir shift times (which they can switch).\nwhen the riders switch their availability on, they will start receiving orders from customers through the customer app. the orders will appear in the delivery list of riders, which either they accept after seeing pick-up and drop-off locations. if they accept the order, the map pointing towards the restaurant will appear to them and after picking the order from the restaurant, the same map will be shown but this time points the location towards the customer's location. when they hand over the orders to the customers, they will click on the dropped-off button and the data will update in the rider\u2019s app on the instance.\nthese order records will be added to the order history of the rider's account and their performance will be measured according to it.\nnote: this is my private client project, thus i cannot show further details and the app is still in testing phases and is yet to be made available for public.", "sortedWord": "None", "removed": "Nan", "score": 0, "comments": 0, "media": null, "medialink": null, "identifyer": 59501190}, {"Unnamed: 0": 1197, "autor": "GE User App", "date": null, "content": "This is Gallp-eat's Customer side app, where users will log in/register themselves to order food online. After going through the Auth process, they will be asked for their location (they can save their multiple locations for delivery such as a home address, office address, etc).\nAfter that on the main screen, they will see special offers that restaurants are offering, a list of restaurants near their location, and newly opened restaurants. Also, the text field is available on the main screen where they can search for food.\nAfter clicking on any restaurant they will navigate to that restaurant page, where they will see information, ratings, location, reviews about the restaurant and offers that the restaurant will be offering, also the lists of categories of food that contain food cards related to that category. Users will be able to add items to the cart through the restaurant's food categories drop-down, also they can navigate to the item page for more detailed information about that item and then can add items to the cart. On the items screen, users will be available to add extra ingredients with their order and also can add an important message about their orders.\nWhen users will select their food, all of the items will be added to the cart, users will be able to increase or decrease the number of items in the cart also. After that, they will be moved to the shipping screen where they will select the location for delivery and then on the next screen they will see payment details and select payment method.\nThere are three payment options available in this app: 1. PayPal 2. Visa/Master Card (For it they will first add the card's information and after verification, it will be listed with other cards) 3. Cash on delivery\nAfter confirmation and payment deduction, order details will be sent to that restaurant and the rider will be allocated for that order. Users will be able to track the position of the rider through the in-app map and also can communicate with the rider through in-app chat or through call.\nNOTE: This is my private client project, thus I cannot show further details and the app is still in testing phases and is yet to be made available for public.", "link": "https://devpost.com/software/gallopeat-user-app", "origin": "Devpost", "suborigin": "Devpost", "result": true, "Selector": "rider", "selectorShort": "rider", "MarkedSent": "this is gallp-eat's customer side app, where users will log in/register themselves to order food online. after going through the auth process, they will be asked for their location (they can save their multiple locations for delivery such as a home address, office address, etc).\nafter that on the main screen, they will see special offers that restaurants are offering, a list of restaurants near their location, and newly opened restaurants. also, the text field is available on the main screen where they can search for food.\nafter clicking on any restaurant they will navigate to that restaurant page, where they will see information, ratings, location, reviews about the restaurant and offers that the restaurant will be offering, also the lists of categories of food that contain food cards related to that category. users will be able to add items to the cart through the restaurant's food categories drop-down, also they can navigate to the item page for more detailed information about that item and then can add items to the cart. on the items screen, users will be available to add extra ingredients with their order and also can add an important message about their orders.\nwhen users will select their food, all of the items will be added to the cart, users will be able to increase or decrease the number of items in the cart also. after that, they will be moved to the shipping screen where they will select the location for delivery and then on the next screen they will see payment details and select payment method.\nthere are three payment options available in this app: 1. paypal 2. visa/master card (for it they will first add the card's information and after verification, it will be listed with other cards) 3. cash on delivery\nafter confirmation and payment deduction, order details will be sent to that restaurant and the -----> rider !!!  will be allocated for that order. users will be able to track the position of the rider through the in-app map and also can communicate with the rider through in-app chat or through call.\nnote: this is my private client project, thus i cannot show further details and the app is still in testing phases and is yet to be made available for public.", "sortedWord": "None", "removed": "Nan", "score": 0, "comments": 0, "media": null, "medialink": null, "identifyer": 59501197}, {"Unnamed: 0": 2086, "autor": "ERS - Enterprise Ride System", "date": null, "content": "Inspiration\nWorking in huge companies sometimes makes it difficult to get to know every single colleague, employees living in the same location and not knowing each other is a common scenario. The result is that rides to work and carpooling are difficult and not common things to happen, resulting in a lot of expenses for the employee, parking difficulties for the company and a lot of pollution for the environment.\nWhat it does\nThe Enterprise Ride System is about facilitating the connection and rides offers between employees. In a nutshell, the rider can post a ride offer containing all the relevant information about the trip, such as date, time, location etc. and it will be shown on the main page for other employees. The passenger can then select the one that best fits his necessities and book a ride. Simple and easy.\nHow we built it\nThe application was designed and developed using SAP Fiori Tools, which applies modern concepts and design principles, enabling our users to have a delightful user experience. We started with brainstorming, trying to figure out the necessities and pain of our users. After that we planned, created CDS views, databases, coded and tested.\nChallenges we ran into\nThe biggest challenge was to develop an idea with limited development skills. We contacted mentors asking them for help while running out of time and working in our team in different time zones trying to use this to our advantage.\nAccomplishments that we're proud of\nWe are proud of developing such a valuable tool, which has an amazing impact on our users' lives and on the environment. Being able to use our skills to improve their lives and innovate, while learning and having fun, was absolutely an amazing experience.\nWhat we learned\nWe learned a whole life knowledge in only 48 hours. We started this hackathon with lack of development experience, product knowledge and a huge desire to learn. We strived ourselves, searched, learned, talked with mentors and the result was amazing.\nWhat's next for ERS - Enterprise Ride System\nAs future upgrades for our system we will consider a chat box for passengers and drivers\u2019 direct communication. Better expense management for charging directly from employees\u2019 monthly salary, and localization features, which will help passengers to find the nearest options among available drivers.", "link": "https://devpost.com/software/ers-enterprise-ride-system", "origin": "Devpost", "suborigin": "Devpost", "result": true, "Selector": "rider", "selectorShort": "rider", "MarkedSent": "inspiration\nworking in huge companies sometimes makes it difficult to get to know every single colleague, employees living in the same location and not knowing each other is a common scenario. the result is that rides to work and carpooling are difficult and not common things to happen, resulting in a lot of expenses for the employee, parking difficulties for the company and a lot of pollution for the environment.\nwhat it does\nthe enterprise ride system is about facilitating the connection and rides offers between employees. in a nutshell, the -----> rider !!!  can post a ride offer containing all the relevant information about the trip, such as date, time, location etc. and it will be shown on the main page for other employees. the passenger can then select the one that best fits his necessities and book a ride. simple and easy.\nhow we built it\nthe application was designed and developed using sap fiori tools, which applies modern concepts and design principles, enabling our users to have a delightful user experience. we started with brainstorming, trying to figure out the necessities and pain of our users. after that we planned, created cds views, databases, coded and tested.\nchallenges we ran into\nthe biggest challenge was to develop an idea with limited development skills. we contacted mentors asking them for help while running out of time and working in our team in different time zones trying to use this to our advantage.\naccomplishments that we're proud of\nwe are proud of developing such a valuable tool, which has an amazing impact on our users' lives and on the environment. being able to use our skills to improve their lives and innovate, while learning and having fun, was absolutely an amazing experience.\nwhat we learned\nwe learned a whole life knowledge in only 48 hours. we started this hackathon with lack of development experience, product knowledge and a huge desire to learn. we strived ourselves, searched, learned, talked with mentors and the result was amazing.\nwhat's next for ers - enterprise ride system\nas future upgrades for our system we will consider a chat box for passengers and drivers\u2019 direct communication. better expense management for charging directly from employees\u2019 monthly salary, and localization features, which will help passengers to find the nearest options among available drivers.", "sortedWord": "None", "removed": "Nan", "score": 2, "comments": 0, "media": null, "medialink": null, "identifyer": 59502086}, {"Unnamed: 0": 2521, "autor": "SixtSeconds", "date": null, "content": "Inspiration\nWhen you rent a car or take a cab, you can't commit to a clear schedule. There is always the uncertainty of when one will actually arrive. Especially for important business meetings, appointments or other events, this time uncertainty means stress for the rider.\nWhat it does\nSixtSeconds offers its riders a so called In-Time insurance. With every booking, the user has the option to book an In-Time Insurance so that he will never arrive too late at his destination again. This insurance can only be made possible by Sixt's new autonomous cars. These cars are\nNot vulnerable to human error\nCapable of navigating to hotspots before users confirm an order\nScalable on demand and a high number of bookings\nHow we built it\nWe used Next.js for the project. The frontend is built on React + Typescript. The site is deployed using Netlify.\nChallenges we ran into\nCoordination over video calls is not easy. In person coding with your team mates makes things easier\nAccomplishments that we're proud of\nSixt Seconds is a nice MVP that was only developed in a very short time.\nWhat we learned\nDeploying a ssr app with Netlify will cause some errors. It's not as straight forward as one would expect.\nWhat's next for SixtSeconds\nIt's finally time to get some sleep", "link": "https://devpost.com/software/sixtseconds", "origin": "Devpost", "suborigin": "Devpost", "result": true, "Selector": "rider", "selectorShort": "rider", "MarkedSent": "inspiration\nwhen you rent a car or take a cab, you can't commit to a clear schedule. there is always the uncertainty of when one will actually arrive. especially for important business meetings, appointments or other events, this time uncertainty means stress for the -----> rider !!! .\nwhat it does\nsixtseconds offers its riders a so called in-time insurance. with every booking, the user has the option to book an in-time insurance so that he will never arrive too late at his destination again. this insurance can only be made possible by sixt's new autonomous cars. these cars are\nnot vulnerable to human error\ncapable of navigating to hotspots before users confirm an order\nscalable on demand and a high number of bookings\nhow we built it\nwe used next.js for the project. the frontend is built on react + typescript. the site is deployed using netlify.\nchallenges we ran into\ncoordination over video calls is not easy. in person coding with your team mates makes things easier\naccomplishments that we're proud of\nsixt seconds is a nice mvp that was only developed in a very short time.\nwhat we learned\ndeploying a ssr app with netlify will cause some errors. it's not as straight forward as one would expect.\nwhat's next for sixtseconds\nit's finally time to get some sleep", "sortedWord": "None", "removed": "Nan", "score": 2, "comments": 0, "media": null, "medialink": null, "identifyer": 59502521}, {"Unnamed: 0": 3366, "autor": "CometCommute Discord Bot", "date": null, "content": "Inspiration\nWhat if Uber was free? The CometCommute Discord bot was born out of the desire to provide a free rideshare option to UT Dallas students. As many students do not have a car, they are not able to get where they want, when they want. Together as a community, through bot developers, volunteer drivers, and Discord servers used by thousands of students, travel can be available for all.\nWhat it does\nCommuteBot allows riders to request a ride in a Discord server, specifying their current and desired location. Drivers are notified of rider requests, and can choose where or not to accept. Upon accepting the request, the driver and rider are automatically added to a private channel to communicate.\nHow we built it\nOur bot was built using discord.js, a Node.js module that allows interaction with the Discord API, and a MongoDB database in MongoDB Atlas to store ride information. We use AWS ECS Fargate to run CometCommute, Docker to package the app for easy deployment, Terraform to manage the AWS environment, and Travis-Cl to automatically deploy the latest code.\nChallenges we ran into\ndiscord.js, and its \"documentation\"\nAccomplishments that we're proud of\nWe originally planned to use discord.py and use template code from our previous bots to implement the use case for CometCommute. We learned at the start of HackUTD that discord.py was deprecated and no longer maintained, so we made a quick decision to pivot to discord.js and node. None of us are as proficient in JS as we are with python, so this was a huge challenge for us.\nWe're proud to have been able to create a bot in JavaScript that is prepared and scalable for the future, and helps serve our community.\nWhat we learned\nAlex: \"This was my first project using ECS Fargate - normally I back my ECS clusters with an EC2 Autoscaling Group. I was amazed at how fast we were able to go from zero to deployment using Fargate, it was super simple to use and easy to configure. While Fargate does come at an increased cost, the time constraints around our project made Fargate a great choice.\"\nNate: \"This is the first Discord bot I've made using discord.js, and the transition from the familiar discord.py library has been a challenging but rewarding experience. I've learned to implement slash commands in a concise way, and how to work with a MongoDB database.\"\nBlake: \"This is both my first Discord bot, and first experience with JavaScript altogether. Learning a new language on the fly has been challenging, but has taught me a lot, and made me a better developer. I've learned about promises, how to implement async functions, and the value of spending time with documentation over referring to simpler resources. \"\nWhat's next for CometCommute Discord Bot\nThe CometCommute Discord Bot can handle on-demand ride requests, but soon riders will be able to schedule a ride for a later date. Our database allows for this feature to be easily implemented in the near future.\nVideo Demos\nDriver Demo\nRider Demo\nLive Demo\nJoin the Discord Server", "link": "https://devpost.com/software/cometcommute-discord-bot", "origin": "Devpost", "suborigin": "Devpost", "result": true, "Selector": "rider", "selectorShort": "rider", "MarkedSent": "inspiration\nwhat if uber was free? the cometcommute discord bot was born out of the desire to provide a free rideshare option to ut dallas students. as many students do not have a car, they are not able to get where they want, when they want. together as a community, through bot developers, volunteer drivers, and discord servers used by thousands of students, travel can be available for all.\nwhat it does\ncommutebot allows riders to request a ride in a discord server, specifying their current and desired location. drivers are notified of -----> rider !!!  requests, and can choose where or not to accept. upon accepting the request, the driver and rider are automatically added to a private channel to communicate.\nhow we built it\nour bot was built using discord.js, a node.js module that allows interaction with the discord api, and a mongodb database in mongodb atlas to store ride information. we use aws ecs fargate to run cometcommute, docker to package the app for easy deployment, terraform to manage the aws environment, and travis-cl to automatically deploy the latest code.\nchallenges we ran into\ndiscord.js, and its \"documentation\"\naccomplishments that we're proud of\nwe originally planned to use discord.py and use template code from our previous bots to implement the use case for cometcommute. we learned at the start of hackutd that discord.py was deprecated and no longer maintained, so we made a quick decision to pivot to discord.js and node. none of us are as proficient in js as we are with python, so this was a huge challenge for us.\nwe're proud to have been able to create a bot in javascript that is prepared and scalable for the future, and helps serve our community.\nwhat we learned\nalex: \"this was my first project using ecs fargate - normally i back my ecs clusters with an ec2 autoscaling group. i was amazed at how fast we were able to go from zero to deployment using fargate, it was super simple to use and easy to configure. while fargate does come at an increased cost, the time constraints around our project made fargate a great choice.\"\nnate: \"this is the first discord bot i've made using discord.js, and the transition from the familiar discord.py library has been a challenging but rewarding experience. i've learned to implement slash commands in a concise way, and how to work with a mongodb database.\"\nblake: \"this is both my first discord bot, and first experience with javascript altogether. learning a new language on the fly has been challenging, but has taught me a lot, and made me a better developer. i've learned about promises, how to implement async functions, and the value of spending time with documentation over referring to simpler resources. \"\nwhat's next for cometcommute discord bot\nthe cometcommute discord bot can handle on-demand ride requests, but soon riders will be able to schedule a ride for a later date. our database allows for this feature to be easily implemented in the near future.\nvideo demos\ndriver demo\nrider demo\nlive demo\njoin the discord server", "sortedWord": "None", "removed": "Nan", "score": 4, "comments": 0, "media": null, "medialink": null, "identifyer": 59503366}, {"Unnamed: 0": 3642, "autor": "Trak", "date": null, "content": "Inspiration\ngenz be missing rides on the daily lmfao \ud83e\udd21\ud83d\ude00\nWhat it does\ntrak is a messenger that lets users know when their ride is coming. hence, find and trak your ride!\nHow we built it\ncommunication: slack\nui/ux: figma\nplatforms: git/github, vscode, twilio (API)\nlanguages: html/css, python\nframeworks: flask\nChallenges we ran into\nthis was our very first time using so many new technologies simultaneously\nwe encountered \"what do we do now?\" moments (e.g.: not knowing what tools to use, downloading tools, planning out project)\nlots of bugs\nAccomplishments that we're proud of\ndespite the time crunch, we were able to scale our vision and make an mvp \ud83d\ude04\nusing Flask (completely new to us) (also Alyssa learned Python, HTML, and CSS)\nusing a bit of backend!\nWhat we learned\nproject management (+ flexibility, scaling projects)\ngoogling around\ntrying new tools and languages\nfrontend <> backend\nWhat's next for TRAK\nmore features! (flexibility + convenience + communication + information):\npick, match, and change rides\nchoose drivers based on profiles and ratings\nsafety (especially for women/nb, children, etc.)\nsecurity (rider profiles, accounts/passwords)\nPWA \u2192 make available as app (Android, iOS)\nexpand accessibility features (e.g.: international)\ntip/pay drivers\nleave ratings and reviews\nform ride groups\n2-way text\ntrak ride status + estimated times of arrivals\nreceive push notifications\n...and more!", "link": "https://devpost.com/software/trak", "origin": "Devpost", "suborigin": "Devpost", "result": true, "Selector": "rider", "selectorShort": "rider", "MarkedSent": "inspiration\ngenz be missing rides on the daily lmfao \ud83e\udd21\ud83d\ude00\nwhat it does\ntrak is a messenger that lets users know when their ride is coming. hence, find and trak your ride!\nhow we built it\ncommunication: slack\nui/ux: figma\nplatforms: git/github, vscode, twilio (api)\nlanguages: html/css, python\nframeworks: flask\nchallenges we ran into\nthis was our very first time using so many new technologies simultaneously\nwe encountered \"what do we do now?\" moments (e.g.: not knowing what tools to use, downloading tools, planning out project)\nlots of bugs\naccomplishments that we're proud of\ndespite the time crunch, we were able to scale our vision and make an mvp \ud83d\ude04\nusing flask (completely new to us) (also alyssa learned python, html, and css)\nusing a bit of backend!\nwhat we learned\nproject management (+ flexibility, scaling projects)\ngoogling around\ntrying new tools and languages\nfrontend <> backend\nwhat's next for trak\nmore features! (flexibility + convenience + communication + information):\npick, match, and change rides\nchoose drivers based on profiles and ratings\nsafety (especially for women/nb, children, etc.)\nsecurity (-----> rider !!!  profiles, accounts/passwords)\npwa \u2192 make available as app (android, ios)\nexpand accessibility features (e.g.: international)\ntip/pay drivers\nleave ratings and reviews\nform ride groups\n2-way text\ntrak ride status + estimated times of arrivals\nreceive push notifications\n...and more!", "sortedWord": "None", "removed": "Nan", "score": 6, "comments": 2, "media": null, "medialink": null, "identifyer": 59503642}, {"Unnamed: 0": 3723, "autor": "Deep Correct: DL Color Correction for Color Blindness", "date": null, "content": "Title\nDeep Correct: Deep Learning Color Correction for Color Blindness\nWho\nNaveen Sharma (nsharm25), Taishi Nishizawa (tnishiza), Ian Rider (irider)\nIntroduction\nColor vision de\ufb01ciency affects 8% men and one in every 200 women. Our project member, Naveen, is one of them. He has difficulties distinguishing between red and green colored objects. This prompted us to ponder whether deep learning could be used to help with color blindness. After some research, we came across one research paper that uses deep learning to create a color correction program that can aid with object recognition.\nWe are implementing the following research paper: link by Petrovic and Fujita.\nTheir abstract: Abstract. Color vision de\ufb01ciency affects 8% men and one in every 200 women. There are many different types of color blindness with the red-green as the most common. Most models for color correction are based on physiological models of how people with color vision de\ufb01ciency perceive the world, with the goal of reduc- ing errors derived from the color blindness simulation formula. In this paper we present Deep Correct, a novel Deep Learning based method for color correcting images in order to improve accessibility for people with color vision de\ufb01ciency. The key elements of this work with regard to color blindness are two-fold: 1) we propose a data-driven Deep Learning approach for color correction and 2) we cre- ate an objective, quantitative metric for determining the distinguishability of im- ages. Additionally, as a more general Deep Learning contribution, we propose a new method of training neural networks by utilizing error gradients from pretrained networks in order to train new, smaller networks.\nThis is an unsupervised learning problem, as the model does not use labels to train. It instead uses an architecture similar to that of a GAN.\nRelated Work\nThe Research Paper\n[Very Deep Convolutional Networks for Large-Scale Image Recognition] https://arxiv.org/abs/1409.1556\nThe paper linked above describes a large convolution neural network trained on the ImageNet dataset. The paper describes the model of being able to \u201cgeneralise well to a wide range of tasks and datasets.\u201d The DeepCorrect model\u2019s Corrector module is derived from the VGG16 architecture from this paper.\n[Generative Adversarial Networks] https://arxiv.org/abs/1406.2661 This paper linked above introduces the GAN model. The DeepCorrect model we will be implement was heavily inspired by the GAN architecture, using a two component adversarial system similar to the G-D system described in the paper.\nData\nThis paper uses the Pascal dataset to train the different components of the DeepCorrect model. This dataset is publicly available online. As Pascal is a large dataset, only 11257 images were used to train the model.\nMethodology\nThe DeepCorrect model is a GAN-like deep learning model trained on the Pascal dataset. It is composed of two main components: the Corrector and the Referee. The Corrector takes in image data and applies convolutional layers and a linear corrector layer to produce color corrected images. Then The Referee, which is similar to the Discriminator in GANs, determines the quality of the generated image. We believe the hardest part about implementing DeepCorrect will be creating the Referee network. As detailed in the original paper, the Referee is derived from the VGG16 model. It may be a challenge to fit the modified VGG16 into the rest of the DeepCorrect architecture.\nMetrics\nIn the paper, the main goal was to create a model which generated superior color-corrected images than achieved using a linear color corrector. To verify whether or not the generated images from the model are better color corrected than the linear model, a color-blindness simulator is used. This way, numeric accuracies could be determined. Our main metric for success in this project will be to replicate the results achieved in the original paper within a margin of 5%.\nEthics\nWhat broader societal issues are relevant to your chosen problem space?\nColor blindness affects 8% of males and one in every 200 women, including one of our project members, Naveen Sharma. While there are various types of color blindness, the red-green type is the most common, with 98% of the cases. Color plays a big role in our ability to perform many daily tasks. The problem is especially emphasized in computer usage, where color is often a primary source of information distinction. However, it is not uncommon that color blindness correction comes as an afterthought to most developers. This is the most common approach for providing support for color blindness accessibility is image color correction. By modifying the software output image to contain colors which make desired elements clearly distinguishable, this serves as an integral part in helping color blind people navigate.\nWhy is Deep Learning a good approach to this problem?\nTo achieve image color correction, the most common solution is to apply a linear function that transforms the original color space into the new color space which is more suitable for people with a particular type of color blindness. However, this approach is limited. The primary purpose of color correction is to provide clear identification and differentiation of objects on the screen, and models that solely utilize the original images lack this crucial software-specific information. Using deep learning, we can train a neural network to output images that are most correctly distinguishable to color blind people. We simulate color blindness with software and evaluate whether the simulated results are distinguishable enough. This approach proposes a quantifiable method for estimating image distinguishability for normal and color blind people, giving us a clear metric to optimize and use for estimating correction method quality, and present a data driven approach for creating the color correction filter.\nDivision of labor\nOur tentative plan is to work on each part of the project together, as we suspect each aspect of the project will require a great amount of effort. Since we are roommates, we plan on mainly working together in our room and continuously updating each other with how things are going.\nSecond Reflection\nSecond Reflection Link\nFinal Writeup\nFinal Writeup Link\nPoster\nPoster", "link": "https://devpost.com/software/deep-correct-dl-color-correction-for-color-blindness", "origin": "Devpost", "suborigin": "Devpost", "result": true, "Selector": "rider", "selectorShort": "rider", "MarkedSent": "title\ndeep correct: deep learning color correction for color blindness\nwho\nnaveen sharma (nsharm25), taishi nishizawa (tnishiza), ian -----> rider !!!  (irider)\nintroduction\ncolor vision de\ufb01ciency affects 8% men and one in every 200 women. our project member, naveen, is one of them. he has difficulties distinguishing between red and green colored objects. this prompted us to ponder whether deep learning could be used to help with color blindness. after some research, we came across one research paper that uses deep learning to create a color correction program that can aid with object recognition.\nwe are implementing the following research paper: link by petrovic and fujita.\ntheir abstract: abstract. color vision de\ufb01ciency affects 8% men and one in every 200 women. there are many different types of color blindness with the red-green as the most common. most models for color correction are based on physiological models of how people with color vision de\ufb01ciency perceive the world, with the goal of reduc- ing errors derived from the color blindness simulation formula. in this paper we present deep correct, a novel deep learning based method for color correcting images in order to improve accessibility for people with color vision de\ufb01ciency. the key elements of this work with regard to color blindness are two-fold: 1) we propose a data-driven deep learning approach for color correction and 2) we cre- ate an objective, quantitative metric for determining the distinguishability of im- ages. additionally, as a more general deep learning contribution, we propose a new method of training neural networks by utilizing error gradients from pretrained networks in order to train new, smaller networks.\nthis is an unsupervised learning problem, as the model does not use labels to train. it instead uses an architecture similar to that of a gan.\nrelated work\nthe research paper\n[very deep convolutional networks for large-scale image recognition] https://arxiv.org/abs/1409.1556\nthe paper linked above describes a large convolution neural network trained on the imagenet dataset. the paper describes the model of being able to \u201cgeneralise well to a wide range of tasks and datasets.\u201d the deepcorrect model\u2019s corrector module is derived from the vgg16 architecture from this paper.\n[generative adversarial networks] https://arxiv.org/abs/1406.2661 this paper linked above introduces the gan model. the deepcorrect model we will be implement was heavily inspired by the gan architecture, using a two component adversarial system similar to the g-d system described in the paper.\ndata\nthis paper uses the pascal dataset to train the different components of the deepcorrect model. this dataset is publicly available online. as pascal is a large dataset, only 11257 images were used to train the model.\nmethodology\nthe deepcorrect model is a gan-like deep learning model trained on the pascal dataset. it is composed of two main components: the corrector and the referee. the corrector takes in image data and applies convolutional layers and a linear corrector layer to produce color corrected images. then the referee, which is similar to the discriminator in gans, determines the quality of the generated image. we believe the hardest part about implementing deepcorrect will be creating the referee network. as detailed in the original paper, the referee is derived from the vgg16 model. it may be a challenge to fit the modified vgg16 into the rest of the deepcorrect architecture.\nmetrics\nin the paper, the main goal was to create a model which generated superior color-corrected images than achieved using a linear color corrector. to verify whether or not the generated images from the model are better color corrected than the linear model, a color-blindness simulator is used. this way, numeric accuracies could be determined. our main metric for success in this project will be to replicate the results achieved in the original paper within a margin of 5%.\nethics\nwhat broader societal issues are relevant to your chosen problem space?\ncolor blindness affects 8% of males and one in every 200 women, including one of our project members, naveen sharma. while there are various types of color blindness, the red-green type is the most common, with 98% of the cases. color plays a big role in our ability to perform many daily tasks. the problem is especially emphasized in computer usage, where color is often a primary source of information distinction. however, it is not uncommon that color blindness correction comes as an afterthought to most developers. this is the most common approach for providing support for color blindness accessibility is image color correction. by modifying the software output image to contain colors which make desired elements clearly distinguishable, this serves as an integral part in helping color blind people navigate.\nwhy is deep learning a good approach to this problem?\nto achieve image color correction, the most common solution is to apply a linear function that transforms the original color space into the new color space which is more suitable for people with a particular type of color blindness. however, this approach is limited. the primary purpose of color correction is to provide clear identification and differentiation of objects on the screen, and models that solely utilize the original images lack this crucial software-specific information. using deep learning, we can train a neural network to output images that are most correctly distinguishable to color blind people. we simulate color blindness with software and evaluate whether the simulated results are distinguishable enough. this approach proposes a quantifiable method for estimating image distinguishability for normal and color blind people, giving us a clear metric to optimize and use for estimating correction method quality, and present a data driven approach for creating the color correction filter.\ndivision of labor\nour tentative plan is to work on each part of the project together, as we suspect each aspect of the project will require a great amount of effort. since we are roommates, we plan on mainly working together in our room and continuously updating each other with how things are going.\nsecond reflection\nsecond reflection link\nfinal writeup\nfinal writeup link\nposter\nposter", "sortedWord": "None", "removed": "Nan", "score": 6, "comments": 11, "media": null, "medialink": null, "identifyer": 59503723}, {"Unnamed: 0": 4081, "autor": "HARLEY BOOTS", "date": null, "content": "What's next for HARLEY BOOTS\nHIGH QUALITY AND DURABLE; OUR HARLEY DAVIDSON BOOTS FOR MEN ARE DESIGNED TO PROTECT YOUR FEET WHEN YOU ARE OUT ON THE ROAD. YOU NEED HIGH-QUALITY RIDING SHOES TO COMPLEMENT YOUR HARLEY-DAVIDSON EXPERIENCE. WITH THEIR LUXURY AND STYLE, THESE CRUISER BOOTS ARE TAKING RIDING BOOTS TO THE NEXT LEVEL. THESE BOOTS ARE SPECIFICALLY DESIGNED FOR THE SAFETY AND COMFORT OF THE RIDER. THEIR DURABILITY AND COMFORT AREN\u2019T THE ONLY THINGS THAT MAKE THESE BOOTS STAND OUT. THESE TALL MOTORCYCLE BOOTS COME WITH A SHOCK-ABSORBING TWIN PAD COMFORT TECHNOLOGY THAT NOT ONLY MAKES THE RIDE FEEL MORE COMFORTABLE BUT ALSO GIVES THEM THE FLEXIBILITY OF MOVEMENT. ONE OF THE BEST THINGS ABOUT OUR HARLEY BOOTS IS THAT THEY ARE MADE WITH BREATHABLE LEATHER AND THAT ADDS SO MUCH VALUE TO THE PRODUCT. THESE CHOPPER BOOTS WILL NOT JUST BE COMPLEMENTING YOUR BIKER STYLE BUT YOU CAN ALSO WEAR THEM ANYWHERE YOU WANT. SO IF YOU ARE LOOKING FOR STYLISH AND HIGH-QUALITY HARLEY DAVIDSON MOTORCYCLE BOOTS, VANGUARD BOOTS IS THE PERFECT PLACE FOR YOU.", "link": "https://devpost.com/software/harley-boots", "origin": "Devpost", "suborigin": "Devpost", "result": true, "Selector": "rider", "selectorShort": "rider", "MarkedSent": "what's next for harley boots\nhigh quality and durable; our harley davidson boots for men are designed to protect your feet when you are out on the road. you need high-quality riding shoes to complement your harley-davidson experience. with their luxury and style, these cruiser boots are taking riding boots to the next level. these boots are specifically designed for the safety and comfort of the -----> rider !!! . their durability and comfort aren\u2019t the only things that make these boots stand out. these tall motorcycle boots come with a shock-absorbing twin pad comfort technology that not only makes the ride feel more comfortable but also gives them the flexibility of movement. one of the best things about our harley boots is that they are made with breathable leather and that adds so much value to the product. these chopper boots will not just be complementing your biker style but you can also wear them anywhere you want. so if you are looking for stylish and high-quality harley davidson motorcycle boots, vanguard boots is the perfect place for you.", "sortedWord": "None", "removed": "Nan", "score": 0, "comments": 0, "media": null, "medialink": null, "identifyer": 59504081}, {"Unnamed: 0": 4837, "autor": "T13_SHPEteam", "date": null, "content": "Executive Summary\nWe use Computer Vision techniques and a low-cost live camera in front of roller coaster passengers to predict\u2014and prevent\u2014acute body motions that could result in injury. Our solution provides key insights on a per-passenger basis, is non-invasive, and sets the grounds for model training in the entertainment industry.\nOur Mission\nWe are a data gathering and analysis service that efficiently helps increase passenger safety in coaster rides. One injury is one too many. Using Computer Vision and Machine Learning techniques, we build on existing products to come up with a unique and unprecedented solution to this pressing issue.\nPlease note that this application is still in development, and no prediction model should be taken seriously.\nCoaster Injuries by the numbers\n+ 80% of injuries in amusement parks occur on a ride attraction\n1125 happened on a roller coaster during 2017\n49% of these happened as a result of body motion, impact, or dislocation\nSource: https://ridesdatabase.org/saferparks - 2017 records\nFeatures\nLOW-COST\nInsight Coaster proposes a low-cost solution. Our standard passenger seat attachment for the camera is flexible and can be adapted to any type of coaster vehicle. While current motion capturing systems are complex and expensive, Insight Coaster leverages data processing techniques and a low-cost onboard camera to provide a reliable tracking solution estimated to be ~20x cheaper.\nDATA-DRIVEN\nAs Artificial Intelligence clusters get faster and cheaper, an ever-growing number of companies are using these techniques more and more to get an edge on the market. By 2030, data collection and analysis will become the basis of all future service offerings and business models. \u201cData is the new gold\u201d. Insight Coaster is here on time, to set the grounds for model training in the entertainment industry.\nCOVID-19 COMPLIANT\nCovid has forced us to take additional contact-prevention measures, including the use of face masks and respirators. Our computer vision algorithm is trained to recognize passengers with or without masks. It also allows for non-contact body motion sensing, without the need for conventional motion capture suits, complying with pandemic-safe measures.\nOur Process\nCAMERA INSTALLATION\nA low-cost camera module with an onboard edge computer will be mounted in each individual seat with a bar-lock mechanism (see the proposal in the 3D MODELS tab). The safety harness is standard and should prove useful in most rollercoaster vehicle seats. The camera will be fixed to a special case. This cover will be attached to a rod system with a universal adapter for attachment to the safety harness.\nDATA GATHERING\nInsight Coaster will only record data with riders\u2019 consent and the sole purpose of increasing coaster safety. Storage can be optimized by saving only relevant sections of the frame (head tilting area) and trimming down portions of interest in the ride (acute curves, control curves, etc). Over time, data will create a coasters\u2019 profile for each segment of the ride, that will later be used as a baseline for inference.\nDATA PROCESSING\nReal-time image processing will occur at the edge, with a dedicated computer in each camera module. A combination of linear-regression face recognition and object tracking will allow for frontal as well as non-frontal face tracking. Essential parameters will be communicated in real-time with the coaster monitoring system. These parameters will then be compared with historical data to conclude if safety measures are needed.\nPROPOSED SAFETY MEASURES\nUsing data from Insight Coaster, we take safety measures to prevent body motion injuries. Measures should be determined case-by-case, as every coaster is different. These include:\nPreset max velocity on critical curves: an initial low-danger curve can help us infer the body motion of passengers on more dangerous turns coming later in the ride. Calculating how the passengers perform on this \u201cdiagnosis\u201d curve, will allow us to determine how hard to \u201cpress the pedal\u201d while ensuring maximum safety.\nIndividual rider feedback: alert passengers to \u201chold tight\u201d if captured motion looks abnormal.\nGeneral roller coaster improvements: periodic passenger analysis allows to spot trends to aid maintenance and guide ride improvements.\nOUT OF SCOPE/FUTURE PLANS\nInfrared capability: the project could be easily adjusted to work at night rides (coasters like Sheikra, Hollywood Rip Ride Rockit) using an IR camera adaptor.\nSentiment tracking: recognizing passenger satisfaction/engagement throughout the ride could open the door for unprecedented UX optimization.", "link": "https://devpost.com/software/insight-coaster", "origin": "Devpost", "suborigin": "Devpost", "result": true, "Selector": "rider", "selectorShort": "rider", "MarkedSent": "executive summary\nwe use computer vision techniques and a low-cost live camera in front of roller coaster passengers to predict\u2014and prevent\u2014acute body motions that could result in injury. our solution provides key insights on a per-passenger basis, is non-invasive, and sets the grounds for model training in the entertainment industry.\nour mission\nwe are a data gathering and analysis service that efficiently helps increase passenger safety in coaster rides. one injury is one too many. using computer vision and machine learning techniques, we build on existing products to come up with a unique and unprecedented solution to this pressing issue.\nplease note that this application is still in development, and no prediction model should be taken seriously.\ncoaster injuries by the numbers\n+ 80% of injuries in amusement parks occur on a ride attraction\n1125 happened on a roller coaster during 2017\n49% of these happened as a result of body motion, impact, or dislocation\nsource: https://ridesdatabase.org/saferparks - 2017 records\nfeatures\nlow-cost\ninsight coaster proposes a low-cost solution. our standard passenger seat attachment for the camera is flexible and can be adapted to any type of coaster vehicle. while current motion capturing systems are complex and expensive, insight coaster leverages data processing techniques and a low-cost onboard camera to provide a reliable tracking solution estimated to be ~20x cheaper.\ndata-driven\nas artificial intelligence clusters get faster and cheaper, an ever-growing number of companies are using these techniques more and more to get an edge on the market. by 2030, data collection and analysis will become the basis of all future service offerings and business models. \u201cdata is the new gold\u201d. insight coaster is here on time, to set the grounds for model training in the entertainment industry.\ncovid-19 compliant\ncovid has forced us to take additional contact-prevention measures, including the use of face masks and respirators. our computer vision algorithm is trained to recognize passengers with or without masks. it also allows for non-contact body motion sensing, without the need for conventional motion capture suits, complying with pandemic-safe measures.\nour process\ncamera installation\na low-cost camera module with an onboard edge computer will be mounted in each individual seat with a bar-lock mechanism (see the proposal in the 3d models tab). the safety harness is standard and should prove useful in most rollercoaster vehicle seats. the camera will be fixed to a special case. this cover will be attached to a rod system with a universal adapter for attachment to the safety harness.\ndata gathering\ninsight coaster will only record data with riders\u2019 consent and the sole purpose of increasing coaster safety. storage can be optimized by saving only relevant sections of the frame (head tilting area) and trimming down portions of interest in the ride (acute curves, control curves, etc). over time, data will create a coasters\u2019 profile for each segment of the ride, that will later be used as a baseline for inference.\ndata processing\nreal-time image processing will occur at the edge, with a dedicated computer in each camera module. a combination of linear-regression face recognition and object tracking will allow for frontal as well as non-frontal face tracking. essential parameters will be communicated in real-time with the coaster monitoring system. these parameters will then be compared with historical data to conclude if safety measures are needed.\nproposed safety measures\nusing data from insight coaster, we take safety measures to prevent body motion injuries. measures should be determined case-by-case, as every coaster is different. these include:\npreset max velocity on critical curves: an initial low-danger curve can help us infer the body motion of passengers on more dangerous turns coming later in the ride. calculating how the passengers perform on this \u201cdiagnosis\u201d curve, will allow us to determine how hard to \u201cpress the pedal\u201d while ensuring maximum safety.\nindividual -----> rider !!!  feedback: alert passengers to \u201chold tight\u201d if captured motion looks abnormal.\ngeneral roller coaster improvements: periodic passenger analysis allows to spot trends to aid maintenance and guide ride improvements.\nout of scope/future plans\ninfrared capability: the project could be easily adjusted to work at night rides (coasters like sheikra, hollywood rip ride rockit) using an ir camera adaptor.\nsentiment tracking: recognizing passenger satisfaction/engagement throughout the ride could open the door for unprecedented ux optimization.", "sortedWord": "None", "removed": "Nan", "score": 0, "comments": 0, "media": null, "medialink": null, "identifyer": 59504837}, {"Unnamed: 0": 5323, "autor": "Campus Buddy", "date": null, "content": "Inspiration\nAs universities gradually reopen following the pandemic.The number of students commuting to campus grows, causing traffic and parking space congestion & concerning carbon emissions levels. So here at CampusBuddy we encourage ride-sharing where students can compare their progress to that their peers by following their scoreboard, which comes with additional perks of free rides !\nWhat it does\nStudents can register as a driver or a rider on CampusBuddy, which connects them to ride share.\nIt pairs students with similar schedules who live nearby to save campus parking and pollution.\nEvery time a rider takes a ride, their score on the scoreboard is increased.\nA rider receives a free ride if they ride share more than four times per week.\nHow we built it\nHTML/CSS/JS/AngularJS/GoogleMaps & Canva is used to present and prototype back-end functionality, as well as entity relationship diagrams\nChallenges we ran into\nWe didn't have a lot of time to work on the project, so we didn't get as much accomplished as we would have hoped. We underestimated the amount of effort that went into the project's creation. Over the course of the project two team members left. The first had squandered our time by leaving us without saying anything. Moreover, we feel like this hackathon made us better developers as we feel like we took on an overwhelming task for our skill level and accomplished good results.\nAccomplishments that we're proud of\nWe are happy of having developed the project's front end, prototyped back end functionalities, and created business models from the ground up in just a few hours! We pushed past our comfort zone and used technologies that were new to us. It was a great learning experience since everyone in the group was able to learn something new.\nWhat we learned\nThis hackathon was a tremendous learning opportunity. It opened my eyes to the challenges of developing a website in few hours. We learned Js and Angular JS API , Google maps API as well as business model development & most significantly teamwork!\nWhat's next for Campus Buddy\nTo allow messaging within the app so people have a secure and private outlet to communicate with others on how to move from one place to another.\nAllow students to enter their schedules to help facilitate better ride sharing.\nAdd Paypal/GooglePay/Skrill integration to allow riders to tip drivers.\nUtilize Google Maps API to match users who fit within a radius of the same origin/destination.\nFor rider and driver authentication, use Google Vision AI to recognise the driver's automobile and licence plate.\nWe would like to expand our services to provide books, utilities sharing on campus.", "link": "https://devpost.com/software/campus-buddy-klrc2w", "origin": "Devpost", "suborigin": "Devpost", "result": true, "Selector": "rider", "selectorShort": "rider", "MarkedSent": "inspiration\nas universities gradually reopen following the pandemic.the number of students commuting to campus grows, causing traffic and parking space congestion & concerning carbon emissions levels. so here at campusbuddy we encourage ride-sharing where students can compare their progress to that their peers by following their scoreboard, which comes with additional perks of free rides !\nwhat it does\nstudents can register as a driver or a -----> rider !!!  on campusbuddy, which connects them to ride share.\nit pairs students with similar schedules who live nearby to save campus parking and pollution.\nevery time a rider takes a ride, their score on the scoreboard is increased.\na rider receives a free ride if they ride share more than four times per week.\nhow we built it\nhtml/css/js/angularjs/googlemaps & canva is used to present and prototype back-end functionality, as well as entity relationship diagrams\nchallenges we ran into\nwe didn't have a lot of time to work on the project, so we didn't get as much accomplished as we would have hoped. we underestimated the amount of effort that went into the project's creation. over the course of the project two team members left. the first had squandered our time by leaving us without saying anything. moreover, we feel like this hackathon made us better developers as we feel like we took on an overwhelming task for our skill level and accomplished good results.\naccomplishments that we're proud of\nwe are happy of having developed the project's front end, prototyped back end functionalities, and created business models from the ground up in just a few hours! we pushed past our comfort zone and used technologies that were new to us. it was a great learning experience since everyone in the group was able to learn something new.\nwhat we learned\nthis hackathon was a tremendous learning opportunity. it opened my eyes to the challenges of developing a website in few hours. we learned js and angular js api , google maps api as well as business model development & most significantly teamwork!\nwhat's next for campus buddy\nto allow messaging within the app so people have a secure and private outlet to communicate with others on how to move from one place to another.\nallow students to enter their schedules to help facilitate better ride sharing.\nadd paypal/googlepay/skrill integration to allow riders to tip drivers.\nutilize google maps api to match users who fit within a radius of the same origin/destination.\nfor rider and driver authentication, use google vision ai to recognise the driver's automobile and licence plate.\nwe would like to expand our services to provide books, utilities sharing on campus.", "sortedWord": "None", "removed": "Nan", "score": 0, "comments": 0, "media": null, "medialink": null, "identifyer": 59505323}, {"Unnamed: 0": 5411, "autor": "Drive(H)er - Safe Pooling App", "date": null, "content": "Inspiration\nFemale travelers have very different issues and certainly very different risk-management patterns than male travelers might have. Gone are the days of reliance on men for commuting! Females will be driving for females, not as an obligation but to empower each other\u2019s role as students, professionals, or just a woman. Our idea calls for uniting unorganized female carpooling communities on social media platforms and to set them formally for easy usage.\nRecent sexual harassment allegations \u2014 and past incidents of sexual assault by drivers \u2014 have presented challenges for companies like Careem, Uber. Meanwhile, this can be launched with hopes of opening up the industry to more women where they can travel on their own, with females, alongside earning a few bucks.\nProblems\nHarassment and rape cases.\nCollege/University dropouts: no reliable conveyance.\nLosing Job opportunities: Commuting to farfetched areas is costly.\nAll over the place carpooling requests (on social media groups).\nIf the unmoderated, possibility of spamming eg: Ads.\nNo prompt notifications of females commuting in the same areas.\nSharing ride track on public platforms/groups is unsafe for females.\nNo proper two-way feedback and review system.\nWhat it does\nIn this app, we aim to make ride-hailing safe for women. The app is broken down into two major female-centric functionalities:\nCorporate van service and tracking facility\nSafe car-pooling\nFemales can register themselves either as a rider or as a traveler. A user can post their timings and location they\u2019ll leave from and the location they want to reach.\nThe features include accepting and posting ride requests(where relevant riders will get notified), tracking, SOS alert generation in case of emergency, 3-tier connections(like linked-in), building a community, 2-way feedback, and rating system, and AI-based FR & gender detection to authenticate the rider before creating a request on app. The cost will be calculated according to the distance covered and will be split between the number of people registered for the ride (including the driver). For making sure that only female users have signed up at the app, they'll have to enter their CNIC number and their gender will be further confirmed by an AI-powered facial recognition algorithm. Additionally, we plan to extend the app with a corporate van service for female commuters.\nThe form that we used for collecting user requirements/needs : click here\nSelling Features\nAlways travel with a female co-passenger.\nAI-powered security authentication when new user signs up, additionally taking the CNIC# as an additional field.\nSafest way to commute with like-minded people.\nIn case of an emergency, send SOS alerts to your contacts.\nNotify your family and friends while traveling on the route to your Home/Office.\nTravel with 3 tier verified carpool buddies.\nNot reliant on more than 1 party: Doesn\u2019t get un-operational in uncertain times.\nLink to our pitch: click here\nAccomplishments that we're proud of\nBeing able to design and brainstorm the user journey and make the refined prototype. Dockerize the app and build the whole backend structure. Pushing our limits to sit and pull this idea off and covering a number of different aspects.\nChallenges we ran into\nWe were being able to scale up the concept from just a random problem to a big prototype. All of us had different roles, and each offered different insights and approaches to the initial idea that we couldn\u2019t have thought of. Aligning everyone on the same page was a great achievement and then it was also a challenge to assign tasks out on. Not being in the same room meant we had to just absolutely nail the planning. That bit was the trickiest and was coupled by our constraint against the timeline.\nWhat's next for Drive(H)ers\nOur Business Model includes the following future Innovations:\nSocial campaigns planned to train more females to learn to drive and become more independent.\nMaps marking places where there were reports of harassment in the city so that the pool provider and the rider know how safe it is to take those routes. Alternate route suggestions for such routes!\nSome benefits for car owners can be added, i.e:\nSharing the vacant seat and earning some points.\nRedeem your points to Re-fuel your car.\nAI algorithm can be further optimized for transgenders, and Bias to be removed/improved.\nVan services with corporate packages can be launched", "link": "https://devpost.com/software/drive-h-er-safe-pooling-app", "origin": "Devpost", "suborigin": "Devpost", "result": true, "Selector": "rider", "selectorShort": "rider", "MarkedSent": "inspiration\nfemale travelers have very different issues and certainly very different risk-management patterns than male travelers might have. gone are the days of reliance on men for commuting! females will be driving for females, not as an obligation but to empower each other\u2019s role as students, professionals, or just a woman. our idea calls for uniting unorganized female carpooling communities on social media platforms and to set them formally for easy usage.\nrecent sexual harassment allegations \u2014 and past incidents of sexual assault by drivers \u2014 have presented challenges for companies like careem, uber. meanwhile, this can be launched with hopes of opening up the industry to more women where they can travel on their own, with females, alongside earning a few bucks.\nproblems\nharassment and rape cases.\ncollege/university dropouts: no reliable conveyance.\nlosing job opportunities: commuting to farfetched areas is costly.\nall over the place carpooling requests (on social media groups).\nif the unmoderated, possibility of spamming eg: ads.\nno prompt notifications of females commuting in the same areas.\nsharing ride track on public platforms/groups is unsafe for females.\nno proper two-way feedback and review system.\nwhat it does\nin this app, we aim to make ride-hailing safe for women. the app is broken down into two major female-centric functionalities:\ncorporate van service and tracking facility\nsafe car-pooling\nfemales can register themselves either as a -----> rider !!!  or as a traveler. a user can post their timings and location they\u2019ll leave from and the location they want to reach.\nthe features include accepting and posting ride requests(where relevant riders will get notified), tracking, sos alert generation in case of emergency, 3-tier connections(like linked-in), building a community, 2-way feedback, and rating system, and ai-based fr & gender detection to authenticate the rider before creating a request on app. the cost will be calculated according to the distance covered and will be split between the number of people registered for the ride (including the driver). for making sure that only female users have signed up at the app, they'll have to enter their cnic number and their gender will be further confirmed by an ai-powered facial recognition algorithm. additionally, we plan to extend the app with a corporate van service for female commuters.\nthe form that we used for collecting user requirements/needs : click here\nselling features\nalways travel with a female co-passenger.\nai-powered security authentication when new user signs up, additionally taking the cnic# as an additional field.\nsafest way to commute with like-minded people.\nin case of an emergency, send sos alerts to your contacts.\nnotify your family and friends while traveling on the route to your home/office.\ntravel with 3 tier verified carpool buddies.\nnot reliant on more than 1 party: doesn\u2019t get un-operational in uncertain times.\nlink to our pitch: click here\naccomplishments that we're proud of\nbeing able to design and brainstorm the user journey and make the refined prototype. dockerize the app and build the whole backend structure. pushing our limits to sit and pull this idea off and covering a number of different aspects.\nchallenges we ran into\nwe were being able to scale up the concept from just a random problem to a big prototype. all of us had different roles, and each offered different insights and approaches to the initial idea that we couldn\u2019t have thought of. aligning everyone on the same page was a great achievement and then it was also a challenge to assign tasks out on. not being in the same room meant we had to just absolutely nail the planning. that bit was the trickiest and was coupled by our constraint against the timeline.\nwhat's next for drive(h)ers\nour business model includes the following future innovations:\nsocial campaigns planned to train more females to learn to drive and become more independent.\nmaps marking places where there were reports of harassment in the city so that the pool provider and the rider know how safe it is to take those routes. alternate route suggestions for such routes!\nsome benefits for car owners can be added, i.e:\nsharing the vacant seat and earning some points.\nredeem your points to re-fuel your car.\nai algorithm can be further optimized for transgenders, and bias to be removed/improved.\nvan services with corporate packages can be launched", "sortedWord": "None", "removed": "Nan", "score": 0, "comments": 0, "media": null, "medialink": null, "identifyer": 59505411}, {"Unnamed: 0": 5655, "autor": "[SKIP UNFINISHED]Uber Travel", "date": null, "content": "Inspiration\nAll of us love going on vacation, however, often the process of getting to your desired destination is stressful and depending on where you are - a hassle. From the airport, you have to plan out how to get transport to your hotel following that to your hotel to popular destinations spots in the area or how to get to excursions that are hours away from you.\nWhat it does\nUber Travel is a travel app where uber customers can plan to have their transportation arranged for ( hotel pickup, all their vacation spots, and local excursions.\nHow we built it\nThe front end of the app was built in react-native & javascript and is cross-platform ( although currently built Android & run on Android since i don't have a Mac to build on ios) . For the backend, i used Uber Rider API to be able to request rides within the app.\nChallenges we ran into\nInitially i had a challenge setting up my environment for a react native app. I kept on running into errors for versions and then my android application kept crashing without any error giving me feedback. I overcame that by manually searching the logcat files and upgrading to the appropriate version\nAccomplishments that we're proud of\nN/A\nWhat we learned\nHow to make my first mobile application in react native , route pages and etc..\nHow to integrate Uber's API into my app\nHow to create a login system\nClickable Prototype in Figma\nWhat's next for Uber Travel", "link": "https://devpost.com/software/uber-travel", "origin": "Devpost", "suborigin": "Devpost", "result": true, "Selector": "rider", "selectorShort": "rider", "MarkedSent": "inspiration\nall of us love going on vacation, however, often the process of getting to your desired destination is stressful and depending on where you are - a hassle. from the airport, you have to plan out how to get transport to your hotel following that to your hotel to popular destinations spots in the area or how to get to excursions that are hours away from you.\nwhat it does\nuber travel is a travel app where uber customers can plan to have their transportation arranged for ( hotel pickup, all their vacation spots, and local excursions.\nhow we built it\nthe front end of the app was built in react-native & javascript and is cross-platform ( although currently built android & run on android since i don't have a mac to build on ios) . for the backend, i used uber -----> rider !!!  api to be able to request rides within the app.\nchallenges we ran into\ninitially i had a challenge setting up my environment for a react native app. i kept on running into errors for versions and then my android application kept crashing without any error giving me feedback. i overcame that by manually searching the logcat files and upgrading to the appropriate version\naccomplishments that we're proud of\nn/a\nwhat we learned\nhow to make my first mobile application in react native , route pages and etc..\nhow to integrate uber's api into my app\nhow to create a login system\nclickable prototype in figma\nwhat's next for uber travel", "sortedWord": "None", "removed": "Nan", "score": 0, "comments": 0, "media": null, "medialink": null, "identifyer": 59505655}, {"Unnamed: 0": 6351, "autor": "HitchHike", "date": null, "content": "Inspiration\nWe are both college students who came into Georgia Tech as out of state students. One of the greatest challenges that we face is transportation, especially when we need to get out of campus. Services such as Uber can be very costly for an individual, and public transportation can be dangerous at nighttime. For this reason we were motivated to find a solution that would allow anyone, such as students, to easily find a carpool to get to locations without a car. We also wanted to make a solution that could connect drivers to other potential riders, so that such drivers would not be forced to drive alone. We were further motivated when we found that a great system for carpools allows the users to work towards decreasing carbon emissions, as less cars are used overall when people carpool.\nWhat it does\nThe program has two primary functions: finding drivers and finding riders. After a user makes an account, the user can navigate to the search tab, in which they can search for car trips that drivers have already entered (indicating that they are going to a certain location). In the search, a driver can list their starting location (or general starting location) as well as a price for riding in the car. If a user is interested in a ride, they can check for more details such as contact information of the driver, date of the trip, and amount of people the driver can take. From the \"further details\" page, a user can choose to accept the trip, which will then send the information to the account of the driver, where the driver can choose to accept or decline the rider. If the driver accepts the rider, the driver and rider will then be able to view each others' contact information (an email) to set up a ride. As for drivers, after logging in, they can set up a ride and enter in information for where they are going, as well as parameters such as price, amount of riders, starting location, and event they are going to, and the ride will then be available for riders to search. All users have the ability to set up trips, as well as be riders in others if they choose to do so. Each user has a tab for rides they have been accepted in by the driver, as well as a list of trips that they will be driving with others.\nHow we built it\nThe web app is comprised of three main components: HTML/CSS and JS for the front-end, and python for the backed. The main purpose of the HTML and JS was to collect and prepare the data needed to be run through algorithms in the back end. This was completed by setting up pop up boxes that collect the information such as searches, usernames, and trip information, which are then formatted into JSON and sent as a API request to the back end. We also programmed the JS to detect if emails entered are real, as well as preventing empty text boxes. We decided to put a focus on good HTML/CSS, as we value simplicity as a part of this web app. We believe that the app's effectiveness also relies on how easy it is for the user to use, as well as look at. For this reason, we made a UI that is simple to understand and interact with. The backend is primarily written in flask, a python web framework. In the search function, we used an stop word algorithm to optimize result relevance. This means that users will not have to deal with irrelevant results. We implemented security through password hashing and secure user sessions. By using a web server, users can interact simultaneously and their data is saved efficiently on the server. Finally, the back end operates efficiently due to a lack of HTML processing or expensive backend operations.\nChallenges we ran into\nAs this was our first hackathon, one of the greatest challenges we faced was coming up with a viable project in which we could find an effective and efficient solution using the skills that we currently possess. Our original ideas were very ambitious, however, we did not possess the skills to develop such solutions in the time allotted, and as a team of two, we needed to make sure we didn't take on too many tasks that could not be finished. We attempted to use backend databases, but found it too cumbersome with our current expertise. We were also limited by our lack of knowledge of git, and other programming languages. Ultimately, we decided to capitalize on the strengths of our team, and create a project in which we could give ourselves a healthy challenge. In order to do this, we spent a good deal of time mocking up ideas, and brainstorming. We decided on the project, when we all agreed.\nAccomplishments that we're proud of\nFirst and foremost, we are thrilled to have finished our first hackathon ever with a complete project. We were able to capitalize on each other's strengths, and build a product that we can stand behind. We are also proud to have been able to successfully implement a front end with a backend, and allow the front end to be simple. We put a great deal of work into our backend, and are proud that we were able to write algorithms that could create a searching system. As newcomers to the field of computer science, amidst having to learn how things such as APISs and inter-language communication works, we were able to continue working through hardships that we faced in the making of this project.\nWhat we learned\nOne of the most valuable things we learned is teamwork. We learned quickly that projects on such a scale are very difficult to work on alone, and we learned that effective communication with teammates allows a product much more useful than any one that can be made alone. We also learned how to create a software project from start to finish, using services such as github. We also learned how web servers work, and how to use them in our own projects. Lastly, we learned the importance of storing data securely, and how to retrieve such data when needed.\nWhat's next for HitchHiker\nWe have several things to implement in the future of HitchHike, some of the future features we plan to include are as follows:\nUsing Google maps to modify search results based on proximity\nCreating a system for two-factor authentication for accounts that are set up\nA verification system in which a user can take a photo of event tickets to prove that they are going on a trip that is entered\nA in-site chatting system for drivers and riders to interact", "link": "https://devpost.com/software/hitchhike", "origin": "Devpost", "suborigin": "Devpost", "result": true, "Selector": "rider", "selectorShort": "rider", "MarkedSent": "inspiration\nwe are both college students who came into georgia tech as out of state students. one of the greatest challenges that we face is transportation, especially when we need to get out of campus. services such as uber can be very costly for an individual, and public transportation can be dangerous at nighttime. for this reason we were motivated to find a solution that would allow anyone, such as students, to easily find a carpool to get to locations without a car. we also wanted to make a solution that could connect drivers to other potential riders, so that such drivers would not be forced to drive alone. we were further motivated when we found that a great system for carpools allows the users to work towards decreasing carbon emissions, as less cars are used overall when people carpool.\nwhat it does\nthe program has two primary functions: finding drivers and finding riders. after a user makes an account, the user can navigate to the search tab, in which they can search for car trips that drivers have already entered (indicating that they are going to a certain location). in the search, a driver can list their starting location (or general starting location) as well as a price for riding in the car. if a user is interested in a ride, they can check for more details such as contact information of the driver, date of the trip, and amount of people the driver can take. from the \"further details\" page, a user can choose to accept the trip, which will then send the information to the account of the driver, where the driver can choose to accept or decline the -----> rider !!! . if the driver accepts the rider, the driver and rider will then be able to view each others' contact information (an email) to set up a ride. as for drivers, after logging in, they can set up a ride and enter in information for where they are going, as well as parameters such as price, amount of riders, starting location, and event they are going to, and the ride will then be available for riders to search. all users have the ability to set up trips, as well as be riders in others if they choose to do so. each user has a tab for rides they have been accepted in by the driver, as well as a list of trips that they will be driving with others.\nhow we built it\nthe web app is comprised of three main components: html/css and js for the front-end, and python for the backed. the main purpose of the html and js was to collect and prepare the data needed to be run through algorithms in the back end. this was completed by setting up pop up boxes that collect the information such as searches, usernames, and trip information, which are then formatted into json and sent as a api request to the back end. we also programmed the js to detect if emails entered are real, as well as preventing empty text boxes. we decided to put a focus on good html/css, as we value simplicity as a part of this web app. we believe that the app's effectiveness also relies on how easy it is for the user to use, as well as look at. for this reason, we made a ui that is simple to understand and interact with. the backend is primarily written in flask, a python web framework. in the search function, we used an stop word algorithm to optimize result relevance. this means that users will not have to deal with irrelevant results. we implemented security through password hashing and secure user sessions. by using a web server, users can interact simultaneously and their data is saved efficiently on the server. finally, the back end operates efficiently due to a lack of html processing or expensive backend operations.\nchallenges we ran into\nas this was our first hackathon, one of the greatest challenges we faced was coming up with a viable project in which we could find an effective and efficient solution using the skills that we currently possess. our original ideas were very ambitious, however, we did not possess the skills to develop such solutions in the time allotted, and as a team of two, we needed to make sure we didn't take on too many tasks that could not be finished. we attempted to use backend databases, but found it too cumbersome with our current expertise. we were also limited by our lack of knowledge of git, and other programming languages. ultimately, we decided to capitalize on the strengths of our team, and create a project in which we could give ourselves a healthy challenge. in order to do this, we spent a good deal of time mocking up ideas, and brainstorming. we decided on the project, when we all agreed.\naccomplishments that we're proud of\nfirst and foremost, we are thrilled to have finished our first hackathon ever with a complete project. we were able to capitalize on each other's strengths, and build a product that we can stand behind. we are also proud to have been able to successfully implement a front end with a backend, and allow the front end to be simple. we put a great deal of work into our backend, and are proud that we were able to write algorithms that could create a searching system. as newcomers to the field of computer science, amidst having to learn how things such as apiss and inter-language communication works, we were able to continue working through hardships that we faced in the making of this project.\nwhat we learned\none of the most valuable things we learned is teamwork. we learned quickly that projects on such a scale are very difficult to work on alone, and we learned that effective communication with teammates allows a product much more useful than any one that can be made alone. we also learned how to create a software project from start to finish, using services such as github. we also learned how web servers work, and how to use them in our own projects. lastly, we learned the importance of storing data securely, and how to retrieve such data when needed.\nwhat's next for hitchhiker\nwe have several things to implement in the future of hitchhike, some of the future features we plan to include are as follows:\nusing google maps to modify search results based on proximity\ncreating a system for two-factor authentication for accounts that are set up\na verification system in which a user can take a photo of event tickets to prove that they are going on a trip that is entered\na in-site chatting system for drivers and riders to interact", "sortedWord": "None", "removed": "Nan", "score": 0, "comments": 0, "media": null, "medialink": null, "identifyer": 59506351}], "name": "riderDevpost"}