{"interestingcomments": [{"Unnamed: 0": 8656, "autor": "11010001101001", "date": 1611966644000, "content": "Does ThingsBoard Use a Multi-Tenant Database Design? /!/ I like how assets in ThingsBoard are modeled as a general tree with an arbitrary set of relations, but I am not sure about how that performs at scale in a relational DBMS. I viewed the data model used be CE and it appears there is a single assets table and single relations table for those assets.\n\nDoes anyone know if ThingsBoard uses a multi-tenant database design and how it performs at scale given the amount of work the DB must do to construct the asset model? Essentially all transient relations must be found e.g. A contains B contains C contains D.\n\nhttps://thingsboard.io/docs/user-guide/ui/assets/", "link": "https://www.reddit.com/r/IOT/comments/l8956j/does_thingsboard_use_a_multitenant_database_design/", "origin": "Reddit", "suborigin": "IOT", "result": true, "Selector": "tree", "selectorShort": "tree", "MarkedSent": "does thingsboard use a multi-tenant database design? /!/ i like how assets in thingsboard are modeled as a general -----> tree !!!  with an arbitrary set of relations, but i am not sure about how that performs at scale in a relational dbms. i viewed the data model used be ce and it appears there is a single assets table and single relations table for those assets.\n\ndoes anyone know if thingsboard uses a multi-tenant database design and how it performs at scale given the amount of work the db must do to construct the asset model? essentially all transient relations must be found e.g. a contains b contains c contains d.\n\nhttps://thingsboard.io/docs/user-guide/ui/assets/", "sortedWord": "None", "removed": null, "score": 1, "comments": 1, "media": "self", "medialink": "https://www.reddit.com/r/IOT/comments/l8956j/does_thingsboard_use_a_multitenant_database_design/", "identifyer": 3514140, "year": "2021"}], "name": "treeIOT2021"}