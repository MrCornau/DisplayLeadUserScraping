{"interestingcomments": [{"Unnamed: 0": 1727, "autor": 707, "date": null, "content": "A ROS-based NDT localizer with multi-sensor state estimation\nThis repo is a ROS based multi-sensor robot localisation. An NDT localizer is loosely-coupled with wheeled odometry and IMU for continuous global localization within a pre-build point cloud map.\nPrerequisites\nYou will need the robot_localization package. The configurations of multi-sensors of our robot are detailed in cfgs/global_ekf.yaml and cfgs/local_ekf.yaml.\nLocalization in a pointcloud map(pcd)\nA demo video on CourtYard dataset:\nHow to use\nBuild in your ros workspace\nclone this repo in your ros workspace/src/, and then catkin_make (or catkin build):\ncd catkin_ws/src/\ngit clone https://github.com/FAIRSpace-AdMaLL/ndt_localizer.git\ncd ..\ncatkin_make\nGet a pcd map\nYou need a point cloud map (pcd format) for localization. You can get a HD point cloud map from any HD map supplier, or you can make one yourself (of course, the accuracy will not be as high as the HD map).\nWe use our offline version of lio-sam to build the point cloud map: https://github.com/FAIRSpace-AdMaLL/liosam_mapper\nPreviously-generated maps can be downloaded from here The court_yard data (rosbags) for mapping or testing ndt_localizer can be downloaded here: Court Yard Data The beach data (rosbags and previously-generated maps) can be downloaded here: Beach Data\nSetup configuration\nConfig map loader\nMove your map pcd file (.pcd) to the map folder inside this project (ndt_localizer/map), change the pcd_path in map_loader.launch to you pcd path, for example:\n<arg name=\"pcd_path\" default=\"$(find ndt_localizer)/map/court_yard_map.pcd\"/>\n, then in ndt_localizer.launch modify the trajectory path (as a height map for initialization):\n<arg name=\"path_file\" default=\"$(find ndt_localizer)/map/court_yard_map.csv\" doc=\"Mapping trajectory as height map\" />\nYou also need to configure the submap parameters:\n<arg name=\"submap_size_xy\" default=\"50.0\" />\n<arg name=\"submap_size_z\" default=\"20.0\" />\n<arg name=\"map_switch_thres\" default=\"25.0\" />\nConfig point cloud downsample\nConfig your Lidar point cloud topic in launch/points_downsample.launch:\n<arg name=\"points_topic\" default=\"/os_cloud_node/points\" />\nIf your Lidar data is sparse (like VLP-16), you need to config smaller leaf_size in launch/points_downsample.launch like 1.0. If your lidar point cloud is dense (VLP-32, Hesai Pander40P, HDL-64 ect.), keep leaf_size as 2.0.\nConfig static tf\nThere are a static transform from /world to /map:\n<node pkg=\"tf2_ros\" type=\"static_transform_publisher\" name=\"world_to_map\" args=\"0 0 0 0 0 0 map world\" />\nConfig ndt localizer\nYou can config NDT params in ndt_localizer.launch. Tha main params of NDT algorithm is:\n<arg name=\"trans_epsilon\" default=\"0.05\" doc=\"The maximum difference between two consecutive transformations in order to consider convergence\" />\n<arg name=\"step_size\" default=\"0.1\" doc=\"The newton line search maximum step length\" />\n<arg name=\"resolution\" default=\"3.0\" doc=\"The ND voxel grid resolution\" />\n<arg name=\"max_iterations\" default=\"50\" doc=\"The number of iterations required to calculate alignment\" />\n<arg name=\"converged_param_transform_probability\" default=\"3.0\" doc=\"\" />\nThese default params work nice with 64 and 32 lidar.\nRun the localizer\nOnce you get your pcd map and configuration ready, run the localizer with:\ncd catkin_ws\nsource devel/setup.bash\nroslaunch ndt_localizer ndt_localizer.launch\nWait a few seconds for the map to load, then you can see your pcd map in rviz.\nGive a initial pose of current vehicle with 2D Pose Estimate in the rviz.\nThis operation will send a init pose to topic /initialpose. Then you will see the localization result:\nThen, play the rosbag in other terminal (e.g. rosbag play --clock court_yard_wed_repeat_night_2021-03-03-19-07-18.bag).\nThe robot will start localization:\nThe final localization msg will send to /odometry/filtered/global by a multi-sensor state estimation using wheeled odometry, IMU and lidar localisation.\nThe localizer also publish a tf of base_link to map:\n---\ntransforms:\n-\nheader:\nseq: 0\nstamp:\nsecs: 1566536121\nnsecs: 251423898\nframe_id: \"map\"\nchild_frame_id: \"base_link\"\ntransform:\ntranslation:\nx: -94.8022766113\ny: 544.097351074\nz: 42.5747337341\nrotation:\nx: 0.0243843578881\ny: 0.0533175268768\nz: -0.702325920272\nw: 0.709437048124\nAcknowledgement\nThanks for AdamShan's autoware_ros implementation https://github.com/AbangLZU/ndt_localizer.git.", "link": "https://github.com/FAIRSpace-AdMaLL/ndt_localizer", "origin": "Github", "suborigin": "robotics", "result": true, "Selector": "yard", "selectorShort": "yard", "MarkedSent": "a ros-based ndt localizer with multi-sensor state estimation\nthis repo is a ros based multi-sensor robot localisation. an ndt localizer is loosely-coupled with wheeled odometry and imu for continuous global localization within a pre-build point cloud map.\nprerequisites\nyou will need the robot_localization package. the configurations of multi-sensors of our robot are detailed in cfgs/global_ekf.yaml and cfgs/local_ekf.yaml.\nlocalization in a pointcloud map(pcd)\na demo video on courtyard dataset:\nhow to use\nbuild in your ros workspace\nclone this repo in your ros workspace/src/, and then catkin_make (or catkin build):\ncd catkin_ws/src/\ngit clone https://github.com/fairspace-admall/ndt_localizer.git\ncd ..\ncatkin_make\nget a pcd map\nyou need a point cloud map (pcd format) for localization. you can get a hd point cloud map from any hd map supplier, or you can make one yourself (of course, the accuracy will not be as high as the hd map).\nwe use our offline version of lio-sam to build the point cloud map: https://github.com/fairspace-admall/liosam_mapper\npreviously-generated maps can be downloaded from here the court_yard data (rosbags) for mapping or testing ndt_localizer can be downloaded here: court -----> yard !!!  data the beach data (rosbags and previously-generated maps) can be downloaded here: beach data\nsetup configuration\nconfig map loader\nmove your map pcd file (.pcd) to the map folder inside this project (ndt_localizer/map), change the pcd_path in map_loader.launch to you pcd path, for example:\n<arg name=\"pcd_path\" default=\"$(find ndt_localizer)/map/court_yard_map.pcd\"/>\n, then in ndt_localizer.launch modify the trajectory path (as a height map for initialization):\n<arg name=\"path_file\" default=\"$(find ndt_localizer)/map/court_yard_map.csv\" doc=\"mapping trajectory as height map\" />\nyou also need to configure the submap parameters:\n<arg name=\"submap_size_xy\" default=\"50.0\" />\n<arg name=\"submap_size_z\" default=\"20.0\" />\n<arg name=\"map_switch_thres\" default=\"25.0\" />\nconfig point cloud downsample\nconfig your lidar point cloud topic in launch/points_downsample.launch:\n<arg name=\"points_topic\" default=\"/os_cloud_node/points\" />\nif your lidar data is sparse (like vlp-16), you need to config smaller leaf_size in launch/points_downsample.launch like 1.0. if your lidar point cloud is dense (vlp-32, hesai pander40p, hdl-64 ect.), keep leaf_size as 2.0.\nconfig static tf\nthere are a static transform from /world to /map:\n<node pkg=\"tf2_ros\" type=\"static_transform_publisher\" name=\"world_to_map\" args=\"0 0 0 0 0 0 map world\" />\nconfig ndt localizer\nyou can config ndt params in ndt_localizer.launch. tha main params of ndt algorithm is:\n<arg name=\"trans_epsilon\" default=\"0.05\" doc=\"the maximum difference between two consecutive transformations in order to consider convergence\" />\n<arg name=\"step_size\" default=\"0.1\" doc=\"the newton line search maximum step length\" />\n<arg name=\"resolution\" default=\"3.0\" doc=\"the nd voxel grid resolution\" />\n<arg name=\"max_iterations\" default=\"50\" doc=\"the number of iterations required to calculate alignment\" />\n<arg name=\"converged_param_transform_probability\" default=\"3.0\" doc=\"\" />\nthese default params work nice with 64 and 32 lidar.\nrun the localizer\nonce you get your pcd map and configuration ready, run the localizer with:\ncd catkin_ws\nsource devel/setup.bash\nroslaunch ndt_localizer ndt_localizer.launch\nwait a few seconds for the map to load, then you can see your pcd map in rviz.\ngive a initial pose of current vehicle with 2d pose estimate in the rviz.\nthis operation will send a init pose to topic /initialpose. then you will see the localization result:\nthen, play the rosbag in other terminal (e.g. rosbag play --clock court_yard_wed_repeat_night_2021-03-03-19-07-18.bag).\nthe robot will start localization:\nthe final localization msg will send to /odometry/filtered/global by a multi-sensor state estimation using wheeled odometry, imu and lidar localisation.\nthe localizer also publish a tf of base_link to map:\n---\ntransforms:\n-\nheader:\nseq: 0\nstamp:\nsecs: 1566536121\nnsecs: 251423898\nframe_id: \"map\"\nchild_frame_id: \"base_link\"\ntransform:\ntranslation:\nx: -94.8022766113\ny: 544.097351074\nz: 42.5747337341\nrotation:\nx: 0.0243843578881\ny: 0.0533175268768\nz: -0.702325920272\nw: 0.709437048124\nacknowledgement\nthanks for adamshan's autoware_ros implementation https://github.com/abanglzu/ndt_localizer.git.", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000707, "year": null}], "name": "yardrobotics"}