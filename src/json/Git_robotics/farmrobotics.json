{"interestingcomments": [{"Unnamed: 0": 1505, "autor": 485, "date": null, "content": "ZeroSim\nZeroSim\nOverview\nAPI Documentation\nGetting Started\nVideo Tutorials\nRecommended System\nSetting up a new Unity Project\nGetting ZeroSim ROS Docker Container\nRunning TurtleBot Test Scene\nUsing RViz for Turtlebot\nRunning Universal Robot UR10 Arm Test Scene with MoveIt!\nRunning Image Segmentation Test\nExport URDF\nImport URDF\nZeroSim is a robotics simulation engine built on the easy to use Unity 3D development platform and the power of the Robotics Operating System (ROS). ZeroSim is designed for ease of use and rapid development of all sorts of robotics and simulation -- from warehouses and industrial settings, to farming and outdoors -- from robotic arms to ground and drone based mobile robots.\nZeroSim is a project developed over several years by FS Studios for the rapid development of all sorts of robotic simulation projects for various clients, from robotic arms to mobile robots.\nWe are releasing ZeroSim as open source to support the community of roboticist and software engineers that have supported us over the decades. We are in active development and welcome all feature requests, bug reports, and pull requests.\nOverview\nZeroSim provides a multitude of tools for building robots and environments in Unity to interface with ROS. We strive to provide the same functionality and ROS interfaces of Gazebo. Including:\nDynamics simulation using the latest PhysX 4.x integrated in Unity.\nHinge, ball, linear and fixed joints.\nAdvanced 3D Rendering, including the latest realtime ray tracing technology.\nSensors:\n2D LIDAR -> ROS LaserScan message.\n3D LIDAR -> ROS PointCloud2\nColor camera -> ROS Image and ROS CameraInfo message.\nColor + depth camera -> ROS Image and ROS CameraInfo message.\nStereo camera -> ROS Image and ROS CameraInfo message.\nIMU -> ROS Imu message\nMagnetometer -> ROS MagneticField message.\nContact switch\nAltimeter\nReady to use ROS standard controllers and plugins:\nDifferential drive. Controlled via standard ROS Twist message.\nRobotic arm controller via the ROS FollowJointTrajectory Action Controller Interface allowing MoveIt to connect seamlessly with ZeroSim.\nROS TF publisher.\nROS JointState publisher.\nFull ROS messaging communications layers API.\nMany premade standard ROS messages\nSubscribe and publish\nAction Servers\nFast and efficient message encoding using ROS Bridge and BSON over TCP.\nParameter server\nReady to run prebuilt ROS Docker images available publically on DockerHub: https://hub.docker.com/r/zerodog/zerosim_ros_vnc\nMachine Learning tools:\nImage Segmentation for training semantic segmentation algorithms.\nURDF Import & Export\nROS2 support via ROS Bridge Suite (https://github.com/RobotWebTools/rosbridge_suite)\nCOMING SOON:\nConfigure and run Docker images within Unity Editor.\nSecure communications via WebSockets.\nDrone controller.\nAPI Documentation\nAPI Documentation\nGetting Started\nVideo Tutorials\nhttps://youtu.be/VJyvjJUfjv8\nRecommended System\nUbuntu 18.04 or 20.04 (may work on MacOS or Windows but currently untested)\nUnity 2020.x or greater\nGit LFS\nROS Melodic (ZeroSim provides a pre-built Docker container for ROS functionality https://hub.docker.com/r/zerodog/zerosim_ros_vnc)\nNote: ROS Melodic is our primary supported development environment, but ZeroSim has reportedly been able to run on Noetic and ROS2.\nSetting up a new Unity Project\nIn Unity Hub create a new Unity project using Unity 2020.x or later.\nAdd ZeroSim via Unity Packages:\nIMPORTANT: Make sure GIT LFS is installed on your system before continuing!\nUnity Menu Window -> Package Manager\nSelect the + dropdown:\nSelect Add Package From Git URL... and enter git@github.com:fsstudio-team/ZeroSimROSUnity.git. Note this can take upto a few minutes to update but you should see the following:\nImport the ZeroSim Samples by selecting the Samples Import button in the Package Manager:\nIMPORTANT the default Unity physics settings do not work well with a lot of simulations. It is very much recommended (required for probably most all simulations) to set the physics settings by opening the Unity menu Edit -> Project Settings... -> Physics and set the Default Solver Iterations to 30 and the Default Solver Velocity Iterations to 60.\nIMPORTANT the default Unity fixed timestep setting does not work well with a lot of simulions. It is very much recommended to set the Fixed Timestep setting by Edit -> Project Settings... -> Time to 0.005\nIf running Unity on Linux you want to avoid using OpenGL and use Vulkan, otherwise image based sensors may run slowly or not at all. To change to using Vulkan:\nIn the Unity Menu: Edit -> Project Settings...:\nUncheck Auto Graphics API for Linux and then under Graphics APIs for Linux set Vulkan ahead of OpenGL:\nGetting ZeroSim ROS Docker Container\nAvailable at https://hub.docker.com/r/zerodog/zerosim_ros_vnc or docker pull zerodog/zerosim_ros_vnc:latest\nRunning TurtleBot Test Scene\nNOTE: Order of operations is important. Especially starting the Docker before the Unity simulation.\nMake sure that the ZeroSim samples are installed as outlined above.\nMake sure that the ZeroSim Docker container above is installed.\nOpen the Turtlebot3_Waffle_test.scene\nLaunch the ZeroSim Docker via:\ndocker run -it --rm \\\n--publish=9090:9090 \\\n--publish=11311:11311 \\\n--publish=8083:8083 \\\n--publish=80:80 \\\n--publish=5678:5678 \\\n--name my_zerosim_vnc_docker \\\nzerodog/zerosim_ros_vnc:latest \\\nroslaunch zero_sim_ros basic_unity_editor.launch\nRun the ROS teleop in a seperate terminal by running:\ndocker exec -it my_zerosim_vnc_docker \\\nbash -c \"source devel/setup.bash ; rosrun turtlebot3_teleop turtlebot3_teleop_key\"\nIn the Unity editor press the \"Play\" button.\nThe Turtlebot can now be controlled via the w a s d keys in the ROS teleop console window:\nUsing RViz for Turtlebot\nThis will show visualizing the 2D LIDAR and ROS TF in RViz. This uses a VNC viewer to the ZeroSim ROS Docker container.\nStartup the Turtlebot Test Scene as detailed above.\nOpen a noVNC connection by:\nIn a browser open http://localhost:8083/vnc.html\nPress the \"Connect\" button.\nIn the VNC window press the LEFT mouse button and select \"Terminal\".\nIn the new terminal run rviz -d ./src/zero_sim_ros/rviz/turtlebot_viewer.rviz. RViz will start up with a 3D view with the LIDAR scanner visibile.\nRunning Universal Robot UR10 Arm Test Scene with MoveIt!\nNOTE: Order of operations is important. Especially starting the Docker before the Unity simulation.\nMake sure that the ZeroSim samples are installed as outlined above.\nMake sure that the ZeroSim Docker container above is installed.\nOpen the UniversalRobot_UR10_test.scene\nLaunch the ZeroSim Docker via:\ndocker run -it --rm \\\n--publish=9090:9090 \\\n--publish=11311:11311 \\\n--publish=8083:8083 \\\n--publish=80:80 \\\n--publish=5678:5678 \\\n--name my_zerosim_vnc_docker \\\nzerodog/zerosim_ros_vnc:latest \\\nroslaunch zero_sim_ros ur10_moveit.launch\nStart the UR10 test Scene by pressing the Play button.\nOpen a noVNC connection by:\nIn a browser open http://localhost:8083/vnc.html\nPress the \"Connect\" button.\nIn the noVNC window RViz will be setup with MoveIt\nYou can now to standard MoveIt! operations in RViz to control the UR10 arm\nRunning Image Segmentation Test\nMake sure that the ZeroSim samples are installed as outlined above.\nMake sure that the ZeroSim Docker container above is installed.\nOpen the ImageSegmentation_test.scene\nLaunch the ZeroSim Docker via:\ndocker run -it --rm \\\n--publish=9090:9090 \\\n--publish=11311:11311 \\\n--publish=8083:8083 \\\n--publish=80:80 \\\n--publish=5678:5678 \\\n--name my_zerosim_vnc_docker \\\nzerodog/zerosim_ros_vnc:latest \\\nroslaunch zero_sim_ros basic_unity_editor.launch\nStart the Image Segmentation Test Scene by pressing the Play button.\nOpen a noVNC connection by:\nIn a browser open http://localhost:8083/vnc.html\nPress the \"Connect\" button.\nIn the VNC window press the LEFT mouse button and select \"Terminal\".\nIn the new terminal run rqt_image_view /image/segmentation_image.\nOpen up a second terminal and run rqt_image_view /image/image_raw\nExport URDF\nMake sure that the ZeroSim samples are installed as outlined above.\nOpen scene the URDF_test.scene in the ZeroSim samples.\nSelect SimpleRobotArm in the scene hierarchy.\nSelect Export URDF in the root properties view.\nSelect the directory to export to.\nAn excellent online URDF viewer is available: https://gkjohnson.github.io/urdf-loaders/javascript/example/index.html Just drag and drop the files exported above.\nImport URDF\nRight click and select ZeroSim --> Import URDF...", "link": "https://github.com/fsstudio-team/ZeroSimROSUnity", "origin": "Github", "suborigin": "robotics", "result": true, "Selector": "farming", "selectorShort": "farm", "MarkedSent": "zerosim\nzerosim\noverview\napi documentation\ngetting started\nvideo tutorials\nrecommended system\nsetting up a new unity project\ngetting zerosim ros docker container\nrunning turtlebot test scene\nusing rviz for turtlebot\nrunning universal robot ur10 arm test scene with moveit!\nrunning image segmentation test\nexport urdf\nimport urdf\nzerosim is a robotics simulation engine built on the easy to use unity 3d development platform and the power of the robotics operating system (ros). zerosim is designed for ease of use and rapid development of all sorts of robotics and simulation -- from warehouses and industrial settings, to -----> farming !!!  and outdoors -- from robotic arms to ground and drone based mobile robots.\nzerosim is a project developed over several years by fs studios for the rapid development of all sorts of robotic simulation projects for various clients, from robotic arms to mobile robots.\nwe are releasing zerosim as open source to support the community of roboticist and software engineers that have supported us over the decades. we are in active development and welcome all feature requests, bug reports, and pull requests.\noverview\nzerosim provides a multitude of tools for building robots and environments in unity to interface with ros. we strive to provide the same functionality and ros interfaces of gazebo. including:\ndynamics simulation using the latest physx 4.x integrated in unity.\nhinge, ball, linear and fixed joints.\nadvanced 3d rendering, including the latest realtime ray tracing technology.\nsensors:\n2d lidar -> ros laserscan message.\n3d lidar -> ros pointcloud2\ncolor camera -> ros image and ros camerainfo message.\ncolor + depth camera -> ros image and ros camerainfo message.\nstereo camera -> ros image and ros camerainfo message.\nimu -> ros imu message\nmagnetometer -> ros magneticfield message.\ncontact switch\naltimeter\nready to use ros standard controllers and plugins:\ndifferential drive. controlled via standard ros twist message.\nrobotic arm controller via the ros followjointtrajectory action controller interface allowing moveit to connect seamlessly with zerosim.\nros tf publisher.\nros jointstate publisher.\nfull ros messaging communications layers api.\nmany premade standard ros messages\nsubscribe and publish\naction servers\nfast and efficient message encoding using ros bridge and bson over tcp.\nparameter server\nready to run prebuilt ros docker images available publically on dockerhub: https://hub.docker.com/r/zerodog/zerosim_ros_vnc\nmachine learning tools:\nimage segmentation for training semantic segmentation algorithms.\nurdf import & export\nros2 support via ros bridge suite (https://github.com/robotwebtools/rosbridge_suite)\ncoming soon:\nconfigure and run docker images within unity editor.\nsecure communications via websockets.\ndrone controller.\napi documentation\napi documentation\ngetting started\nvideo tutorials\nhttps://youtu.be/vjyvjjufjv8\nrecommended system\nubuntu 18.04 or 20.04 (may work on macos or windows but currently untested)\nunity 2020.x or greater\ngit lfs\nros melodic (zerosim provides a pre-built docker container for ros functionality https://hub.docker.com/r/zerodog/zerosim_ros_vnc)\nnote: ros melodic is our primary supported development environment, but zerosim has reportedly been able to run on noetic and ros2.\nsetting up a new unity project\nin unity hub create a new unity project using unity 2020.x or later.\nadd zerosim via unity packages:\nimportant: make sure git lfs is installed on your system before continuing!\nunity menu window -> package manager\nselect the + dropdown:\nselect add package from git url... and enter git@github.com:fsstudio-team/zerosimrosunity.git. note this can take upto a few minutes to update but you should see the following:\nimport the zerosim samples by selecting the samples import button in the package manager:\nimportant the default unity physics settings do not work well with a lot of simulations. it is very much recommended (required for probably most all simulations) to set the physics settings by opening the unity menu edit -> project settings... -> physics and set the default solver iterations to 30 and the default solver velocity iterations to 60.\nimportant the default unity fixed timestep setting does not work well with a lot of simulions. it is very much recommended to set the fixed timestep setting by edit -> project settings... -> time to 0.005\nif running unity on linux you want to avoid using opengl and use vulkan, otherwise image based sensors may run slowly or not at all. to change to using vulkan:\nin the unity menu: edit -> project settings...:\nuncheck auto graphics api for linux and then under graphics apis for linux set vulkan ahead of opengl:\ngetting zerosim ros docker container\navailable at https://hub.docker.com/r/zerodog/zerosim_ros_vnc or docker pull zerodog/zerosim_ros_vnc:latest\nrunning turtlebot test scene\nnote: order of operations is important. especially starting the docker before the unity simulation.\nmake sure that the zerosim samples are installed as outlined above.\nmake sure that the zerosim docker container above is installed.\nopen the turtlebot3_waffle_test.scene\nlaunch the zerosim docker via:\ndocker run -it --rm \\\n--publish=9090:9090 \\\n--publish=11311:11311 \\\n--publish=8083:8083 \\\n--publish=80:80 \\\n--publish=5678:5678 \\\n--name my_zerosim_vnc_docker \\\nzerodog/zerosim_ros_vnc:latest \\\nroslaunch zero_sim_ros basic_unity_editor.launch\nrun the ros teleop in a seperate terminal by running:\ndocker exec -it my_zerosim_vnc_docker \\\nbash -c \"source devel/setup.bash ; rosrun turtlebot3_teleop turtlebot3_teleop_key\"\nin the unity editor press the \"play\" button.\nthe turtlebot can now be controlled via the w a s d keys in the ros teleop console window:\nusing rviz for turtlebot\nthis will show visualizing the 2d lidar and ros tf in rviz. this uses a vnc viewer to the zerosim ros docker container.\nstartup the turtlebot test scene as detailed above.\nopen a novnc connection by:\nin a browser open http://localhost:8083/vnc.html\npress the \"connect\" button.\nin the vnc window press the left mouse button and select \"terminal\".\nin the new terminal run rviz -d ./src/zero_sim_ros/rviz/turtlebot_viewer.rviz. rviz will start up with a 3d view with the lidar scanner visibile.\nrunning universal robot ur10 arm test scene with moveit!\nnote: order of operations is important. especially starting the docker before the unity simulation.\nmake sure that the zerosim samples are installed as outlined above.\nmake sure that the zerosim docker container above is installed.\nopen the universalrobot_ur10_test.scene\nlaunch the zerosim docker via:\ndocker run -it --rm \\\n--publish=9090:9090 \\\n--publish=11311:11311 \\\n--publish=8083:8083 \\\n--publish=80:80 \\\n--publish=5678:5678 \\\n--name my_zerosim_vnc_docker \\\nzerodog/zerosim_ros_vnc:latest \\\nroslaunch zero_sim_ros ur10_moveit.launch\nstart the ur10 test scene by pressing the play button.\nopen a novnc connection by:\nin a browser open http://localhost:8083/vnc.html\npress the \"connect\" button.\nin the novnc window rviz will be setup with moveit\nyou can now to standard moveit! operations in rviz to control the ur10 arm\nrunning image segmentation test\nmake sure that the zerosim samples are installed as outlined above.\nmake sure that the zerosim docker container above is installed.\nopen the imagesegmentation_test.scene\nlaunch the zerosim docker via:\ndocker run -it --rm \\\n--publish=9090:9090 \\\n--publish=11311:11311 \\\n--publish=8083:8083 \\\n--publish=80:80 \\\n--publish=5678:5678 \\\n--name my_zerosim_vnc_docker \\\nzerodog/zerosim_ros_vnc:latest \\\nroslaunch zero_sim_ros basic_unity_editor.launch\nstart the image segmentation test scene by pressing the play button.\nopen a novnc connection by:\nin a browser open http://localhost:8083/vnc.html\npress the \"connect\" button.\nin the vnc window press the left mouse button and select \"terminal\".\nin the new terminal run rqt_image_view /image/segmentation_image.\nopen up a second terminal and run rqt_image_view /image/image_raw\nexport urdf\nmake sure that the zerosim samples are installed as outlined above.\nopen scene the urdf_test.scene in the zerosim samples.\nselect simplerobotarm in the scene hierarchy.\nselect export urdf in the root properties view.\nselect the directory to export to.\nan excellent online urdf viewer is available: https://gkjohnson.github.io/urdf-loaders/javascript/example/index.html just drag and drop the files exported above.\nimport urdf\nright click and select zerosim --> import urdf...", "sortedWord": "None", "removed": "Nan", "score": null, "comments": null, "media": "Nan", "medialink": "Nan", "identifyer": 7000485, "year": null}], "name": "farmrobotics"}